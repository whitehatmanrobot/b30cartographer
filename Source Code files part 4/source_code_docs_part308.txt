AKEDIR_RELATIVE_TO_BASEDIR=private\common\ingestionutils\title'
101>BUILDMSG: Processing j:\xonline_main\private\common\ingestionutils\title
100>Compiling j:\xonline_main\private\common\ingestionutils\dll *************
100>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\ingestionutils\dll'
100>BUILDMSG: Processing j:\xonline_main\private\common\ingestionutils\dll
101>j:\xonline_main\private\common\ingestionutils\title: TARGETPATH is J:\XONLINE_MAIN\target\debug
102>SOURCE_ASMMETA (_xlastutil_2.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\xlastutil\objd\i386\_xlastutil_2.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\xlastutil\objd\i386\_xlastutil_2.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_xlastutil_2.) 
101>j:\xonline_main\private\common\ingestionutils\title: TARGETPATH is J:\XONLINE_MAIN\target\debug
102>'j:\xonline_main\private\common\ingestionutils\xlastutil\objd\i386\_asmid.inc' is up-to-date
100>j:\xonline_main\private\common\ingestionutils\dll: TARGETPATH is obj
102>LCG: BUILD_LCE_FILE: 0
100>j:\xonline_main\private\common\ingestionutils\dll: TARGETPATH is obj
101>LCG: BUILD_LCE_FILE: 0
100>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\ingestionutils\dll\objd\i386 XblIngestionUtils J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>SOURCE_ASMMETA (_xlastutil_2.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\xlastutil\objd\i386\_xlastutil_2.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\xlastutil\objd\i386\_xlastutil_2.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_xlastutil_2.) 
100>genbasemac: module XblIngestionUtils not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
100>ALLOW_DLL_REFERENCES=1
100>CS_INCLUDES_FIXED=..\content\*.cs 	 ..\livetitleconfig\*.cs 	 ..\xlastutil\*.cs 	 ..\title\*.cs 		 j:\xonline_main\private\common\tools\tools\ctitleid.cs
100>_MANAGED_SOURCES= Installer.cs
100>_MANAGED_SOURCES= Installer.cs ..\content\*.cs 	 ..\livetitleconfig\*.cs 	 ..\xlastutil\*.cs 	 ..\title\*.cs 		 j:\xonline_main\private\common\tools\tools\ctitleid.cs
101>SOURCE_ASMMETA (_title_2.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\title\objd\i386\_title_2.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\title\objd\i386\_title_2.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_title_2.) 
100>LCG: BUILD_LCE_FILE: 0
101>'j:\xonline_main\private\common\ingestionutils\title\objd\i386\_asmid.inc' is up-to-date
101>LCG: BUILD_LCE_FILE: 0
100>SOURCE_ASMMETA (XblIngestionUtils.asmmeta) 
100>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.asmmeta) 
100>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.asmmeta_ver_pass2) 
100>ASMMETA_INPUT (objd\i386\XblIngestionUtils.dll) 
100>'j:\xonline_main\private\common\ingestionutils\dll\objd\i386\_asmid.inc' is up-to-date
101>SOURCE_ASMMETA (_title_2.asmmeta) 
100>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\ingestionutils\dll\objd\i386 XblIngestionUtils J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\title\objd\i386\_title_2.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\title\objd\i386\_title_2.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_title_2.) 
100>genbasemac: module XblIngestionUtils not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
100>ALLOW_DLL_REFERENCES=1
100>CS_INCLUDES_FIXED=..\content\*.cs 	 ..\livetitleconfig\*.cs 	 ..\xlastutil\*.cs 	 ..\title\*.cs 		 j:\xonline_main\private\common\tools\tools\ctitleid.cs
100>_MANAGED_SOURCES= Installer.cs
100>_MANAGED_SOURCES= Installer.cs ..\content\*.cs 	 ..\livetitleconfig\*.cs 	 ..\xlastutil\*.cs 	 ..\title\*.cs 		 j:\xonline_main\private\common\tools\tools\ctitleid.cs
100>LCG: BUILD_LCE_FILE: 0
100>SOURCE_ASMMETA (XblIngestionUtils.asmmeta) 
100>_O_ASMMETA (j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.asmmeta) 
100>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.asmmeta_ver_pass2) 
100>ASMMETA_INPUT (objd\i386\XblIngestionUtils.dll) 
100> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
100> set createfile=objd\i386\_generated.cs.temp
100> asmIdToAttribs.cmd "xblingestionutils,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=8b1c842ce623c912" objd\i386\_generated.cs.temp csharp
100> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\XblIngestionUtils.dll   
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
100> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
100> /target:library 
100> /baseaddress:0x400000 
100> /debug:full 
100> /define:DEBUG 
100> /warnaserror+ 
100> /unsafe- 
100> /define:FIXED_ASSEMBLY_VERSION 
100> /define:CUSTOM_KEYFILE 
100> /define:TRACE 
100> /platform:anycpu 
100> /nowarn:1699 
100> /r:J:\XONLINE_MAIN\private\common\community\dll\objd\i386\XblCommunity.dll 
100> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
100> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
100> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
100> Installer.cs 
100> ..\content\*.cs 
100> ..\livetitleconfig\*.cs 
100> ..\xlastutil\*.cs 
100> ..\title\*.cs 
100> j:\xonline_main\private\common\tools\tools\ctitleid.cs 
100> objd\i386\_generated.cs
100>Build_Status Postbuild Preplace - objd\i386\XblIngestionUtils.dll.
100> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\XblIngestionUtils.dll --no-postbuild-cover-targets=,J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll, /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\XblIngestionUtils.dll
100>Build_Status Binplace - 1 file(s).
100> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\XblIngestionUtils.dll
100>binplace j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.dll
100>binplace j:\xonline_main\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.dll
100>Build_Status Postbuild Postplace - objd\i386\XblIngestionUtils.dll.
100> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\XblIngestionUtils.dll --no-postbuild-cover-targets=,J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll, /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\XblIngestionUtils.dll
100> if not exist objd\i386\XblIngestionUtils.dll.mui (  if not exist objd\i386\XblIngestionUtils.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF XblIngestionUtils.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live XblIngestionUtils.dll  )  )
100>Build_Status LN_MUI_STS: LGNSTS_MUIOFF XblIngestionUtils.dll 
100>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live XblIngestionUtils.dll 
100>j:\xonline_main\private\common\ingestionutils\dll BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
100>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
100> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover-targets=,J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll, /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
100>Build_Status Binplace - 1 file(s).
100> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
100>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
100> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover-targets=,J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll, /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
100>Compiling j:\xonline_main\private\common\test\bootstrap *************
100>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap'
100>BUILDMSG: Processing j:\xonline_main\private\common\test\bootstrap
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildCompiled /p:Pass=Compile
100>Build started 10/27/2012 7:30:39 PM.
100> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" on node 0 (BuildCompiled target(s)).
100> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) on node 0 (BuildCompiled target(s)).
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\bdk\emulators.bdk.csproj" (4) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\controller\emulators.controller.csproj" (5) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\emulators.ppsaProfile.csproj" (6) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\abch\emulators.abch.csproj" (7) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) on node 0 (BuildCompiled target(s)).
100> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\STFCore.csproj" (8) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\common\fingerprint\Fingerprint.csproj" (9) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\Catalog\CatalogTestLib.csproj" (10) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\dmp\emulators.dmp.csproj" (12) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\musicnet\emulators.musicnet.csproj" (13) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\emulators.ppsaCredential.csproj" (14) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ups\emulators.ups.csproj" (15) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\framework\emulators.framework.csproj" (11) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) on node 1 (BuildCompiled target(s)).
100> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\Emulators.MSNRR.Aggregator.csproj" (17) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 10>CoreCompile:
100> Skipping target "CoreCompile" because all output files are up-to-date with respect to the input files.
100> 11>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\Emulators.Framework.dll /target:library /warnaserror+ CallHolder.cs CollectionEqualConstraint.cs EmulateAttribute.cs EmulationProxy.cs EmulatorFacadeBase.cs EqualConstraint.cs ExpectationException.cs Helpers.cs IConstraint.cs IgnoreConstraint.cs IMethodCallOptions.cs Is.cs LastCall.cs MethodCall.cs Recorder.cs Recording.cs RecordingProxy.cs Xml.cs XmlHasNodesConstraint.cs J:\XONLINE_MAIN\private\server\emulators\framework\wsdl\Controller.wsdl.cs objd\i386\_generated.cs
100> 9>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Fingerprint.dll /target:library /warnaserror+ ExceptionEvidence.cs Fingerprint.cs FingerprintException.cs IEvidence.cs MultipartEvidence.cs PropertyBag.cs RegisteredIEvidence.cs objd\i386\_generated.cs
100> 10>CopyFilesToOutputDirectory:
100> CatalogTestLib -> j:\xonline_main\target\debug\i386\CatalogTestLib\CatalogTestLib.dll
100> 11>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Framework.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll".
100> copy /y "objd\i386\Emulators.Framework.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll"
100> emulators.framework -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll
100> 9>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Fingerprint.dll" to "j:\xonline_main\target\debug\i386\Fingerprint\Fingerprint.dll".
100> copy /y "objd\i386\Fingerprint.dll" "j:\xonline_main\target\debug\i386\Fingerprint\Fingerprint.dll"
100> Fingerprint -> j:\xonline_main\target\debug\i386\Fingerprint\Fingerprint.dll
100> 11>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Framework.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.pdb".
100> copy /y "objd\i386\Emulators.Framework.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.pdb"
100> 9>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Fingerprint.pdb" to "j:\xonline_main\target\debug\i386\Fingerprint\Fingerprint.pdb".
100> copy /y "objd\i386\Fingerprint.pdb" "j:\xonline_main\target\debug\i386\Fingerprint\Fingerprint.pdb"
100> 10>Done Building Project "J:\XONLINE_MAIN\private\test\Catalog\CatalogTestLib.csproj" (BuildCompiled target(s)).
100> 11>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\framework\emulators.framework.csproj" (BuildCompiled target(s)).
100> 9>BinplaceCompiled:
100> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Fingerprint.dll
100> binplace J:\XONLINE_MAIN\private\test\common\fingerprint\objd\i386\Fingerprint.dll
100> 9>Done Building Project "J:\XONLINE_MAIN\private\test\common\fingerprint\Fingerprint.csproj" (BuildCompiled target(s)).
100> 8>CoreResGen:
100> "C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\Resgen.exe" /useSourcePath /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /compile Runner\StressSchedulerPriControl.resx,objd\i386\ServerTestFramework.Runner.StressSchedulerPriControl.resources Runner\StressSchedulerTPSControl.resx,objd\i386\ServerTestFramework.Runner.StressSchedulerTPSControl.resources
100> Processing resource file "Runner\StressSchedulerPriControl.resx" into "objd\i386\ServerTestFramework.Runner.StressSchedulerPriControl.resources".
100> Processing resource file "Runner\StressSchedulerTPSControl.resx" into "objd\i386\ServerTestFramework.Runner.StressSchedulerTPSControl.resources".
100> 13>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.Musicnet.dll /target:library /warnaserror+ IMusicNet.cs MusicNetConfigSI.cs MusicNetConfigTypes.cs MusicNetEmulator.cs MusicNetServerStub.cs MusicNetSI.cs MusicNetTypes.cs objd\i386\_generated.cs
100> 15>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.ups.dll /target:library /warnaserror+ upsEmulator.cs upsServerStub.cs upsWSDL.cs objd\i386\_generated.cs
100> 14>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.ppsaCredential.dll /target:library /warnaserror+ ppsaCredentialEmulator.cs ppsaCredentialServerStub.cs ppsaCredentialWSDL.cs objd\i386\_generated.cs
100> 12>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.Dmp.dll /target:library /warnaserror+ DMPEmulator.cs DMPServerStub.cs DMPTransactionSI.cs DMPTransactionTypes.cs objd\i386\_generated.cs
100> 15>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ups.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ups.dll".
100> copy /y "objd\i386\Emulators.ups.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ups.dll"
100> 14>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ppsaCredential.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.dll".
100> copy /y "objd\i386\Emulators.ppsaCredential.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.dll"
100> 13>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Musicnet.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.dll".
100> copy /y "objd\i386\Emulators.Musicnet.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.dll"
100> 15>CopyFilesToOutputDirectory:
100> emulators.ups -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ups.dll
100> 14>CopyFilesToOutputDirectory:
100> emulators.ppsaCredential -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.dll
100> 13>CopyFilesToOutputDirectory:
100> emulators.musicnet -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.dll
100> 15>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ups.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ups.pdb".
100> copy /y "objd\i386\Emulators.ups.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ups.pdb"
100> 14>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ppsaCredential.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.pdb".
100> copy /y "objd\i386\Emulators.ppsaCredential.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.pdb"
100> 13>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Musicnet.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.pdb".
100> copy /y "objd\i386\Emulators.Musicnet.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.pdb"
100> 15>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ups\emulators.ups.csproj" (BuildCompiled target(s)).
100> 14>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\emulators.ppsaCredential.csproj" (BuildCompiled target(s)).
100> 13>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\musicnet\emulators.musicnet.csproj" (BuildCompiled target(s)).
100> 12>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Dmp.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.dll".
100> copy /y "objd\i386\Emulators.Dmp.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.dll"
100> emulators.dmp -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.dll
100> Copying file from "objd\i386\Emulators.Dmp.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.pdb".
100> copy /y "objd\i386\Emulators.Dmp.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.pdb"
100> 8>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1591,1570,1572,1573,1587,660,661,1699,1701,1702 /nostdlib+ /warn:4 /doc:objd\i386\\stfcorehelp.xml /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFCore.dll /resource:objd\i386\ServerTestFramework.Runner.StressSchedulerPriControl.resources /resource:objd\i386\ServerTestFramework.Runner.StressSchedulerTPSControl.resources /target:library /warnaserror+ AttrAliases.cs AttrExcepts.cs CoreGlobals.cs NodeTaggingData.cs Report.cs TestNode.cs ThreadBase.cs ThreadCaseTracker.cs Runner\FuncCommon.cs Runner\FuncScheduler.cs Runner\RunningAverage.cs Runner\StressJobList.cs Runner\StressSchedulerCommon.cs Runner\StressSchedulerDestroyer.cs Runner\StressSchedulerPri.cs Runner\StressSchedulerPriControl.cs Runner\StressSchedulerPriControl.Designer.cs Runner\StressSchedulerTPS.cs Runner\StressSchedulerTPSControl.cs Runner\StressSchedulerTPSControl.Designer.cs Runner\TestEventListener.cs Runner\TestResult.cs Runner\TestScheduler.cs Utilities\ArrayEx.cs Utilities\AssemblyUtilities.cs Utilities\AsyncUtils.cs Utilities\BaseApp.cs Utilities\ByteEncoding.cs Utilities\CommandLine.cs Utilities\ConsoleReportDestination.cs Utilities\ConsoleX.cs Utilities\Counters.cs Utilities\DataProvider.cs Utilities\DebugLogger.cs Utilities\DebugOutputReportDestination.cs Utilities\Events.cs Utilities\FeedbackInfo.cs Utilities\FileReportDestination.cs Utilities\Hexer.cs Utilities\HttpClient.cs Utilities\InfiniteLifetimeMarshalByRefObject.cs Utilities\IOCPSocket.cs Utilities\IpHelper.cs Utilities\ListEx.cs Utilities\LocalInterface.cs Utilities\MemoryReportDestination.cs Utilities\mmf.cs Utilities\MultiEnumerator.cs Utilities\ProcessWrapper.cs Utilities\PuidPool.cs Utilities\RandomEx.cs Utilities\ReflectionUtilities.cs Utilities\RemoteReportDestination.cs Utilities\RemoteTime.cs Utilities\SafeCounter.cs Utilities\SerializableDictionary.cs Utilities\SimpleJobMgr.cs Utilities\SimpleUdp.cs Utilities\StfXmlDoc.cs Utilities\StringUtils.cs Utilities\SubStatic.cs Utilities\TcpRelay.cs Utilities\TestCaseReports.cs Utilities\TextWriterReportBridge.cs Utilities\TimedQueue.cs Utilities\Timers.cs Utilities\ValueCheck.cs Utilities\VsTestResultTestEventListener.cs Utilities\XmlConfigFile.cs Utilities\XmlFileReportDestination.cs Utilities\XmlUtil.cs Plugins\PluginHandler.cs Plugins\Plugins.cs objd\i386\_generated.cs
100> CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFCore.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll".
100> copy /y "objd\i386\STFCore.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll"
100> STFCore -> j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll
100> Copying file from "objd\i386\STFCore.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFCore.pdb".
100> copy /y "objd\i386\STFCore.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFCore.pdb"
100> Copying file from "objd\i386\\stfcorehelp.xml" to "j:\xonline_main\private\test\StfTests\libd\i386\stfcorehelp.xml".
100> copy /y "objd\i386\\stfcorehelp.xml" "j:\xonline_main\private\test\StfTests\libd\i386\stfcorehelp.xml"
100> 6>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.ppsaProfile.dll /target:library /warnaserror+ ppsaProfileEmulator.cs ppsaProfileServerStub.cs PPSAProfileWSDL.cs objd\i386\_generated.cs
100> 7>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.abch.dll /target:library /warnaserror+ abchEmulator.cs abchServerStub.cs abchWSDL.cs objd\i386\_generated.cs
100> 12>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\dmp\emulators.dmp.csproj" (BuildCompiled target(s)).
100> 5>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.Controller.dll /target:library /warnaserror+ Controller.cs objd\i386\_generated.cs
100> 4>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.Bdk.dll /target:library /warnaserror+ BdkEmulator.cs BdkServerStub.cs BdkSI.cs objd\i386\_generated.cs
100> 17>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.MSNRR.Aggregator.dll /target:library /warnaserror+ AggregatorEmulator.cs AggregatorSI.cs AggregatorStub.cs objd\i386\_generated.cs
100> 6>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ppsaProfile.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.dll".
100> copy /y "objd\i386\Emulators.ppsaProfile.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.dll"
100> 7>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.abch.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.abch.dll".
100> copy /y "objd\i386\Emulators.abch.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.abch.dll"
100> 6>CopyFilesToOutputDirectory:
100> emulators.ppsaProfile -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.dll
100> 7>CopyFilesToOutputDirectory:
100> emulators.abch -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.abch.dll
100> 8>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\STFCore.csproj" (BuildCompiled target(s)).
100> 6>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.ppsaProfile.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.pdb".
100> copy /y "objd\i386\Emulators.ppsaProfile.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.pdb"
100> 7>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.abch.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.abch.pdb".
100> copy /y "objd\i386\Emulators.abch.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.abch.pdb"
100> 4>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Bdk.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.dll".
100> copy /y "objd\i386\Emulators.Bdk.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.dll"
100> 5>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Controller.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Controller.dll".
100> copy /y "objd\i386\Emulators.Controller.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Controller.dll"
100> 17>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.Aggregator.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.dll".
100> copy /y "objd\i386\Emulators.MSNRR.Aggregator.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.dll"
100> 4>CopyFilesToOutputDirectory:
100> emulators.bdk -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.dll
100> 5>CopyFilesToOutputDirectory:
100> emulators.controller -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Controller.dll
100> 17>CopyFilesToOutputDirectory:
100> Emulators.MSNRR.Aggregator -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.dll
100> 4>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Bdk.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.pdb".
100> copy /y "objd\i386\Emulators.Bdk.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.pdb"
100> 5>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Controller.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Controller.pdb".
100> copy /y "objd\i386\Emulators.Controller.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Controller.pdb"
100> 17>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.Aggregator.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.pdb".
100> copy /y "objd\i386\Emulators.MSNRR.Aggregator.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.pdb"
100> 6>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\emulators.ppsaProfile.csproj" (BuildCompiled target(s)).
100> 7>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\abch\emulators.abch.csproj" (BuildCompiled target(s)).
100> 4>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\bdk\emulators.bdk.csproj" (BuildCompiled target(s)).
100> 5>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\controller\emulators.controller.csproj" (BuildCompiled target(s)).
100> 17>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\Emulators.MSNRR.Aggregator.csproj" (BuildCompiled target(s)).
100> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\STFLiveConfig.csproj" (18) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveTools\STFLiveTools.csproj" (20) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj" (19) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\Emulators.MSNRR.MultiRating.csproj" (21) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\Emulators.MSNRR.NickNameListener.csproj" (22) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\Emulators.MSNRR.SingleRating.csproj" (23) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 22>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.MSNRR.NickNameListener.dll /target:library /warnaserror+ NickNameListenerEmulator.cs NickNameListenerSI.cs NickNameListenerStub.cs objd\i386\_generated.cs
100> 21>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.MSNRR.MultiRating.dll /target:library /warnaserror+ MultiRatingEmulator.cs MultiRatingSI.cs MultiRatingStub.cs objd\i386\_generated.cs
100> 23>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.MSNRR.SingleRating.dll /target:library /warnaserror+ SingleRatingEmulator.cs SingleRatingSI.cs SingleRatingStub.cs objd\i386\_generated.cs
100> 22>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.NickNameListener.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.dll".
100> copy /y "objd\i386\Emulators.MSNRR.NickNameListener.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.dll"
100> 21>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.MultiRating.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.dll".
100> copy /y "objd\i386\Emulators.MSNRR.MultiRating.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.dll"
100> 22>CopyFilesToOutputDirectory:
100> Emulators.MSNRR.NickNameListener -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.dll
100> 21>CopyFilesToOutputDirectory:
100> Emulators.MSNRR.MultiRating -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.dll
100> 23>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.SingleRating.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.dll".
100> copy /y "objd\i386\Emulators.MSNRR.SingleRating.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.dll"
100> Emulators.MSNRR.SingleRating -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.dll
100> 22>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.NickNameListener.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.pdb".
100> copy /y "objd\i386\Emulators.MSNRR.NickNameListener.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.pdb"
100> 21>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.MultiRating.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.pdb".
100> copy /y "objd\i386\Emulators.MSNRR.MultiRating.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.pdb"
100> 23>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.MSNRR.SingleRating.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.pdb".
100> copy /y "objd\i386\Emulators.MSNRR.SingleRating.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.pdb"
100> 22>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\Emulators.MSNRR.NickNameListener.csproj" (BuildCompiled target(s)).
100> 21>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\Emulators.MSNRR.MultiRating.csproj" (BuildCompiled target(s)).
100> 23>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\Emulators.MSNRR.SingleRating.csproj" (BuildCompiled target(s)).
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\finbus\emulators.finbus.csproj" (24) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\emulators.CTPTransactionService.csproj" (25) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\client\emulators.client.csproj" (26) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 16>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (BuildCompiled target(s)).
100> 18>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1591,1570,1572,1573,1587,660,661,1699,1701,1702 /nostdlib+ /warn:4 /doc:objd\i386\\STFLiveConfighelp.xml /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.ConnectionInfo.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.Smo.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.SqlEnum.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx35sp1\System.Data.Services.Client.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.IdentityModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.ServiceModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Transactions.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFLiveConfig.dll /target:library /warnaserror+ AppLogReader.cs AttrAliasesLive.cs AttrExceptsLive.cs CountryLanguage.cs FrameworkGlobals.cs IDeepCloneable.cs ManagementConsole.cs NodeTaggingLive.cs TestNodeLive.cs TestNodeLiveBackCompat.cs XConfig.cs XmgmtC.cs XOn.cs Utilities\DeterministicRandom.cs Utilities\FakeLogVault.cs Utilities\ValueCheck.cs Database\BulkUserSet.cs Database\DatabaseException.cs Database\Npdb.cs objd\i386\_generated.cs
100> 26>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.dll /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Musicnet.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.Client.dll /target:library /warnaserror+ DMPTransaction.cs EcommerceB2BService.cs MSNRR.MultiRating.cs MSNRR.NickNameListener.cs MSNRR.SingleRating.cs TestClient.cs objd\i386\_generated.cs
100> 25>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.Runtime.Serialization.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.ServiceModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.TransactionService.dll /target:library /warnaserror+ TransactionServerStub.cs TransactionServiceEmulator.cs TransactionServiceSI.cs objd\i386\_generated.cs
100> 24>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.Runtime.Serialization.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.ServiceModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\Emulators.FinBus.dll /target:library /warnaserror+ FinBusEmulator.cs FinBusServerStub.cs FinBusSI.cs objd\i386\_generated.cs
100> 18>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFLiveConfig.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll".
100> copy /y "objd\i386\STFLiveConfig.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll"
100> STFLiveConfig -> j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll
100> 26>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Client.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Client.dll".
100> copy /y "objd\i386\Emulators.Client.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Client.dll"
100> emulators.client -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Client.dll
100> 18>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFLiveConfig.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.pdb".
100> copy /y "objd\i386\STFLiveConfig.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.pdb"
100> Copying file from "objd\i386\\STFLiveConfighelp.xml" to "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfighelp.xml".
100> copy /y "objd\i386\\STFLiveConfighelp.xml" "j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfighelp.xml"
100> 18>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\STFLiveConfig.csproj" (BuildCompiled target(s)).
100> 25>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.TransactionService.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.dll".
100> copy /y "objd\i386\Emulators.TransactionService.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.dll"
100> 24>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.FinBus.dll" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.dll".
100> copy /y "objd\i386\Emulators.FinBus.dll" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.dll"
100> 25>CopyFilesToOutputDirectory:
100> emulators.CTPTransactionService -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.dll
100> 24>CopyFilesToOutputDirectory:
100> emulators.finbus -> j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.dll
100> 26>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.Client.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Client.pdb".
100> copy /y "objd\i386\Emulators.Client.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.Client.pdb"
100> 25>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.TransactionService.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.pdb".
100> copy /y "objd\i386\Emulators.TransactionService.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.pdb"
100> 24>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\Emulators.FinBus.pdb" to "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.pdb".
100> copy /y "objd\i386\Emulators.FinBus.pdb" "j:\xonline_main\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.pdb"
100> 26>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\client\emulators.client.csproj" (BuildCompiled target(s)).
100> 25>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\emulators.CTPTransactionService.csproj" (BuildCompiled target(s)).
100> 24>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\finbus\emulators.finbus.csproj" (BuildCompiled target(s)).
100> 2>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (BuildCompiled target(s)).
100> 19>ResolveAssemblyReferences:
100> Primary reference "Microsoft.XboxLive.Auth".
100>Warning : [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
100>warnings in directory j:\xonline_main\private\common\test\bootstrap
100>j:\xonline_main\private\common\test\bootstrap\warning : warning [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
100> from J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj
100> from j:\xonline_main\private\common\test\bootstrap\dirs.proj
100> 19>J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Microsoft.Common.targets : warning MSB3245: Could not resolve this reference. Could not locate the assembly "Microsoft.XboxLive.Auth". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.
100>j:\xonline_main\private\common\test\bootstrap\19>j:\xonline_main\public\ext\tools\x86\managed\urt\v3.5\microsoft.common.targets : warning MSB3245: Could not resolve this reference. Could not locate the assembly "Microsoft.XboxLive.Auth". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.
100> For SearchPath "{HintPathFromItem}".
100> Considered "j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.dll", but it didn't exist.
100> For SearchPath "{TargetFrameworkDirectory}".
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\Microsoft.XboxLive.Auth.exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\Microsoft.XboxLive.Auth.dll", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\Microsoft.XboxLive.Auth.metadata_exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\Microsoft.XboxLive.Auth.metadata_dll", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\Microsoft.XboxLive.Auth.exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\Microsoft.XboxLive.Auth.dll", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\Microsoft.XboxLive.Auth.metadata_exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\Microsoft.XboxLive.Auth.metadata_dll", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Microsoft.XboxLive.Auth.exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Microsoft.XboxLive.Auth.dll", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Microsoft.XboxLive.Auth.metadata_exe", but it didn't exist.
100> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Microsoft.XboxLive.Auth.metadata_dll", but it didn't exist.
100> For SearchPath "j:\xonline_main\private\test\StfTests\libd\i386\".
100> Considered "j:\xonline_main\private\test\StfTests\libd\i386\Microsoft.XboxLive.Auth.exe", but it didn't exist.
100> Considered "j:\xonline_main\private\test\StfTests\libd\i386\Microsoft.XboxLive.Auth.dll", but it didn't exist.
100> Considered "j:\xonline_main\private\test\StfTests\libd\i386\Microsoft.XboxLive.Auth.metadata_exe", but it didn't exist.
100> Considered "j:\xonline_main\private\test\StfTests\libd\i386\Microsoft.XboxLive.Auth.metadata_dll", but it didn't exist.
100> For SearchPath "{RawFileName}".
100> Considered treating "Microsoft.XboxLive.Auth" as a file name, but it didn't exist.
100> CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1591,1570,1572,1573,1587,660,661,1699,1701,1702 /nostdlib+ /warn:4 /doc:objd\i386\\stflivehelp.xml /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\BouncyCastle\BouncyCastle.Crypto.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\velocity\1.0.0.0\client\CacheBaseLibrary.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\velocity\1.0.0.0\client\ClientLibrary.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\CTFCore.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\CTFInstallationManager.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerAnalyzers.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerManipulations.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerStrategy.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\PassportIDCRL\4.0\Debug\ManagedWrapperReference\Binaries_and_Documentation\ManagedIDCRL.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.AnalysisServices.AdomdClient.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.AnalysisServices.DLL /reference:J:\XONLINE_MAIN\public\ext\WindowsIdentityFoundation\v3.5\Microsoft.IdentityModel.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Practices.ServiceLocation.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Practices.Unity.Configuration.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Practices.Unity.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.ConnectionInfo.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.Smo.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\Reporting\Microsoft.SqlServer.SqlEnum.dll /reference:J:\XONLINE_MAIN\public\ext\WindowsAzureSDK\v1.1\ref\Microsoft.WindowsAzure.Diagnostics.dll /reference:J:\XONLINE_MAIN\public\ext\WindowsAzureSDK\v1.1\ref\Microsoft.WindowsAzure.StorageClient.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Configuration.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Diagnostics.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Identity.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Privacy.Client.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Privacy.Interfaces.dll /reference:j:\xonline_main\public\ext\xonline-ext\Privacy\objd\Microsoft.Xbox.Unity.dll /reference:J:\XONLINE_MAIN\public\ext\FCL\Libraries\MITMServer.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\ServerTestFramework\STFLive\Auth\RPSTicketGen\RPSEmulator.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx35sp1\System.Data.Services.Client.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.IdentityModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.ServiceModel.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Transactions.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\community\dll\objd\i386\XblCommunity.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\marketplace\dll\objd\i386\XblMarketplace.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFLive.dll /resource:Auth\RPSTicketGen\RPSEmulator.dll,Auth.RPSTicketGen.RPSEmulator.dll /resource:Auth\RPSTicketGen\sts.pfx,Auth.RPSTicketGen.sts.pfx /resource:Auth\RPSTicketGen\int-rps.xbox.com.cer,Auth.RPSTicketGen.int-rps.xbox.com.cer /resource:Auth\RPSTicketGen\int-rps.xboxlive.com.cer,Auth.RPSTicketGen.int-rps.xboxlive.com.cer /resource:Auth\RPSTicketGen\RPSDEK.xboxlive.com.cer,Auth.RPSTicketGen.RPSDEK.xboxlive.com.cer /target:library /warnaserror+ AttrExceptsLive.cs AuditInfo.cs BlockUtil.cs BundledAuthData.cs ControlProtocol.cs FDTransaction.cs GameConfig.cs HTTPAuthData.cs HttpWebRequestHelper.cs ITcpClient.cs IUdpClient.cs LiveServer.cs STFLiveGlobals.cs WebRequest.cs WireData.cs XblUser.cs XRL.cs Arbitration\ArbitrationSession.cs Arbitration\HandlerOptions.cs Arbitration\XArbListener.cs Arbitration\XRLDebugResult.cs Arbitration\XRLHealthARB.cs Arbitration\XRLRegister.cs Arbitration\XRLReportResult.cs Arbitration\XRLTimeExtend.cs Signature\XRLAcknowledgeLicenses.cs Signature\XRLAcquireMediaLicenses.cs Signature\XRLCheckRevocation.cs Signature\XRLCreateCertificate.cs Signature\XRLCreateCertificate2.cs Signature\XRLCreatePlayReadyCertificate.cs Signature\XRLGetAAInfo.cs Signature\XRLGetSignedHeader.cs Signature\XRLGetSigningKey.cs Signature\XRLLicenseTransfer.cs Signature\XRLMSTVCreateCertificateRequest.cs Signature\XRLRefreshGameLicense.cs Signature\XRLSignOnBelhalf.cs Signature\XRLValidateCertificate.cs Signature\XRLVerifySignature.cs Signature\XSignature.cs Signature\XSigWeb.cs Signature\XSigWebClient.cs Utilities\BehaviorInjection.cs Utilities\CertificateCheck.cs Utilities\Certificates.cs Utilities\CreditCardGenerator.cs Utilities\drm.cs Utilities\IDCRLUtilities.cs Utilities\PassportFuzzer.cs Utilities\PassportUtilities.cs Utilities\RandomEx.cs Utilities\UserSetup.cs Utilities\WireDataFuzzer.cs Utilities\XHttpListener.cs Utilities\XHttpListenerIOCP.cs Utilities\DBPoster\dbposter.cs Utilities\DBPoster\DbpScriptEngine.cs Utilities\DBPoster\DBTable.cs Utilities\DBPoster\Ppa.cs Utilities\FclFuzzer\FclAnalyzer.cs Utilities\FclFuzzer\FclFuzzer.cs Utilities\FclFuzzer\FclManipulation.cs Database\BulkUserSet.cs Database\Catalog.cs Database\CatalogDb.cs Database\Events.cs Database\Filter.cs Database\Hasher.cs Database\LiveRegistry.cs Database\NameList.cs Database\Npdb.cs Database\OLAP.cs Database\Ppa.cs Database\ProfileWS.cs Database\ProgressWS.cs Database\PuidList.cs Database\QueryDB.cs Database\Reporting.cs Database\ReportingArchive.cs Database\ReportingIIS.cs Database\ReportingSSIS.cs Database\ReportRealtimeDB.cs Database\SecMachineHistoryWS.cs Database\SecUserHistoryWS.cs Database\StatsWS.cs Database\StoredProcs.cs Database\TokendbWS.cs Database\UodbTable.cs Database\UodbWS.cs Database\UserCommercedbWS.cs Database\UtilityClasses.cs Database\webdb.cs Database\WebstoreDB.cs Database\XbosWS.cs Database\XMatch.cs Database\Editor\BetaGroupEditor.cs Database\Editor\ComponentEditor.cs Database\Editor\ConsoleBanEditor.cs Database\Editor\CountryEditor.cs Database\Editor\CultureEditor.cs Database\Editor\CurfewEditor.cs Database\Editor\EditorCommon.cs Database\Editor\InstanceEditor.cs Database\Editor\InterfaceEditor.cs Database\Editor\MachineEditor.cs Database\Editor\MachineGamertagHistoryEditor.cs Database\Editor\MachinePassportHistoryEditor.cs Database\Editor\MachineRecoveryHistoryEditor.cs Database\Editor\OfferEditor.cs Database\Editor\PrivilegeEditor.cs Database\Editor\ReleaseEditor.cs Database\Editor\ServerEditor.cs Database\Editor\ServiceEditor.cs Database\Editor\ServicePrivilegeEditor.cs Database\Editor\ServiceTypeMappingEditor.cs Database\Editor\SiteEditor.cs Database\Editor\SubscriptionFamilyEditor.cs Database\Editor\TitleEditor.cs Database\Editor\UserEditor.cs Database\Editor\UserGamertagHistoryEditor.cs Database\Editor\UserMachineHistoryEditor.cs Database\Editor\UserPassportHistoryEditor.cs Database\Editor\UserRecoveryHistoryEditor.cs Database\Editor\VirtualInterfaceEditor.cs Database\Editor\VoucherEditor.cs Achievement\AchievementBase.cs Achievement\AvatarAssetBase.cs Achievement\XRLClearAchievement.cs.cs Achievement\XRLEnumAchievement.cs Achievement\XRLEnumAvatarAsset.cs Achievement\XRLSyncAchievements.cs Achievement\XRLSyncAvatarAsset.cs Achievement\XRLUploadConsoleListRequest.cs UserSettings\AvatarAssetNames.cs UserSettings\DBHelper.cs UserSettings\Pcontrol.cs UserSettings\XRLClearTitle.cs UserSettings\XRlEnumContext.cs UserSettings\XRLEnumTitle.cs UserSettings\XRLReadSettings.cs UserSettings\XRLSyncAll.cs UserSettings\XRLSyncSettings.cs UserSettings\XRLSyncTitle.cs Alerts\AlertsListener.cs Alerts\AlertsSQL.cs Alerts\XEvents.cs Auth\ActiveAuthHttpClient.cs Auth\AskdcClient.cs Auth\AuthClientBase.cs Auth\AuthUtils.cs Auth\ChallengeManager.cs Auth\kerbErr.cs Auth\kerbStore.cs Auth\kerbStructs.cs Auth\LspClient.cs Auth\NetworkPackets.cs Auth\QOS.cs Auth\RawNic.cs Auth\ServiceKeys.cs Auth\SGClient.cs Auth\SGConnection.cs Auth\SGConnectionPool.cs Auth\SGFakeService.cs Auth\sgPackets.cs Auth\SgServerInfo.cs Auth\SiteInfo.cs Auth\TcpForSG.cs Auth\XkdcClient.cs Auth\XmacsClient.cs Auth\XspProtocol.cs Auth\XspUdp.cs Auth\KDC\AskdcGeneric.cs Auth\KDC\AskdcPC.cs Auth\KDC\AskdcXbox1.cs Auth\KDC\AskdcXbox360.cs Auth\KDC\Asn.cs Auth\KDC\AsnKerberos.cs Auth\KDC\AuthData.cs Auth\KDC\Fuzzing.cs Auth\KDC\KdcClient.cs Auth\KDC\KdcCrypto.cs Auth\KDC\KerberosError.cs Auth\KDC\KerberosPreauths.cs Auth\KDC\KerberosReply.cs Auth\KDC\KerberosRequest.cs Auth\KDC\RequestInterfaces.cs Auth\KDC\SimpleKdcClient.cs Auth\KDC\UserUtils.cs Auth\KDC\XkdcGeneric.cs Auth\KDC\XkdcPC.cs Auth\KDC\XkdcXbox1.cs Auth\KDC\XkdcXbox360.cs Auth\KDC\XmacsGeneric.cs Auth\KDC\XmacsPC.cs Auth\KDC\XmacsXbox1.cs Auth\KDC\XmacsXbox360.cs Auth\RPSTicketGen\Loader.cs Auth\RPSTicketGen\TicketGen.cs Auth\RPSTicketGen\TicketParameters.cs Billing\BillingWebRequest.cs Billing\ContentOfferLoader.cs Billing\Filters.cs Billing\Offer.cs Billing\PostRequest.cs Billing\SharedBillingStructures.cs Billing\VideoCommon.cs Billing\XbosUser.cs Billing\XBox1\XRLAutoupdReferral.cs Billing\XBox1\XRLContentAvailable.cs Billing\XBox1\XRLContentReferral.cs Billing\XBox1\XRLGetGenres.cs Billing\XBox1\XRLGetProductAssets.cs Billing\XBox1\XRLGetProductFeatures.cs Billing\XBox1\XRLGetProductInfo.cs Billing\XBox1\XRLGetRatings.cs Billing\XBox1\XRLGetUpcomingProducts.cs Billing\XBox1\XRLOfferingCancel.cs Billing\XBox1\XRLOfferingDetails.cs Billing\XBox1\XRLOfferingDetailsNoUser.cs Billing\XBox1\XRLOfferingEnumerate.cs Billing\XBox1\XRLOfferingPurchase.cs Billing\XBox1\XRLVerifyNickname.cs Billing\Xenon\XRLFindMediaInstanceUrls.cs Billing\Xenon\XRLInGameContentAvailable.cs Billing\Xenon\XRLInGameContentEnumerate.cs Billing\Xenon\XRLPreviewProductPurchase.cs Billing\Xenon\XRLPurchaseMediaOffers.cs Billing\Xenon\XRLPurchaseOffers.cs Billing\Xenon\XRLTransferMachineLicense.cs Billing\Xenon\XRLXeAcknowledgeLicenseDelivery.cs Billing\Xenon\XRLXeAcquireVideoContentURL.cs Billing\Xenon\XRLXeAcquireVideoLicense.cs Billing\Xenon\XRLXeAssetConsume.cs Billing\Xenon\XRLXeAssetEnumerate.cs Billing\Xenon\XRLXeBannerGetList.cs Billing\Xenon\XRLXeContentAvailable.cs Billing\Xenon\XRLXeContentDetails.cs Billing\Xenon\XRLXeContentEnumerate2.cs Billing\Xenon\XRLXeContentHistoryEnumerate.cs Billing\Xenon\XRLXeContentReferral.cs Billing\Xenon\XRLXeContentRefreshLicense.cs Billing\Xenon\XRLXeContentUpdateAccessTimes.cs Billing\Xenon\XRLXeEnumerateGenres.cs Billing\Xenon\XRLXeEnumerateTitlesByFilter.cs Billing\Xenon\XRLXeGetPointsPurchaseStatus.cs Billing\Xenon\XRLXeGetRevocationList.cs Billing\Xenon\XRLXeGetTitleDetails.cs Billing\Xenon\XRLXeOfferingVerifyToken.cs Billing\Xenon\XRLXeOfferPurchase.cs Billing\Xenon\XRLXeOfferPurchaseGamertag.cs Billing\Xenon\XRLXeOfferPurchaseMusic.cs Billing\Xenon\XRLXeOfferPurchaseVideo.cs Billing\Xenon\XRLXeSubscriptionDetails.cs Billing\Xenon\XRLXeSubscriptionEnumerate.cs Billing\Xenon\XRLXeVerifyToken.cs Billing\DRM\XRLXeWmdrmCreateCertificate.cs Callback\Reference.cs Callback\SvcProviderWrapper.cs Catalog\CatalogFilters.cs Catalog\CatalogRequest.cs Catalog\QueryRequest.cs FakeSG\FakeSGBase.cs FakeSG\FakeSGClient.cs FakeSG\FakeSGRemote.cs FakeSG\Global.cs FakeSG\IFakeSGClient.cs FakeSG\QValPacket.cs FakeSG\SGInfo.cs FakeAAInfo\FakeAAInfo.cs Feedback\FeedbackSupport.cs Feedback\XrlFeedback.cs Feedback\xrlUserComplaint.cs Feedback\XrlUserReview.cs Vortex\MyWebTransaction.cs Vortex\Vortexbase.cs Vortex\VortexLS.cs Vortex\VortexUtil.cs Vortex\VortexWeb.cs Vortex\xrlvortexlogstring.cs xsts\RSTGenerator.cs xsts\xrlissuetoken.cs xsts\XSTSUtil.cs XConnSrv\Buffer.cs XConnSrv\ConnectionSrv.cs XConnSrv\PNConnection.cs XConnSrv\PNUsersBuilder.cs XConnSrv\ProtocolConnection.cs XConnSrv\SubscriptionBuilder.cs XConnSrv\XSubNotiProt.cs XConnSrv\FakeMC\FakeMemCache.cs XConnSrv\FakeMC\MCProtocol.cs XConnSrv\FakeMC\MCServerNetwork.cs Presence\AffiliateState.cs Presence\FriendsCommon.cs Presence\PMMsgFriendsLimitedPresence.cs Presence\PMsgAcceptBuddy.cs Presence\PMsgAddAffiliates.cs Presence\PMsgAddBuddy.cs Presence\PMsgAlive.cs Presence\PMsgAlive2.cs Presence\PMsgAliveInternal.cs Presence\PMsgBlockVoice.cs Presence\PMsgCancelInvite.cs Presence\PMsgCheckTitleMessages.cs Presence\PMsgDeleteBuddy.cs Presence\PMsgFindUser.cs Presence\PMsgGetFriendsList.cs Presence\PMsgGetPresenceInfo.cs Presence\PMsgInvalidateUser.cs Presence\PMsgInvite.cs Presence\PMsgInviteAnswer.cs Presence\PMsgIsAffiliate.cs Presence\PMsgKick.cs Presence\PMsgLogonCheck.cs Presence\PMsgNickname.cs Presence\PMsgPeerSession.cs Presence\PMsgPeerSubscribe.cs Presence\PMsgPeerSubscribeEx.cs Presence\PMsgPeerUnsubscribe.cs Presence\PMsgQueryAffiliates.cs Presence\PMsgRejectBuddy.cs Presence\PMsgState.cs Presence\PMsgUnblockVoice.cs Presence\PMsgWebFriends.cs Presence\WebFriendData.cs Notification\Message.cs Notification\MsgDetails.cs Notification\MsgProperty.cs Notification\MsgUtils.cs Notification\QMsgAdd.cs Notification\QMsgDeleteMsg.cs Notification\QMsgDeleteSystemMsg.cs Notification\QMsgDeleteTitle.cs Notification\QMsgDequeue.cs Notification\QMsgDetails.cs Notification\QMsgEnumMsgs.cs Notification\QMsgEnumMsgs2.cs Notification\QMsgEnumSystemMsgs.cs Notification\QMsgEnumTitles.cs Notification\QMsgFlags.cs Notification\QMsgRevokeExMsg.cs Notification\QMsgRevokeMsg.cs Notification\QMsgRevokeMsgByProp.cs Notification\QMsgSendMsg.cs Notification\QMsgSendSystemMsg.cs Notification\QMsgSummary.cs Notification\QMsgSummary2.cs Notification\QMsgSystemDetails.cs Notification\SystemMessage.cs Notification\SystemMsgFolder.cs Notification\SystemMsgSummary.cs Notification\UserMessage.cs Notification\UserMsgFolder.cs Notification\UserMsgSummary.cs Notification\usermsgsummary2.cs PresNotiCommon\ClientInfo.cs PresNotiCommon\PNConditionalWaitState.cs PresNotiCommon\PNMsg.cs PresNotiCommon\PNMsgDeadSG.cs PresNotiCommon\PNMsgDeadUser.cs PresNotiCommon\PNMsgDeadXbox.cs PresNotiCommon\PNMsgHello.cs PresNotiCommon\PNQValConditionalWaitState.cs PresNotiCommon\PNUser.cs PresNotiCommon\PNXbox.cs PresNotiCommon\XonPresNoti.cs QueryAndLsp\XRLLspAdvertise.cs QueryAndLsp\XRLLspEnumerate.cs QueryAndLsp\XRLLSPProxyAdvertise.cs QueryAndLsp\XRLLSPProxyGetSiteInfo.cs Ratings\XRLUserRatings.cs Stats\DBHelper.cs Stats\PlatformVisibleLeaderboard.cs Stats\StatsFD.cs Stats\StatsPostReq.cs Stats\StatsRead.cs Stats\XeEnumRequest.cs Stats\XRLCommitAttachment.cs Stats\XRLComp.cs Stats\XRLEnumLBRequest.cs Stats\XRLEstimateRankForRatings.cs Stats\XRLGetRequest.cs Stats\XRLRemoveAtt.cs Stats\XRLResetUser.cs Stats\XRLSetRequest.cs Stats\XRLSubAttr.cs Stats\XRLUsageStore.cs Stats\XRLWebEnumLB.cs Stats\IMDB\IMDB.cs Stats\IMDB\PlayerTeam.cs STS\STSUtil.cs TestFD\XRLAddPaypalPaymentInstrument.cs TestFD\XRLCreateXboxComAccount.cs TestFD\XRLFriendCommands.cs TestFD\XRLGrantAchievements.cs TestFD\XRLPingTestFD.cs TestFD\XRLProfileCommands.cs TestFD\XRLReflect.cs TestFDXsts\Attribute.cs TestFDXsts\Code.cs TestFDXsts\CommonBase.cs TestFDXsts\Mixed.cs TestFDXsts\MixedOverride.cs TestFDXsts\SimpleBase.cs TestFDXsts\WebConfig.cs TestFDXsts\Soap\Attribute.cs TestFDXsts\Soap\Code.cs TestFDXsts\Soap\Common.cs TestFDXsts\Soap\Mixed.cs TestFDXsts\Soap\MixedOverride.cs TestFDXsts\Soap\Simple.cs TestFDXsts\Soap\WebConfig.cs TestFDXsts\Wcf\Attribute.cs TestFDXsts\Wcf\Attribute.wsdl.cs TestFDXsts\Wcf\Code.cs TestFDXsts\Wcf\Code.wsdl.cs TestFDXsts\Wcf\Common.cs TestFDXsts\Wcf\Mixed.cs TestFDXsts\Wcf\Mixed.wsdl.cs TestFDXsts\Wcf\MixedOverride.cs TestFDXsts\Wcf\MixedOverride.wsdl.cs TestFDXsts\Wcf\Simple.cs TestFDXsts\Wcf\Simple.wsdl.cs TestFDXsts\Wcf\WebConfig.cs TestFDXsts\Wcf\WebConfig.wsdl.cs LBServer\LBSClient.cs LBServer\LBSRequest.cs LBServer\Protocol.cs LiveInfo\XRLGetLiveConfig.cs LiveInfo\XRLGetNetworkAuthorizationList.cs Cron\XrlAddJob.cs Cron\XrlFindJobs.cs Cron\XrlGetJob.cs Cron\XrlRemoveJob.cs Cron\XrlTimeWarp.cs UserAccount\Passport.cs UserAccount\UacsCommon.cs UserAccount\UacsCommon2.cs UserAccount\UacsCommonAccountCreation.cs UserAccount\UacsCommonLocale.cs UserAccount\UacsProtocolClasses.cs UserAccount\Ups.cs UserAccount\UserPrivileges.cs UserAccount\UserQueue.cs UserAccount\UserTestBase.cs UserAccount\Xbox1\XRLAcceptTOU.cs UserAccount\Xbox1\XRLChangeGamerTag.cs UserAccount\Xbox1\XRLClearSubscriptions.cs UserAccount\Xbox1\XRLCreateOwner.cs UserAccount\Xbox1\XRLEnumerateEligible.cs UserAccount\Xbox1\XRLGetPaymentInfo.cs UserAccount\Xbox1\XRLGetPostalCode.cs UserAccount\Xbox1\XRLGetSubscriptionStatus.cs UserAccount\Xbox1\XRLLinkWebAccount.cs UserAccount\Xbox1\XRLRenewSubscription.cs UserAccount\Xbox1\XRLReserveName.cs UserAccount\Xbox1\XRLRestoreAccountRequest.cs UserAccount\Xbox1\XRLSetPaymentInfo.cs UserAccount\Xbox1\XRLSetUserAccountStatus.cs UserAccount\Xbox1\XRLSetUserPIN.cs UserAccount\Xbox1\XRLSetUserSettings.cs UserAccount\Xbox1\XRLSetUserSettings2.cs UserAccount\Xbox1\XRLTroubleshootAccount.cs UserAccount\Xbox1\XRLVerifyBillingPIN.cs UserAccount\Xbox1\XRLVerifyVoucher.cs UserAccount\Xbox1\XRLVerifyVoucherGetOffer.cs UserAccount\Xbox1\XRLWebGetUserSettings.cs UserAccount\Xenon\LightWgtXeUser.cs UserAccount\Xenon\offers.cs UserAccount\Xenon\XeLiveAccountUser.cs UserAccount\Xenon\XRLArgoAuthenticateAccount.cs UserAccount\Xenon\XRLCreateUserAndBillableAccount.cs UserAccount\Xenon\XRLDisableSubscription.cs UserAccount\Xenon\XRLGenerateGamertag.cs UserAccount\Xenon\XRLGetDependentSignedPuid.cs UserAccount\Xenon\XRLGetNoAgeOut.cs UserAccount\Xenon\XRLGetSubscriptionInfo.cs UserAccount\Xenon\XrlGetUserBillingNotification.cs UserAccount\Xenon\XRLGetUserTenure.cs UserAccount\Xenon\XRLMergeUserEntitlements.cs UserAccount\Xenon\XRLPassportAddProof.cs UserAccount\Xenon\XRLPassportCreateGenerated.cs UserAccount\Xenon\XRLPassportGetProofs.cs UserAccount\Xenon\XRLPassportGetProofTypes.cs UserAccount\Xenon\XRLPreviewSwitchUserCountry.cs UserAccount\Xenon\XRLSwitchOwnerPassport.cs UserAccount\Xenon\XRLSwitchUserCountry.cs UserAccount\Xenon\XRLSwitchUserDateOfBirth.cs UserAccount\Xenon\XRLXeABCHGetContactlistGamertags.cs UserAccount\Xenon\XRLXeAcceptTermsOfService.cs UserAccount\Xenon\XRLXeAccountQuery.cs UserAccount\Xenon\XRLXeAcknowledgeDowngrade.cs UserAccount\Xenon\XRLXeAddDependent.cs UserAccount\Xenon\XRLXeAddPaymentInstrument.cs UserAccount\Xenon\XRLXeAddPaymentInstrumentEx.cs UserAccount\Xenon\XRLXeChangeSubscriptionPaymentInstrument.cs UserAccount\Xenon\XRLXeCreateLiveAccount.cs UserAccount\Xenon\XRLXeCreateLiveAccountEx.cs UserAccount\Xenon\XRLXeCreateXboxComAccount.cs UserAccount\Xenon\XRLXeEnumFamilyMembers.cs UserAccount\Xenon\XRLXeFamilySubscriptionAssignGoldUser.cs UserAccount\Xenon\XRLXeFamilySubscriptionGoldUserCount.cs UserAccount\Xenon\XRLXeFamilySubscriptionRemoveGoldUser.cs UserAccount\Xenon\XRLXeGetAccountInfo.cs UserAccount\Xenon\XRLXeGetAccountInfoFromPassport.cs UserAccount\Xenon\XRLXeGetANID.cs UserAccount\Xenon\XRLXeGetKey.cs UserAccount\Xenon\XRLXeGetLinkedGamerTag.cs UserAccount\Xenon\XRLXeGetParentalControlGroupTemplates.cs UserAccount\Xenon\XRLXeGetParentalControls.cs UserAccount\Xenon\XRLXeGetPassportCredentialListByName.cs UserAccount\Xenon\XRLXeGetPaymentInstruments.cs UserAccount\Xenon\XRLXeGetPointsBalance.cs UserAccount\Xenon\XRLXeGetUserInfo.cs UserAccount\Xenon\XRLXeGetUserParentalControlGroup.cs UserAccount\Xenon\XRLXeGetUserSubscriptionDetails.cs UserAccount\Xenon\XRLXeGetUserType.cs UserAccount\Xenon\XRLXeGetUserWebInfo.cs UserAccount\Xenon\XRLXeGraduateUser.cs UserAccount\Xenon\XRLXeGraduateUserEx.cs UserAccount\Xenon\XRLXeLinkXbox1Account.cs UserAccount\Xenon\XRLXeMigrateXbox1User.cs UserAccount\Xenon\XRLXeMigrateXboxComUser.cs UserAccount\Xenon\XRLXePassportChangePassword.cs UserAccount\Xenon\XRLXePassportCreate.cs UserAccount\Xenon\XRLXePassportGetBuddyGamertag.cs UserAccount\Xenon\XRLXePassportGetEncryptedProxyParameters.cs UserAccount\Xenon\XRLXePassportGetFriendMemberName.cs UserAccount\Xenon\XRLXePassportGetMemberName.cs UserAccount\Xenon\XRLXePassportGetPuidFromMemberName.cs UserAccount\Xenon\XRLXePassportGetSecretQuestions.cs UserAccount\Xenon\XRLXePassportGetUserData.cs UserAccount\Xenon\XRLXePassportLogin.cs UserAccount\Xenon\XRLXePreviewMergeSubscription.cs UserAccount\Xenon\XRLXeRecoverAccount.cs UserAccount\Xenon\XRLXeRemoveDependent.cs UserAccount\Xenon\XRLXeRemovePaymentInstrument.cs UserAccount\Xenon\XRLXeReplaceOwnerPassport.cs UserAccount\Xenon\XRLXeReplaceUserPassport.cs UserAccount\Xenon\XRLXeReserveGamertag.cs UserAccount\Xenon\XRLXeSetAccountInfo.cs UserAccount\Xenon\XRLXeSwitchUserPassport.cs UserAccount\Xenon\XRLXeTroubleshootAccount.cs UserAccount\Xenon\XRLXeUpdateParentalControlGroup.cs UserAccount\Xenon\XRLXeUpdateParentalControls.cs UserAccount\Xenon\XRLXeUpdatePaymentInstrument.cs UserAccount\Xenon\XRLXeUpdatePaymentInstrumentEx.cs UserAccount\Xenon\XRLXeUpdateXboxComActivity.cs UserAccount\Xenon\XRLXeUpsGetProfile.cs UserAccount\Xenon\XRLXeUpsUpdateProfile.cs UserAccount\Xenon\XRLXeUserGetAccountInfo.cs UserAccount\Xenon\XRLXeUserGetAge.cs UserAccount\Xenon\XRLXeUserGetAgeGroup.cs UserAccount\Xenon\XRLXeVerifyBillingInfo.cs UserAccount\Xenon\XRLXeVerifyParentCreditCard.cs UserAccount\Xenon\XRLXeVerifyParentCreditCardEx.cs ZuneSignIn\UserAccountService.cs ZuneSignIn\UserAccountServiceWrapper.cs XBanc\XBanc.cs XCrypto\XRLXCryptoDecrypt.cs XCrypto\XRLXCryptoEncrypt.cs XCrypto\XRLXCryptoSign.cs XCrypto\XRLXCryptoVerifyConsolePak.cs XCrypto\XRLXCryptoVerifySignature.cs Storage\Constants.cs Storage\StorUtil.cs Storage\XRLAccessToken.cs Storage\XRLEnumFiles.cs Storage\XRLGetQuota.cs Storage\XRLNameResolver.cs Storage\XRLReadAchievements.cs Storage\XRLReadFile.cs Storage\XRLReadFileHash.cs Storage\XRLRemoveFile.cs Storage\XRLReportBrokenLink.cs Storage\XRLWriteFile.cs Storage\Azure\BlobClient.cs Storage\Azure\BlobTableClient.cs Storage\Azure\FileTableClient.cs Storage\Azure\FileTableLastUpdateClient.cs Storage\Azure\HttpParameterAttributes.cs Storage\Azure\QueueClient.cs Storage\Azure\StorageAccountTableClient.cs Storage\Azure\TableClient.cs Storage\Azure\XlfsAdminGetChangedBlobs.cs Storage\Azure\XlfsAdminGetChangedBlobsContinue.cs Storage\Azure\XlfsAdminGetStorageAccount.cs Storage\Azure\XlfsAdminPutStorageAccount.cs Storage\Azure\XLFSClient.cs Storage\Azure\XlfsConfiguration.cs Storage\Azure\XlfsTestIsWriteFileEntriesComplete.cs Storage\Azure\XlfsTestWriteFileEntries.cs Storage\Azure\XlfsUploadBegin.cs Storage\Azure\XlfsUploadEnd.cs Storage\Azure\XlfsWebRequest.cs j:\xonline_main\private\server\xlfs\common\FileTableContext.cs j:\xonline_main\private\server\xlfs\common\FileTableDataSource.cs j:\xonline_main\private\server\xlfs\common\FileTableEntry.cs j:\xonline_main\private\server\xlfs\common\FileTableLastUpdateContext.cs j:\xonline_main\private\server\xlfs\common\FileTableLastUpdateDataSource.cs j:\xonline_main\private\server\xlfs\common\FileTableLastUpdateEntry.cs j:\xonline_main\private\server\xlfs\common\BlobTableContext.cs j:\xonline_main\private\server\xlfs\common\BlobTableDataSource.cs j:\xonline_main\private\server\xlfs\common\BlobTableEntry.cs j:\xonline_main\private\server\xlfs\common\StorageAccountTableContext.cs j:\xonline_main\private\server\xlfs\common\StorageAccountTableDataSource.cs j:\xonline_main\private\server\xlfs\common\StorageAccountTableEntry.cs Matchmaking\MatchPartUtil.cs Matchmaking\MatchSession.cs Matchmaking\matchsessionset.cs Matchmaking\MatchUtilities.cs Matchmaking\XRL2AttribParam.cs Matchmaking\XRL2AttribParamWeighted.cs Matchmaking\XRL2CreateUpdateSession.cs Matchmaking\XRL2DeleteSession.cs Matchmaking\XRL2SearchSession.cs Matchmaking\XRLCreateUpdateSession.cs Matchmaking\XRLDeadXBox.cs Matchmaking\XRLDeleteSession.cs Matchmaking\XRLSearchSession.cs Matchmaking\XRLSplitSession.cs Matchmaking\XRLTitleChange.cs StringServer\XrlAddString.cs StringServer\XrlGetString.cs StringServer\XrlGetTitleID.cs StringServer\XrlLogString.cs StringServer\XrlVetString.cs GI\GIblob.cs GI\giprot.cs GI\Pong.cs GI\PresenceTitleConfig.cs Diagnostics\XDSPackets.cs Reporting\Cleanser.cs Reporting\CleanserConnection.cs Reporting\MessageGenerator.cs Reporting\ReportingCommon.cs Reporting\ReportingData.cs Reporting\ReportingDataLoader.cs Reporting\ReportingEvent.cs Reporting\ReportingHelper.cs Reporting\ReportingJob.cs Reporting\ReportingJobFactory.cs Reporting\ReportingReferenceObject.cs Reporting\ReportingReferenceObjectContainer.cs Reporting\ReportingReferenceObjectFactory.cs Reporting\ReportingService.cs Reporting\ReportingSQLQueryBuilder.cs Reporting\ReportingTable.cs Reporting\ReportingVerification.cs Reporting\ReportingXBLReport.cs Reporting\Jobs\CdbVideoProcessing_SSIS.cs Reporting\Jobs\CIQDatafeed.cs Reporting\Jobs\DailyProcessing_Crux.cs Reporting\Jobs\DailyProcessing_GameUsage.cs Reporting\Jobs\DailySSAS_AchievementsProcessing.cs Reporting\Jobs\DailySSAS_CDBCruxUsageProcessing.cs Reporting\Jobs\DailySSAS_CruxUsageProcessing.cs Reporting\Jobs\DailySSAS_GameUsageProcessing.cs Reporting\Jobs\DailySSAS_VideoCubeProcessing.cs Reporting\Jobs\FilterDB_PurgeFactTables.cs Reporting\Jobs\OlapCubeGeneration.cs Reporting\Jobs\OlapJob.cs Reporting\Jobs\RealtimeDB_PurgeFactTables.cs Reporting\Jobs\RealtimeDB_RealtimeProcessing.cs Reporting\Jobs\ReportArchiveDB_TransferFactData.cs Reporting\Jobs\ReportArchiveDB_UpdateFilegroups.cs Reporting\Jobs\ReportingDB_DropArchivedFacts.cs Reporting\Jobs\ReportingDB_PurgeFactTables.cs Reporting\Jobs\SCGExport_SSIS.cs Reporting\Jobs\SCGImportFeed_SSIS.cs Reporting\Jobs\SSISJob.cs Reporting\Jobs\UODB_Accounts_SSIS.cs Reporting\Jobs\UODB_Music_SSIS.cs Reporting\Jobs\UODB_Offers_SSIS.cs Reporting\Jobs\UODB_Primary_SSIS.cs Reporting\Jobs\UODB_Purchase_SSIS.cs Reporting\Jobs\UODB_Realtime_SSIS.cs Reporting\Jobs\UODB_Secondary_SSIS.cs Reporting\Jobs\UODB_Video_SSIS.cs Reporting\Jobs\WMIS_Download.cs Reporting\Reports\AchievementSummary.cs Reporting\Reports\ContractualPartners.cs Reporting\Reports\FirstTitlePlayed.cs Reporting\Reports\LastWebActivity.cs Reporting\Reports\MarketplaceDownloadSummary.cs Reporting\Reports\MarketplaceScorecard.cs Reporting\Reports\MarketRedeemedContentTitleOffer.cs Reporting\Reports\MarketRedeemedContentTypeTier.cs Reporting\Reports\MusicRoyalty.cs Reporting\Reports\PublisherTitleUsageDaily.cs Reporting\Reports\PublisherTitleUsageMonthly.cs Reporting\Reports\RealTimeAccounts.cs Reporting\Reports\RealTimeTitleUsage.cs Reporting\Reports\SubscriberLife.cs Reporting\Reports\TitleUsageDetails.cs Reporting\Reports\TitleUsageSummary.cs Reporting\Reports\VideoRoyalty.cs Reporting\Reports\VideoStudio.cs Reporting\Reports\VisitorFrequency.cs Reporting\Reports\Xbox1DownloadDetails.cs Reporting\Reports\XboxAccountSummary.cs Reporting\Tables\StagingTable.cs Reporting\Tables\t_achievements.cs Reporting\Tables\t_acquirelicense_fact.cs Reporting\Tables\t_base_offers.cs Reporting\Tables\t_content_fact.cs Reporting\Tables\t_content_package.cs Reporting\Tables\T_dmp_purchase_transactions.cs Reporting\Tables\t_elite_migration_fact.cs Reporting\Tables\t_fdb_time.cs Reporting\Tables\t_guest_fact.cs Reporting\Tables\t_machines.cs Reporting\Tables\t_migrate_account_fact.cs Reporting\Tables\t_msg_snd_fact.cs Reporting\Tables\t_new_account_fact.cs Reporting\Tables\t_offers.cs Reporting\Tables\t_percentage_viewed_video_fact.cs Reporting\Tables\t_presence_fact.cs Reporting\Tables\t_provision_fact.cs Reporting\Tables\t_publisher_titles.cs Reporting\Tables\t_purchase_fact.cs Reporting\Tables\t_raw_dmp_media_fact.cs Reporting\Tables\t_rdb_acquirelicense_fact.cs Reporting\Tables\t_rdb_content_fact.cs Reporting\Tables\t_rdb_content_xbox360_fact.cs Reporting\Tables\t_rdb_dmp_media_fact.cs Reporting\Tables\t_rdb_guest_fact.cs Reporting\Tables\t_rdb_migrate_account_fact.cs Reporting\Tables\t_rdb_msg_snd_fact.cs Reporting\Tables\t_rdb_new_account_fact.cs Reporting\Tables\t_rdb_percentage_viewed_video_fact.cs Reporting\Tables\t_rdb_presence_fact.cs Reporting\Tables\t_rdb_provision_fact.cs Reporting\Tables\t_rdb_purchase_fact.cs Reporting\Tables\t_rdb_session_fact.cs Reporting\Tables\t_rdb_usagestore_adsupported_fact.cs Reporting\Tables\t_rdb_usagestore_fact.cs Reporting\Tables\t_session_fact.cs Reporting\Tables\t_spscustomeraccount.cs Reporting\Tables\t_subscriptions.cs Reporting\Tables\t_title_culture_details.cs Reporting\Tables\t_title_feature_data.cs Reporting\Tables\t_title_offers.cs Reporting\Tables\t_titles.cs Reporting\Tables\t_usagestore_adsupported_fact.cs Reporting\Tables\t_usagestore_fact.cs Reporting\Tables\t_user_musicnet_accounts.cs Reporting\Tables\t_user_per_client_type_data.cs Reporting\Tables\t_user_per_client_type_data_weekly.cs Reporting\Tables\t_user_settings.cs Reporting\Tables\t_users.cs Reporting\Tables\t_xmsg_user_titles.cs Reporting\Verifications\Verify_DailyProcessing_GameUsage.cs Reporting\Verifications\Verify_OlapMeasureDimension.cs Reporting\Verifications\Verify_OlapReportData.cs Reporting\Events\CleanserTCPEvent.cs Reporting\Data\OlapDailyProcessingData.cs Reporting\Data\OlapGenericData.cs Reporting\Data\RealtimeDBStressData.cs Reporting\Data\RealtimeDBStressDataLoader.cs RegDB\RegDB.cs RegDB\RegDBEventListener.cs RegDB\RegDBLog.cs RegDB\RegHistoryRetriever.cs TestDB\TestDBConnection.cs TestDB\TestDBReader.cs TestDB\TestDBTree.cs msnrr\msnrr.cs msnrr\msnrr-wsdl-aggregator.cs msnrr\msnrr-wsdl-multiple-rating.cs msnrr\msnrr-wsdl-single-rating.cs WebWidget\RequestInfo.cs WebWidget\WCAlerts.cs WebWidget\WCGeneralInfo.cs WebWidget\WCInitializer.cs WebWidget\WCMessaging.cs WebWidget\WCPresence.cs WebWidget\WCProfile.cs WebWidget\WCQuery.cs WebWidget\WCSignature.cs WebWidget\WCStats.cs WebWidget\WCStorage.cs WebWidget\WCTeams.cs WebWidget\WCUserAccount.cs XTOU\XRLGetLanguagesForCountry.cs WebReferences\STFSoapHttpClientProtocol.cs WebReferences\TeamWidget\Reference.cs WebReferences\WidgetAlerts\Reference.cs WebReferences\WidgetGeneralInfo\Reference.cs WebReferences\WidgetUserAccount\Reference.cs WebReferences\WidgetMessaging\Reference.cs WebReferences\WidgetPresence\Reference.cs WebReferences\WidgetProfile\Reference.cs WebReferences\WidgetQuery\Reference.cs WebReferences\WidgetSignature\Reference.cs WebReferences\WidgetStats\Reference.cs WebReferences\WidgetStorage\Reference.cs WebReferences\Cust\Reference.cs WebReferences\Cust\SvcProviderWrapper.cs WebReferences\Uacs\Reference.cs WebReferences\Uacs\SvcProviderWrapper.cs WebReferences\Uacs2\Reference.cs WebReferences\Uacs2\SvcProviderWrapper.cs WebReferences\Xbos2\reference.cs WebReferences\Xbos2\SvcProviderWrapper.cs WebReferences\Xbos_History\Reference.cs WebReferences\Xbos_History\SvcProviderWrapper.cs WebReferences\sts\Reference.cs WebReferences\sts\SvcProviderWrapper.cs J:\XONLINE_MAIN\private\server\stats\ranking\Game.cs J:\XONLINE_MAIN\private\server\stats\ranking\GaussianApproximations.cs J:\XONLINE_MAIN\private\server\stats\ranking\Matrix.cs J:\XONLINE_MAIN\private\server\stats\ranking\MuSigmaRankingSystem.cs J:\XONLINE_MAIN\private\server\stats\ranking\MuSigmaSkill.cs J:\XONLINE_MAIN\private\server\stats\ranking\PlayerSkills.cs J:\XONLINE_MAIN\private\server\stats\ranking\PlayerSkillsList.cs J:\XONLINE_MAIN\private\server\stats\ranking\Ranking.cs J:\XONLINE_MAIN\private\server\stats\ranking\RankingSystem.cs J:\XONLINE_MAIN\private\server\stats\ranking\Skill.cs J:\XONLINE_MAIN\private\server\stats\ranking\Team.cs STFUtil\AccountsUtil.cs STFUtil\DbUtil.cs STFUtil\DirectDebitRandomizer.cs STFUtil\PassportTestUtil.cs STFUtil\StfXrlUtil.cs j:\xonline_main\private\server\testfd\protocol\TestFDProtocol.cs objd\i386\_generated.cs
100>NMAKE : [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
100>errors in directory j:\xonline_main\private\common\test\bootstrap
100>NMAKE : [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
100> from J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj
100> from j:\xonline_main\private\common\test\bootstrap\dirs.proj
100> 19>xsts\XSTSUtil.cs(25,17): error CS0234: The type or namespace name 'XboxLive' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
100>j:\xonline_main\private\common\test\bootstrap\19>xsts\xstsutil.cs(25) : error CS0234: The type or namespace name 'XboxLive' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)
100> 19>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj" (BuildCompiled target(s)) -- FAILED.
100> 3>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (BuildCompiled target(s)) -- FAILED.
100> 1>Done Building Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (BuildCompiled target(s)) -- FAILED.
100> 20>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveTools\STFLiveTools.csproj" (BuildCompiled target(s)) -- FAILED.
100>Build FAILED.
100>Time Elapsed 00:00:06.92
100>NMAKE : fatal error U1077: 'J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe' : return code '0x1'
100>NMAKE : fatal error U1077: 'J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe' : return code '0x1'
100>Stop.
100>nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap failed - rc = 2

100>Compiling j:\xonline_main\private\common\test\bootstrap2 *************
100>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap2'
100>BUILDMSG: Processing j:\xonline_main\private\common\test\bootstrap2
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildCompiled /p:Pass=Compile
100>Build started 10/27/2012 7:30:46 PM.
100> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" on node 0 (BuildCompiled target(s)).
100> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) on node 0 (BuildCompiled target(s)).
100> 2>Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\LiveInternalTest.csproj" (4) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 2>Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) on node 0 (BuildCompiled target(s)).
100> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\LiveLibInternal.csproj" (7) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\unittests\UnitTests.csproj" (8) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) on node 1 (BuildCompiled target(s)).
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\DDTCore\DDTCore.csproj" (9) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\TestDDTActions.csproj" (10) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\DDT\DDT.csproj" (11) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\DDT.StfTests.csproj" (12) on node 0 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.csproj" (13) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\minrunner\MinRunner.csproj" (14) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\UnitTests\UnitTests.csproj" (18) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 6>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\DDT\DDTHelp\DDTHelp.csproj" (19) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (5) on node 1 (BuildCompiled target(s)).
100> 5>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\STFGuiPlugins.csproj" (15) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 5>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STFGui.csproj" (16) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 13>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\LiveLib.dll /target:library /warnaserror+ client\ClientBase.cs client\EmptySecurityProvider.cs client\FakeSGSecurityProvider.cs client\GfWLClient.cs client\HttpAuthSecurityProvider.cs client\TG2SecurityProvider.cs client\TGSecurityProvider.cs client\WebClient.cs client\Xbox360Client.cs client\XboxClient.cs client\ZuneClient.cs common\AccountIssues.cs common\AddressInfoProvider.cs common\ArrayEx.cs common\BehaviorInjection.cs common\BlockUtil.cs common\BoolProvider.cs common\BundledAuthData.cs common\ClientAsyncContext.cs common\Config.cs common\Convert.cs common\Countries.cs common\CreditCardGenerator.cs common\CreditCardProvider.cs common\CustCommon.cs common\DataManager.cs common\DateProvider.cs common\EnumDataProvider.cs common\Genres.cs common\Hexer.cs common\HResult.cs common\HttpAuthData.cs common\HttpHelper.cs common\IClient.cs common\IConfig.cs common\IDataProvider.cs common\IDeepCloneable.cs common\IRandom.cs common\ITransaction.cs common\IXOnSecurityProvider.cs common\LanguageProvider.cs common\Languages.cs common\ListEx.cs common\Logging.cs common\NameProvider.cs common\Offer.cs common\Offers.cs common\Party.cs common\PassportAuth.cs common\PassportInfo.cs common\PassportPersonalInfo.cs common\PassportUtils.cs common\PaymentInstrument.cs common\PersonalInfoProvider.cs common\Privileges.cs common\RandomEx.cs common\Randomizer.cs common\RealRandom.cs common\Recovered.cs common\Session.cs common\StatsBundle.cs common\STFConfig.cs common\StorageCommon.cs common\TitleBase.cs common\TransactionAsyncContext.cs common\UserWebInfo.cs common\XblUser.cs common\XblUserSettings.cs common\XmlConfig.cs common\Xon.cs common\accounts\ArgoAccountInfo.cs common\accounts\BillingInfo.cs common\accounts\PaymentInstrumentInfo.cs common\accounts\SigninInfo.cs common\accounts\UserSubscriptionInfo.cs common\billing\CatalogFilters.cs common\billing\CatalogUtil.cs common\billing\ContentEnumerateFilter.cs common\billing\ContentHistoryEnumerateFilter.cs common\billing\ContentHistoryItem.cs common\billing\ContentItem.cs common\billing\ContentLicense.cs common\billing\ContentReferral.cs common\billing\EMSMediaItem.cs common\billing\EMSVideoMediaItem.cs common\billing\EnumeratedResponse.cs common\billing\GenreEnumerateFilter.cs common\billing\MediaInstanceItem.cs common\billing\OfferItem.cs common\billing\OfferPriceInfo.cs common\billing\PurchaseHistoryItem.cs common\billing\SubscriptionEnumerate.cs common\billing\SubscriptionEnumerateFilter.cs common\billing\SubscriptionItem.cs common\billing\TitleDetails.cs common\billing\TitleInfo.cs common\billing\VideoOfferItem.cs common\kdc\AskdcClient.cs common\kdc\AuthClientBase.cs common\kdc\AuthUtils.cs common\kdc\kerbErr.cs common\kdc\kerbStore.cs common\kdc\kerbStructs.cs common\kdc\NetworkPackets.cs common\kdc\ReflectionUtilities.cs common\kdc\sgPackets.cs common\kdc\WireData.cs common\kdc\XkdcClient.cs common\kdc\XmacsClient.cs lfm\Xbox360\LfmState.cs lfm\Xbox360\Scenes.cs lfm\Xbox360\SignUp.cs lfm\Xbox360\Xbox360.cs lfm\Xbox360\HUD\AddMicrosoftPointsScene.cs lfm\Xbox360\HUD\ContentItemPurchaseScene.cs lfm\Xbox360\HUD\DownloadedContentItemScene.cs lfm\Xbox360\HUD\EMSContentItemPurchaseScene.cs lfm\Xbox360\HUD\PurchaseScene.cs lfm\Xbox360\HUD\RedeemCodeScene.cs lfm\Xbox360\Marketplace\AccountMgmtInternal.cs lfm\Xbox360\Marketplace\DownloadHistoryScene.cs lfm\Xbox360\Marketplace\Games.cs lfm\Xbox360\Marketplace\GenreScene.cs lfm\Xbox360\Marketplace\GenresScene.cs lfm\Xbox360\Marketplace\MarketplaceInternal.cs lfm\Xbox360\Marketplace\TitleContentsScene.cs lfm\Xbox360\Marketplace\VideoCategoriesScene.cs lfm\Xbox360\Marketplace\VideoMediaOfferScene.cs lfm\Xbox360\Marketplace\VideoStore.cs lfm\Xbox360\XboxLive\feedbackinternal.cs lfm\Xbox360\XboxLive\Friends.cs lfm\Xbox360\XboxLive\MatchmakingInternal.cs lfm\Xbox360\XboxLive\Messages.cs lfm\Xbox360\XboxLive\ProfileInternal.cs lfm\Xbox360\XboxLive\StatsInternal.cs lfm\Xbox360\XboxLive\XboxLive.cs protocol\AAInfo.cs protocol\AATransaction.cs protocol\AccessToken.cs protocol\AccountsProtocol.cs protocol\ArbitrationProt.cs protocol\CatalogProtocol.cs protocol\Convert.cs protocol\CustProtocol.cs protocol\DownloadQueueProtocol.cs protocol\FakeAAInfo.cs protocol\FakeAATGTransaction.cs protocol\FakeAATransaction.cs protocol\FDTransaction.cs protocol\feedbackprot.cs protocol\giprot.cs protocol\HttpTGTransaction.cs protocol\HttpTransaction.cs protocol\IGConnection.cs protocol\IGContext.cs protocol\IGProtocol.cs protocol\ListsProtocol.cs protocol\LiveInfoProtocol.cs protocol\matchprot.cs protocol\messageprot.cs protocol\PartyUserSetting.cs protocol\PayloadRequest.cs protocol\PayloadResponse.cs protocol\presenceprot.cs protocol\SGInfo.cs protocol\sgprot.cs protocol\statprot.cs protocol\StorageConstants.cs protocol\storageProtocol.cs protocol\TeamTicket.cs protocol\TG2HttpAuthTransaction.cs protocol\TGTransaction.cs protocol\TGTransaction2.cs protocol\UacsProtocol.cs protocol\UDPTransaction.cs protocol\WebRequest.cs protocol\WebResponse.cs protocol\wiredata.cs protocol\XbosProtocol.cs protocol\xCryptoProtocol.cs protocol\XOnWebClient.cs protocol\XRLException.cs protocol\XrlObject2.cs protocol\xsigprot.cs protocol\Presence\AffiliateState.cs protocol\Presence\GIblob.cs protocol\Presence\Message.cs protocol\Presence\MsgDetails.cs protocol\Presence\MsgProperty.cs protocol\Presence\MsgUtils.cs protocol\Presence\PMsgAcceptBuddy.cs protocol\Presence\PMsgAddAffiliates.cs protocol\Presence\PMsgAddBuddy.cs protocol\Presence\PMsgAlive.cs protocol\Presence\PMsgAlive2.cs protocol\Presence\PMsgAliveInternal.cs protocol\Presence\PMsgBlockVoice.cs protocol\Presence\PMsgCancelInvite.cs protocol\Presence\PMsgCheckTitleMessages.cs protocol\Presence\PMsgCreateTeam.cs protocol\Presence\PMsgDeleteBuddy.cs protocol\Presence\PMsgDeleteTeam.cs protocol\Presence\PMsgFindUser.cs protocol\Presence\PMsgGetFriendsList.cs protocol\Presence\PMsgGetPresenceInfo.cs protocol\Presence\PMsgGetTeamTicket.cs protocol\Presence\PMsgInvalidateUser.cs protocol\Presence\PMsgInvite.cs protocol\Presence\PMsgInviteAnswer.cs protocol\Presence\PMsgIsAffiliate.cs protocol\Presence\PMsgJoinTeam.cs protocol\Presence\PMsgListTeamMembers.cs protocol\Presence\PMsgListTeams.cs protocol\Presence\PMsgListUserTeams.cs protocol\Presence\PMsgLogonCheck.cs protocol\Presence\PMsgManageTeam.cs protocol\Presence\PMsgManageTeamMember.cs protocol\Presence\PMsgManageTeamXe.cs protocol\Presence\PMsgNickname.cs protocol\Presence\PMsgPeerSession.cs protocol\Presence\PMsgPeerSubscribe.cs protocol\Presence\PMsgPeerSubscribeEx.cs protocol\Presence\PMsgPeerUnsubscribe.cs protocol\Presence\PMsgQueryAffiliates.cs protocol\Presence\PMsgRecruitTeamMember.cs protocol\Presence\PMsgRejectBuddy.cs protocol\Presence\PMsgRemoveTeamMember.cs protocol\Presence\PMsgState.cs protocol\Presence\PMsgUnblockVoice.cs protocol\Presence\PMsgWebFriends.cs protocol\Presence\PNConditionalWaitState.cs protocol\Presence\PNMsg.cs protocol\Presence\PNMsgDeadUser.cs protocol\Presence\PNState.cs protocol\Presence\QMsgAdd.cs protocol\Presence\QMsgDeleteMsg.cs protocol\Presence\QMsgDeleteSystemMsg.cs protocol\Presence\QMsgDeleteTitle.cs protocol\Presence\QMsgDequeue.cs protocol\Presence\QMsgDetails.cs protocol\Presence\QMsgEnumMsgs.cs protocol\Presence\QMsgEnumMsgs2.cs protocol\Presence\QMsgEnumSystemMsgs.cs protocol\Presence\QMsgEnumTitles.cs protocol\Presence\QMsgFlags.cs protocol\Presence\QMsgRevokeExMsg.cs protocol\Presence\QMsgRevokeMsg.cs protocol\Presence\QMsgRevokeMsgByProp.cs protocol\Presence\QMsgSendMsg.cs protocol\Presence\QMsgSendSystemMsg.cs protocol\Presence\QMsgSummary.cs protocol\Presence\QMsgSummary2.cs protocol\Presence\QMsgSystemDetails.cs protocol\Presence\QValPacket.cs protocol\Presence\SystemMessage.cs protocol\Presence\Team.cs protocol\Presence\TeamMember.cs protocol\Presence\TeamTicket.cs protocol\Presence\UserMessage.cs protocol\Presence\UserMsgFolder.cs protocol\Presence\UserTeams.cs protocol\Presence\XonPresNoti.cs protocol\proxy\CertUtil.cs protocol\proxy\TestGateway20Proxy.cs server\Achievements.cs server\Arbitration.cs server\Billing.cs server\Catalog.cs server\Crypto.cs server\Cust.cs server\DownloadQueue.cs server\feedback.cs server\KDC.cs server\Lists.cs server\LiveInfo.cs server\Matchmaking.cs server\Messaging.cs server\Notification.cs server\Presence.cs server\Signature.cs server\Stats.cs server\Storage.cs server\UACS.cs server\UserSettings.cs util\AccountsUtil.cs util\BillingUtil.cs util\PresenceUtil.cs objd\i386\_generated.cs
100> 7>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:INTERNALTEST;DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\LiveLibInternal.dll /target:library /warnaserror+ ..\lib\client\ClientBase.cs ..\lib\client\EmptySecurityProvider.cs ..\lib\client\FakeSGSecurityProvider.cs ..\lib\client\GfWLClient.cs ..\lib\client\HttpAuthSecurityProvider.cs ..\lib\client\TG2SecurityProvider.cs ..\lib\client\TGSecurityProvider.cs ..\lib\client\WebClient.cs ..\lib\client\Xbox360Client.cs ..\lib\client\XboxClient.cs ..\lib\client\ZuneClient.cs ..\lib\common\AccountIssues.cs ..\lib\common\AddressInfoProvider.cs ..\lib\common\ArrayEx.cs ..\lib\common\BehaviorInjection.cs ..\lib\common\BlockUtil.cs ..\lib\common\BoolProvider.cs ..\lib\common\BundledAuthData.cs ..\lib\common\ClientAsyncContext.cs ..\lib\common\Config.cs ..\lib\common\Convert.cs ..\lib\common\Countries.cs ..\lib\common\CreditCardGenerator.cs ..\lib\common\CreditCardProvider.cs ..\lib\common\CustCommon.cs ..\lib\common\DataManager.cs ..\lib\common\DateProvider.cs ..\lib\common\EnumDataProvider.cs ..\lib\common\Genres.cs ..\lib\common\Hexer.cs ..\lib\common\HResult.cs ..\lib\common\HttpAuthData.cs ..\lib\common\HttpHelper.cs ..\lib\common\IClient.cs ..\lib\common\IConfig.cs ..\lib\common\IDataProvider.cs ..\lib\common\IDeepCloneable.cs ..\lib\common\IRandom.cs ..\lib\common\ITransaction.cs ..\lib\common\IXOnSecurityProvider.cs ..\lib\common\LanguageProvider.cs ..\lib\common\Languages.cs ..\lib\common\ListEx.cs ..\lib\common\Logging.cs ..\lib\common\NameProvider.cs ..\lib\common\Offer.cs ..\lib\common\Offers.cs ..\lib\common\Party.cs ..\lib\common\PassportAuth.cs ..\lib\common\PassportInfo.cs ..\lib\common\PassportPersonalInfo.cs ..\lib\common\PassportUtils.cs ..\lib\common\PaymentInstrument.cs ..\lib\common\PersonalInfoProvider.cs ..\lib\common\Privileges.cs ..\lib\common\RandomEx.cs ..\lib\common\Randomizer.cs ..\lib\common\RealRandom.cs ..\lib\common\Recovered.cs ..\lib\common\Session.cs ..\lib\common\StatsBundle.cs ..\lib\common\STFConfig.cs ..\lib\common\StorageCommon.cs ..\lib\common\TitleBase.cs ..\lib\common\TransactionAsyncContext.cs ..\lib\common\UserWebInfo.cs ..\lib\common\XblUser.cs ..\lib\common\XblUserSettings.cs ..\lib\common\XmlConfig.cs ..\lib\common\Xon.cs ..\lib\common\accounts\ArgoAccountInfo.cs ..\lib\common\accounts\BillingInfo.cs ..\lib\common\accounts\PaymentInstrumentInfo.cs ..\lib\common\accounts\SigninInfo.cs ..\lib\common\accounts\UserSubscriptionInfo.cs ..\lib\common\billing\CatalogFilters.cs ..\lib\common\billing\CatalogUtil.cs ..\lib\common\billing\ContentEnumerateFilter.cs ..\lib\common\billing\ContentHistoryEnumerateFilter.cs ..\lib\common\billing\ContentHistoryItem.cs ..\lib\common\billing\ContentItem.cs ..\lib\common\billing\ContentLicense.cs ..\lib\common\billing\ContentReferral.cs ..\lib\common\billing\EMSMediaItem.cs ..\lib\common\billing\EMSVideoMediaItem.cs ..\lib\common\billing\EnumeratedResponse.cs ..\lib\common\billing\GenreEnumerateFilter.cs ..\lib\common\billing\MediaInstanceItem.cs ..\lib\common\billing\OfferItem.cs ..\lib\common\billing\OfferPriceInfo.cs ..\lib\common\billing\PurchaseHistoryItem.cs ..\lib\common\billing\SubscriptionEnumerate.cs ..\lib\common\billing\SubscriptionEnumerateFilter.cs ..\lib\common\billing\SubscriptionItem.cs ..\lib\common\billing\TitleDetails.cs ..\lib\common\billing\TitleInfo.cs ..\lib\common\billing\VideoOfferItem.cs ..\lib\common\kdc\AskdcClient.cs ..\lib\common\kdc\AuthClientBase.cs ..\lib\common\kdc\AuthUtils.cs ..\lib\common\kdc\kerbErr.cs ..\lib\common\kdc\kerbStore.cs ..\lib\common\kdc\kerbStructs.cs ..\lib\common\kdc\NetworkPackets.cs ..\lib\common\kdc\ReflectionUtilities.cs ..\lib\common\kdc\sgPackets.cs ..\lib\common\kdc\WireData.cs ..\lib\common\kdc\XkdcClient.cs ..\lib\common\kdc\XmacsClient.cs ..\lib\lfm\Xbox360\LfmState.cs ..\lib\lfm\Xbox360\Scenes.cs ..\lib\lfm\Xbox360\SignUp.cs ..\lib\lfm\Xbox360\Xbox360.cs ..\lib\lfm\Xbox360\HUD\AddMicrosoftPointsScene.cs ..\lib\lfm\Xbox360\HUD\ContentItemPurchaseScene.cs ..\lib\lfm\Xbox360\HUD\DownloadedContentItemScene.cs ..\lib\lfm\Xbox360\HUD\EMSContentItemPurchaseScene.cs ..\lib\lfm\Xbox360\HUD\PurchaseScene.cs ..\lib\lfm\Xbox360\HUD\RedeemCodeScene.cs ..\lib\lfm\Xbox360\Marketplace\AccountMgmtInternal.cs ..\lib\lfm\Xbox360\Marketplace\DownloadHistoryScene.cs ..\lib\lfm\Xbox360\Marketplace\Games.cs ..\lib\lfm\Xbox360\Marketplace\GenreScene.cs ..\lib\lfm\Xbox360\Marketplace\GenresScene.cs ..\lib\lfm\Xbox360\Marketplace\MarketplaceInternal.cs ..\lib\lfm\Xbox360\Marketplace\TitleContentsScene.cs ..\lib\lfm\Xbox360\Marketplace\VideoCategoriesScene.cs ..\lib\lfm\Xbox360\Marketplace\VideoMediaOfferScene.cs ..\lib\lfm\Xbox360\Marketplace\VideoStore.cs ..\lib\lfm\Xbox360\XboxLive\feedbackinternal.cs ..\lib\lfm\Xbox360\XboxLive\Friends.cs ..\lib\lfm\Xbox360\XboxLive\MatchmakingInternal.cs ..\lib\lfm\Xbox360\XboxLive\Messages.cs ..\lib\lfm\Xbox360\XboxLive\ProfileInternal.cs ..\lib\lfm\Xbox360\XboxLive\StatsInternal.cs ..\lib\lfm\Xbox360\XboxLive\XboxLive.cs ..\lib\protocol\AAInfo.cs ..\lib\protocol\AATransaction.cs ..\lib\protocol\AccessToken.cs ..\lib\protocol\AccountsProtocol.cs ..\lib\protocol\ArbitrationProt.cs ..\lib\protocol\CatalogProtocol.cs ..\lib\protocol\Convert.cs ..\lib\protocol\CustProtocol.cs ..\lib\protocol\DownloadQueueProtocol.cs ..\lib\protocol\FakeAAInfo.cs ..\lib\protocol\FakeAATGTransaction.cs ..\lib\protocol\FakeAATransaction.cs ..\lib\protocol\FDTransaction.cs ..\lib\protocol\feedbackprot.cs ..\lib\protocol\giprot.cs ..\lib\protocol\HttpTGTransaction.cs ..\lib\protocol\HttpTransaction.cs ..\lib\protocol\IGConnection.cs ..\lib\protocol\IGContext.cs ..\lib\protocol\IGProtocol.cs ..\lib\protocol\ListsProtocol.cs ..\lib\protocol\LiveInfoProtocol.cs ..\lib\protocol\matchprot.cs ..\lib\protocol\messageprot.cs ..\lib\protocol\PartyUserSetting.cs ..\lib\protocol\PayloadRequest.cs ..\lib\protocol\PayloadResponse.cs ..\lib\protocol\presenceprot.cs ..\lib\protocol\SGInfo.cs ..\lib\protocol\sgprot.cs ..\lib\protocol\statprot.cs ..\lib\protocol\StorageConstants.cs ..\lib\protocol\storageProtocol.cs ..\lib\protocol\TeamTicket.cs ..\lib\protocol\TG2HttpAuthTransaction.cs ..\lib\protocol\TGTransaction.cs ..\lib\protocol\TGTransaction2.cs ..\lib\protocol\UacsProtocol.cs ..\lib\protocol\UDPTransaction.cs ..\lib\protocol\WebRequest.cs ..\lib\protocol\WebResponse.cs ..\lib\protocol\wiredata.cs ..\lib\protocol\XbosProtocol.cs ..\lib\protocol\xCryptoProtocol.cs ..\lib\protocol\XOnWebClient.cs ..\lib\protocol\XRLException.cs ..\lib\protocol\XrlObject2.cs ..\lib\protocol\xsigprot.cs ..\lib\protocol\Presence\AffiliateState.cs ..\lib\protocol\Presence\GIblob.cs ..\lib\protocol\Presence\Message.cs ..\lib\protocol\Presence\MsgDetails.cs ..\lib\protocol\Presence\MsgProperty.cs ..\lib\protocol\Presence\MsgUtils.cs ..\lib\protocol\Presence\PMsgAcceptBuddy.cs ..\lib\protocol\Presence\PMsgAddAffiliates.cs ..\lib\protocol\Presence\PMsgAddBuddy.cs ..\lib\protocol\Presence\PMsgAlive.cs ..\lib\protocol\Presence\PMsgAlive2.cs ..\lib\protocol\Presence\PMsgAliveInternal.cs ..\lib\protocol\Presence\PMsgBlockVoice.cs ..\lib\protocol\Presence\PMsgCancelInvite.cs ..\lib\protocol\Presence\PMsgCheckTitleMessages.cs ..\lib\protocol\Presence\PMsgCreateTeam.cs ..\lib\protocol\Presence\PMsgDeleteBuddy.cs ..\lib\protocol\Presence\PMsgDeleteTeam.cs ..\lib\protocol\Presence\PMsgFindUser.cs ..\lib\protocol\Presence\PMsgGetFriendsList.cs ..\lib\protocol\Presence\PMsgGetPresenceInfo.cs ..\lib\protocol\Presence\PMsgGetTeamTicket.cs ..\lib\protocol\Presence\PMsgInvalidateUser.cs ..\lib\protocol\Presence\PMsgInvite.cs ..\lib\protocol\Presence\PMsgInviteAnswer.cs ..\lib\protocol\Presence\PMsgIsAffiliate.cs ..\lib\protocol\Presence\PMsgJoinTeam.cs ..\lib\protocol\Presence\PMsgListTeamMembers.cs ..\lib\protocol\Presence\PMsgListTeams.cs ..\lib\protocol\Presence\PMsgListUserTeams.cs ..\lib\protocol\Presence\PMsgLogonCheck.cs ..\lib\protocol\Presence\PMsgManageTeam.cs ..\lib\protocol\Presence\PMsgManageTeamMember.cs ..\lib\protocol\Presence\PMsgManageTeamXe.cs ..\lib\protocol\Presence\PMsgNickname.cs ..\lib\protocol\Presence\PMsgPeerSession.cs ..\lib\protocol\Presence\PMsgPeerSubscribe.cs ..\lib\protocol\Presence\PMsgPeerSubscribeEx.cs ..\lib\protocol\Presence\PMsgPeerUnsubscribe.cs ..\lib\protocol\Presence\PMsgQueryAffiliates.cs ..\lib\protocol\Presence\PMsgRecruitTeamMember.cs ..\lib\protocol\Presence\PMsgRejectBuddy.cs ..\lib\protocol\Presence\PMsgRemoveTeamMember.cs ..\lib\protocol\Presence\PMsgState.cs ..\lib\protocol\Presence\PMsgUnblockVoice.cs ..\lib\protocol\Presence\PMsgWebFriends.cs ..\lib\protocol\Presence\PNConditionalWaitState.cs ..\lib\protocol\Presence\PNMsg.cs ..\lib\protocol\Presence\PNMsgDeadUser.cs ..\lib\protocol\Presence\PNState.cs ..\lib\protocol\Presence\QMsgAdd.cs ..\lib\protocol\Presence\QMsgDeleteMsg.cs ..\lib\protocol\Presence\QMsgDeleteSystemMsg.cs ..\lib\protocol\Presence\QMsgDeleteTitle.cs ..\lib\protocol\Presence\QMsgDequeue.cs ..\lib\protocol\Presence\QMsgDetails.cs ..\lib\protocol\Presence\QMsgEnumMsgs.cs ..\lib\protocol\Presence\QMsgEnumMsgs2.cs ..\lib\protocol\Presence\QMsgEnumSystemMsgs.cs ..\lib\protocol\Presence\QMsgEnumTitles.cs ..\lib\protocol\Presence\QMsgFlags.cs ..\lib\protocol\Presence\QMsgRevokeExMsg.cs ..\lib\protocol\Presence\QMsgRevokeMsg.cs ..\lib\protocol\Presence\QMsgRevokeMsgByProp.cs ..\lib\protocol\Presence\QMsgSendMsg.cs ..\lib\protocol\Presence\QMsgSendSystemMsg.cs ..\lib\protocol\Presence\QMsgSummary.cs ..\lib\protocol\Presence\QMsgSummary2.cs ..\lib\protocol\Presence\QMsgSystemDetails.cs ..\lib\protocol\Presence\QValPacket.cs ..\lib\protocol\Presence\SystemMessage.cs ..\lib\protocol\Presence\Team.cs ..\lib\protocol\Presence\TeamMember.cs ..\lib\protocol\Presence\TeamTicket.cs ..\lib\protocol\Presence\UserMessage.cs ..\lib\protocol\Presence\UserMsgFolder.cs ..\lib\protocol\Presence\UserTeams.cs ..\lib\protocol\Presence\XonPresNoti.cs ..\lib\protocol\proxy\CertUtil.cs ..\lib\protocol\proxy\TestGateway20Proxy.cs ..\lib\server\Achievements.cs ..\lib\server\Arbitration.cs ..\lib\server\Billing.cs ..\lib\server\Catalog.cs ..\lib\server\Crypto.cs ..\lib\server\Cust.cs ..\lib\server\DownloadQueue.cs ..\lib\server\feedback.cs ..\lib\server\KDC.cs ..\lib\server\Lists.cs ..\lib\server\LiveInfo.cs ..\lib\server\Matchmaking.cs ..\lib\server\Messaging.cs ..\lib\server\Notification.cs ..\lib\server\Presence.cs ..\lib\server\Signature.cs ..\lib\server\Stats.cs ..\lib\server\Storage.cs ..\lib\server\UACS.cs ..\lib\server\UserSettings.cs ..\lib\util\AccountsUtil.cs ..\lib\util\BillingUtil.cs ..\lib\util\PresenceUtil.cs objd\i386\_generated.cs
100> 5>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) on node 1 (BuildCompiled target(s)).
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\STFGuiPluginFunctional.csproj" (20) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 13>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\LiveLib.dll" to "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll".
100> copy /y "objd\i386\LiveLib.dll" "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll"
100> LiveLib -> j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll
100> Copying file from "objd\i386\LiveLib.pdb" to "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb".
100> copy /y "objd\i386\LiveLib.pdb" "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb"
100> 13>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.csproj" (BuildCompiled target(s)).
100> 9>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\DDTCore.dll /target:library /warnaserror+ DDTAction.cs DDTActionAttribute.cs DDTActionCollection.cs DDTActionInfo.cs DDTArrayReference.cs DDTBreak.cs DDTBuiltInActionCollection.cs DDTConsoleLogger.cs DDTConstraints.cs DDTContinuation.cs DDTContinuationCallback.cs DDTContinuationCanary.cs DDTContinuationContext.cs DDTContinuationContextGuard.cs DDTContinuationException.cs DDTContinuationResult.cs DDTContinue.cs DDTCross.cs DDTDocAttribute.cs DDTEnvironment.cs DDTEnvironmentAction.cs DDTException.cs DDTExecuteActionContext.cs DDTExpressionList.cs DDTExtendedException.cs DDTFieldReference.cs DDTGlobal.cs DDTHelper.cs DDTModel.cs DDTModelAction.cs DDTModelActionCollection.cs DDTObjectMethod.cs DDTParamAttribute.cs DDTParamList.cs DDTPropertyReference.cs DDTTestCaseActionCollection.cs DDTTestCaseInfo.cs DDTTestSuite.cs DDTVariableReference.cs DDTXmlAction.cs DDTXmlAttribute.cs DDTXmlDocument.cs DDTXmlElement.cs DDTXmlMacro.cs DDTXmlText.cs IDDTCrossFilter.cs IDDTLogger.cs IDDTReference.cs DDTExpressionParser\DDTExpression.cs DDTExpressionParser\DDTExpressionParser.cs DDTExpressionParser\IParserActionTable.cs DDTExpressionParser\IToken.cs DDTExpressionParser\ITokenizer.cs DDTExpressionParser\ParserAction.cs DDTExpressionParser\ParserActions.cs DDTExpressionParser\Pattern.cs DDTExpressionParser\ReductionRule.cs DDTExpressionParser\ShiftReduceParser.cs DDTExpressionParser\SymbolBase.cs DDTExpressionParser\TextLocation.cs DDTExpressionParser\Tokenizer.cs objd\i386\_generated.cs
100> 15>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPlugins.dll /target:library /warnaserror+ GuiCommon.cs Plugins.cs StfTextBox.cs StfMRUList.cs StfInputBox.cs objd\i386\_generated.cs
100> CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPlugins.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll".
100> copy /y "objd\i386\STFGuiPlugins.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll"
100> STFGuiPlugins -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll
100> Copying file from "objd\i386\STFGuiPlugins.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.pdb".
100> copy /y "objd\i386\STFGuiPlugins.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.pdb"
100> 15>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\STFGuiPlugins.csproj" (BuildCompiled target(s)).
100> 20>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginFunctional.dll /target:library /warnaserror+ Functional.cs FuncTree.cs objd\i386\_generated.cs
100> 16>CoreResGen:
100> "C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\Resgen.exe" /useSourcePath /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /r:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /r:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /compile Preferences.resx,objd\i386\STFGui.Preferences.resources
100> Processing resource file "Preferences.resx" into "objd\i386\STFGui.Preferences.resources".
100> 7>_CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblConfig.dll".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblConfig.dll"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblCore.dll".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblCore.dll"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblSecurity.dll".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblSecurity.dll"
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblConfig.pdb".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblConfig.pdb"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblCore.pdb".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblCore.pdb"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" to "j:\xonline_main\target\debug\i386\LiveLibInternal\XblSecurity.pdb".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" "j:\xonline_main\target\debug\i386\LiveLibInternal\XblSecurity.pdb"
100> 16>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /platform:x86 /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGui.exe /resource:objd\i386\STFGui.Preferences.resources /target:winexe /warnaserror+ Gui.cs Main.cs PluginHandler.cs Preferences.cs Preferences.Designer.cs objd\i386\_generated.cs
100> 7>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\LiveLibInternal.dll" to "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll".
100> copy /y "objd\i386\LiveLibInternal.dll" "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll"
100> LiveLibInternal -> j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll
100> Copying file from "objd\i386\LiveLibInternal.pdb" to "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.pdb".
100> copy /y "objd\i386\LiveLibInternal.pdb" "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.pdb"
100> 9>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDTCore.dll" to "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll".
100> copy /y "objd\i386\DDTCore.dll" "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll"
100> DDTCore -> j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll
100> Copying file from "objd\i386\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb".
100> copy /y "objd\i386\DDTCore.pdb" "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb"
100> 20>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginFunctional.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.dll".
100> copy /y "objd\i386\STFGuiPluginFunctional.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.dll"
100> 16>_CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll" to "j:\xonline_main\target\debug\i386\STFGui\STFGuiPlugins.dll".
100> copy /y "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll" "j:\xonline_main\target\debug\i386\STFGui\STFGuiPlugins.dll"
100> Copying file from "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.pdb" to "j:\xonline_main\target\debug\i386\STFGui\STFGuiPlugins.pdb".
100> copy /y "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.pdb" "j:\xonline_main\target\debug\i386\STFGui\STFGuiPlugins.pdb"
100> 20>CopyFilesToOutputDirectory:
100> STFGuiPluginFunctional -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.dll
100> 16>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGui.exe" to "j:\xonline_main\target\debug\i386\STFGui\STFGui.exe".
100> copy /y "objd\i386\STFGui.exe" "j:\xonline_main\target\debug\i386\STFGui\STFGui.exe"
100> 20>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginFunctional.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.pdb".
100> copy /y "objd\i386\STFGuiPluginFunctional.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.pdb"
100> 16>CopyFilesToOutputDirectory:
100> STFGui -> j:\xonline_main\target\debug\i386\STFGui\STFGui.exe
100> Copying file from "objd\i386\STFGui.pdb" to "j:\xonline_main\target\debug\i386\STFGui\STFGui.pdb".
100> copy /y "objd\i386\STFGui.pdb" "j:\xonline_main\target\debug\i386\STFGui\STFGui.pdb"
100> 20>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\STFGuiPluginFunctional.csproj" (BuildCompiled target(s)).
100> 16>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STFGui.csproj" (BuildCompiled target(s)).
100> 8>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\LiveLibUnitTests.dll /target:library /warnaserror+ BugRegressionTests.cs FDTransactionTests.cs LFMTests.cs UnitTests.cs DataTests\DataObjectTests.cs DataTests\DataTests.cs Samples\AccountsUtil.cs Samples\Avatars.cs Samples\CreateLiveAccounts.cs Samples\CreateRealUsers.cs Samples\Parties.cs Samples\SamplesBase.cs ServerTests\BillingTests.cs ServerTests\CatalogTests.cs ServerTests\CustTests.cs ServerTests\ServerTests.cs ServerTests\StorageTests.cs ServerTests\UACSTests.cs UtilTests\AccountsUtilTests.cs UtilTests\PresenceUtilTests.cs UtilTests\UtilTests.cs objd\i386\_generated.cs
100> 7>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\LiveLibInternal.csproj" (BuildCompiled target(s)).
100> 8>_CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll" to "j:\xonline_main\target\debug\i386\UnitTests\LiveLib.dll".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll" "j:\xonline_main\target\debug\i386\UnitTests\LiveLib.dll"
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "j:\xonline_main\target\debug\i386\UnitTests\XblConfig.dll".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "j:\xonline_main\target\debug\i386\UnitTests\XblConfig.dll"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "j:\xonline_main\target\debug\i386\UnitTests\XblCore.dll".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "j:\xonline_main\target\debug\i386\UnitTests\XblCore.dll"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" to "j:\xonline_main\target\debug\i386\UnitTests\XblSecurity.dll".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" "j:\xonline_main\target\debug\i386\UnitTests\XblSecurity.dll"
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\XblConfig.pdb".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" "j:\xonline_main\target\debug\i386\UnitTests\XblConfig.pdb"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\XblCore.pdb".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" "j:\xonline_main\target\debug\i386\UnitTests\XblCore.pdb"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\XblSecurity.pdb".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" "j:\xonline_main\target\debug\i386\UnitTests\XblSecurity.pdb"
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\LiveLib.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb" "j:\xonline_main\target\debug\i386\UnitTests\LiveLib.pdb"
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\STFGuiPluginStress.csproj" (21) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\STFGuiPluginEnvironment.csproj" (22) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\STFGuiPluginRegDB.csproj" (23) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\TestDB\STFGuiPluginTestDB.csproj" (24) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\STFGuiPluginWireFuzz.csproj" (25) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 17>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (17) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\STFGuiPluginMonitor.csproj" (26) on node 1 (BuildCompiled target(s)).
100> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
100> 9>BinplaceCompiled:
100> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\DDTCore.dll
100> binplace J:\XONLINE_MAIN\private\test\DDT\DDTCore\objd\i386\DDTCore.dll
100> binplace J:\XONLINE_MAIN\private\test\DDT\DDTCore\objd\i386\DDTCore.dll
100> 9>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDTCore\DDTCore.csproj" (BuildCompiled target(s)).
100> 8>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\LiveLibUnitTests.dll" to "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll".
100> copy /y "objd\i386\LiveLibUnitTests.dll" "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll"
100> UnitTests -> j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll
100> Copying file from "objd\i386\LiveLibUnitTests.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.pdb".
100> copy /y "objd\i386\LiveLibUnitTests.pdb" "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.pdb"
100> 4>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\LiveInternalTest.dll /target:library /warnaserror+ ConfigController.cs LiveTestNode.cs SupportedClientsAttribute.cs util\UserCreator.cs util\Utils.cs Providers\ClientProvider.cs Providers\Xbox360Provider.cs Providers\ZuneProvider.cs objd\i386\_generated.cs
100> _CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll" to "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveLibInternal.dll".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.dll" "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveLibInternal.dll"
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblConfig.dll".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblConfig.dll"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblCore.dll".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblCore.dll"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblSecurity.dll".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblSecurity.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.pdb" to "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveLibInternal.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLibInternal\LiveLibInternal.pdb" "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveLibInternal.pdb"
100> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblConfig.pdb".
100> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblConfig.pdb"
100> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblCore.pdb".
100> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblCore.pdb"
100> Copying file from "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" to "j:\xonline_main\target\debug\i386\LiveInternalTest\XblSecurity.pdb".
100> copy /y "j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.pdb" "j:\xonline_main\target\debug\i386\LiveInternalTest\XblSecurity.pdb"
100> 8>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\unittests\UnitTests.csproj" (BuildCompiled target(s)).
100> 4>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\LiveInternalTest.dll" to "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveInternalTest.dll".
100> copy /y "objd\i386\LiveInternalTest.dll" "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveInternalTest.dll"
100> LiveInternalTest -> j:\xonline_main\target\debug\i386\LiveInternalTest\LiveInternalTest.dll
100> 11>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\DDT.exe /target:exe /warnaserror+ DDT.cs objd\i386\_generated.cs
100> _CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" to "j:\xonline_main\target\debug\i386\DDT\DDTCore.dll".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" "j:\xonline_main\target\debug\i386\DDT\DDTCore.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\DDT\DDTCore.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" "j:\xonline_main\target\debug\i386\DDT\DDTCore.pdb"
100> 4>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\LiveInternalTest.pdb" to "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveInternalTest.pdb".
100> copy /y "objd\i386\LiveInternalTest.pdb" "j:\xonline_main\target\debug\i386\LiveInternalTest\LiveInternalTest.pdb"
100> 21>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\public\ext\WTT\Microsoft.Wtt.Log.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginStress.dll /target:library /warnaserror+ Stress.cs StressColumnChooser.cs StressColumnChooser.Designer.cs StressControl.cs StressControl.Designer.cs objd\i386\_generated.cs
100> 22>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginEnvironment.dll /target:library /warnaserror+ Environment.cs ServerBrowser.cs SettingBrowser.cs UODB.cs objd\i386\_generated.cs
100> 10>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\TestDDTActions.dll /target:library /warnaserror+ TestDDTActions.cs objd\i386\_generated.cs
100> _CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" to "j:\xonline_main\target\debug\i386\TestDDTActions\DDTCore.dll".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" "j:\xonline_main\target\debug\i386\TestDDTActions\DDTCore.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\TestDDTActions\DDTCore.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" "j:\xonline_main\target\debug\i386\TestDDTActions\DDTCore.pdb"
100> 12>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\DDT.StfTests.dll /target:library /warnaserror+ DDTStfLogger.cs DDTTestBaseGroup.cs objd\i386\_generated.cs
100> _CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" to "j:\xonline_main\target\debug\i386\DDT.StfTests\DDTCore.dll".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" "j:\xonline_main\target\debug\i386\DDT.StfTests\DDTCore.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\DDT.StfTests\DDTCore.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" "j:\xonline_main\target\debug\i386\DDT.StfTests\DDTCore.pdb"
100> 11>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDT.exe" to "j:\xonline_main\target\debug\i386\DDT\DDT.exe".
100> copy /y "objd\i386\DDT.exe" "j:\xonline_main\target\debug\i386\DDT\DDT.exe"
100> DDT -> j:\xonline_main\target\debug\i386\DDT\DDT.exe
100> 4>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\LiveInternalTest.csproj" (BuildCompiled target(s)).
100> 10>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\TestDDTActions.dll" to "j:\xonline_main\target\debug\i386\TestDDTActions\TestDDTActions.dll".
100> copy /y "objd\i386\TestDDTActions.dll" "j:\xonline_main\target\debug\i386\TestDDTActions\TestDDTActions.dll"
100> TestDDTActions -> j:\xonline_main\target\debug\i386\TestDDTActions\TestDDTActions.dll
100> 11>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDT.pdb" to "j:\xonline_main\target\debug\i386\DDT\DDT.pdb".
100> copy /y "objd\i386\DDT.pdb" "j:\xonline_main\target\debug\i386\DDT\DDT.pdb"
100> 10>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\TestDDTActions.pdb" to "j:\xonline_main\target\debug\i386\TestDDTActions\TestDDTActions.pdb".
100> copy /y "objd\i386\TestDDTActions.pdb" "j:\xonline_main\target\debug\i386\TestDDTActions\TestDDTActions.pdb"
100> 12>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDT.StfTests.dll" to "j:\xonline_main\target\debug\i386\DDT.StfTests\DDT.StfTests.dll".
100> copy /y "objd\i386\DDT.StfTests.dll" "j:\xonline_main\target\debug\i386\DDT.StfTests\DDT.StfTests.dll"
100> DDT.StfTests -> j:\xonline_main\target\debug\i386\DDT.StfTests\DDT.StfTests.dll
100> 11>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDT\DDT.csproj" (BuildCompiled target(s)).
100> 12>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDT.StfTests.pdb" to "j:\xonline_main\target\debug\i386\DDT.StfTests\DDT.StfTests.pdb".
100> copy /y "objd\i386\DDT.StfTests.pdb" "j:\xonline_main\target\debug\i386\DDT.StfTests\DDT.StfTests.pdb"
100> 10>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\TestDDTActions.csproj" (BuildCompiled target(s)).
100> 12>BinplaceCompiled:
100> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\DDT.StfTests.dll
100> binplace J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\objd\i386\DDT.StfTests.dll
100> binplace J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\objd\i386\DDT.StfTests.dll
100> 12>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\DDT.StfTests.csproj" (BuildCompiled target(s)).
100> 25>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginWireFuzz.dll /target:library /warnaserror+ WireDataFuzzForm.cs WireDataFuzzForm.Designer.cs WireFuzzPlugin.cs objd\i386\_generated.cs
100> 23>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginRegDB.dll /target:library /warnaserror+ RegDB.cs RegTree.cs objd\i386\_generated.cs
100> 24>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginFunctional.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginTestDB.dll /target:library /warnaserror+ TestDBPlugin.cs Tree.cs objd\i386\_generated.cs
100> 21>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginStress.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.dll".
100> copy /y "objd\i386\STFGuiPluginStress.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.dll"
100> 22>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginEnvironment.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginEnvironment.dll".
100> copy /y "objd\i386\STFGuiPluginEnvironment.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginEnvironment.dll"
100> 25>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginWireFuzz.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginWireFuzz.dll".
100> copy /y "objd\i386\STFGuiPluginWireFuzz.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginWireFuzz.dll"
100> 21>CopyFilesToOutputDirectory:
100> STFGuiPluginStress -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.dll
100> 22>CopyFilesToOutputDirectory:
100> STFGuiPluginEnvironment -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginEnvironment.dll
100> 25>CopyFilesToOutputDirectory:
100> STFGuiPluginWireFuzz -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginWireFuzz.dll
100> 18>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\DDTUnitTests.exe /target:exe /warnaserror+ Program.cs objd\i386\_generated.cs
100> _CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" to "j:\xonline_main\target\debug\i386\UnitTests\DDTCore.dll".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" "j:\xonline_main\target\debug\i386\UnitTests\DDTCore.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\DDTCore.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" "j:\xonline_main\target\debug\i386\UnitTests\DDTCore.pdb"
100> 19>CoreCompile:
100> C:\Windows\Microsoft.Net\Framework\v2.0.50727\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\DDTHelp.exe /target:exe /warnaserror+ DDTHelp.cs objd\i386\_generated.cs
100> 21>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginStress.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.pdb".
100> copy /y "objd\i386\STFGuiPluginStress.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.pdb"
100> 22>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginEnvironment.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginEnvironment.pdb".
100> copy /y "objd\i386\STFGuiPluginEnvironment.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginEnvironment.pdb"
100> 25>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginWireFuzz.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginWireFuzz.pdb".
100> copy /y "objd\i386\STFGuiPluginWireFuzz.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginWireFuzz.pdb"
100> 19>_CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" to "j:\xonline_main\target\debug\i386\DDTHelp\DDTCore.dll".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.dll" "j:\xonline_main\target\debug\i386\DDTHelp\DDTCore.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" to "j:\xonline_main\target\debug\i386\DDTHelp\DDTCore.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\DDTCore\DDTCore.pdb" "j:\xonline_main\target\debug\i386\DDTHelp\DDTCore.pdb"
100> 23>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginRegDB.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginRegDB.dll".
100> copy /y "objd\i386\STFGuiPluginRegDB.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginRegDB.dll"
100> 24>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginTestDB.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginTestDB.dll".
100> copy /y "objd\i386\STFGuiPluginTestDB.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginTestDB.dll"
100> 23>CopyFilesToOutputDirectory:
100> STFGuiPluginRegDB -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginRegDB.dll
100> 24>CopyFilesToOutputDirectory:
100> STFGuiPluginTestDB -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginTestDB.dll
100> 23>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginRegDB.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginRegDB.pdb".
100> copy /y "objd\i386\STFGuiPluginRegDB.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginRegDB.pdb"
100> 24>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginTestDB.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginTestDB.pdb".
100> copy /y "objd\i386\STFGuiPluginTestDB.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginTestDB.pdb"
100> 18>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDTUnitTests.exe" to "j:\xonline_main\target\debug\i386\UnitTests\DDTUnitTests.exe".
100> copy /y "objd\i386\DDTUnitTests.exe" "j:\xonline_main\target\debug\i386\UnitTests\DDTUnitTests.exe"
100> 19>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDTHelp.exe" to "j:\xonline_main\target\debug\i386\DDTHelp\DDTHelp.exe".
100> copy /y "objd\i386\DDTHelp.exe" "j:\xonline_main\target\debug\i386\DDTHelp\DDTHelp.exe"
100> 21>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\STFGuiPluginStress.csproj" (BuildCompiled target(s)).
100> 22>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\STFGuiPluginEnvironment.csproj" (BuildCompiled target(s)).
100> 25>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\STFGuiPluginWireFuzz.csproj" (BuildCompiled target(s)).
100> 18>CopyFilesToOutputDirectory:
100> UnitTests -> j:\xonline_main\target\debug\i386\UnitTests\DDTUnitTests.exe
100> 19>CopyFilesToOutputDirectory:
100> DDTHelp -> j:\xonline_main\target\debug\i386\DDTHelp\DDTHelp.exe
100> 18>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDTUnitTests.pdb" to "j:\xonline_main\target\debug\i386\UnitTests\DDTUnitTests.pdb".
100> copy /y "objd\i386\DDTUnitTests.pdb" "j:\xonline_main\target\debug\i386\UnitTests\DDTUnitTests.pdb"
100> 14>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll /reference:j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\MinRunner.exe /target:exe /warnaserror+ MinRunner.cs UnitTestsProxy.cs objd\i386\_generated.cs
100> 19>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\DDTHelp.pdb" to "j:\xonline_main\target\debug\i386\DDTHelp\DDTHelp.pdb".
100> copy /y "objd\i386\DDTHelp.pdb" "j:\xonline_main\target\debug\i386\DDTHelp\DDTHelp.pdb"
100> 23>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\STFGuiPluginRegDB.csproj" (BuildCompiled target(s)).
100> 24>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\TestDB\STFGuiPluginTestDB.csproj" (BuildCompiled target(s)).
100> 14>_CopyFilesMarkedCopyLocal:
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll" to "j:\xonline_main\target\debug\i386\MinRunner\LiveLib.dll".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.dll" "j:\xonline_main\target\debug\i386\MinRunner\LiveLib.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll" to "j:\xonline_main\target\debug\i386\MinRunner\LiveLibUnitTests.dll".
100> copy /y "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.dll" "j:\xonline_main\target\debug\i386\MinRunner\LiveLibUnitTests.dll"
100> Copying file from "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.pdb" to "j:\xonline_main\target\debug\i386\MinRunner\LiveLibUnitTests.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\UnitTests\LiveLibUnitTests.pdb" "j:\xonline_main\target\debug\i386\MinRunner\LiveLibUnitTests.pdb"
100> Copying file from "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb" to "j:\xonline_main\target\debug\i386\MinRunner\LiveLib.pdb".
100> copy /y "j:\xonline_main\target\debug\i386\LiveLib\LiveLib.pdb" "j:\xonline_main\target\debug\i386\MinRunner\LiveLib.pdb"
100> CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\MinRunner.exe" to "j:\xonline_main\target\debug\i386\MinRunner\MinRunner.exe".
100> copy /y "objd\i386\MinRunner.exe" "j:\xonline_main\target\debug\i386\MinRunner\MinRunner.exe"
100> MinRunner -> j:\xonline_main\target\debug\i386\MinRunner\MinRunner.exe
100> Copying file from "objd\i386\MinRunner.pdb" to "j:\xonline_main\target\debug\i386\MinRunner\MinRunner.pdb".
100> copy /y "objd\i386\MinRunner.pdb" "j:\xonline_main\target\debug\i386\MinRunner\MinRunner.pdb"
100> 18>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\UnitTests\UnitTests.csproj" (BuildCompiled target(s)).
100> 19>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDTHelp\DDTHelp.csproj" (BuildCompiled target(s)).
100> 6>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (BuildCompiled target(s)).
100> 26>CoreCompile:
100> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPlugins.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginStress.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /debug+ /debug:full /filealign:512 /nologo /optimize- /out:objd\i386\STFGuiPluginMonitor.dll /target:library /warnaserror+ Monitor.cs objd\i386\_generated.cs
100> 14>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\minrunner\MinRunner.csproj" (BuildCompiled target(s)).
100> 3>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (BuildCompiled target(s)).
100> 2>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (BuildCompiled target(s)).
100> 26>CopyFilesToOutputDirectory:
100> Copying file from "objd\i386\STFGuiPluginMonitor.dll" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginMonitor.dll".
100> copy /y "objd\i386\STFGuiPluginMonitor.dll" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginMonitor.dll"
100> STFGuiPluginMonitor -> j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginMonitor.dll
100> Copying file from "objd\i386\STFGuiPluginMonitor.pdb" to "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginMonitor.pdb".
100> copy /y "objd\i386\STFGuiPluginMonitor.pdb" "j:\xonline_main\private\test\StfTests\libd\i386\STFGuiPluginMonitor.pdb"
100> 26>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\STFGuiPluginMonitor.csproj" (BuildCompiled target(s)).
100> 17>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (BuildCompiled target(s)).
100> 1>Done Building Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (BuildCompiled target(s)).
100> 5>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (BuildCompiled target(s)).
100>Build succeeded.
100>Time Elapsed 00:00:06.33
101>Executing Pass1 MSBuild Tasks j:\xonline_main\private\common\test\fastfail *************
101>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\fastfail
102>Compiling j:\xonline_main\private\common\test\billing\billing *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\billing\billing'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\billing\billing
102>j:\xonline_main\private\common\test\billing\billing: TARGETPATH is J:\XONLINE_MAIN\target\debug
102>j:\xonline_main\private\common\test\billing\billing building test code in dev tree
102>j:\xonline_main\private\common\test\billing\billing: TARGETPATH is J:\XONLINE_MAIN\target\debug
102>j:\xonline_main\private\common\test\billing\billing building test code in dev tree
102>LCG: BUILD_LCE_FILE: 0
101>Running MsBuild v3.5
102>SOURCE_ASMMETA (_billing_4.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\billing\billing\objd\i386\_billing_4.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\billing\billing\objd\i386\_billing_4.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_billing_4.) 
102>'j:\xonline_main\private\common\test\billing\billing\objd\i386\_asmid.inc' is up-to-date
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (_billing_4.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\billing\billing\objd\i386\_billing_4.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\billing\billing\objd\i386\_billing_4.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (J:\XONLINE_MAIN\target\debug\i386\_billing_4.) 
102>Compiling j:\xonline_main\private\common\test\billing\dll *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\billing\dll'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\billing\dll
102>j:\xonline_main\private\common\test\billing\dll: TARGETPATH is obj
101>Build started 10/27/2012 7:30:53 PM.
102>j:\xonline_main\private\common\test\billing\dll: TARGETPATH is obj
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\billing\dll\objd\i386 TestBilling J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module TestBilling not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES=..\billing\AddPayPal.cs  ..\billing\BdkInterface.cs  ..\billing\DBHelper.cs  ..\billing\EmulatorClient.cs  ..\billing\StressHelper.cs  ..\billing\UserHelper.cs  ..\billing\WebReference.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (TestBilling.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\billing\dll\objd\i386\TestBilling.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\billing\dll\objd\i386\TestBilling.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\TestBilling.dll) 
102>'j:\xonline_main\private\common\test\billing\dll\objd\i386\_asmid.inc' is up-to-date
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\billing\dll\objd\i386 TestBilling J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module TestBilling not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES=..\billing\AddPayPal.cs  ..\billing\BdkInterface.cs  ..\billing\DBHelper.cs  ..\billing\EmulatorClient.cs  ..\billing\StressHelper.cs  ..\billing\UserHelper.cs  ..\billing\WebReference.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (TestBilling.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\billing\dll\objd\i386\TestBilling.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\billing\dll\objd\i386\TestBilling.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\TestBilling.dll) 
102> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> set createfile=objd\i386\_generated.cs.temp
102> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\TestBilling.dll   
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
102> /target:library 
102> /baseaddress:0x400000 
102> /debug:full 
102> /define:DEBUG 
102> /warnaserror+ 
102> /unsafe- 
102> /define:TRACE 
102> /platform:anycpu 
102> /nowarn:1699 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\System.Runtime.Serialization.dll 
102> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
102> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
102> /r:J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\objd\i386\LiveLibInternal.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.Framework.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.Controller.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.Bdk.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.Dmp.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.MusicNet.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.Aggregator.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.MultiRating.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.NickNameListener.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.MSNRR.SingleRating.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.ppsaProfile.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.ppsaCredential.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.ups.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.abch.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.FinBus.dll 
102> /r:J:\XONLINE_MAIN\private\test\stftests\emulators\emulator\bin\Emulators.TransactionService.dll 
102> ..\billing\AddPayPal.cs 
102> ..\billing\BdkInterface.cs 
102> ..\billing\DBHelper.cs 
102> ..\billing\EmulatorClient.cs 
102> ..\billing\StressHelper.cs 
102> ..\billing\UserHelper.cs 
102> ..\billing\WebReference.cs 
102> objd\i386\_generated.cs
101> 1>Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" on node 0 (BuildCompiled target(s)).
101> 1>Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" (1) is building "j:\xonline_main\private\common\test\fastfail\unit\unit.csproj" (2) on node 1 (BuildCompiled target(s)).
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
102>Build_Status Postbuild Preplace - objd\i386\TestBilling.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\TestBilling.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\TestBilling.dll
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\TestBilling.dll
102>binplace j:\xonline_main\private\common\test\billing\dll\objd\i386\TestBilling.dll
101> 2>CoreCompile:
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Data.DataSetExtensions.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\XblFastFailUnit.dll /target:library /warnaserror+ BasicTest.cs Groups.cs Null.cs Utilities.cs policy\Unit.Bounded.cs policy\Unit.Delegated.cs policy\Unit.RateBounded.cs policy\Unit.ThreadBounded.cs stats\Unit.AggregateFeature.cs stats\Unit.Feature.cs stats\Unit.Statistics.cs end2end\End2End.cs end2end\Unit.ChickenSwitch.cs end2end\Unit.Tracking.cs gate\Unit.Named.cs proportion\Unit.Proportion.cs objd\i386\_generated.cs
101> _CopyFilesMarkedCopyLocal:
101> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "j:\xonline_main\target\debug\i386\unit\XblConfig.dll".
101> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "j:\xonline_main\target\debug\i386\unit\XblConfig.dll"
101> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "j:\xonline_main\target\debug\i386\unit\XblCore.dll".
101> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "j:\xonline_main\target\debug\i386\unit\XblCore.dll"
101> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" to "j:\xonline_main\target\debug\i386\unit\XblConfig.pdb".
101> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.pdb" "j:\xonline_main\target\debug\i386\unit\XblConfig.pdb"
101> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" to "j:\xonline_main\target\debug\i386\unit\XblCore.pdb".
101> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.pdb" "j:\xonline_main\target\debug\i386\unit\XblCore.pdb"
101> CopyFilesToOutputDirectory:
101> Copying file from "objd\i386\XblFastFailUnit.dll" to "j:\xonline_main\target\debug\i386\unit\XblFastFailUnit.dll".
101> copy /y "objd\i386\XblFastFailUnit.dll" "j:\xonline_main\target\debug\i386\unit\XblFastFailUnit.dll"
101> unit -> j:\xonline_main\target\debug\i386\unit\XblFastFailUnit.dll
101> Copying file from "objd\i386\XblFastFailUnit.pdb" to "j:\xonline_main\target\debug\i386\unit\XblFastFailUnit.pdb".
101> copy /y "objd\i386\XblFastFailUnit.pdb" "j:\xonline_main\target\debug\i386\unit\XblFastFailUnit.pdb"
101> 1>Done Building Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" (BuildCompiled target(s)).
101> 2>BinplaceCompiled:
101> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\\XblFastFailUnit.dll
101> binplace j:\xonline_main\private\common\test\fastfail\unit\objd\i386\XblFastFailUnit.dll
101> 2>Done Building Project "j:\xonline_main\private\common\test\fastfail\unit\unit.csproj" (BuildCompiled target(s)).
102>Build_Status Postbuild Postplace - objd\i386\TestBilling.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\TestBilling.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\TestBilling.dll
101>Build succeeded.
101>Time Elapsed 00:00:00.99
102> if not exist objd\i386\TestBilling.dll.mui (  if not exist objd\i386\TestBilling.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF TestBilling.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live TestBilling.dll  )  )
101>Compiling j:\xonline_main\private\common\test\connectionsetting *************
101>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\connectionsetting'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\connectionsetting
102>Build_Status LN_MUI_STS: LGNSTS_MUIOFF TestBilling.dll 
102>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live TestBilling.dll 
101>j:\xonline_main\private\common\test\connectionsetting: TARGETPATH is objd
101>j:\xonline_main\private\common\test\connectionsetting building test code in dev tree
102>j:\xonline_main\private\common\test\billing\dll BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>j:\xonline_main\private\common\test\connectionsetting: TARGETPATH is objd
101>j:\xonline_main\private\common\test\connectionsetting building test code in dev tree
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\connectionsetting\objd\i386 xonline.common.test.ConnectionSettings J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>genbasemac: module xonline.common.test.ConnectionSettings not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=
101>_MANAGED_SOURCES= ConnectionSettingsTest.cs   ConnectionSettingsPerf.cs
101>LCG: BUILD_LCE_FILE: 0
102>Build_Status Binplace - 3 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Compiling j:\xonline_main\private\common\test\diagnostics *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\diagnostics'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\diagnostics
101>SOURCE_ASMMETA (xonline.common.test.ConnectionSettings.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\connectionsetting\objd\i386\xonline.common.test.ConnectionSettings.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\connectionsetting\objd\i386\xonline.common.test.ConnectionSettings.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.ConnectionSettings.dll) 
101>'j:\xonline_main\private\common\test\connectionsetting\objd\i386\_asmid.inc' is up-to-date
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\connectionsetting\objd\i386 xonline.common.test.ConnectionSettings J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>j:\xonline_main\private\common\test\diagnostics: TARGETPATH is obj
102>j:\xonline_main\private\common\test\diagnostics building test code in dev tree
101>genbasemac: module xonline.common.test.ConnectionSettings not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=
101>_MANAGED_SOURCES= ConnectionSettingsTest.cs   ConnectionSettingsPerf.cs
101>LCG: BUILD_LCE_FILE: 0
102>j:\xonline_main\private\common\test\diagnostics: TARGETPATH is obj
102>j:\xonline_main\private\common\test\diagnostics building test code in dev tree
101>SOURCE_ASMMETA (xonline.common.test.ConnectionSettings.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\connectionsetting\objd\i386\xonline.common.test.ConnectionSettings.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\connectionsetting\objd\i386\xonline.common.test.ConnectionSettings.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.ConnectionSettings.dll) 
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\diagnostics\objd\i386 diagtest J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102>genbasemac: module diagtest not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101> set createfile=objd\i386\_generated.cs.temp
101> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES= AssertTest.cs
102>LCG: BUILD_LCE_FILE: 0
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\xonline.common.test.ConnectionSettings.dll   
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
101> /target:library 
101> /baseaddress:0x400000 
101> /debug:full 
101> /define:DEBUG 
101> /warnaserror+ 
101> /unsafe- 
101> /define:TRACE 
101> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
101> /platform:anycpu 
101> /nowarn:1699 
101> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
101> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
101> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
101> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
101> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
101> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
101> ConnectionSettingsTest.cs 
101> ConnectionSettingsPerf.cs 
101> objd\i386\_generated.cs
102>SOURCE_ASMMETA (diagtest.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\diagnostics\objd\i386\diagtest.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\diagnostics\objd\i386\diagtest.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\diagtest.dll) 
102>'j:\xonline_main\private\common\test\diagnostics\objd\i386\_asmid.inc' is up-to-date
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\diagnostics\objd\i386 diagtest J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module diagtest not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES= AssertTest.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (diagtest.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\diagnostics\objd\i386\diagtest.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\diagnostics\objd\i386\diagtest.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\diagtest.dll) 
102> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> set createfile=objd\i386\_generated.cs.temp
102> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
101>Build_Status Postbuild Preplace - objd\i386\xonline.common.test.ConnectionSettings.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\xonline.common.test.ConnectionSettings.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.ConnectionSettings.dll
101>Build_Status Binplace - 1 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.ConnectionSettings.dll
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\diagtest.dll   
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
102> /target:library 
102> /baseaddress:0x400000 
102> /debug:full 
102> /define:DEBUG 
102> /warnaserror+ 
102> /unsafe- 
102> /define:TRACE 
102> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
102> /platform:anycpu 
102> /nowarn:1699 
102> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
102> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
102> AssertTest.cs 
102> objd\i386\_generated.cs
101>binplace j:\xonline_main\private\common\test\connectionsetting\objd\i386\xonline.common.test.ConnectionSettings.dll
101>Build_Status Postbuild Postplace - objd\i386\xonline.common.test.ConnectionSettings.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\xonline.common.test.ConnectionSettings.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.ConnectionSettings.dll
101> if not exist objd\i386\xonline.common.test.ConnectionSettings.dll.mui (  if not exist objd\i386\xonline.common.test.ConnectionSettings.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.ConnectionSettings.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.ConnectionSettings.dll  )  )
101>Build_Status LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.ConnectionSettings.dll 
101>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.ConnectionSettings.dll 
101>j:\xonline_main\private\common\test\connectionsetting BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - objd\i386\diagtest.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\diagtest.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\diagtest.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\diagtest.dll
102>binplace j:\xonline_main\private\common\test\diagnostics\objd\i386\diagtest.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - objd\i386\diagtest.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\diagtest.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\diagtest.dll
101>Build_Status Binplace - 3 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102> if not exist objd\i386\diagtest.dll.mui (  if not exist objd\i386\diagtest.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF diagtest.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live diagtest.dll  )  )
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status LN_MUI_STS: LGNSTS_MUIOFF diagtest.dll 
102>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live diagtest.dll 
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>j:\xonline_main\private\common\test\diagnostics BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Compiling j:\xonline_main\private\common\test\xmlsequencer *************
101>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\xmlsequencer'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\xmlsequencer
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>j:\xonline_main\private\common\test\xmlsequencer: TARGETPATH is obj
101>j:\xonline_main\private\common\test\xmlsequencer building test code in dev tree
101>j:\xonline_main\private\common\test\xmlsequencer: TARGETPATH is obj
101>j:\xonline_main\private\common\test\xmlsequencer building test code in dev tree
102>Compiling j:\xonline_main\private\common\test\xlastutil *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\xlastutil'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\xlastutil
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xmlsequencer\objd\i386 xonline.common.test.xmlsequencer J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>genbasemac: module xonline.common.test.xmlsequencer not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=J:\XONLINE_MAIN\private\common\xmlsequencer\ConfigurationTransform.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\ElementTypeMapping.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\InMemoryMessageLog.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\RootStepContainer.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\Step.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\StepContainer.cs
101>_MANAGED_SOURCES= ConfigurationTransformDVT.cs  ElementTypeMappingDVT.cs  RootStepContainerDVT.cs  StepContainerDVT.cs  StepDVT.cs  XmlSequencerSuite.cs
101>_MANAGED_SOURCES= ConfigurationTransformDVT.cs  ElementTypeMappingDVT.cs  RootStepContainerDVT.cs  StepContainerDVT.cs  StepDVT.cs  XmlSequencerSuite.cs J:\XONLINE_MAIN\private\common\xmlsequencer\ConfigurationTransform.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\ElementTypeMapping.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\InMemoryMessageLog.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\RootStepContainer.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\Step.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\StepContainer.cs
101>LCG: BUILD_LCE_FILE: 0
102>j:\xonline_main\private\common\test\xlastutil: TARGETPATH is obj
102>j:\xonline_main\private\common\test\xlastutil building test code in dev tree
102>j:\xonline_main\private\common\test\xlastutil: TARGETPATH is obj
102>j:\xonline_main\private\common\test\xlastutil building test code in dev tree
101>SOURCE_ASMMETA (xonline.common.test.xmlsequencer.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\xmlsequencer\objd\i386\xonline.common.test.xmlsequencer.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xmlsequencer\objd\i386\xonline.common.test.xmlsequencer.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.xmlsequencer.dll) 
101>'j:\xonline_main\private\common\test\xmlsequencer\objd\i386\_asmid.inc' is up-to-date
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xlastutil\objd\i386 xonline.common.test.xlastutil J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xmlsequencer\objd\i386 xonline.common.test.xmlsequencer J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module xonline.common.test.xlastutil not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>genbasemac: module xonline.common.test.xmlsequencer not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=J:\XONLINE_MAIN\private\common\xmlsequencer\ConfigurationTransform.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\ElementTypeMapping.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\InMemoryMessageLog.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\RootStepContainer.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\Step.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\StepContainer.cs
101>_MANAGED_SOURCES= ConfigurationTransformDVT.cs  ElementTypeMappingDVT.cs  RootStepContainerDVT.cs  StepContainerDVT.cs  StepDVT.cs  XmlSequencerSuite.cs
101>_MANAGED_SOURCES= ConfigurationTransformDVT.cs  ElementTypeMappingDVT.cs  RootStepContainerDVT.cs  StepContainerDVT.cs  StepDVT.cs  XmlSequencerSuite.cs J:\XONLINE_MAIN\private\common\xmlsequencer\ConfigurationTransform.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\ElementTypeMapping.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\InMemoryMessageLog.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\RootStepContainer.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\Step.cs  J:\XONLINE_MAIN\private\common\xmlsequencer\StepContainer.cs
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=j:\xonline_main\private\common\tools\tools\ctitleid.cs
102>_MANAGED_SOURCES= XlastComparerTest.cs  XlastSchemaUtilTest.cs  XlastUtilTest.cs
102>_MANAGED_SOURCES= XlastComparerTest.cs  XlastSchemaUtilTest.cs  XlastUtilTest.cs j:\xonline_main\private\common\tools\tools\ctitleid.cs
101>LCG: BUILD_LCE_FILE: 0
102>LCG: BUILD_LCE_FILE: 0
101>SOURCE_ASMMETA (xonline.common.test.xmlsequencer.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\xmlsequencer\objd\i386\xonline.common.test.xmlsequencer.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xmlsequencer\objd\i386\xonline.common.test.xmlsequencer.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.xmlsequencer.dll) 
102>SOURCE_ASMMETA (xonline.common.test.xlastutil.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\xlastutil\objd\i386\xonline.common.test.xlastutil.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xlastutil\objd\i386\xonline.common.test.xlastutil.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\xonline.common.test.xlastutil.dll) 
102>'j:\xonline_main\private\common\test\xlastutil\objd\i386\_asmid.inc' is up-to-date
101> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
101> set createfile=objd\i386\_generated.cs.temp
101> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xlastutil\objd\i386 xonline.common.test.xlastutil J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module xonline.common.test.xlastutil not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\xonline.common.test.xmlsequencer.dll   
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
101> /target:library 
101> /baseaddress:0x400000 
101> /debug:full 
101> /define:DEBUG 
101> /warnaserror+ 
101> /unsafe- 
101> /define:TRACE 
101> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
101> /platform:anycpu 
101> /nowarn:1699 
101> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
101> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
101> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
101> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
101> ConfigurationTransformDVT.cs 
101> ElementTypeMappingDVT.cs 
101> RootStepContainerDVT.cs 
101> StepContainerDVT.cs 
101> StepDVT.cs 
101> XmlSequencerSuite.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\ConfigurationTransform.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\ElementTypeMapping.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\InMemoryMessageLog.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\RootStepContainer.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\Step.cs 
101> J:\XONLINE_MAIN\private\common\xmlsequencer\StepContainer.cs 
101> objd\i386\_generated.cs
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=j:\xonline_main\private\common\tools\tools\ctitleid.cs
102>_MANAGED_SOURCES= XlastComparerTest.cs  XlastSchemaUtilTest.cs  XlastUtilTest.cs
102>_MANAGED_SOURCES= XlastComparerTest.cs  XlastSchemaUtilTest.cs  XlastUtilTest.cs j:\xonline_main\private\common\tools\tools\ctitleid.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (xonline.common.test.xlastutil.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\xlastutil\objd\i386\xonline.common.test.xlastutil.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xlastutil\objd\i386\xonline.common.test.xlastutil.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\xonline.common.test.xlastutil.dll) 
102> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> set createfile=objd\i386\_generated.cs.temp
102> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\xonline.common.test.xlastutil.dll   
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
102> /target:library 
102> /baseaddress:0x400000 
102> /debug:full 
102> /define:DEBUG 
102> /warnaserror+ 
102> /unsafe- 
102> /D:NOCSPP 
102> /D:TEST 
102> /define:TRACE 
102> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
102> /platform:anycpu 
102> /nowarn:1699 
102> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
102> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
102> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
102> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
102> /r:J:\XONLINE_MAIN\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
102> /r:J:\XONLINE_MAIN\private\common\leaderboard\dll\objd\i386\leaderboard.dll 
102> XlastComparerTest.cs 
102> XlastSchemaUtilTest.cs 
102> XlastUtilTest.cs 
102> j:\xonline_main\private\common\tools\tools\ctitleid.cs 
102> objd\i386\_generated.cs
101>Build_Status Postbuild Preplace - objd\i386\xonline.common.test.xmlsequencer.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\xonline.common.test.xmlsequencer.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xmlsequencer.dll
101>Build_Status Binplace - 1 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xmlsequencer.dll
101>binplace j:\xonline_main\private\common\test\xmlsequencer\objd\i386\xonline.common.test.xmlsequencer.dll
101>Build_Status Postbuild Postplace - objd\i386\xonline.common.test.xmlsequencer.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\xonline.common.test.xmlsequencer.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xmlsequencer.dll
102>Build_Status Postbuild Preplace - objd\i386\xonline.common.test.xlastutil.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\xonline.common.test.xlastutil.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.dll
101> if not exist objd\i386\xonline.common.test.xmlsequencer.dll.mui (  if not exist objd\i386\xonline.common.test.xmlsequencer.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xmlsequencer.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xmlsequencer.dll  )  )
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.dll
102>binplace j:\xonline_main\private\common\test\xlastutil\objd\i386\xonline.common.test.xlastutil.dll
101>Build_Status LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xmlsequencer.dll 
101>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xmlsequencer.dll 
101>j:\xonline_main\private\common\test\xmlsequencer BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Binplace - 3 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Compiling j:\xonline_main\private\common\test\xlastutil.mobile *************
101>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\xlastutil.mobile'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\xlastutil.mobile
102>Build_Status Postbuild Postplace - objd\i386\xonline.common.test.xlastutil.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\xonline.common.test.xlastutil.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.dll
102> if not exist objd\i386\xonline.common.test.xlastutil.dll.mui (  if not exist objd\i386\xonline.common.test.xlastutil.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xlastutil.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xlastutil.dll  )  )
101>j:\xonline_main\private\common\test\xlastutil.mobile: TARGETPATH is obj
101>j:\xonline_main\private\common\test\xlastutil.mobile building test code in dev tree
102>Build_Status LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xlastutil.dll 
102>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xlastutil.dll 
102>j:\xonline_main\private\common\test\xlastutil BINPLACE_MISCFILES=XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>j:\xonline_main\private\common\test\xlastutil.mobile: TARGETPATH is obj
101>j:\xonline_main\private\common\test\xlastutil.mobile building test code in dev tree
102>Build_Status Postbuild Preplace - XlastBadXml.xlast.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" XlastBadXml.xlast --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386 xonline.common.test.xlastutil.mobile J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Postbuild Preplace - XlastGoodXml.xlast.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" XlastGoodXml.xlast --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>genbasemac: module xonline.common.test.xlastutil.mobile not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=j:\xonline_main\private\common\tools\tools\ctitleid.cs
101>_MANAGED_SOURCES= MobileAndWebLeaderboardUtilsTest.cs
101>_MANAGED_SOURCES= MobileAndWebLeaderboardUtilsTest.cs j:\xonline_main\private\common\tools\tools\ctitleid.cs
101>LCG: BUILD_LCE_FILE: 0
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Binplace - 5 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>binplace j:\xonline_main\private\common\test\xlastutil\XlastBadXml.xlast
101>SOURCE_ASMMETA (xonline.common.test.xlastutil.mobile.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\xonline.common.test.xlastutil.mobile.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\xonline.common.test.xlastutil.mobile.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.xlastutil.mobile.dll) 
101>'j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\_asmid.inc' is up-to-date
102>binplace j:\xonline_main\private\common\test\xlastutil\XlastGoodXml.xlast
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386 xonline.common.test.xlastutil.mobile J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Postbuild Postplace - XlastBadXml.xlast.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" XlastBadXml.xlast --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>genbasemac: module xonline.common.test.xlastutil.mobile not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=j:\xonline_main\private\common\tools\tools\ctitleid.cs
101>_MANAGED_SOURCES= MobileAndWebLeaderboardUtilsTest.cs
101>_MANAGED_SOURCES= MobileAndWebLeaderboardUtilsTest.cs j:\xonline_main\private\common\tools\tools\ctitleid.cs
102>Build_Status Postbuild Postplace - XlastGoodXml.xlast.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" XlastGoodXml.xlast --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>LCG: BUILD_LCE_FILE: 0
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL XlastBadXml.xlast XlastGoodXml.xlast J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Compiling j:\xonline_main\private\common\test\protocol *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\protocol'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\protocol
102>j:\xonline_main\private\common\test\protocol building test code in dev tree
101>SOURCE_ASMMETA (xonline.common.test.xlastutil.mobile.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\xonline.common.test.xlastutil.mobile.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\xonline.common.test.xlastutil.mobile.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.xlastutil.mobile.dll) 
101> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
101> set createfile=objd\i386\_generated.cs.temp
101> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\xonline.common.test.xlastutil.mobile.dll   
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
101> /target:library 
101> /baseaddress:0x400000 
101> /debug:full 
101> /define:DEBUG 
101> /warnaserror+ 
101> /unsafe- 
101> /D:NOCSPP 
101> /D:TEST 
101> /define:TRACE 
101> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
101> /platform:anycpu 
101> /nowarn:1699 
101> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
101> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
101> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
101> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
101> /r:J:\XONLINE_MAIN\private\common\ingestionutils\dll\objd\i386\XblIngestionUtils.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
101> /r:J:\XONLINE_MAIN\private\common\leaderboard\dll\objd\i386\leaderboard.dll 
101> MobileAndWebLeaderboardUtilsTest.cs 
101> j:\xonline_main\private\common\tools\tools\ctitleid.cs 
101> objd\i386\_generated.cs
102>SOURCE_ASMMETA () 
102>_O_ASMMETA () 
102>_O_ASMMETA_OUTPUT () 
102>ASMMETA_INPUT () 
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XrlTest.csproj /Target:BuildCompiled /p:Pass=Compile
101>Build_Status Postbuild Preplace - objd\i386\xonline.common.test.xlastutil.mobile.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\xonline.common.test.xlastutil.mobile.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.mobile.dll
101>Build_Status Binplace - 1 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.mobile.dll
101>binplace j:\xonline_main\private\common\test\xlastutil.mobile\objd\i386\xonline.common.test.xlastutil.mobile.dll
101>Build_Status Postbuild Postplace - objd\i386\xonline.common.test.xlastutil.mobile.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\xonline.common.test.xlastutil.mobile.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.xlastutil.mobile.dll
101> if not exist objd\i386\xonline.common.test.xlastutil.mobile.dll.mui (  if not exist objd\i386\xonline.common.test.xlastutil.mobile.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xlastutil.mobile.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xlastutil.mobile.dll  )  )
101>Build_Status LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.xlastutil.mobile.dll 
101>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.xlastutil.mobile.dll 
101>j:\xonline_main\private\common\test\xlastutil.mobile BINPLACE_MISCFILES=MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - MobileTitleSample.gameconfig.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" MobileTitleSample.gameconfig --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Binplace - 5 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>binplace j:\xonline_main\private\common\test\xlastutil.mobile\MobileTitleSample.gameconfig
102>Build started 10/27/2012 7:30:57 PM.
101>binplace j:\xonline_main\private\common\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml
101>Build_Status Postbuild Postplace - MobileTitleSample.gameconfig.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" MobileTitleSample.gameconfig --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL MobileTitleSample.gameconfig ..\..\ingestionutils\xlastutil\MobileStatsColumnsLocalized.xml J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Compiling j:\xonline_main\private\common\test\bif *************
101>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bif'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\bif
102> 1>Project "j:\xonline_main\private\common\test\protocol\XrlTest.csproj" on node 0 (BuildCompiled target(s)).
102> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101>j:\xonline_main\private\common\test\bif building test code in dev tree
101>SOURCE_ASMMETA () 
101>_O_ASMMETA () 
101>_O_ASMMETA_OUTPUT () 
101>ASMMETA_INPUT () 
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true BehaviorInjection.csproj /Target:BuildCompiled /p:Pass=Compile
102> 1>CoreCompile:
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\XrlTest.dll /target:library /warnaserror+ BlobTest.cs VortexProtTest.cs wiredatatest.cs objd\i386\_generated.cs
102> CopyFilesToOutputDirectory:
102> Copying file from "objd\i386\XrlTest.dll" to "j:\xonline_main\target\debug\i386\XrlTest\XrlTest.dll".
102> copy /y "objd\i386\XrlTest.dll" "j:\xonline_main\target\debug\i386\XrlTest\XrlTest.dll"
102> XrlTest -> j:\xonline_main\target\debug\i386\XrlTest\XrlTest.dll
102> Copying file from "objd\i386\XrlTest.pdb" to "j:\xonline_main\target\debug\i386\XrlTest\XrlTest.pdb".
102> copy /y "objd\i386\XrlTest.pdb" "j:\xonline_main\target\debug\i386\XrlTest\XrlTest.pdb"
101>Build started 10/27/2012 7:30:58 PM.
102> BinplaceCompiled:
102> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\XrlTest.dll
102> binplace j:\xonline_main\private\common\test\protocol\objd\i386\XrlTest.dll
102> 1>Done Building Project "j:\xonline_main\private\common\test\protocol\XrlTest.csproj" (BuildCompiled target(s)).
102>Build succeeded.
102>Time Elapsed 00:00:00.65
102>Compiling j:\xonline_main\private\common\test\service *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\service'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\service
102>j:\xonline_main\private\common\test\service: TARGETPATH is obj
102>j:\xonline_main\private\common\test\service building test code in dev tree
101> 1>Project "j:\xonline_main\private\common\test\bif\BehaviorInjection.csproj" on node 0 (BuildCompiled target(s)).
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
102>j:\xonline_main\private\common\test\service: TARGETPATH is obj
102>j:\xonline_main\private\common\test\service building test code in dev tree
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\service\objd\i386 ServiceDVT J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module ServiceDVT not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES=FastFailTests.cs  FastFailUnitCommon.cs  FastFailUnitConfiguration.cs  FastFailUnitStatisticExpiration.cs  FastFailUnitTests.cs  FastFailUnitThrottlingStatistics.cs  ServiceDVT.cs  XboxLiveThread.cs  TestFastFail.cs  SGInfoTests.cs  FlokenTests.cs  XomTargetTests.cs  OldSGInfoClass.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (ServiceDVT.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\service\objd\i386\ServiceDVT.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\service\objd\i386\ServiceDVT.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\ServiceDVT.dll) 
102>'j:\xonline_main\private\common\test\service\objd\i386\_asmid.inc' is up-to-date
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\service\objd\i386 ServiceDVT J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module ServiceDVT not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES=FastFailTests.cs  FastFailUnitCommon.cs  FastFailUnitConfiguration.cs  FastFailUnitStatisticExpiration.cs  FastFailUnitTests.cs  FastFailUnitThrottlingStatistics.cs  ServiceDVT.cs  XboxLiveThread.cs  TestFastFail.cs  SGInfoTests.cs  FlokenTests.cs  XomTargetTests.cs  OldSGInfoClass.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (ServiceDVT.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\service\objd\i386\ServiceDVT.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\service\objd\i386\ServiceDVT.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\ServiceDVT.dll) 
102> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> set createfile=objd\i386\_generated.cs.temp
102> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\ServiceDVT.dll   
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
102> /target:library 
102> /baseaddress:0x400000 
102> /debug:full 
102> /define:DEBUG 
102> /warnaserror+ 
102> /unsafe- 
102> /define:TRACE 
102> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
102> /platform:anycpu 
102> /nowarn:1699 
102> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
102> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
102> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
102> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
102> /r:J:\XONLINE_MAIN\private\common\console\dll\objd\i386\XblConsole.dll 
102> FastFailTests.cs 
102> FastFailUnitCommon.cs 
102> FastFailUnitConfiguration.cs 
102> FastFailUnitStatisticExpiration.cs 
102> FastFailUnitTests.cs 
102> FastFailUnitThrottlingStatistics.cs 
102> ServiceDVT.cs 
102> XboxLiveThread.cs 
102> TestFastFail.cs 
102> SGInfoTests.cs 
102> FlokenTests.cs 
102> XomTargetTests.cs 
102> OldSGInfoClass.cs 
102> objd\i386\_generated.cs
101> 1>CoreCompile:
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1591,1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\test\LiveInfra\LiveInternalTest\objd\i386\LiveInternalTest.dll /reference:j:\xonline_main\private\test\LiveInfra\LiveLib\internallib\objd\i386\LiveLibInternal.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\BehaviorInjection.dll /target:library /warnaserror+ BIF.cs objd\i386\_generated.cs
101> CopyFilesToOutputDirectory:
101> Copying file from "objd\i386\BehaviorInjection.dll" to "j:\xonline_main\target\debug\i386\BehaviorInjection\BehaviorInjection.dll".
101> copy /y "objd\i386\BehaviorInjection.dll" "j:\xonline_main\target\debug\i386\BehaviorInjection\BehaviorInjection.dll"
101> BehaviorInjection -> j:\xonline_main\target\debug\i386\BehaviorInjection\BehaviorInjection.dll
101> Copying file from "objd\i386\BehaviorInjection.pdb" to "j:\xonline_main\target\debug\i386\BehaviorInjection\BehaviorInjection.pdb".
101> copy /y "objd\i386\BehaviorInjection.pdb" "j:\xonline_main\target\debug\i386\BehaviorInjection\BehaviorInjection.pdb"
101> BinplaceCompiled:
101> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\BehaviorInjection.dll
101> binplace j:\xonline_main\private\common\test\bif\objd\i386\BehaviorInjection.dll
101> 1>Done Building Project "j:\xonline_main\private\common\test\bif\BehaviorInjection.csproj" (BuildCompiled target(s)).
101>Build succeeded.
101>Time Elapsed 00:00:01.21
101>Compiling j:\xonline_main\private\common\test\healthchecks *************
101>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\healthchecks'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\healthchecks
101>j:\xonline_main\private\common\test\healthchecks: TARGETPATH is objd
101>j:\xonline_main\private\common\test\healthchecks building test code in dev tree
102>Build_Status Postbuild Preplace - objd\i386\ServiceDVT.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\ServiceDVT.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ServiceDVT.dll
101>j:\xonline_main\private\common\test\healthchecks: TARGETPATH is objd
101>j:\xonline_main\private\common\test\healthchecks building test code in dev tree
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\healthchecks\objd\i386 xonline.common.test.HealthChecks J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ServiceDVT.dll
101>genbasemac: module xonline.common.test.HealthChecks not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=
101>_MANAGED_SOURCES=HealthcheckHelpers.cs  HealthChecks.cs  HealthBlocks.cs  SuiteDefinition.cs
102>binplace j:\xonline_main\private\common\test\service\objd\i386\ServiceDVT.dll
101>LCG: BUILD_LCE_FILE: 0
102>Build_Status Postbuild Postplace - objd\i386\ServiceDVT.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\ServiceDVT.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ServiceDVT.dll
102> if not exist objd\i386\ServiceDVT.dll.mui (  if not exist objd\i386\ServiceDVT.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF ServiceDVT.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live ServiceDVT.dll  )  )
102>Build_Status LN_MUI_STS: LGNSTS_MUIOFF ServiceDVT.dll 
102>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live ServiceDVT.dll 
101>SOURCE_ASMMETA (xonline.common.test.HealthChecks.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\healthchecks\objd\i386\xonline.common.test.HealthChecks.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\healthchecks\objd\i386\xonline.common.test.HealthChecks.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.HealthChecks.dll) 
102>j:\xonline_main\private\common\test\service BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>'j:\xonline_main\private\common\test\healthchecks\objd\i386\_asmid.inc' is up-to-date
101>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\healthchecks\objd\i386 xonline.common.test.HealthChecks J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>genbasemac: module xonline.common.test.HealthChecks not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>ALLOW_DLL_REFERENCES=1
101>CS_INCLUDES_FIXED=
101>_MANAGED_SOURCES=HealthcheckHelpers.cs  HealthChecks.cs  HealthBlocks.cs  SuiteDefinition.cs
101>LCG: BUILD_LCE_FILE: 0
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Binplace - 3 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>SOURCE_ASMMETA (xonline.common.test.HealthChecks.asmmeta) 
101>_O_ASMMETA (j:\xonline_main\private\common\test\healthchecks\objd\i386\xonline.common.test.HealthChecks.asmmeta) 
101>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\healthchecks\objd\i386\xonline.common.test.HealthChecks.asmmeta_ver_pass2) 
101>ASMMETA_INPUT (objd\i386\xonline.common.test.HealthChecks.dll) 
102>Compiling j:\xonline_main\private\common\test\community\dvt *************
102>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\community\dvt'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\community\dvt
101> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true CommunityTest.csproj /Target:BuildCompiled /p:Pass=Compile
101> set createfile=objd\i386\_generated.cs.temp
101> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\xonline.common.test.HealthChecks.dll   
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
101> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
101> /target:library 
101> /baseaddress:0x400000 
101> /debug:full 
101> /define:DEBUG 
101> /warnaserror+ 
101> /unsafe- 
101> /define:TRACE 
101> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
101> /platform:anycpu 
101> /nowarn:1699 
101> /r:J:\XONLINE_MAIN\private\common\health\dll\objd\i386\XblHealthcheck.dll 
101> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
101> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
101> /r:J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\objd\i386\LiveLibInternal.dll 
101> /r:J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\objd\i386\LiveInternalTest.dll 
101> /r:J:\XONLINE_MAIN\public\ext\IIS\v7\PublicAssemblies\microsoft.web.administration.dll 
101> HealthcheckHelpers.cs 
101> HealthChecks.cs 
101> HealthBlocks.cs 
101> SuiteDefinition.cs 
101> objd\i386\_generated.cs
101>Build_Status Postbuild Preplace - objd\i386\xonline.common.test.HealthChecks.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\xonline.common.test.HealthChecks.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.HealthChecks.dll
101>Build_Status Binplace - 1 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.HealthChecks.dll
101>binplace j:\xonline_main\private\common\test\healthchecks\objd\i386\xonline.common.test.HealthChecks.dll
101>Build_Status Postbuild Postplace - objd\i386\xonline.common.test.HealthChecks.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\xonline.common.test.HealthChecks.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\xonline.common.test.HealthChecks.dll
101> if not exist objd\i386\xonline.common.test.HealthChecks.dll.mui (  if not exist objd\i386\xonline.common.test.HealthChecks.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.HealthChecks.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.HealthChecks.dll  )  )
101>Build_Status LN_MUI_STS: LGNSTS_MUIOFF xonline.common.test.HealthChecks.dll 
101>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live xonline.common.test.HealthChecks.dll 
101>j:\xonline_main\private\common\test\healthchecks BINPLACE_MISCFILES=J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build started 10/27/2012 7:31:00 PM.
101>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Binplace - 1 file(s).
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
101> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Executing Pass1 MSBuild Tasks j:\xonline_main\private\common\test\core *************
101>'MSBuild.cmd "xblcoretest.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\core
101>Running MsBuild v3.5
102> 1>Project "j:\xonline_main\private\common\test\community\dvt\CommunityTest.csproj" on node 0 (BuildCompiled target(s)).
102> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101>Build started 10/27/2012 7:31:00 PM.
101> 1>Project "j:\xonline_main\private\common\test\core\xblcoretest.csproj" on node 0 (BuildCompiled target(s)).
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
102> 1>CoreCompile:
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /unsafe+ /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:TEST;DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll /reference:J:\XONLINE_MAIN\public\ext\MSCOMGeoInfo\2.2.0.0\Binaries\Release\GeoLocationAPI.dll /reference:j:\xonline_main\private\common\memcache\interface\objd\i386\IMemCache.dll /reference:j:\xonline_main\private\common\match\dll\objd\i386\match.dll /reference:J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Transactions.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:j:\xonline_main\private\common\tools\dll\objd\i386\Tools.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.dll /reference:j:\xonline_main\private\common\community\dll\objd\i386\XblCommunity.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\console\dll\objd\i386\XblConsole.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\marketplace\dll\objd\i386\XblMarketplace.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /reference:j:\xonline_main\private\common\xcryptoproxy\dll\objd\i386\xcryptoproxy.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\CommunityDVT.dll /target:library /warnaserror+ AffiliateListTests.cs CacheUtilTests.cs concurrencytests.cs FriendListUtilTests.cs MockAccelCache.cs PresenceUtilTests.cs objd\i386\_generated.cs
102> _CopyFilesMarkedCopyLocal:
102> Copying file from "j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.dll" to "j:\xonline_main\target\debug\i386\CommunityTest\AccelerationMC.dll".
102> copy /y "j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.dll" "j:\xonline_main\target\debug\i386\CommunityTest\AccelerationMC.dll"
102> Copying file from "J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.dll" to "j:\xonline_main\target\debug\i386\CommunityTest\microsoft.mmf.dll".
102> copy /y "J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.dll" "j:\xonline_main\target\debug\i386\CommunityTest\microsoft.mmf.dll"
102> Copying file from "j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.dll" to "j:\xonline_main\target\debug\i386\CommunityTest\XBancMC.dll".
102> copy /y "j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.dll" "j:\xonline_main\target\debug\i386\CommunityTest\XBancMC.dll"
102> Copying file from "j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.pdb" to "j:\xonline_main\target\debug\i386\CommunityTest\XBancMC.pdb".
102> copy /y "j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.pdb" "j:\xonline_main\target\debug\i386\CommunityTest\XBancMC.pdb"
102> Copying file from "J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.pdb" to "j:\xonline_main\target\debug\i386\CommunityTest\microsoft.mmf.pdb".
102> copy /y "J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.pdb" "j:\xonline_main\target\debug\i386\CommunityTest\microsoft.mmf.pdb"
102> Copying file from "j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.pdb" to "j:\xonline_main\target\debug\i386\CommunityTest\AccelerationMC.pdb".
102> copy /y "j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.pdb" "j:\xonline_main\target\debug\i386\CommunityTest\AccelerationMC.pdb"
102> CopyFilesToOutputDirectory:
102> Copying file from "objd\i386\CommunityDVT.dll" to "j:\xonline_main\target\debug\i386\CommunityTest\CommunityDVT.dll".
102> copy /y "objd\i386\CommunityDVT.dll" "j:\xonline_main\target\debug\i386\CommunityTest\CommunityDVT.dll"
102> CommunityTest -> j:\xonline_main\target\debug\i386\CommunityTest\CommunityDVT.dll
102> Copying file from "objd\i386\CommunityDVT.pdb" to "j:\xonline_main\target\debug\i386\CommunityTest\CommunityDVT.pdb".
102> copy /y "objd\i386\CommunityDVT.pdb" "j:\xonline_main\target\debug\i386\CommunityTest\CommunityDVT.pdb"
102> BinplaceCompiled:
102> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\CommunityDVT.dll J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.dll j:\xonline_main\private\common\memcache\interface\objd\i386\IMemCache.dll j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.dll j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.dll
102> binplace j:\xonline_main\private\common\test\community\dvt\objd\i386\CommunityDVT.dll
102> binplace J:\XONLINE_MAIN\public\ext\mmf\microsoft.mmf.dll
102> binplace j:\xonline_main\private\common\memcache\interface\objd\i386\IMemCache.dll
102> binplace j:\xonline_main\private\common\memcache\Acceleration\objd\i386\AccelerationMC.dll
102> binplace j:\xonline_main\private\common\memcache\XBanc\objd\i386\XBancMC.dll
102> 1>Done Building Project "j:\xonline_main\private\common\test\community\dvt\CommunityTest.csproj" (BuildCompiled target(s)).
102>Build succeeded.
102>Time Elapsed 00:00:00.82
102>Compiling j:\xonline_main\private\common\test\config *************
102>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\config'
102>BUILDMSG: Processing j:\xonline_main\private\common\test\config
102>j:\xonline_main\private\common\test\config: TARGETPATH is obj
102>j:\xonline_main\private\common\test\config building test code in dev tree
102>j:\xonline_main\private\common\test\config: TARGETPATH is obj
102>j:\xonline_main\private\common\test\config building test code in dev tree
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\config\objd\i386 ConfigDevTest J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>genbasemac: module ConfigDevTest not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES= ConfigDatabaseDevTest.cs   ConfigDevTest.cs   ConfigDevTest_Constants.cs   ConfigRefreshDevTest.cs   ConfigDevTest_CPP.cs   ConfigDevTest_UnitTests.cs   ConnectionSettingsTest.cs   ConnectionSettingsPerf.cs
101> 1>CoreCompile:
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\XblCoreTest.dll /target:library /warnaserror+ EtxFingerprint.cs EtxLoader.cs EtxManifestDVT.cs MultiKeyCollectionDVT.cs TestXDateTime.cs TestXomDictionary.cs XAssert.cs XomFileTarget.cs XomReportTargetDVT.cs objd\i386\_generated.cs
102>LCG: BUILD_LCE_FILE: 0
101> CopyFilesToOutputDirectory:
101> Copying file from "objd\i386\XblCoreTest.dll" to "j:\xonline_main\target\debug\i386\xblcoretest\XblCoreTest.dll".
101> copy /y "objd\i386\XblCoreTest.dll" "j:\xonline_main\target\debug\i386\xblcoretest\XblCoreTest.dll"
101> xblcoretest -> j:\xonline_main\target\debug\i386\xblcoretest\XblCoreTest.dll
101> Copying file from "objd\i386\XblCoreTest.pdb" to "j:\xonline_main\target\debug\i386\xblcoretest\XblCoreTest.pdb".
101> copy /y "objd\i386\XblCoreTest.pdb" "j:\xonline_main\target\debug\i386\xblcoretest\XblCoreTest.pdb"
101> 1>Done Building Project "j:\xonline_main\private\common\test\core\xblcoretest.csproj" (BuildCompiled target(s)).
101>Build succeeded.
101>Time Elapsed 00:00:00.67
101>Executing Pass1 MSBuild Tasks j:\xonline_main\private\common\test\statemachine *************
101>'MSBuild.cmd "statemachinetest.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
101>BUILDMSG: Processing j:\xonline_main\private\common\test\statemachine
102>SOURCE_ASMMETA (ConfigDevTest.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\config\objd\i386\ConfigDevTest.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\config\objd\i386\ConfigDevTest.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\ConfigDevTest.dll) 
102>'j:\xonline_main\private\common\test\config\objd\i386\_asmid.inc' is up-to-date
102>BUILD: j:\xonline_main\public\ext\tools\genbasemac.pl j:\xonline_main\private\common\test\config\objd\i386 ConfigDevTest J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
101>Running MsBuild v3.5
102>genbasemac: module ConfigDevTest not found in J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt
102>ALLOW_DLL_REFERENCES=1
102>CS_INCLUDES_FIXED=
102>_MANAGED_SOURCES= ConfigDatabaseDevTest.cs   ConfigDevTest.cs   ConfigDevTest_Constants.cs   ConfigRefreshDevTest.cs   ConfigDevTest_CPP.cs   ConfigDevTest_UnitTests.cs   ConnectionSettingsTest.cs   ConnectionSettingsPerf.cs
102>LCG: BUILD_LCE_FILE: 0
102>SOURCE_ASMMETA (ConfigDevTest.asmmeta) 
102>_O_ASMMETA (j:\xonline_main\private\common\test\config\objd\i386\ConfigDevTest.asmmeta) 
102>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\config\objd\i386\ConfigDevTest.asmmeta_ver_pass2) 
102>ASMMETA_INPUT (objd\i386\ConfigDevTest.dll) 
102> del objd\i386\_generated.cs objd\i386\_generated.cs.temp 2>nul
102> set createfile=objd\i386\_generated.cs.temp
102> move objd\i386\_generated.cs.temp objd\i386\_generated.cs >nul
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\csc.exe /nologo /nostdlib /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /noconfig /out:objd\i386\ConfigDevTest.dll   
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\Accessibility.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Design.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.DirectoryServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Drawing.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.EnterpriseServices.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Management.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Messaging.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Remoting.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Runtime.Serialization.Formatters.Soap.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.ServiceProcess.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Windows.Forms.metadata_dll 
102> /r:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.XML.metadata_dll 
102> /target:library 
102> /baseaddress:0x400000 
102> /debug:full 
102> /define:DEBUG 
102> /warnaserror+ 
102> /unsafe- 
102> /D:TEST 
102> /define:TRACE 
102> /res:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\ref\__testcode20__.resources 
102> /platform:anycpu 
102> /nowarn:1699 
102> /r:J:\XONLINE_MAIN\private\common\marketplace\dll\objd\i386\XblMarketplace.dll 
102> /r:J:\XONLINE_MAIN\private\common\security\dll\objd\i386\XblSecurity.dll 
102> /r:J:\XONLINE_MAIN\private\common\config\dll\objd\i386\XblConfig.dll 
102> /r:J:\XONLINE_MAIN\private\common\core\dll\objd\i386\XblCore.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll 
102> /r:J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveTools.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLive.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFLiveConfig.dll 
102> /r:J:\XONLINE_MAIN\private\test\StfTests\libd\i386\STFCore.dll 
102> ConfigDatabaseDevTest.cs 
102> ConfigDevTest.cs 
102> ConfigDevTest_Constants.cs 
102> ConfigRefreshDevTest.cs 
102> ConfigDevTest_CPP.cs 
102> ConfigDevTest_UnitTests.cs 
102> ConnectionSettingsTest.cs 
102> ConnectionSettingsPerf.cs 
102> objd\i386\_generated.cs
101>Build started 10/27/2012 7:31:01 PM.
101> 1>Project "j:\xonline_main\private\common\test\statemachine\statemachinetest.csproj" on node 0 (BuildCompiled target(s)).
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
102>Build_Status Postbuild Preplace - objd\i386\ConfigDevTest.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\ConfigDevTest.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigDevTest.dll
102>Build_Status Binplace - 1 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigDevTest.dll
102>binplace j:\xonline_main\private\common\test\config\objd\i386\ConfigDevTest.dll
102>Build_Status Postbuild Postplace - objd\i386\ConfigDevTest.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\ConfigDevTest.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigDevTest.dll
102> if not exist objd\i386\ConfigDevTest.dll.mui (  if not exist objd\i386\ConfigDevTest.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF ConfigDevTest.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live ConfigDevTest.dll  )  )
102>Build_Status LN_MUI_STS: LGNSTS_MUIOFF ConfigDevTest.dll 
102>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live ConfigDevTest.dll 
102>j:\xonline_main\private\common\test\config BINPLACE_MISCFILES=CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101> 1>CoreCompile:
101> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFCore.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLive.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveConfig.dll /reference:j:\xonline_main\private\test\StfTests\libd\i386\STFLiveTools.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\statemachine\dll\objd\i386\XblStateMachine.dll /debug+ /debug:full /nologo /optimize- /out:objd\i386\StateMachineTest.dll /target:library /warnaserror+ statemachinefactory.cs statemachinetests.cs objd\i386\_generated.cs
101> CopyFilesToOutputDirectory:
101> Copying file from "objd\i386\StateMachineTest.dll" to "j:\xonline_main\target\debug\i386\statemachinetest\StateMachineTest.dll".
101> copy /y "objd\i386\StateMachineTest.dll" "j:\xonline_main\target\debug\i386\statemachinetest\StateMachineTest.dll"
101> statemachinetest -> j:\xonline_main\target\debug\i386\statemachinetest\StateMachineTest.dll
101> Copying file from "objd\i386\StateMachineTest.pdb" to "j:\xonline_main\target\debug\i386\statemachinetest\StateMachineTest.pdb".
101> copy /y "objd\i386\StateMachineTest.pdb" "j:\xonline_main\target\debug\i386\statemachinetest\StateMachineTest.pdb"
102>Build_Status Postbuild Preplace - CommonConfigTest.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" CommonConfigTest.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - ConfigDevTest_envconfig.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" ConfigDevTest_envconfig.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - ConfigDevTest_ReadMe.txt.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" ConfigDevTest_ReadMe.txt --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - npdb_config_add_gameconfig_1.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_add_gameconfig_1.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - npdb_config_add_gameconfig_2.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_add_gameconfig_2.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101> BinplaceCompiled:
101> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\StateMachineTest.dll
101> binplace j:\xonline_main\private\common\test\statemachine\objd\i386\StateMachineTest.dll
101> 1>Done Building Project "j:\xonline_main\private\common\test\statemachine\statemachinetest.csproj" (BuildCompiled target(s)).
101>Build succeeded.
101>Time Elapsed 00:00:00.92
102>Build_Status Postbuild Preplace - npdb_config_add_titleconfig_1.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_add_titleconfig_1.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - npdb_config_add_titleconfig_2.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_add_titleconfig_2.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - npdb_config_add_database_data.sql.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_add_database_data.sql --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Executing Pass1 MSBuild Tasks j:\xonline_main\private\common\azure *************
101>'MSBuild.cmd "azure.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
101>BUILDMSG: Processing j:\xonline_main\private\common\azure
102>Build_Status Postbuild Preplace - npdb_config_delete_database_data.sql.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" npdb_config_delete_database_data.sql --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\private\ops\setup\util\osql.exe.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\private\ops\setup\util\osql.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
101>Running MsBuild v3.5
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Preplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Binplace - 13 file(s).
102> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>binplace j:\xonline_main\private\common\test\config\CommonConfigTest.xml
102>binplace j:\xonline_main\private\common\test\config\ConfigDevTest_envconfig.xml
102>binplace j:\xonline_main\private\common\test\config\ConfigDevTest_ReadMe.txt
102>binplace j:\xonline_main\private\common\test\config\npdb_config_add_gameconfig_1.xml
102>binplace j:\xonline_main\private\common\test\config\npdb_config_add_gameconfig_2.xml
102>binplace j:\xonline_main\private\common\test\config\npdb_config_add_titleconfig_1.xml
102>binplace j:\xonline_main\private\common\test\config\npdb_config_add_titleconfig_2.xml
102>binplace j:\xonline_main\private\common\test\config\npdb_config_add_database_data.sql
102>binplace j:\xonline_main\private\common\test\config\npdb_config_delete_database_data.sql
102>binplace J:\XONLINE_MAIN\private\ops\setup\util\osql.exe
102>Build_Status Postbuild Postplace - CommonConfigTest.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" CommonConfigTest.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - ConfigDevTest_envconfig.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" ConfigDevTest_envconfig.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - ConfigDevTest_ReadMe.txt.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" ConfigDevTest_ReadMe.txt --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_add_gameconfig_1.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_add_gameconfig_1.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_add_gameconfig_2.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_add_gameconfig_2.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_add_titleconfig_1.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_add_titleconfig_1.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_add_titleconfig_2.xml.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_add_titleconfig_2.xml --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_add_database_data.sql.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_add_database_data.sql --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - npdb_config_delete_database_data.sql.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" npdb_config_delete_database_data.sql --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\private\ops\setup\util\osql.exe.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\private\ops\setup\util\osql.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Build_Status Postbuild Postplace - J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll.
102> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL CommonConfigTest.xml ConfigDevTest_envconfig.xml ConfigDevTest_ReadMe.txt npdb_config_add_gameconfig_1.xml npdb_config_add_gameconfig_2.xml npdb_config_add_titleconfig_1.xml npdb_config_add_titleconfig_2.xml npdb_config_add_database_data.sql npdb_config_delete_database_data.sql J:\XONLINE_MAIN\private\ops\setup\util\osql.exe J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\pso\pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\SCS\7.5\bin\billing.pso.dll J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\dll\wstclient.dll
102>Compiling j:\xonline_main\private\common\login *************
102>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS1 NOLINK=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\login'
102>BUILDMSG: Processing j:\xonline_main\private\common\login
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildCompiled /p:Pass=Compile
101>Build started 10/27/2012 7:31:03 PM.
101> 1>Project "j:\xonline_main\private\common\azure\azure.csproj" on node 0 (BuildCompiled target(s)).
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101> 1>CoreCompile:
101> Skipping target "CoreCompile" because all output files are up-to-date with respect to the input files.
101> CopyFilesToOutputDirectory:
101> azure -> j:\xonline_main\target\debug\i386\azure\xonline.common.Azure.dll
102>Build started 10/27/2012 7:31:03 PM.
101> BinplaceCompiled:
101> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\xonline.common.Azure.dll
101> binplace j:\xonline_main\private\common\azure\objd\i386\xonline.common.Azure.dll
101> binplace j:\xonline_main\private\common\azure\objd\i386\xonline.common.Azure.dll
101> 1>Done Building Project "j:\xonline_main\private\common\azure\azure.csproj" (BuildCompiled target(s)).
101>Build succeeded.
101>Time Elapsed 00:00:00.42
101>Executing Pass1 MSBuild Tasks j:\xonline_main\private\common\stsconfig *************
101>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile'
101>BUILDMSG: Processing j:\xonline_main\private\common\stsconfig
101>Running MsBuild v4.0
102> 1>Project "j:\xonline_main\private\common\login\dirs.proj" on node 0 (BuildCompiled target(s)).
102> 1>Project "j:\xonline_main\private\common\login\dirs.proj" (1) is building "j:\xonline_main\private\common\login\client\client.csproj" (2) on node 0 (BuildCompiled target(s)).
102> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101>Build started 10/27/2012 7:31:03 PM.
101> 1>Project "j:\xonline_main\private\common\stsconfig\dirs.proj" on node 1 (BuildCompiled target(s)).
101> 1>Project "j:\xonline_main\private\common\stsconfig\dirs.proj" (1) is building "j:\xonline_main\private\common\stsconfig\Interfaces\STSConfigurationInterfaces.csproj" (2) on node 1 (BuildCompiled target(s)).
101> 2>_GetVersionInfo:
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101> GenerateAdditionalSources:
101> Skipping target "GenerateAdditionalSources" because all output files are up-to-date with respect to the input files.
101> CoreCompile:
101> Skipping target "CoreCompile" because all output files are up-to-date with respect to the input files.
101> CopyFilesToOutputDirectory:
101> STSConfigurationInterfaces -> j:\xonline_main\private\common\stsconfig\Interfaces\objd\amd64\xonline.config.sts.interfaces.dll
101> BinplaceFiles:
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug64\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j  objd\amd64\xonline.config.sts.interfaces.dll
101> 1>Project "j:\xonline_main\private\common\stsconfig\dirs.proj" (1) is building "j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj" (3) on node 2 (BuildCompiled target(s)).
101> 3>_GetVersionInfo:
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101> 1>Project "j:\xonline_main\private\common\stsconfig\dirs.proj" (1) is building "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj" (4) on node 2 (BuildCompiled target(s)).
101> 4>_GetVersionInfo:
101> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
101> 2>BinplaceFiles:
101> binplace j:\xonline_main\private\common\stsconfig\Interfaces\objd\amd64\xonline.config.sts.interfaces.dll
101> 2>Done Building Project "j:\xonline_main\private\common\stsconfig\Interfaces\STSConfigurationInterfaces.csproj" (BuildCompiled target(s)).
102> 1>Project "j:\xonline_main\private\common\login\dirs.proj" (1) is building "j:\xonline_main\private\common\login\dll\dll.csproj" (3) on node 1 (BuildCompiled target(s)).
102> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
102> 3>CoreCompile:
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /define:FIXED_ASSEMBLY_VERSION;CUSTOM_KEYFILE;DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.Install.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Transactions.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Web.Services.dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\security\dll\objd\i386\XblSecurity.dll /debug+ /debug:full /keyfile:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\strongnamekeys\fake\xblkey.snk /nologo /optimize- /out:objd\i386\XblLogin.dll /target:library /warnaserror+ install\Installer.cs partner\Partner.cs partner\PartnerUser.cs ..\common\PartnerId.cs ..\common\PartnerName.cs objd\i386\_generated.cs
102> CopyFilesToOutputDirectory:
102> Copying file from "objd\i386\XblLogin.dll" to "j:\xonline_main\target\debug\i386\dll\XblLogin.dll".
102> copy /y "objd\i386\XblLogin.dll" "j:\xonline_main\target\debug\i386\dll\XblLogin.dll"
102> dll -> j:\xonline_main\target\debug\i386\dll\XblLogin.dll
102> Copying file from "objd\i386\XblLogin.pdb" to "j:\xonline_main\target\debug\i386\dll\XblLogin.pdb".
102> copy /y "objd\i386\XblLogin.pdb" "j:\xonline_main\target\debug\i386\dll\XblLogin.pdb"
102> ExportTypeLibrary:
102> Copying referenced assemblies required by TlbExp.exe
102> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "objd\i386\XblConfig.dll".
102> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "objd\i386\XblConfig.dll"
102> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "objd\i386\XblCore.dll".
102> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "objd\i386\XblCore.dll"
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v2.0.50727\tlbexp.exe /win32 objd\i386\XblLogin.dll /out:objd\i386\XblLogin.tlb  /silent
102> BinplaceCompiled:
102> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\XblLogin.dll
102> binplace j:\xonline_main\private\common\login\dll\objd\i386\XblLogin.dll
102> binplace j:\xonline_main\private\common\login\dll\objd\i386\XblLogin.dll
102> binplace j:\xonline_main\private\common\login\dll\objd\i386\XblLogin.dll
102> binplace j:\xonline_main\private\common\login\dll\objd\i386\XblLogin.dll
102> 3>Done Building Project "j:\xonline_main\private\common\login\dll\dll.csproj" (BuildCompiled target(s)).
101> 4>ResolveAssemblyReferences:
101> Primary reference "XblConfig".
101> 4>J:\XONLINE_MAIN\tools\msbuild\v4.0\Microsoft.Common.targets(1360,9): warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblConfig". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj]
101>warnings in directory j:\xonline_main\private\common\stsconfig
101>j:\xonline_main\private\common\stsconfig\4>j:\xonline_main\tools\msbuild\v4.0\microsoft.common.targets(1360,9) : warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblConfig". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj]
101> For SearchPath "{HintPathFromItem}".
101> Considered "J:\XONLINE_MAIN\private\common\config\dll\objd\amd64\XblConfig.dll", but it didn't exist.
101> For SearchPath "{TargetFrameworkDirectory}".
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.metadata_exe", but it didn't exist.
101> For SearchPath "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\".
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblConfig.dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblConfig.metadata_dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblConfig.exe", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblConfig.metadata_exe", but it didn't exist.
101> For SearchPath "{RawFileName}".
101> Considered treating "XblConfig" as a file name, but it didn't exist.
101> For SearchPath "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0".
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.metadata_exe", but it didn't exist.
101> Primary reference "XblCore".
101> 4>J:\XONLINE_MAIN\tools\msbuild\v4.0\Microsoft.Common.targets(1360,9): warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblCore". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\4>j:\xonline_main\tools\msbuild\v4.0\microsoft.common.targets(1360,9) : warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblCore". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj]
101> For SearchPath "{HintPathFromItem}".
101> Considered "J:\XONLINE_MAIN\private\common\core\dll\objd\amd64\XblCore.dll", but it didn't exist.
101> For SearchPath "{TargetFrameworkDirectory}".
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.metadata_exe", but it didn't exist.
101> For SearchPath "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\".
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblCore.dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblCore.metadata_dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblCore.exe", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\XblCore.metadata_exe", but it didn't exist.
101> For SearchPath "{RawFileName}".
101> Considered treating "XblCore" as a file name, but it didn't exist.
101> For SearchPath "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0".
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.metadata_exe", but it didn't exist.
101> GenerateAdditionalSources:
101> Skipping target "GenerateAdditionalSources" because all output files are up-to-date with respect to the input files.
101> CoreCompile:
101> Skipping target "CoreCompile" because all output files are up-to-date with respect to the input files.
101> CopyFilesToOutputDirectory:
101> ConfigFileImpl -> j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\xonline.config.sts.configFileImpl.dll
101> BinplaceFiles:
101> binplace.exe /R J:\XONLINE_MAIN\drop\debug64\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j  objd\amd64\xonline.config.sts.configFileImpl.dll
101> binplace j:\xonline_main\private\common\stsconfig\ConfigFileImpl\objd\amd64\xonline.config.sts.configFileImpl.dll
101> 4>Done Building Project "j:\xonline_main\private\common\stsconfig\ConfigFileImpl\ConfigFileImpl.csproj" (BuildCompiled target(s)).
101> 3>ResolveAssemblyReferences:
101> Primary reference "XblConfig".
101> 3>J:\XONLINE_MAIN\tools\msbuild\v4.0\Microsoft.Common.targets(1360,9): warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblConfig". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\tools\msbuild\v4.0\microsoft.common.targets(1360,9) : warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblConfig". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> For SearchPath "{HintPathFromItem}".
101> Considered "J:\XONLINE_MAIN\private\common\config\dll\objd\amd64\XblConfig.dll", but it didn't exist.
101> For SearchPath "{TargetFrameworkDirectory}".
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblConfig.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblConfig.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblConfig.metadata_exe", but it didn't exist.
101> For SearchPath "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\".
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblConfig.dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblConfig.metadata_dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblConfig.exe", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblConfig.metadata_exe", but it didn't exist.
101> For SearchPath "{RawFileName}".
101> Considered treating "XblConfig" as a file name, but it didn't exist.
101> For SearchPath "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0".
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblConfig.metadata_exe", but it didn't exist.
101> Primary reference "XblCore".
101> 3>J:\XONLINE_MAIN\tools\msbuild\v4.0\Microsoft.Common.targets(1360,9): warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblCore". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\tools\msbuild\v4.0\microsoft.common.targets(1360,9) : warning MSB3245: Could not resolve this reference. Could not locate the assembly "XblCore". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors. [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> For SearchPath "{HintPathFromItem}".
101> Considered "J:\XONLINE_MAIN\private\common\core\dll\objd\amd64\XblCore.dll", but it didn't exist.
101> For SearchPath "{TargetFrameworkDirectory}".
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\XblCore.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx30sp1\XblCore.metadata_exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\XblCore.metadata_exe", but it didn't exist.
101> For SearchPath "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\".
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblCore.dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblCore.metadata_dll", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblCore.exe", but it didn't exist.
101> Considered "j:\xonline_main\private\common\stsconfig\DatabaseImpl\objd\amd64\XblCore.metadata_exe", but it didn't exist.
101> For SearchPath "{RawFileName}".
101> Considered treating "XblCore" as a file name, but it didn't exist.
101> For SearchPath "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0".
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.metadata_dll", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.exe", but it didn't exist.
101> Considered "J:\XONLINE_MAIN\public\ext\AspNet\MVC\v2.0\XblCore.metadata_exe", but it didn't exist.
101> GenerateAdditionalSources:
101> Skipping target "GenerateAdditionalSources" because all output files are up-to-date with respect to the input files.
101> CoreCompile:
101> J:\XONLINE_MAIN\tools\msbuild\v4.0\Csc.exe /noconfig /unsafe+ /nowarn:1701,1702 /fullpaths /nostdlib+ /warn:4 /define:DEBUG;TRACE /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\mscorlib.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Configuration.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Core.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Data.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Security.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\clr35\System.Xml.Linq.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp1\System.Xml.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\stsconfig\Interfaces\objd\amd64\xonline.config.sts.interfaces.dll /debug+ /debug:full /filealign:512 /keyfile:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\strongnamekeys\fake\xblkey.snk /nologo /optimize- /out:objd\amd64\xonline.config.sts.configDatabaseImpl.dll /target:library /warnaserror+ /utf8output AppliesTo.cs AppliesToClaim.cs Claim.cs ClaimProvider.cs DatabaseConfigurationProvider.cs DatabaseLookupTable.cs DatabaseObjectFactory.cs DatabaseObjects.cs DatabaseWriter.cs Endpoint.cs IEBBusinessPartner.cs IEBBusinessPartnerKey.cs IEBBusinessPartnerType.cs IEBBusinessPartnerTypeClaimType.cs IEBPartnerConnectionInfo.cs ProtocolLookupTable.cs STSConfiguration.cs Title.cs TokenType.cs objd\amd64\_generated.cs
102> 2>CoreCompile:
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\Csc.exe /noconfig /checked- /nowarn:1699,1701,1702 /nostdlib+ /warn:4 /doc:objd\i386\XblLoginClient.xml /define:FIXED_ASSEMBLY_VERSION;CUSTOM_KEYFILE;DEBUG;TRACE;CODE_ANALYSIS;WIN32 /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\mscorlib.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx35sp1\System.Core.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\System.Data.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\System.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\System.Web.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\System.Web.Services.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx35sp1\System.Xml.Linq.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\sdk\CLR\netfx20sp2\System.Xml.metadata_dll /reference:J:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\fre\dll\wstclient.dll /reference:j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll /reference:j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll /reference:j:\xonline_main\private\common\login\dll\objd\i386\XblLogin.dll /debug+ /debug:full /keyfile:J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\strongnamekeys\fake\xblkey.snk /nologo /optimize- /out:objd\i386\XblLoginClient.dll /target:library /warnaserror+ partner\Partner.cs partner\PartnerUser.cs objd\i386\_generated.cs
102> CopyFilesToOutputDirectory:
102> Copying file from "objd\i386\XblLoginClient.dll" to "j:\xonline_main\target\debug\i386\client\XblLoginClient.dll".
102> copy /y "objd\i386\XblLoginClient.dll" "j:\xonline_main\target\debug\i386\client\XblLoginClient.dll"
102> client -> j:\xonline_main\target\debug\i386\client\XblLoginClient.dll
102> Copying file from "objd\i386\XblLoginClient.pdb" to "j:\xonline_main\target\debug\i386\client\XblLoginClient.pdb".
102> copy /y "objd\i386\XblLoginClient.pdb" "j:\xonline_main\target\debug\i386\client\XblLoginClient.pdb"
102> Copying file from "objd\i386\XblLoginClient.xml" to "j:\xonline_main\target\debug\i386\client\XblLoginClient.xml".
102> copy /y "objd\i386\XblLoginClient.xml" "j:\xonline_main\target\debug\i386\client\XblLoginClient.xml"
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseConfigurationProvider.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>errors in directory j:\xonline_main\private\common\stsconfig
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseconfigurationprovider.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseConfigurationProvider.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseconfigurationprovider.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseConfigurationProvider.cs(20,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseconfigurationprovider.cs(20) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseConfigurationProvider.cs(21,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseconfigurationprovider.cs(21) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseLookupTable.cs(17,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaselookuptable.cs(17) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseLookupTable.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaselookuptable.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseLookupTable.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaselookuptable.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseLookupTable.cs(20,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaselookuptable.cs(20) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjectFactory.cs(17,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjectfactory.cs(17) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjectFactory.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjectfactory.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjectFactory.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjectfactory.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjects.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjects.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjects.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjects.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjects.cs(20,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjects.cs(20) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseObjects.cs(21,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databaseobjects.cs(21) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseWriter.cs(17,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databasewriter.cs(17) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseWriter.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databasewriter.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\DatabaseWriter.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\databasewriter.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\IEBBusinessPartnerKey.cs(4,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\iebbusinesspartnerkey.cs(4) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\ProtocolLookupTable.cs(17,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\protocollookuptable.cs(17) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\ProtocolLookupTable.cs(18,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\protocollookuptable.cs(18) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\ProtocolLookupTable.cs(19,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\protocollookuptable.cs(19) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>j:\XONLINE_MAIN\private\common\STSConfig\DatabaseImpl\ProtocolLookupTable.cs(20,15): error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101>j:\xonline_main\private\common\stsconfig\3>j:\xonline_main\private\common\stsconfig\databaseimpl\protocollookuptable.cs(20) : error CS0234: The type or namespace name 'common' does not exist in the namespace 'xonline' (are you missing an assembly reference?) [j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj]
101> 3>Done Building Project "j:\xonline_main\private\common\stsconfig\DatabaseImpl\DatabaseImpl.csproj" (BuildCompiled target(s)) -- FAILED.
101> 1>Done Building Project "j:\xonline_main\private\common\stsconfig\dirs.proj" (BuildCompiled target(s)) -- FAILED.
101>Build FAILED.
101>Time Elapsed 00:00:01.84
101>MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildCompiled /p:Pass=Compile failed - rc = 1

102> ExportTypeLibrary:
102> Copying referenced assemblies required by TlbExp.exe
102> Copying file from "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" to "objd\i386\XblConfig.dll".
102> copy /y "j:\xonline_main\private\common\config\dll\objd\i386\XblConfig.dll" "objd\i386\XblConfig.dll"
102> Copying file from "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" to "objd\i386\XblCore.dll".
102> copy /y "j:\xonline_main\private\common\core\dll\objd\i386\XblCore.dll" "objd\i386\XblCore.dll"
102> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v2.0.50727\tlbexp.exe /win32 objd\i386\XblLoginClient.dll /out:objd\i386\XblLoginClient.tlb  /silent
102> EntityDeploy:
102> Processing 0 EDMX files.
102> Finished processing 0 EDMX files.
102> BinplaceCompiled:
102> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\XblLoginClient.dll
102> binplace j:\xonline_main\private\common\login\client\objd\i386\XblLoginClient.dll
102> binplace j:\xonline_main\private\common\login\client\objd\i386\XblLoginClient.dll
102> binplace j:\xonline_main\private\common\login\client\objd\i386\XblLoginClient.dll
102> 2>Done Building Project "j:\xonline_main\private\common\login\client\client.csproj" (BuildCompiled target(s)).
102> 1>Done Building Project "j:\xonline_main\private\common\login\dirs.proj" (BuildCompiled target(s)).
102>Build succeeded.
102>Time Elapsed 00:00:02.30
1>Linking for j:\xonline_main\private\common\config\dll *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\config\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\config\dll
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XblConfig.csproj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:06 PM.
1> 1>Project "j:\xonline_main\private\common\config\dll\XblConfig.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\config\dll\XblConfig.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.14
1>Linking for j:\xonline_main\private\common\config\unittest *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\config\unittest'
1>BUILDMSG: Processing j:\xonline_main\private\common\config\unittest
1>Linking for j:\xonline_main\private\common\auth *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\auth'
1>BUILDMSG: Processing j:\xonline_main\private\common\auth
1>Skipping msbuild in pass PASS2 : msbuild.cmd v4 /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline XblConfigUnitTests.csproj
1>Skipping msbuild in pass PASS2 : msbuild.cmd v4 /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline
1>Linking for j:\xonline_main\private\common\core\dll *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\core\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\core\dll
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XblCore.csproj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:06 PM.
1> 1>Project "j:\xonline_main\private\common\core\dll\XblCore.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\core\dll\XblCore.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.12
2>Linking for j:\xonline_main\private\common\security\crypto\helperwrapper *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDLL=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\security\crypto\helperwrapper'
2>BUILDMSG: Processing j:\xonline_main\private\common\security\crypto\helperwrapper
1>Linking for j:\xonline_main\private\common\security\wmdrm\dll *************
1>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDLL=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\security\wmdrm\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\security\wmdrm\dll
1>Linking for j:\xonline_main\private\common\security\dll *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\security\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\security\dll
1>j:\xonline_main\private\common\security\wmdrm\dll: TARGETPATH is obj
2>j:\xonline_main\private\common\security\crypto\helperwrapper: TARGETPATH is ..\..\..\msi\wixobj\objd\i386
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XblSecurity.csproj /Target:BuildLinked /p:Pass=Link
2>j:\xonline_main\private\common\security\crypto\helperwrapper: TARGETPATH is ..\..\..\msi\wixobj\objd\i386
1>j:\xonline_main\private\common\security\wmdrm\dll: TARGETPATH is obj
2>LCG: BUILD_LCE_FILE: 0
1>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (wmdrm.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\wmdrm.dll) 
1>'j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\_asmid.inc' is up-to-date
2>SOURCE_ASMMETA (CryptoWrapper.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\CryptoWrapper.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\CryptoWrapper.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll) 
1>LCG: BUILD_LCE_FILE: 0
2>'j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\_asmid.inc' is up-to-date
2>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (wmdrm.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\wmdrm.dll) 
1> link.exe /out:objd\i386\wmdrm.dll /machine:ix86 @j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\nm8D3.tmp
1>Microsoft (R) Incremental Linker Version 9.00.30729.4984
1>Copyright (C) Microsoft Corporation.  All rights reserved.
1>/SAFESEH 
1>/DYNAMICBASE 
1>/MERGE:_PAGE=PAGE 
1>/MERGE:_TEXT=.text 
1>/SECTION:INIT,d 
1>/OPT:REF 
1>/OPT:ICF 
1>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
1>/INCREMENTAL:NO 
1>/FULLBUILD 
1>/release 
1>/NODEFAULTLIB 
1>/WX:NO 
1>/debug 
1>/debugtype:cv 
1>/version:6.0 
1>/osversion:6.0 
1>/functionpadmin:5 
1>/safeseh 
1>/nxcompat 
1>/merge:.rdata=.text 
1>/pdbcompress 
1>/dynamicbase 
1>/STACK:0x40000,0x1000 
1>/dll 
1>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,wmdrm 
1>/subsystem:windows,6.00 
1>/entry:_DllMainCRTStartup@12 
1>objd\i386\wmdrm.exp 
1>objd\i386\pkcrypto.obj 
1>objd\i386\deskey.obj 
1>objd\i386\rc4.obj 
1>objd\i386\oemcriticalsection.obj 
1>objd\i386\oemfileio.obj 
1>objd\i386\oemimpl.obj 
1>objd\i386\oeminfo.obj 
1>objd\i386\oemtime.obj 
1>objd\i386\drmrsa.obj 
1>objd\i386\rsaimpl.obj 
1>objd\i386\drmbase64.obj 
1>objd\i386\drmbytemanip.obj 
1>objd\i386\drmcbc.obj 
1>objd\i386\drmchain.obj 
1>objd\i386\drmcipher.obj 
1>objd\i386\drmcleanstore.obj 
1>objd\i386\drmconstants.obj 
1>objd\i386\drmcrt.obj 
1>objd\i386\drmdebug.obj 
1>objd\i386\drmexpreval.obj 
1>objd\i386\drmexprfunc.obj 
1>objd\i386\drmexprvariable.obj 
1>objd\i386\drmhdrbuilder.obj 
1>objd\i386\drmhdrparser.obj 
1>objd\i386\drmhds.obj 
1>objd\i386\drmhmac.obj 
1>objd\i386\drmint64.obj 
1>objd\i386\drmkeygen.obj 
1>objd\i386\drmlicacqreq.obj 
1>objd\i386\drmlicacqresp.obj 
1>objd\i386\drmliceval.obj 
1>objd\i386\drmlicparser.obj 
1>objd\i386\drmlicstore.obj 
1>objd\i386\drmmd5.obj 
1>objd\i386\drmoutputlevels.obj 
1>objd\i386\drmprofile.obj 
1>objd\i386\drmsecstore.obj 
1>objd\i386\drmsha1.obj 
1>objd\i386\drmstkalloc.obj 
1>objd\i386\drmutilities.obj 
1>objd\i386\drmxmlutilities.obj 
1>objd\i386\drmviewrights.obj 
1>objd\i386\drmxmlbuilder.obj 
1>objd\i386\drmrevocation.obj 
1>objd\i386\drmxmlparser.obj 
1>objd\i386\drmrsaex.obj 
1>objd\i386\blackbox.obj 
1>objd\i386\cmdlnpars.obj 
1>objd\i386\drmmanager.obj 
1>objd\i386\devicedevcert.obj 
1>objd\i386\devcert.obj 
1>objd\i386\drmcertparser.obj 
1>objd\i386\drmmetering.obj 
1>objd\i386\drmgensyncchallenge.obj 
1>objd\i386\drmsyncstore.obj 
1>objd\i386\serverdevcert.obj 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
1>..\bignum\objd\i386\wmdrm_bignum.lib 
2>SOURCE_ASMMETA (CryptoWrapper.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\CryptoWrapper.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\CryptoWrapper.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll) 
2> set BUILDVERSION=12.4.56.0
2> set OBJDIR=..\..\..\msi\wixobj\objd\i386
2> set TARGETPATH=..\..\..\msi\wixobj\objd\i386
2> echo Build_Status Compiling - Candle (v2.0.5508.0) .\cryptowrapper.wxs cryptowrapper.wixobj
2>Build_Status Compiling - Candle (v2.0.5508.0) .\cryptowrapper.wxs cryptowrapper.wixobj
2> J:\XONLINE_MAIN\public\ext\wix\2.0.5508.0\candle.exe -sw58 -nologo  -out ..\..\..\msi\wixobj\objd\i386\cryptowrapper.wixobj .\cryptowrapper.wxs
1>Build started 10/27/2012 7:31:07 PM.
1> 1>Project "j:\xonline_main\private\common\security\dll\XblSecurity.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\security\dll\XblSecurity.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.14
1>Linking for j:\xonline_main\private\common\marketplace\dll *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\marketplace\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\marketplace\dll
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XblMarketplace.csproj /Target:BuildLinked /p:Pass=Link
1> if exist objd\i386\wmdrm.dll.manifest ( echo Build_Status Embedding Manifest in objd\i386\wmdrm.dll & mt.exe -manifest objd\i386\wmdrm.dll.manifest -outputresource:objd\i386\wmdrm.dll;#2 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
2>cryptowrapper.wxs
1>Build_Status Postbuild Preplace - objd\i386\wmdrm.dll.
1> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\wmdrm.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wmdrm.dll
1>Build_Status Binplace - 1 file(s).
1> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wmdrm.dll
1>binplace j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.dll
1>binplace j:\xonline_main\private\common\security\wmdrm\dll\objd\i386\wmdrm.dll
1>Build_Status Postbuild Postplace - objd\i386\wmdrm.dll.
1> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\wmdrm.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wmdrm.dll
1> if not exist objd\i386\wmdrm.dll.mui (  if not exist objd\i386\wmdrm.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF wmdrm.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live wmdrm.dll  )  )
1>Build_Status LN_MUI_STS: LGNSTS_MUIOFF wmdrm.dll 
1>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live wmdrm.dll 
1>Build started 10/27/2012 7:31:07 PM.
2> rc -l 409 -DSXS_PROCESSOR_ARCHITECTURE="""x86"""  -DSXS_TARGET="""CryptoWrapper.dll"""   -DSYSTEM_COMPATIBLE_ASSEMBLY_NAME="""Microsoft.Windows.SystemCompatible"""  -DLSYSTEM_COMPATIBLE_ASSEMBLY_NAME=L"""Microsoft.Windows.SystemCompatible"""   -DSXS_ASSEMBLY_VERSION="""""" -z "MS Sans Serif,Helv/MS Shell Dlg"  /r /fo objd\i386\helperwrapper.res /D_X86_=1 /Di386=1  /DSTD_CALL /DCONDITION_HANDLING=1 /DNT_UP=1  /DNT_INST=0 /DWIN32=100 /D_NT1X_=100 /DWINNT=1 /D_WIN32_WINNT=0x0600 /DWINVER=0x0600 /D_WIN32_IE=0x0700    /DDEVL=1 /DDBG=1 /D__BUILDMACHINE__=Domo /DFPO=0  /D_DEBUG /D_SYSCRT_DEBUG /D_MT=1  /D_UNICODE /DUNICODE /DDEBUG_BUILD /DDEBUG /DATL_CCOMBSTR_ADDRESS_OF_ASSERT /DMSC_NOOPT /DNTDDI_VERSION=0x06000000    /D_ATL_STATIC_REGISTRY /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\atl90 /I./ /I..\..\..\msi\wixobj\objd\i386 /IJ:\XONLINE_MAIN\public\inc\ /IJ:\XONLINE_MAIN\Public\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\private\common\core\inc /IJ:\XONLINE_MAIN\private\common\xmgmtlib\inc /IJ:\XONLINE_MAIN\private\server\perfapp /IJ:\XONLINE_MAIN\public\ext\xonline-ext\xtools /IJ:\XONLINE_MAIN\private\common\servhlp\cutil /IJ:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\inc /IJ:\XONLINE_MAIN\private\common\core\inc\crypto /IJ:\XONLINE_MAIN\private\common\core\inc\crypto /IJ:\XONLINE_MAIN\private\common\security\crypto\XeCrypto /IJ:\XONLINE_MAIN\public\ext\nfast\inc /IJ:\XONLINE_MAIN\private\common\config\dll\objd\i386 /IJ:\XONLINE_MAIN\private\common\servhlp\configlistener /Ij:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386 /Ij:\xonline_main\COREXT\inc /Ij:\xonline_main\COREXT\inc\objd\i386 /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\COREXT\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\oak\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include .\helperwrapper.rc
1> 1>Project "j:\xonline_main\private\common\marketplace\dll\XblMarketplace.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2>Microsoft (R) Windows (R) Resource Compiler Version 6.1.6723.1
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2> link.exe /out:..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll /machine:ix86 @j:\xonline_main\private\common\security\crypto\helperwrapper\objd\i386\nmCAA.tmp
1> 1>Done Building Project "j:\xonline_main\private\common\marketplace\dll\XblMarketplace.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.14
2>Microsoft (R) Incremental Linker Version 9.00.30729.4984
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2>/SAFESEH 
2>/DYNAMICBASE 
2>/MERGE:_PAGE=PAGE 
2>/MERGE:_TEXT=.text 
2>/SECTION:INIT,d 
2>/OPT:REF 
2>/OPT:ICF 
2>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
2>/INCREMENTAL:NO 
2>/FULLBUILD 
2>/release 
2>/NODEFAULTLIB 
2>/WX:NO 
2>/debug 
2>/debugtype:cv 
2>/version:6.0 
2>/osversion:6.0 
2>/functionpadmin:5 
2>/safeseh 
2>/nxcompat 
2>/merge:.rdata=.text 
2>/pdbcompress 
2>/dynamicbase 
2>/STACK:0x40000,0x1000 
2>/dll 
2>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,CryptoWrapper 
2>/subsystem:windows,6.00 
2>/entry:_DllMainCRTStartup@12 
2>objd\i386\stdafx.obj 
2>..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.exp 
2>objd\i386\helperwrapper.res 
2>objd\i386\helperwrapper.obj 
2>objd\i386\xocryptowrapper.obj 
2>objd\i386\xokeyencryptionhelperwrp.obj 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
2>J:\XONLINE_MAIN\public\ext\xonline-ext\rsa\i386\rsa32.lib 
2>J:\XONLINE_MAIN\public\ext\xonline-ext\rsa\i386\randlib.lib 
2>J:\XONLINE_MAIN\private\common\security\crypto\helperlib\objd\i386\cryptohelper.lib 
2>J:\XONLINE_MAIN\public\ext\nfast\lib\i386\libtnfkm.lib 
2>J:\XONLINE_MAIN\private\common\security\crypto\XeCrypto\objd\i386\XeCrypto.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\oldnames.lib 
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\statemachine *************
1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\statemachine
1>Running MsBuild v3.5
1>Build started 10/27/2012 7:31:08 PM.
1> 1>Project "j:\xonline_main\private\common\statemachine\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\statemachine\dirs.proj" (1) is building "j:\xonline_main\private\common\statemachine\dll\statemachine.csproj" (2) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\statemachine\dirs.proj" (BuildLinked target(s)).
1> 2>Done Building Project "j:\xonline_main\private\common\statemachine\dll\statemachine.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.26
1>Linking for j:\xonline_main\private\common\velocity *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\velocity'
1>BUILDMSG: Processing j:\xonline_main\private\common\velocity
1>Linking for j:\xonline_main\private\common\memcache *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\memcache'
1>BUILDMSG: Processing j:\xonline_main\private\common\memcache
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildLinked /p:Pass=Link
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true VelocityInterop.csproj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:09 PM.
1>Build started 10/27/2012 7:31:09 PM.
1> 1>Project "j:\xonline_main\private\common\velocity\VelocityInterop.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\memcache\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\memcache\dirs.proj" (1) is building "j:\xonline_main\private\common\memcache\Acceleration\AccelerationMemCache.csproj" (2) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\memcache\dirs.proj" (1) is building "j:\xonline_main\private\common\memcache\Interface\IMemCache.csproj" (3) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\memcache\dirs.proj" (1) is building "j:\xonline_main\private\common\memcache\XBanc\XBancMemCache.csproj" (4) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 3>Done Building Project "j:\xonline_main\private\common\memcache\Interface\IMemCache.csproj" (BuildLinked target(s)).
1> 2>Done Building Project "j:\xonline_main\private\common\memcache\Acceleration\AccelerationMemCache.csproj" (BuildLinked target(s)).
1> 1>Done Building Project "j:\xonline_main\private\common\memcache\dirs.proj" (BuildLinked target(s)).
1> 4>Done Building Project "j:\xonline_main\private\common\memcache\XBanc\XBancMemCache.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.40
2> if exist ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.manifest ( echo Build_Status Embedding Manifest in ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll & mt.exe -manifest ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.manifest -outputresource:..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll;#2 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
2>Build_Status Postbuild Preplace - ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll
2>Build_Status Binplace - 1 file(s).
2> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll
2>binplace j:\xonline_main\private\common\msi\wixobj\objd\i386\i386\CryptoWrapper.dll
1> 1>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P j:\xonline_main\build\placefile -:DEST common objd\i386\VelocityInterop.dll -:DEST common VelocityInterop.manifest -:DEST msi\esp\velocity J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\MicrosoftDistributedCache-amd64.exe -:DEST msi\esp\velocity J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\vinstall.sql -:DEST msi\esp\velocity J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\vuninstall.sql
1> binplace j:\xonline_main\private\common\velocity\objd\i386\VelocityInterop.dll
1> binplace j:\xonline_main\private\common\velocity\VelocityInterop.manifest
1> binplace J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\MicrosoftDistributedCache-amd64.exe
1> binplace J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\vinstall.sql
1> binplace J:\XONLINE_MAIN\public\ext\xonline-ext\Velocity\1.0.0.0\Server\vuninstall.sql
1> 1>Done Building Project "j:\xonline_main\private\common\velocity\VelocityInterop.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.46
1>Linking for j:\xonline_main\private\common\certimpx *************
1>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDLL=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\certimpx'
1>BUILDMSG: Processing j:\xonline_main\private\common\certimpx
1>Linking for j:\xonline_main\private\common\health\dll *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\health\dll'
1>BUILDMSG: Processing j:\xonline_main\private\common\health\dll
2>binplace j:\xonline_main\private\common\msi\wixobj\objd\i386\i386\CryptoWrapper.dll
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XblHealthcheck.csproj /Target:BuildLinked /p:Pass=Link
2>Build_Status Postbuild Postplace - ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll
2> if not exist ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.mui (  if not exist ..\..\..\msi\wixobj\objd\i386\i386\CryptoWrapper.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF CryptoWrapper.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live CryptoWrapper.dll  )  )
1>j:\xonline_main\private\common\certimpx: TARGETPATH is obj
2>Build_Status LN_MUI_STS: LGNSTS_MUIOFF CryptoWrapper.dll 
2>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live CryptoWrapper.dll 
1>j:\xonline_main\private\common\certimpx: TARGETPATH is obj
1>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (certimpx.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\certimpx\objd\i386\certimpx.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\certimpx\objd\i386\certimpx.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\certimpx.dll) 
1>'j:\xonline_main\private\common\certimpx\objd\i386\_asmid.inc' is up-to-date
1>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (certimpx.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\certimpx\objd\i386\certimpx.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\certimpx\objd\i386\certimpx.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\certimpx.dll) 
1> rc -l 409 -DSXS_PROCESSOR_ARCHITECTURE="""x86"""  -DSXS_TARGET="""certimpx.dll"""   -DSYSTEM_COMPATIBLE_ASSEMBLY_NAME="""Microsoft.Windows.SystemCompatible"""  -DLSYSTEM_COMPATIBLE_ASSEMBLY_NAME=L"""Microsoft.Windows.SystemCompatible"""   -DSXS_ASSEMBLY_VERSION="""""" -z "MS Sans Serif,Helv/MS Shell Dlg"  /r /fo objd\i386\certimpx.res /D_X86_=1 /Di386=1  /DSTD_CALL /DCONDITION_HANDLING=1 /DNT_UP=1  /DNT_INST=0 /DWIN32=100 /D_NT1X_=100 /DWINNT=1 /D_WIN32_WINNT=0x0600 /DWINVER=0x0600 /D_WIN32_IE=0x0700    /DDEVL=1 /DDBG=1 /D__BUILDMACHINE__=Domo /DFPO=0  /D_DEBUG /D_SYSCRT_DEBUG /D_STL70_ /D_MT=1  /D_UNICODE /DUNICODE /DDEBUG_BUILD /DDEBUG /DATL_CCOMBSTR_ADDRESS_OF_ASSERT /DMSC_NOOPT /DNTDDI_VERSION=0x06000000    /D_ATL_STATIC_REGISTRY /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\atl90 /I./ /Iobjd /IJ:\XONLINE_MAIN\public\inc\ /IJ:\XONLINE_MAIN\Public\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\private\common\core\inc /IJ:\XONLINE_MAIN\private\common\xmgmtlib\inc /IJ:\XONLINE_MAIN\private\server\perfapp /IJ:\XONLINE_MAIN\public\ext\xonline-ext\xtools /IJ:\XONLINE_MAIN\private\common\servhlp\cutil /IJ:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\inc /Ij:\xonline_main\private\common\certimpx\objd\i386 /Ij:\xonline_main\COREXT\inc /Ij:\xonline_main\COREXT\inc\objd\i386 /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\COREXT\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\oak\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include .\certimpx.rc
1>Microsoft (R) Windows (R) Resource Compiler Version 6.1.6723.1
1>Copyright (C) Microsoft Corporation.  All rights reserved.
1> link.exe /out:objd\i386\certimpx.dll /machine:ix86 @j:\xonline_main\private\common\certimpx\objd\i386\nm13EB.tmp
1>Build started 10/27/2012 7:31:09 PM.
1>Microsoft (R) Incremental Linker Version 9.00.30729.4984
1>Copyright (C) Microsoft Corporation.  All rights reserved.
1>/SAFESEH 
1>/DYNAMICBASE 
1>/MERGE:_PAGE=PAGE 
1>/MERGE:_TEXT=.text 
1>/SECTION:INIT,d 
1>/OPT:REF 
1>/OPT:ICF 
1>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
1>/INCREMENTAL:NO 
1>/FULLBUILD 
1>/release 
1>/NODEFAULTLIB 
1>/WX:NO 
1>/debug 
1>/debugtype:cv 
1>/version:6.0 
1>/osversion:6.0 
1>/functionpadmin:5 
1>/safeseh 
1>/nxcompat 
1>/merge:.rdata=.text 
1>/pdbcompress 
1>/dynamicbase 
1>/STACK:0x40000,0x1000 
1>/dll 
1>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,certimpx 
1>/subsystem:windows,6.00 
1>/entry:_DllMainCRTStartup@12 
1>objd\i386\precomp.obj 
1>objd\i386\certimpx.exp 
1>objd\i386\certimpx.res 
1>objd\i386\dllmain.obj 
1>objd\i386\certimpx.obj 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcpmtd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
1> 1>Project "j:\xonline_main\private\common\health\dll\XblHealthcheck.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\health\dll\XblHealthcheck.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.14
2>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\inhbase\dll *************
2>'MSBuild.cmd "inhbase.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
2>BUILDMSG: Processing j:\xonline_main\private\common\inhbase\dll
2>Running MsBuild v3.5
1> if exist objd\i386\certimpx.dll.manifest ( echo Build_Status Embedding Manifest in objd\i386\certimpx.dll & mt.exe -manifest objd\i386\certimpx.dll.manifest -outputresource:objd\i386\certimpx.dll;#2 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
1>Build_Status Postbuild Preplace - objd\i386\certimpx.dll.
1> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\certimpx.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\certimpx.dll
1>Build_Status Binplace - 1 file(s).
1> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\certimpx.dll
1>binplace j:\xonline_main\private\common\certimpx\objd\i386\certimpx.dll
2>Build started 10/27/2012 7:31:10 PM.
2> 1>Project "j:\xonline_main\private\common\inhbase\dll\inhbase.csproj" on node 0 (BuildLinked target(s)).
2> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2> 1>Done Building Project "j:\xonline_main\private\common\inhbase\dll\inhbase.csproj" (BuildLinked target(s)).
2>Build succeeded.
2>Time Elapsed 00:00:00.15
2>Linking for j:\xonline_main\private\common\msi\installutil *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\msi\installutil'
2>BUILDMSG: Processing j:\xonline_main\private\common\msi\installutil
2>j:\xonline_main\private\common\msi\installutil: TARGETPATH is ..\..\..\msi\wixobj\objd\i386
1>Build_Status Postbuild Postplace - objd\i386\certimpx.dll.
1> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\certimpx.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\certimpx.dll
1> if not exist objd\i386\certimpx.dll.mui (  if not exist objd\i386\certimpx.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF certimpx.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live certimpx.dll  )  )
2>j:\xonline_main\private\common\msi\installutil: TARGETPATH is ..\..\..\msi\wixobj\objd\i386
1>Build_Status LN_MUI_STS: LGNSTS_MUIOFF certimpx.dll 
1>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live certimpx.dll 
1>Linking for j:\xonline_main\private\common\servhlp\xhash *************
1>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDLL=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\servhlp\xhash'
1>BUILDMSG: Processing j:\xonline_main\private\common\servhlp\xhash
2>LCG: BUILD_LCE_FILE: 0
1>j:\xonline_main\private\common\servhlp\xhash: TARGETPATH is obj
2>SOURCE_ASMMETA (installutil.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\msi\installutil\objd\i386\installutil.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\msi\installutil\objd\i386\installutil.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (..\..\..\msi\wixobj\objd\i386\i386\installutil.) 
1>j:\xonline_main\private\common\servhlp\xhash: TARGETPATH is obj
2>'j:\xonline_main\private\common\msi\installutil\objd\i386\_asmid.inc' is up-to-date
2>LCG: BUILD_LCE_FILE: 0
1>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (xhash.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\servhlp\xhash\objd\i386\xhash.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\xhash\objd\i386\xhash.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\xhash.dll) 
1>'j:\xonline_main\private\common\servhlp\xhash\objd\i386\_asmid.inc' is up-to-date
2>SOURCE_ASMMETA (installutil.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\msi\installutil\objd\i386\installutil.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\msi\installutil\objd\i386\installutil.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (..\..\..\msi\wixobj\objd\i386\i386\installutil.) 
2> set BUILDVERSION=12.4.56.0
2> set OBJDIR=..\..\..\msi\wixobj\objd\i386
2> set TARGETPATH=..\..\..\msi\wixobj\objd\i386
2> echo Build_Status Compiling - Candle (v2.0.5508.0) .\installutil.wxs installutil.wixobj
1>LCG: BUILD_LCE_FILE: 0
2>Build_Status Compiling - Candle (v2.0.5508.0) .\installutil.wxs installutil.wixobj
2> J:\XONLINE_MAIN\public\ext\wix\2.0.5508.0\candle.exe -sw58 -nologo  -out ..\..\..\msi\wixobj\objd\i386\installutil.wixobj .\installutil.wxs
1>SOURCE_ASMMETA (xhash.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\servhlp\xhash\objd\i386\xhash.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\xhash\objd\i386\xhash.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\xhash.dll) 
2>installutil.wxs
1>Compiling and Linking j:\xonline_main\private\common\servhlp\cutil\test *************
1>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\servhlp\cutil\test'
1>BUILDMSG: Processing j:\xonline_main\private\common\servhlp\cutil\test
1>j:\xonline_main\private\common\servhlp\cutil\test: TARGETPATH is obj
1>j:\xonline_main\private\common\servhlp\cutil\test building test code in dev tree
2>Compiling and Linking j:\xonline_main\private\common\servhlp\lua\src\lua *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\servhlp\lua\src\lua'
2>BUILDMSG: Processing j:\xonline_main\private\common\servhlp\lua\src\lua
2>j:\xonline_main\private\common\servhlp\lua\src\lua: TARGETPATH is obj
1>j:\xonline_main\private\common\servhlp\cutil\test: TARGETPATH is obj
1>j:\xonline_main\private\common\servhlp\cutil\test building test code in dev tree
1>LCG: BUILD_LCE_FILE: 0
2>j:\xonline_main\private\common\servhlp\lua\src\lua: TARGETPATH is obj
1>SOURCE_ASMMETA (test_cutil.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\test_cutil.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\test_cutil.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\test_cutil.exe) 
1> set BUILDMSG=making _asmid.inc
1> del j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc.temp 2>nul
2>LCG: BUILD_LCE_FILE: 0
1> idtool.exe -id test_cutil,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -GenerateMakefileInc > j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc.temp || @echo error : error idtool error
1> asmIdToAttribs.cmd "test_cutil,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral" j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc.temp tlbimp
2>SOURCE_ASMMETA (lua.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\lua.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\lua.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\lua.exe) 
2> set BUILDMSG=making _asmid.inc
2> del j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc.temp 2>nul
2> idtool.exe -id lua,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -GenerateMakefileInc > j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc.temp || @echo error : error idtool error
2> asmIdToAttribs.cmd "lua,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral" j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc.temp tlbimp
1> echo _ASSEMBLY_IDENTITY=test_cutil,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral >> j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc.temp
1> move j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc.temp j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.inc >nul
2> echo _ASSEMBLY_IDENTITY=lua,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral >> j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc.temp
2> move j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc.temp j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.inc >nul
1>LCG: BUILD_LCE_FILE: 0
2>LCG: BUILD_LCE_FILE: 0
1>SOURCE_ASMMETA (test_cutil.asmmeta) 
1>_O_ASMMETA (j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\test_cutil.asmmeta) 
1>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\test_cutil.asmmeta_ver_pass2) 
1>ASMMETA_INPUT (objd\i386\test_cutil.exe) 
1> set BUILDMSG=making _asmid.xml
1> del j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.xml j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.xml.temp 2>nul
1> idtool.exe -id test_cutil,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -EmptyComponentManifest -out j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.xml.temp || @echo error : error idtool error
2>SOURCE_ASMMETA (lua.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\lua.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\lua.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\lua.exe) 
2> set BUILDMSG=making _asmid.xml
2> del j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.xml j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.xml.temp 2>nul
1> move j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.xml.temp j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\_asmid.xml >nul
2> idtool.exe -id lua,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -EmptyComponentManifest -out j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.xml.temp || @echo error : error idtool error
1>cl.exe /nologo /Ii386 /I. /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\atl90 /I.\..\ /I.\..\ /I./ /Iobjd /IJ:\XONLINE_MAIN\public\inc\ /IJ:\XONLINE_MAIN\Public\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\private\common\core\inc /IJ:\XONLINE_MAIN\private\common\xmgmtlib\inc /IJ:\XONLINE_MAIN\private\server\perfapp /IJ:\XONLINE_MAIN\public\ext\xonline-ext\xtools /IJ:\XONLINE_MAIN\private\common\servhlp\cutil /IJ:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\inc /Ij:\xonline_main\private\common\servhlp\cutil\test\objd\i386 /Ij:\xonline_main\COREXT\inc /Ij:\xonline_main\COREXT\inc\objd\i386 /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\COREXT\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\oak\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /D_X86_=1 /Di386=1 /DSTD_CALL /DCONDITION_HANDLING=1 /DNT_UP=1 /DNT_INST=0 /DWIN32=100 /D_NT1X_=100 /DWINNT=1 /D_WIN32_WINNT=0x0600 /DWINVER=0x0600 /D_WIN32_IE=0x0700 /DDEVL=1 /DDBG=1 /D__BUILDMACHINE__=Domo /DFPO=0 /D_DEBUG /D_SYSCRT_DEBUG /D_MT=1 /D_UNICODE /DUNICODE /DDEBUG_BUILD /DDEBUG /DATL_CCOMBSTR_ADDRESS_OF_ASSERT -D_TEST=1 /DTEST_CODE /DMSC_NOOPT /DNTDDI_VERSION=0x06000000 /D_ATL_STATIC_REGISTRY /c /Zl /Zp8 /Gy /Gm- /W3 /WX /wd4996 /wd4947 /Gz /hotpatch /EHs-c- /GR /GF /GS /Zi /Odi /Oy- /Fdj:\xonline_main\private\common\servhlp\cutil\test\objd\i386\ -DKMDF_MAJOR_VERSION=01 -DKMDF_MINOR_VERSION=005 /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\warning.h /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\Base\inc\warning_x.h /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\inc\testcode.h /Yltest_cutil /Ycprecomp.h /Fpobjd\i386\precomp.pch /Fo"objd\i386\precomp.obj" /Tp
1>#include "precomp.h"
2> move j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.xml.temp j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\_asmid.xml >nul
1>pch_hdr.src
2> cl.exe /nologo @j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\cl.rsp
2>lua.c
2> link.exe /out:objd\i386\lua.exe /machine:ix86 @j:\xonline_main\private\common\servhlp\lua\src\lua\objd\i386\nm1C53.tmp
2>Microsoft (R) Incremental Linker Version 9.00.30729.4984
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2>/SAFESEH 
2>/DYNAMICBASE 
2>/MERGE:_PAGE=PAGE 
2>/MERGE:_TEXT=.text 
2>/SECTION:INIT,d 
2>/OPT:REF 
2>/OPT:ICF 
2>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
2>/INCREMENTAL:NO 
2>/FULLBUILD 
2>/release 
2>/NODEFAULTLIB 
2>/WX:NO 
2>/debug 
2>/debugtype:cv 
2>/version:6.0 
2>/osversion:6.0 
2>/functionpadmin:5 
2>/safeseh 
2>/nxcompat 
2>/merge:.rdata=.text 
2>/pdbcompress 
2>/STACK:0x40000,0x2000 
2>/tsaware 
2>/dynamicbase 
2>/subsystem:console,6.00 
2>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,usermode 
2>/entry:mainCRTStartup 
2>objd\i386\lua.obj 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\lua\src\lib\objd\i386\liblua.lib 
2> if exist objd\i386\lua.exe.manifest ( echo Build_Status Embedding Manifest in objd\i386\lua.exe & mt.exe -manifest objd\i386\lua.exe.manifest -outputresource:objd\i386\lua.exe;#1 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
2>Build_Status Postbuild Preplace - objd\i386\lua.exe.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\lua.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P J:\XONLINE_MAIN\build\placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\lua.exe
2>Build_Status Binplace - 1 file(s).
2> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P J:\XONLINE_MAIN\build\placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\lua.exe
2>Build_Status Postbuild Postplace - objd\i386\lua.exe.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\lua.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P J:\XONLINE_MAIN\build\placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\lua.exe
2> if not exist objd\i386\lua.exe.mui (  if not exist objd\i386\lua.exe.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF lua.exe &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live lua.exe  )  )
2>Build_Status LN_MUI_STS: LGNSTS_MUIOFF lua.exe 
2>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live lua.exe 
2>Linking for j:\xonline_main\private\common\wsreader *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDLL=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\wsreader'
2>BUILDMSG: Processing j:\xonline_main\private\common\wsreader
2>j:\xonline_main\private\common\wsreader: TARGETPATH is obj
2>j:\xonline_main\private\common\wsreader: TARGETPATH is obj
2>LCG: BUILD_LCE_FILE: 0
2>SOURCE_ASMMETA (wsreader.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\wsreader\objd\i386\wsreader.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\wsreader\objd\i386\wsreader.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\wsreader.dll) 
2>'j:\xonline_main\private\common\wsreader\objd\i386\_asmid.inc' is up-to-date
2>LCG: BUILD_LCE_FILE: 0
2>SOURCE_ASMMETA (wsreader.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\wsreader\objd\i386\wsreader.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\wsreader\objd\i386\wsreader.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\wsreader.dll) 
2> set BUILDVERSION=12.4.56.0
2> set OBJDIR=..\..\msi\wixobj\objd\i386
2> set TARGETPATH=objd
2> echo Build_Status Compiling - Candle (v2.0.5508.0) .\wsreader.wxs wsreader.wixobj
2>Build_Status Compiling - Candle (v2.0.5508.0) .\wsreader.wxs wsreader.wixobj
2> J:\XONLINE_MAIN\public\ext\wix\2.0.5508.0\candle.exe -sw58 -nologo  -out ..\..\msi\wixobj\objd\i386\wsreader.wixobj .\wsreader.wxs
2>wsreader.wxs
2> rc -l 409 -DSXS_PROCESSOR_ARCHITECTURE="""x86"""  -DSXS_TARGET="""wsreader.dll"""   -DSYSTEM_COMPATIBLE_ASSEMBLY_NAME="""Microsoft.Windows.SystemCompatible"""  -DLSYSTEM_COMPATIBLE_ASSEMBLY_NAME=L"""Microsoft.Windows.SystemCompatible"""   -DSXS_ASSEMBLY_VERSION="""""" -z "MS Sans Serif,Helv/MS Shell Dlg"  /r /fo objd\i386\wsreader.res /D_X86_=1 /Di386=1  /DSTD_CALL /DCONDITION_HANDLING=1 /DNT_UP=1  /DNT_INST=0 /DWIN32=100 /D_NT1X_=100 /DWINNT=1 /D_WIN32_WINNT=0x0600 /DWINVER=0x0600 /D_WIN32_IE=0x0700    /DDEVL=1 /DDBG=1 /D__BUILDMACHINE__=Domo /DFPO=0  /D_DEBUG /D_SYSCRT_DEBUG /D_STL70_ /D_MT=1  /D_UNICODE /DUNICODE /DDEBUG_BUILD /DDEBUG /DATL_CCOMBSTR_ADDRESS_OF_ASSERT -DUNICODE -D_UNICODE -D_M.cs /DMSC_NOOPT /DNTDDI_VERSION=0x06000000    /D_ATL_STATIC_REGISTRY /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\atl90 /I./ /Iobjd /IJ:\XONLINE_MAIN\public\inc\ /IJ:\XONLINE_MAIN\Public\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\private\common\core\inc /IJ:\XONLINE_MAIN\private\common\xmgmtlib\inc /IJ:\XONLINE_MAIN\private\server\perfapp /IJ:\XONLINE_MAIN\public\ext\xonline-ext\xtools /IJ:\XONLINE_MAIN\private\common\servhlp\cutil /IJ:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\inc /Ij:\xonline_main\private\common\wsreader\objd\i386 /Ij:\xonline_main\COREXT\inc /Ij:\xonline_main\COREXT\inc\objd\i386 /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\COREXT\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\oak\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include .\wsreader.rc
2>Microsoft (R) Windows (R) Resource Compiler Version 6.1.6723.1
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2> link.exe /out:objd\i386\wsreader.dll /machine:ix86 @j:\xonline_main\private\common\wsreader\objd\i386\nm2105.tmp
2>Microsoft (R) Incremental Linker Version 9.00.30729.4984
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2>/SAFESEH 
2>/DYNAMICBASE 
2>/MERGE:_PAGE=PAGE 
2>/MERGE:_TEXT=.text 
2>/SECTION:INIT,d 
2>/OPT:REF 
2>/OPT:ICF 
2>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
2>/INCREMENTAL:NO 
2>/FULLBUILD 
2>/release 
2>/NODEFAULTLIB 
2>/WX:NO 
2>/debug 
2>/debugtype:cv 
2>/version:6.0 
2>/osversion:6.0 
2>/functionpadmin:5 
2>/safeseh 
2>/nxcompat 
2>/merge:.rdata=.text 
2>/pdbcompress 
2>/dynamicbase 
2>/STACK:0x40000,0x1000 
2>/dll 
2>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,wsreader 
2>/subsystem:windows,6.00 
2>/entry:_DllMainCRTStartup@12 
2>objd\i386\stdafx.obj 
2>objd\i386\wsreader.exp 
2>objd\i386\wsreader.res 
2>objd\i386\wsreader.obj 
2>objd\i386\wsdatareader.obj 
2>objd\i386\wsresultset.obj 
2>objd\i386\wsparameters.obj 
2>objd\i386\wssession.obj 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcpmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
1> cl.exe /nologo @j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\cl.rsp
1>cu_base.cpp
1>cu_collection.cpp
1>cu_error.cpp
1>cu_system.cpp
1>cu_timer.cpp
1>cu_trace.cpp
1>cu_tpool.cpp
1>cu_stream.cpp
1>cu_base64.cpp
1>Generating Code...
1> cl.exe /nologo @j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\cl.rsp
1>main.cpp
1>tutil.cpp
1>Generating Code...
2> if exist objd\i386\wsreader.dll.manifest ( echo Build_Status Embedding Manifest in objd\i386\wsreader.dll & mt.exe -manifest objd\i386\wsreader.dll.manifest -outputresource:objd\i386\wsreader.dll;#2 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
1> link.exe /out:objd\i386\test_cutil.exe /machine:ix86 @j:\xonline_main\private\common\servhlp\cutil\test\objd\i386\nm229C.tmp
1>Microsoft (R) Incremental Linker Version 9.00.30729.4984
1>Copyright (C) Microsoft Corporation.  All rights reserved.
1>/SAFESEH 
1>/DYNAMICBASE 
1>/MERGE:_PAGE=PAGE 
1>/MERGE:_TEXT=.text 
1>/SECTION:INIT,d 
1>/OPT:REF 
1>/OPT:ICF 
1>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
1>/INCREMENTAL:NO 
1>/FULLBUILD 
1>/release 
1>/NODEFAULTLIB 
1>/WX:NO 
1>/debug 
1>/debugtype:cv 
1>/version:6.0 
1>/osversion:6.0 
1>/functionpadmin:5 
1>/safeseh 
1>/nxcompat 
1>/merge:.rdata=.text 
1>/pdbcompress 
1>/STACK:0x40000,0x2000 
1>/tsaware 
1>/dynamicbase 
1>/subsystem:console,6.00 
1>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,usermode 
1>/entry:mainCRTStartup 
1>objd\i386\precomp.obj 
1>objd\i386\cu_base.obj 
1>objd\i386\cu_collection.obj 
1>objd\i386\cu_error.obj 
1>objd\i386\cu_system.obj 
1>objd\i386\cu_timer.obj 
1>objd\i386\cu_trace.obj 
1>objd\i386\cu_tpool.obj 
1>objd\i386\cu_stream.obj 
1>objd\i386\cu_base64.obj 
1>objd\i386\main.obj 
1>objd\i386\tutil.obj 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
1>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
1>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
2>Build_Status Postbuild Preplace - objd\i386\wsreader.dll.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\wsreader.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wsreader.dll
2>Build_Status Binplace - 1 file(s).
2> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wsreader.dll
2>binplace j:\xonline_main\private\common\wsreader\objd\i386\wsreader.dll
2>Build_Status Postbuild Postplace - objd\i386\wsreader.dll.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\wsreader.dll --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\wsreader.dll
2> if not exist objd\i386\wsreader.dll.mui (  if not exist objd\i386\wsreader.dll.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF wsreader.dll &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live wsreader.dll  )  )
2>Build_Status LN_MUI_STS: LGNSTS_MUIOFF wsreader.dll 
2>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live wsreader.dll 
2>Linking for j:\xonline_main\private\common\configsn *************
2>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\configsn'
2>BUILDMSG: Processing j:\xonline_main\private\common\configsn
1>Linking for j:\xonline_main\private\common\test\bootstrap *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap'
1>BUILDMSG: Processing j:\xonline_main\private\common\test\bootstrap
2> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true ConfigSN.csproj /Target:BuildLinked /p:Pass=Link
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildLinked /p:Pass=Link
2>Build started 10/27/2012 7:31:14 PM.
1>Build started 10/27/2012 7:31:14 PM.
2> 1>Project "j:\xonline_main\private\common\configsn\ConfigSN.csproj" on node 0 (BuildLinked target(s)).
2> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2> 1>Done Building Project "j:\xonline_main\private\common\configsn\ConfigSN.csproj" (BuildLinked target(s)).
2>Build succeeded.
2>Time Elapsed 00:00:00.15
1> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) on node 0 (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\bdk\emulators.bdk.csproj" (4) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\controller\emulators.controller.csproj" (5) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\emulators.ppsaProfile.csproj" (6) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\abch\emulators.abch.csproj" (7) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) on node 0 (BuildLinked target(s)).
1> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\STFCore.csproj" (8) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> if exist objd\i386\test_cutil.exe.manifest ( echo Build_Status Embedding Manifest in objd\i386\test_cutil.exe & mt.exe -manifest objd\i386\test_cutil.exe.manifest -outputresource:objd\i386\test_cutil.exe;#1 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
1> 8>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P j:\xonline_main\build\placefile /:DBG /j -:DEST test\StfTests:tools\Aasmanager:test\tools\DBPoster:test\StfTestsTemp:test\Tools\EventCountDB objd\i386\STFCore.dll
1> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\common\fingerprint\Fingerprint.csproj" (9) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\Catalog\CatalogTestLib.csproj" (10) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\dmp\emulators.dmp.csproj" (12) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\musicnet\emulators.musicnet.csproj" (13) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\emulators.ppsaCredential.csproj" (14) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\ups\emulators.ups.csproj" (15) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\framework\emulators.framework.csproj" (11) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\objd\i386\STFCore.dll
1> 8>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFCore\STFCore.csproj" (BuildLinked target(s)).
1> 9>Done Building Project "J:\XONLINE_MAIN\private\test\common\fingerprint\Fingerprint.csproj" (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) on node 1 (BuildLinked target(s)).
1> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\Emulators.MSNRR.Aggregator.csproj" (17) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\STFLiveConfig.csproj" (18) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 10>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\CatalogTestLib.dll
1> binplace J:\XONLINE_MAIN\private\test\Catalog\objd\i386\CatalogTestLib.dll
1> 10>Done Building Project "J:\XONLINE_MAIN\private\test\Catalog\CatalogTestLib.csproj" (BuildLinked target(s)).
1> 11>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Framework.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\framework\objd\i386\Emulators.Framework.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\framework\objd\i386\Emulators.Framework.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\framework\objd\i386\Emulators.Framework.dll
1> 11>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\framework\emulators.framework.csproj" (BuildLinked target(s)).
1> 18>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFLiveConfig.dll stf.xml
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\objd\i386\STFLiveConfig.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\objd\i386\STFLiveConfig.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\objd\i386\STFLiveConfig.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\objd\i386\STFLiveConfig.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\stf.xml
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\stf.xml
1> 18>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveConfig\STFLiveConfig.csproj" (BuildLinked target(s)).
1> 17>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.MSNRR.Aggregator.dll AggregatorEmulator.asmx
1> 12>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Dmp.dll DMPEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\dmp\objd\i386\Emulators.Dmp.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\dmp\objd\i386\Emulators.Dmp.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\dmp\objd\i386\Emulators.Dmp.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\dmp\DMPEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\dmp\DMPEmulator.asmx
1> 14>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.ppsaCredential.dll ppsaCredentialEmulator.asmx
1> 17>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\objd\i386\Emulators.MSNRR.Aggregator.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\objd\i386\Emulators.MSNRR.Aggregator.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\objd\i386\Emulators.MSNRR.Aggregator.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\AggregatorEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\AggregatorEmulator.asmx
1> 6>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.ppsaProfile.dll ppsaProfileEmulator.asmx CleanupEmulator.vbs CreateIISApp.vbs InstallEmulators.bat
1> 17>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\Aggregator\Emulators.MSNRR.Aggregator.csproj" (BuildLinked target(s)).
1> 12>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\dmp\emulators.dmp.csproj" (BuildLinked target(s)).
1> 14>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\objd\i386\Emulators.ppsaCredential.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\objd\i386\Emulators.ppsaCredential.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\objd\i386\Emulators.ppsaCredential.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\ppsaCredentialEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\ppsaCredentialEmulator.asmx
1> 14>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ppsaCredential\emulators.ppsaCredential.csproj" (BuildLinked target(s)).
1> 15>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.ups.dll upsEmulator.asmx
1> 6>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\objd\i386\Emulators.ppsaProfile.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\objd\i386\Emulators.ppsaProfile.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\objd\i386\Emulators.ppsaProfile.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\ppsaProfileEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\ppsaProfileEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\CleanupEmulator.vbs
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\CreateIISApp.vbs
1> binplace J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\InstallEmulators.bat
1> 6>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ppsaProfile\emulators.ppsaProfile.csproj" (BuildLinked target(s)).
1> 4>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Bdk.dll BdkEmulator.asmx
1> 15>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\ups\objd\i386\Emulators.ups.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ups\objd\i386\Emulators.ups.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ups\objd\i386\Emulators.ups.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\ups\upsEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\ups\upsEmulator.asmx
1> 15>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\ups\emulators.ups.csproj" (BuildLinked target(s)).
1> 13>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Musicnet.dll MusicNetEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\musicnet\objd\i386\Emulators.Musicnet.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\musicnet\objd\i386\Emulators.Musicnet.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\musicnet\objd\i386\Emulators.Musicnet.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\musicnet\MusicNetEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\musicnet\MusicNetEmulator.asmx
1> 13>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\musicnet\emulators.musicnet.csproj" (BuildLinked target(s)).
1> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveTools\STFLiveTools.csproj" (20) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\Emulators.MSNRR.MultiRating.csproj" (21) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 3>Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj" (19) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 4>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\bdk\objd\i386\Emulators.Bdk.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\bdk\objd\i386\Emulators.Bdk.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\bdk\objd\i386\Emulators.Bdk.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\bdk\BdkEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\bdk\BdkEmulator.asmx
1> 4>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\bdk\emulators.bdk.csproj" (BuildLinked target(s)).
1> 7>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.abch.dll abchEmulator.asmx
1> 21>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.MSNRR.MultiRating.dll MultiRatingEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\objd\i386\Emulators.MSNRR.MultiRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\objd\i386\Emulators.MSNRR.MultiRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\objd\i386\Emulators.MSNRR.MultiRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\MultiRatingEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\MultiRatingEmulator.asmx
1> 21>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\MultiRating\Emulators.MSNRR.MultiRating.csproj" (BuildLinked target(s)).
1> 7>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\abch\objd\i386\Emulators.abch.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\abch\objd\i386\Emulators.abch.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\abch\objd\i386\Emulators.abch.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\abch\abchEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\abch\abchEmulator.asmx
1> 5>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Controller.dll Controller.asmx web.config
1> 7>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\abch\emulators.abch.csproj" (BuildLinked target(s)).
1> 5>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\objd\i386\Emulators.Controller.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\objd\i386\Emulators.Controller.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\objd\i386\Emulators.Controller.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\Controller.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\Controller.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\web.config
1> binplace J:\XONLINE_MAIN\private\server\emulators\controller\web.config
1> 5>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\controller\emulators.controller.csproj" (BuildLinked target(s)).
1> 19>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFLive.dll Utilities\DBPoster\uodb-tables.ini Utilities\FclFuzzer\FclDefinitions.xml Utilities\FclFuzzer\FclStrategy.xml Utilities\FclFuzzer\FclTransformations.xml XSTS\issueRequestBase.xml stf.xml J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.pdb J:\XONLINE_MAIN\public\ext\BouncyCastle\BouncyCastle.Crypto.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\objd\i386\STFLive.dll
1>NMAKE : [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
1>NMAKE : [Project] J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj
1> from J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj
1> from j:\xonline_main\private\common\test\bootstrap\dirs.proj
1> 19>BINPLACE : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1>j:\xonline_main\private\common\test\bootstrap\19>binplace : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\objd\i386\STFLive.dll
1> 19>BINPLACE : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1>j:\xonline_main\private\common\test\bootstrap\19>binplace : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\objd\i386\STFLive.dll
1> 19>BINPLACE : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1>j:\xonline_main\private\common\test\bootstrap\19>binplace : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1> binplace J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\objd\i386\STFLive.dll
1> 19>BINPLACE : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1>j:\xonline_main\private\common\test\bootstrap\19>binplace : error BNP0000: File to place doesn't exist or isn't readable. (0x00000002)
1> 19>BINPLACE : fatal error BNP0000: Unable to place file objd\i386\STFLive.dll - exiting.
1>j:\xonline_main\private\common\test\bootstrap\19>binplace : error BNP0000: Unable to place file objd\i386\STFLive.dll - exiting.
1> 19>j:\xonline_main\public\ext\tools\CoreXT.Common.targets(593,9): error MSB3073: The command "binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFLive.dll Utilities\DBPoster\uodb-tables.ini Utilities\FclFuzzer\FclDefinitions.xml Utilities\FclFuzzer\FclStrategy.xml Utilities\FclFuzzer\FclTransformations.xml XSTS\issueRequestBase.xml stf.xml J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.pdb J:\XONLINE_MAIN\public\ext\BouncyCastle\BouncyCastle.Crypto.dll" exited with code 77.
1>j:\xonline_main\private\common\test\bootstrap\19>j:\xonline_main\public\ext\tools\corext.common.targets(593,9) : error MSB3073: The command "binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFLive.dll Utilities\DBPoster\uodb-tables.ini Utilities\FclFuzzer\FclDefinitions.xml Utilities\FclFuzzer\FclStrategy.xml Utilities\FclFuzzer\FclTransformations.xml XSTS\issueRequestBase.xml stf.xml J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.ServiceLocation.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Practices.Unity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Configuration.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Diagnostics.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Identity.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Client.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Privacy.Interfaces.pdb J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.dll J:\XONLINE_MAIN\public\ext\xonline-ext\privacy\objd\Microsoft.Xbox.Unity.pdb J:\XONLINE_MAIN\public\ext\BouncyCastle\BouncyCastle.Crypto.dll" exited with code 77.
1> 19>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLive\STFLive.csproj" (BuildLinked target(s)) -- FAILED.
1> 3>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\dirs.proj" (BuildLinked target(s)) -- FAILED.
1> 20>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\ServerTestFramework\STFLiveTools\STFLiveTools.csproj" (BuildLinked target(s)) -- FAILED.
1> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\Emulators.MSNRR.NickNameListener.csproj" (22) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 16>Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (16) is building "J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\Emulators.MSNRR.SingleRating.csproj" (23) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 22>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.MSNRR.NickNameListener.dll NickNameListenerEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\objd\i386\Emulators.MSNRR.NickNameListener.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\objd\i386\Emulators.MSNRR.NickNameListener.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\objd\i386\Emulators.MSNRR.NickNameListener.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\NickNameListenerEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\NickNameListenerEmulator.asmx
1> 22>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\NickNameListener\Emulators.MSNRR.NickNameListener.csproj" (BuildLinked target(s)).
1> 23>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.MSNRR.SingleRating.dll SingleRatingEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\objd\i386\Emulators.MSNRR.SingleRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\objd\i386\Emulators.MSNRR.SingleRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\objd\i386\Emulators.MSNRR.SingleRating.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\SingleRatingEmulator.asmx
1> binplace J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\SingleRatingEmulator.asmx
1> 23>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\SingleRating\Emulators.MSNRR.SingleRating.csproj" (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\emulators.CTPTransactionService.csproj" (24) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 24>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.TransactionService.dll TransactionServiceEmulator.svc
1> binplace J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\objd\i386\Emulators.TransactionService.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\objd\i386\Emulators.TransactionService.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\objd\i386\Emulators.TransactionService.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\TransactionServiceEmulator.svc
1> binplace J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\TransactionServiceEmulator.svc
1> 24>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\CTPTransactionService\emulators.CTPTransactionService.csproj" (BuildLinked target(s)).
1> 16>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\msnrr\dirs.proj" (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\finbus\emulators.finbus.csproj" (25) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 25>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.FinBus.dll FinBusEmulator.svc
1> binplace J:\XONLINE_MAIN\private\server\emulators\finbus\objd\i386\Emulators.FinBus.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\finbus\objd\i386\Emulators.FinBus.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\finbus\objd\i386\Emulators.FinBus.dll
1> binplace J:\XONLINE_MAIN\private\server\emulators\finbus\FinBusEmulator.svc
1> binplace J:\XONLINE_MAIN\private\server\emulators\finbus\FinBusEmulator.svc
1> 25>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\finbus\emulators.finbus.csproj" (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\server\emulators\client\emulators.client.csproj" (26) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\dirs.proj" (BuildLinked target(s)).
1> 1>Done Building Project "j:\xonline_main\private\common\test\bootstrap\dirs.proj" (BuildLinked target(s)) -- FAILED.
1> 26>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\Emulators.Client.dll SingleRatingEmulator.asmx
1> 26>Done Building Project "J:\XONLINE_MAIN\private\server\emulators\client\emulators.client.csproj" (BuildLinked target(s)).
1>Build FAILED.
1>Time Elapsed 00:00:01.77
1>NMAKE : fatal error U1077: 'J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe' : return code '0x1'
1>NMAKE : fatal error U1077: 'J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe' : return code '0x1'
1>Stop.
1>nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap failed - rc = 2

1>Linking for j:\xonline_main\private\common\test\bootstrap2 *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bootstrap2'
1>BUILDMSG: Processing j:\xonline_main\private\common\test\bootstrap2
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:16 PM.
1> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) on node 0 (BuildLinked target(s)).
1> 2>Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\LiveInternalTest.csproj" (4) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) on node 1 (BuildLinked target(s)).
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\UnitTests\UnitTests.csproj" (7) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\DDTHelp\DDTHelp.csproj" (8) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (1) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (6) on node 1 (BuildLinked target(s)).
1> 6>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\STFGuiPlugins.csproj" (9) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 6>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) on node 0 (BuildLinked target(s)).
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\STFGuiPluginFunctional.csproj" (11) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\DDTCore\DDTCore.csproj" (12) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\TestDDTActions.csproj" (13) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\DDT\DDT.csproj" (14) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 5>Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (5) is building "J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\DDT.StfTests.csproj" (15) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 2>Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (2) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) on node 0 (BuildLinked target(s)).
1> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.csproj" (17) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 6>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (6) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STFGui.csproj" (16) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 4>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\LiveInternalTest.csproj" (4) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\LiveLibInternal.csproj" (18) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 12>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDTCore\DDTCore.csproj" (BuildLinked target(s)).
1> 9>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPlugins.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\objd\i386\STFGuiPlugins.dll
1> 17>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\LiveLib.dll Countries.xml LiveLib.xml
1> 9>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\objd\i386\STFGuiPlugins.dll
1> 9>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\GuiCommon\STFGuiPlugins.csproj" (BuildLinked target(s)).
1> 11>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginFunctional.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\objd\i386\STFGuiPluginFunctional.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\objd\i386\STFGuiPluginFunctional.dll
1> 11>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\FunctionalRunner\STFGuiPluginFunctional.csproj" (BuildLinked target(s)).
1> 7>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\DDTUnitTests.exe DDTUnitTests.xml outsourced.xml
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\objd\i386\DDTUnitTests.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\objd\i386\DDTUnitTests.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\DDTUnitTests.xml
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\DDTUnitTests.xml
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\outsourced.xml
1> binplace J:\XONLINE_MAIN\private\test\DDT\UnitTests\outsourced.xml
1> 7>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\UnitTests\UnitTests.csproj" (BuildLinked target(s)).
1> 8>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\DDTHelp.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\DDTHelp\objd\i386\DDTHelp.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\DDTHelp\objd\i386\DDTHelp.exe
1> 8>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDTHelp\DDTHelp.csproj" (BuildLinked target(s)).
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\STFGuiPluginStress.csproj" (19) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 17>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\objd\i386\LiveLib.dll
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\objd\i386\LiveLib.dll
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\Countries.xml
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\Countries.xml
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.xml
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.xml
1> 17>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.csproj" (BuildLinked target(s)).
1> 18>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\LiveLibInternal.dll ..\lib\Countries.xml ..\lib\LiveLib.xml
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\objd\i386\LiveLibInternal.dll
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\objd\i386\LiveLibInternal.dll
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\Countries.xml
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\lib\LiveLib.xml
1> 18>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\internallib\LiveLibInternal.csproj" (BuildLinked target(s)).
1> 19>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile objd\i386\STFGuiPluginStress.dll j:\xonline_main\public\ext\WTT\Microsoft.Wtt.Log.dll j:\xonline_main\public\ext\WTT\WTTLog.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\objd\i386\STFGuiPluginStress.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\objd\i386\STFGuiPluginStress.dll
1> binplace j:\xonline_main\public\ext\WTT\Microsoft.Wtt.Log.dll
1> binplace j:\xonline_main\public\ext\WTT\Microsoft.Wtt.Log.dll
1> binplace j:\xonline_main\public\ext\WTT\WTTLog.dll
1> binplace j:\xonline_main\public\ext\WTT\WTTLog.dll
1> 19>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\StressRunner\STFGuiPluginStress.csproj" (BuildLinked target(s)).
1> 4>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\LiveInternalTest.dll
1> 16>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGui.exe STfGui.exe.config
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\objd\i386\STFGui.exe
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\objd\i386\STFGui.exe
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STfGui.exe.config
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STfGui.exe.config
1> 16>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\App\STFGui.csproj" (BuildLinked target(s)).
1> 14>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\DDT.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\DDT\objd\i386\DDT.exe
1> binplace J:\XONLINE_MAIN\private\test\DDT\DDT\objd\i386\DDT.exe
1> 14>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDT\DDT.csproj" (BuildLinked target(s)).
1> 4>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\objd\i386\LiveInternalTest.dll
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\objd\i386\LiveInternalTest.dll
1> 4>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveInternalTest\LiveInternalTest.csproj" (BuildLinked target(s)).
1> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\unittests\UnitTests.csproj" (20) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 3>Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (3) is building "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\minrunner\MinRunner.csproj" (21) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\STFGuiPluginWireFuzz.csproj" (22) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 15>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\DDT.StfTests\DDT.StfTests.csproj" (BuildLinked target(s)).
1> 13>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\TestDDTActions.dll
1> binplace J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\objd\i386\TestDDTActions.dll
1> binplace J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\objd\i386\TestDDTActions.dll
1> 13>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\TestDDTActions\TestDDTActions.csproj" (BuildLinked target(s)).
1> 5>Done Building Project "J:\XONLINE_MAIN\private\test\DDT\dirs.proj" (BuildLinked target(s)).
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\STFGuiPluginEnvironment.csproj" (23) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\STFGuiPluginRegDB.csproj" (24) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\TestDB\STFGuiPluginTestDB.csproj" (25) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 10>Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (10) is building "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\STFGuiPluginMonitor.csproj" (26) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 22>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginWireFuzz.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\objd\i386\STFGuiPluginWireFuzz.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\objd\i386\STFGuiPluginWireFuzz.dll
1> 20>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile objd\i386\LiveLibUnitTests.dll
1> 22>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\WireDataFuzzer\STFGuiPluginWireFuzz.csproj" (BuildLinked target(s)).
1> 20>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\unittests\objd\i386\LiveLibUnitTests.dll
1> 20>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\unittests\UnitTests.csproj" (BuildLinked target(s)).
1> 23>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginEnvironment.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\objd\i386\STFGuiPluginEnvironment.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\objd\i386\STFGuiPluginEnvironment.dll
1> 23>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\LiveEnvironment\STFGuiPluginEnvironment.csproj" (BuildLinked target(s)).
1> 24>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginRegDB.dll
1> 21>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\MinRunner.dll
1> 21>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\minrunner\MinRunner.csproj" (BuildLinked target(s)).
1> 3>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\LiveLib\dirs.proj" (BuildLinked target(s)).
1> 2>Done Building Project "J:\XONLINE_MAIN\private\test\LiveInfra\dirs.proj" (BuildLinked target(s)).
1> 24>BinplaceLinked:
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\objd\i386\STFGuiPluginRegDB.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\objd\i386\STFGuiPluginRegDB.dll
1> 25>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginTestDB.dll
1> 24>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\RegDB\STFGuiPluginRegDB.csproj" (BuildLinked target(s)).
1> 25>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\TestDB\STFGuiPluginTestDB.csproj" (BuildLinked target(s)).
1> 10>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\dirs.proj" (BuildLinked target(s)).
1> 26>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\STFGuiPluginMonitor.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\objd\i386\STFGuiPluginMonitor.dll
1> binplace J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\objd\i386\STFGuiPluginMonitor.dll
1> 26>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\Plugins\SporkfireMonitor\STFGuiPluginMonitor.csproj" (BuildLinked target(s)).
1> 1>Done Building Project "j:\xonline_main\private\common\test\bootstrap2\dirs.proj" (BuildLinked target(s)).
1> 6>Done Building Project "J:\XONLINE_MAIN\private\test\StfTests\STFGui\dirs.proj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:01.71
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\test\fastfail *************
1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\test\fastfail
2>Linking for j:\xonline_main\private\common\test\protocol *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\protocol'
2>BUILDMSG: Processing j:\xonline_main\private\common\test\protocol
2>j:\xonline_main\private\common\test\protocol building test code in dev tree
1>Running MsBuild v3.5
2>SOURCE_ASMMETA () 
2>_O_ASMMETA () 
2>_O_ASMMETA_OUTPUT () 
2>ASMMETA_INPUT () 
2> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true XrlTest.csproj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:18 PM.
2>Build started 10/27/2012 7:31:18 PM.
2> 1>Project "j:\xonline_main\private\common\test\protocol\XrlTest.csproj" on node 0 (BuildLinked target(s)).
2> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2> 1>Done Building Project "j:\xonline_main\private\common\test\protocol\XrlTest.csproj" (BuildLinked target(s)).
2>Build succeeded.
2>Time Elapsed 00:00:00.15
2>Linking for j:\xonline_main\private\common\test\bif *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\bif'
2>BUILDMSG: Processing j:\xonline_main\private\common\test\bif
1> 1>Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" (1) is building "j:\xonline_main\private\common\test\fastfail\unit\unit.csproj" (2) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2>j:\xonline_main\private\common\test\bif building test code in dev tree
1> 1>Done Building Project "j:\xonline_main\private\common\test\fastfail\dirs.proj" (BuildLinked target(s)).
1> 2>Done Building Project "j:\xonline_main\private\common\test\fastfail\unit\unit.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.34
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\test\core *************
1>'MSBuild.cmd "xblcoretest.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\test\core
1>Running MsBuild v3.5
2>SOURCE_ASMMETA () 
2>_O_ASMMETA () 
2>_O_ASMMETA_OUTPUT () 
2>ASMMETA_INPUT () 
2> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true BehaviorInjection.csproj /Target:BuildLinked /p:Pass=Link
2>Build started 10/27/2012 7:31:19 PM.
1>Build started 10/27/2012 7:31:19 PM.
2> 1>Project "j:\xonline_main\private\common\test\bif\BehaviorInjection.csproj" on node 0 (BuildLinked target(s)).
2> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2> 1>Done Building Project "j:\xonline_main\private\common\test\bif\BehaviorInjection.csproj" (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\test\core\xblcoretest.csproj" on node 0 (BuildLinked target(s)).
2>Build succeeded.
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
2>Time Elapsed 00:00:00.15
2>Compiling and Linking j:\xonline_main\private\common\test\configtlb *************
2>'nmake /nologo BUILDMSG=Stop. /nologo /f j:\xonline_main\public\ext\tools\makefile.def BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\test\configtlb'
2>BUILDMSG: Processing j:\xonline_main\private\common\test\configtlb
2>j:\xonline_main\private\common\test\configtlb: TARGETPATH is obj
2>j:\xonline_main\private\common\test\configtlb building test code in dev tree
2>j:\xonline_main\private\common\test\configtlb: TARGETPATH is obj
2>j:\xonline_main\private\common\test\configtlb building test code in dev tree
2>LCG: BUILD_LCE_FILE: 0
1> 1>BinplaceLinked:
1> binplace.exe /R j:\xonline_main\drop\debug\. /:NOCV -z -:LOGPDB /:CVTCIL /P placefile /:DBG /j objd\i386\XblCoreTest.dll
1> binplace j:\xonline_main\private\common\test\core\objd\i386\XblCoreTest.dll
1> 1>Done Building Project "j:\xonline_main\private\common\test\core\xblcoretest.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.35
2>SOURCE_ASMMETA (ConfigTlbTest.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\test\configtlb\objd\i386\ConfigTlbTest.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\configtlb\objd\i386\ConfigTlbTest.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\ConfigTlbTest.exe) 
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\test\statemachine *************
1>'MSBuild.cmd "statemachinetest.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\test\statemachine
2> set BUILDMSG=making _asmid.inc
2> del j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc.temp 2>nul
2> idtool.exe -id configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -GenerateMakefileInc > j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc.temp || @echo error : error idtool error
1>Running MsBuild v3.5
2> asmIdToAttribs.cmd "configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral" j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc.temp tlbimp
2> echo _ASSEMBLY_IDENTITY=configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral >> j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc.temp
2> move j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc.temp j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.inc >nul
2>LCG: BUILD_LCE_FILE: 0
2>SOURCE_ASMMETA (ConfigTlbTest.asmmeta) 
2>_O_ASMMETA (j:\xonline_main\private\common\test\configtlb\objd\i386\ConfigTlbTest.asmmeta) 
2>_O_ASMMETA_OUTPUT (j:\xonline_main\private\common\test\configtlb\objd\i386\ConfigTlbTest.asmmeta_ver_pass2) 
2>ASMMETA_INPUT (objd\i386\ConfigTlbTest.exe) 
2> set BUILDMSG=making _asmid.xml
2> del j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.xml j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.xml.temp 2>nul
2> idtool.exe -id configtlbtest,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral -EmptyComponentManifest -out j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.xml.temp || @echo error : error idtool error
2> move j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.xml.temp j:\xonline_main\private\common\test\configtlb\objd\i386\_asmid.xml >nul
2>cl.exe /nologo /Ii386 /I. /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\atl90 /I./ /Iobjd /IJ:\XONLINE_MAIN\public\inc\ /IJ:\XONLINE_MAIN\Public\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\private\common\core\inc /IJ:\XONLINE_MAIN\private\common\xmgmtlib\inc /IJ:\XONLINE_MAIN\private\server\perfapp /IJ:\XONLINE_MAIN\public\ext\xonline-ext\xtools /IJ:\XONLINE_MAIN\private\common\servhlp\cutil /IJ:\XONLINE_MAIN\public\ext\xonline-ext\webstore\5.5.2421.0000\SDK\inc /IJ:\XONLINE_MAIN\private\common\config\dll\objd\i386 /IJ:\XONLINE_MAIN\private\common\servhlp\configlistener /Ij:\xonline_main\private\common\test\configtlb\objd\i386 /Ij:\xonline_main\COREXT\inc /Ij:\xonline_main\COREXT\inc\objd\i386 /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\COREXT\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\oak\inc /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /IJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\include /D_X86_=1 /Di386=1 /DSTD_CALL /DCONDITION_HANDLING=1 /DNT_UP=1 /DNT_INST=0 /DWIN32=100 /D_NT1X_=100 /DWINNT=1 /D_WIN32_WINNT=0x0600 /DWINVER=0x0600 /D_WIN32_IE=0x0700 /DDEVL=1 /DDBG=1 /D__BUILDMACHINE__=Domo /DFPO=0 /D_DEBUG /D_SYSCRT_DEBUG /D_STL70_ /D_MT=1 /D_UNICODE /DUNICODE /DDEBUG_BUILD /DDEBUG /DATL_CCOMBSTR_ADDRESS_OF_ASSERT /DTEST_CODE /DMSC_NOOPT /DNTDDI_VERSION=0x06000000 /D_ATL_STATIC_REGISTRY /c /Zl /Zp8 /Gy /Gm- /W3 /WX /wd4996 /wd4947 /Gz /hotpatch /EHs-c- /GR /GF /GS /Zi /Odi /Oy- /Fdj:\xonline_main\private\common\test\configtlb\objd\i386\ -DKMDF_MAJOR_VERSION=01 -DKMDF_MINOR_VERSION=005 /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\include\warning.h /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\Base\inc\warning_x.h /FIJ:\XONLINE_MAIN\public\ext\sdk\VS9SP1\internal\SdkTools\inc\testcode.h /YlConfigTlbTest /Ycstdafx.h /Fpobjd\i386\stdafx.pch /Fo"objd\i386\stdafx.obj" /Tp
2>#include "stdafx.h"
1>Build started 10/27/2012 7:31:19 PM.
2>pch_hdr.src
1> 1>Project "j:\xonline_main\private\common\test\statemachine\statemachinetest.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\test\statemachine\statemachinetest.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.15
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\azure *************
1>'MSBuild.cmd "azure.csproj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\azure
1>Running MsBuild v3.5
1>Build started 10/27/2012 7:31:20 PM.
1> 1>Project "j:\xonline_main\private\common\azure\azure.csproj" on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Done Building Project "j:\xonline_main\private\common\azure\azure.csproj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.14
1>Linking for j:\xonline_main\private\common\login *************
1>'nmake /nologo BUILDMSG=Stop. BUILD_PASS=PASS2 LINKONLY=1 NOPASS0=1 MAKEDIR_RELATIVE_TO_BASEDIR=private\common\login'
1>BUILDMSG: Processing j:\xonline_main\private\common\login
1> J:\XONLINE_MAIN\public\ext\tools\x86\managed\urt\v3.5\MSBuild.exe /nologo /verbosity:normal /m:2 /p:BuildType=debug /p:BuildingWithBuildExe=true /clp:NoSummary /clp:ShowCommandline /p:BuildingInSeparatePasses=true dirs.proj /Target:BuildLinked /p:Pass=Link
1>Build started 10/27/2012 7:31:20 PM.
1> 1>Project "j:\xonline_main\private\common\login\dirs.proj" on node 0 (BuildLinked target(s)).
1> 1>Project "j:\xonline_main\private\common\login\dirs.proj" (1) is building "j:\xonline_main\private\common\login\client\client.csproj" (2) on node 0 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 1>Project "j:\xonline_main\private\common\login\dirs.proj" (1) is building "j:\xonline_main\private\common\login\dll\dll.csproj" (3) on node 1 (BuildLinked target(s)).
1> Reading version information from version file : J:\XONLINE_MAIN\public\inc\version.htm
1> 3>Done Building Project "j:\xonline_main\private\common\login\dll\dll.csproj" (BuildLinked target(s)).
1> 2>Done Building Project "j:\xonline_main\private\common\login\client\client.csproj" (BuildLinked target(s)).
1> 1>Done Building Project "j:\xonline_main\private\common\login\dirs.proj" (BuildLinked target(s)).
1>Build succeeded.
1>Time Elapsed 00:00:00.34
1>Executing Pass2 MSBuild Tasks j:\xonline_main\private\common\stsconfig *************
1>'MSBuild.cmd "dirs.proj" /nologo /p:BuildingInSeparatePasses=true /p:BuildingWithBuildExe=true /clp:NoSummary /verbosity:normal  /clp:ShowCommandline /m:2 /nr:true  /Target:BuildLinked /p:Pass=Link'
1>BUILDMSG: Processing j:\xonline_main\private\common\stsconfig
1>Running MsBuild v4.0
2> cl.exe /nologo @j:\xonline_main\private\common\test\configtlb\objd\i386\cl.rsp
2>configtlbtest.cpp
2> link.exe /out:objd\i386\ConfigTlbTest.exe /machine:ix86 @j:\xonline_main\private\common\test\configtlb\objd\i386\nm42D9.tmp
2>Microsoft (R) Incremental Linker Version 9.00.30729.4984
2>Copyright (C) Microsoft Corporation.  All rights reserved.
2>/SAFESEH 
2>/DYNAMICBASE 
2>/MERGE:_PAGE=PAGE 
2>/MERGE:_TEXT=.text 
2>/SECTION:INIT,d 
2>/OPT:REF 
2>/OPT:ICF 
2>/IGNORE:4010,4037,4039,4065,4070,4078,4087,4089,4221,4198 
2>/INCREMENTAL:NO 
2>/FULLBUILD 
2>/release 
2>/NODEFAULTLIB 
2>/WX:NO 
2>/debug 
2>/debugtype:cv 
2>/version:6.0 
2>/osversion:6.0 
2>/functionpadmin:5 
2>/safeseh 
2>/nxcompat 
2>/merge:.rdata=.text 
2>/pdbcompress 
2>/STACK:0x40000,0x2000 
2>/tsaware 
2>/dynamicbase 
2>/subsystem:console,6.00 
2>/base:@J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\coffbase.txt,usermode 
2>/entry:wmainCRTStartup 
2>objd\i386\stdafx.obj 
2>objd\i386\configtlbtest.obj 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\atlsd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcpmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\crt\lib\libcmtd.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\kernel32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\user32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\advapi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\shell32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\gdi32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comdlg32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\comctl32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ole32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleacc.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\oleaut32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\uuid.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\version.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ws2_32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\mswsock.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\iphlpapi.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\dbghelp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\ShLwApi.Lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\loadperf.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\xolehlp.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\crypt32.lib 
2>J:\XONLINE_MAIN\public\ext\sdk\VS9SP1\sdk\lib\winspool.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xheap\xheap\objd\i386\xheap.lib 
2>J:\XONLINE_MAIN\private\common\servhlp\xhash\objd\i386\xhash.lib 
2>J:\XONLINE_MAIN\private\common\xmgmtlib\rockall\objd\i386\xmgmtlib.lib 
2> if exist objd\i386\ConfigTlbTest.exe.manifest ( echo Build_Status Embedding Manifest in objd\i386\ConfigTlbTest.exe & mt.exe -manifest objd\i386\ConfigTlbTest.exe.manifest -outputresource:objd\i386\ConfigTlbTest.exe;#1 | perl -n -p -e "$_ =~ s/mt.exe : general warning 810100b3:.*/MT - Resign Required : $_/gi"  )
2>Build_Status Postbuild Preplace - objd\i386\ConfigTlbTest.exe.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\preplace.cmd" objd\i386\ConfigTlbTest.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigTlbTest.exe
2>Build_Status Binplace - 1 file(s).
2> binplace.exe /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigTlbTest.exe
2>binplace j:\xonline_main\private\common\test\configtlb\objd\i386\ConfigTlbTest.exe
2>Build_Status Postbuild Postplace - objd\i386\ConfigTlbTest.exe.
2> "J:\XONLINE_MAIN\tools\build\buildtypes\binplace.cmd" objd\i386\ConfigTlbTest.exe --no-postbuild-cover /R J:\XONLINE_MAIN\drop\debug\. /:DBG /j /:NOCV /P placefile -R J:\XONLINE_MAIN\drop\debug /:CVTCIL objd\i386\ConfigTlbTest.exe
2> if not exist objd\i386\ConfigTlbTest.exe.mui (  if not exist objd\i386\ConfigTlbTest.exe.mui.notloc (  echo Build_Status  LN_MUI_STS: LGNSTS_MUIOFF ConfigTlbTest.exe &&  echo Build_Status  MUI_COMMENT: MUI unused by default for Xbox Live ConfigTlbTest.exe  )  )
2>Build_Status LN_MUI_STS: LGNSTS_MUIOFF ConfigTlbTest.exe 
2>Build_Status MUI_COMMENT: MUI unused by default for Xbox Live ConfigTlbTest.exe 
Executing post build scripts  *************
Fix Public Change
1>'J:\XONLINE_MAIN\public\ext\tools\buildpost.cmd '
1>Running scripts in J:\XONLINE_MAIN\target\debug\i386\PostBuildScripts
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\objd\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\Microsoft.XboxLive.Auth.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\Microsoft.XboxLive.Auth.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\Microsoft.XboxLive.Auth.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\Microsoft.XboxLive.Auth.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\Microsoft.XboxLive.Auth.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\Microsoft.XboxLive.Auth.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\Microsoft.XboxLive.Auth.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\Microsoft.XboxLive.Auth.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\Microsoft.XboxLive.Auth.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\Microsoft.XboxLive.Auth.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\Microsoft.XboxLive.Auth.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\Microsoft.XboxLive.Auth.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.Internal.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.Internal.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.Internal.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.Internal.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.Internal.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.Internal.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.Internal.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.Internal.40.csproj.FileListAbsolute.txt ===
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\_generated.cs
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.Internal.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.Internal.xml
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.Internal.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.dll
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.pdb
j:\xonline_main\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.xml
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.Internal.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth.Internal</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Internal">
            <summary>the caller is internal.  the value of this
            claim is typically the component name of the caller</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Ip">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.Port">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.PartnerId">
            <summary>connection claim typically added by a gateway.
            claim should never appear in a user/machine/title token</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthInternalClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary> </summary>
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.IsInternal(Microsoft.XboxLive.Auth.AuthHelper,System.String[])">
            <summary>
            Check for existence of an internal claim (which is always issued
            by "System").  And if specified, check  the  claim  against  the 
            array of valid values.
            </summary>
            <param name="helper">The AuthHelper instance that servces as "this"</param>
            <param name="values">The values (if any) against which to check</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebClient,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="client"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="auth">Local instance or AuthHelper.Current</param>
            <example>
            webReq.SetXAuthdata(AuthHelper.Current);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.HttpWebRequest,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="request"></param>
            <param name="principal">Local instance or Thread.CurrentPrincipal</param>
            <example>
            webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.XboxLive.Auth.AuthHelper)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="auth"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.SetXAuthdata(System.Net.WebHeaderCollection,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="headers"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions">
            <summary>
            These are LINQ extensions to various web requests, such as WebClient,
            HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
            to the outgoing request. These should be used by a service that is using an
            IClaimsPrincipal and that needs to call another service that is also using 
            XblAuthProtocolModule and has XAuthdataTokenHandler configured.
            </summary>
            <remarks>
            To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
            It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
            interface.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.OperationContext,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="context"></param>
            <param name="principal"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Extensions.ServiceModel.AuthExtensions.SetXAuthdata(System.ServiceModel.Channels.MessageProperties,Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Sets an XAuthdataToken in the Authorization HTTP header
            </summary>
            <param name="properties"></param>
            <param name="principal"></param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataConstants">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken">
            <summary>
            XAuthdataToken is the internal representation of authorization
            internal to the Xbox LIVE data center.  XAuthdataToken objects
            must never leave the data center.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.IdentityModel.Claims.IClaimsIdentity})">
            <summary>
            Instantiate an XAuthdataToken object using the claims from
            the supplied identities.
            </summary>
            <param name="id">Token id (statistically unique identifier)</param>
            <param name="identityList">A list of identities continaing
            claims used to populate the XAuthdataToken</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ToString">
            <summary>
            Returns a serialized XAuthData XML.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Id">
            <summary>
            Gets the token id. The token id is initialized during
            construction
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.Identities">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.SecurityKeys">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidFrom">
            <summary>
            Gets the datetime from which this token is valid
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Tokens.XAuthdataToken.ValidTo">
            <summary>
            Gets the datetime until which this token is valid
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Tokens.XAuthdataTokenHandler.GetSigningKeys">
             <summary>
             Retrieve one or more signature keys from the configuration store. It currently
             uses the app settings in the web.config, but could be extended in the future 
             for registry, database, file, or external code support.
             </summary>
             <example>
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1"/]
               [/appSettings]
            
               [appSettings]
                 [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
                 [add key="XAuthdataMasterKeyVersions" value="1,1"/]
               [/appSettings]
             </example>
             <returns>List of keys, ordered oldest to newest</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\Microsoft.XboxLive.Auth.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.XboxLive.Auth</name>
    </assembly>
    <members>
        <member name="T:Microsoft.XboxLive.Auth.AuthException">
            <summary>
            The exception that is  thrown  when  a  authorization  policy
            error occurs.
            </summary>
            <remarks>
            The AuthException class allows applications to  differentiate
            exceptions thrown by  the  system and/or  authorization  code.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor">
            <summary>Initializes a new instance of the  AuthException
            class.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message.</summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  AuthException
            class with a specified error message and a  reference  to
            the inner exception that is the cause of  this  exception.
            </summary>
            <param name="message">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthException.#ctor(System.String,System.Exception,System.String[])">
            <summary>Initializes a new instance of the  AuthException
            class with the specified error formatted  message  and  a
            reference to the inner exception that is the cause of the
            exception.
            </summary>
            <param name="format">The error message that explains the
            reason for the exception.</param>
            <param name="innerException">The exception  that  is  the
            cause of the current exception, or a null reference if no
            inner exception is specified.</param>
            <param name="args">The arguments for the format string.</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.ClaimNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
            <param name="claimType">The claimType that was not found</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.ClaimNotFoundException.ClaimType">
            <summary>
            Gets the claimType  that  caused  the  current  exception
            </summary>
            <remarks>
            The type of the claimType is a string.  But  most  claims
            processing frameworks require this to be  a  well  formed
            uri.</remarks>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes"/>
            <seealso cref="T:Microsoft.IdentityModel.Claims.ClaimTypes"/>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.InvalidClaimException">
            <summary>
            The specific claim is invalid.  That claim value is not valid
            for the ClaimValueType.</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.InvalidClaimException.#ctor(Microsoft.IdentityModel.Claims.Claim,System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidClaimException
            class.</summary>
            <param name="claim">The claim that is invalid</param>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.InvalidClaimException.Claim">
            <summary>
            Gets the invalid claim that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthHelper">
            <summary>The AuthHelper class provides a number of convenience
            methods for accessing an IClaimsPrincipal. All of the function
            herein can be had by iterating over the identities  and  claim
            sets in the IClaimsPrincipal.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.DEFAULT_ISSUER">
            <summary>
            The default issuer is the issuer used when no other issuer
            is specified.  This is true when using the  AuthHelper  as 
            well as attributes and web.config.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.AuthHelper.SYSTEM_ISSUER">
            <summary>
            The system issuer is used when authoring local claims added
            to the current principal by an  internal  process - not  by
            the security token service.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor">
            <summary>
            Initialize an AuthHelper using  the  principal from the
            current thread of execution and with the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal)">
            <summary>
            Initialize an AuthHelper. All tests using the helper will
            be applied against the specified claims principal and the
            default issuer.
            </summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(System.String)">
            <summary>
            Initialize an AuthHelper and set the default issuer using
            the supplied claimIssuer.</summary>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.#ctor(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            Initialize an AuthHelper with the specified claims principal
            and claims issuer.</summary>
            <param name="claimsPrincipal">The principal to check when
            doing claims verification.</param>
            <param name="issuer">The issuer to check for when doing
            claims verification.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyExists(System.String)">
            <summary>Verify the existence of the specified claimType</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>True if the claim exists, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyEquals(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim is
            equal to one of the specified values.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is equal to one of the 
            specified values</returns>
            <remarks>The specified values are converted to the ValueType of
            the claim before comparing with the claim Value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyGreaterThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            greater than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is greater than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyLessThan(System.String,System.Object)">
            <summary>Verify that the value of the specified claim is
            less than the specified value.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="value">The value against which the claim value
            is compared.</param>
            <returns>True if the claim exists and is less than the
            specified value</returns>
            <remarks>The specified claimValue parameter is converted to the
            ValueType of the claim before comparing with the claim Value
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyContains(System.String,System.Object[])">
            <summary>Verify that the value of the specified claim type contains
            all of the specified values. The value type of the claim type must
            be an array type.</summary>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="values">The values against which the claim value
            is compared.</param>
            <returns>True if the claim exists and all of the specified values
            are contained by the claim value</returns>
            <remarks>The specified values are converted to strings and
            compared against the string values in the claim value.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.FindClaim(System.String)">
            <summary>
            Find a claim with the specified claimType from the specified
            issuer.
            </summary>
            <param name="claimType">Find claims with this claimType.</param>
            <returns>A claim, or null, if no claim is found.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthHelper.VerifyClaim(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,Microsoft.XboxLive.Auth.Claims.AuthComparison,System.Object[])">
            <summary>
            Find a claim with the specified claimType, and compare its value
            against the supplied array of valid values.  Return true / false
            as a function of the supplied predicate.
            </summary>
            <param name="principal">Look for claims for this principal.</param>
            <param name="issuer">Look for claims from this issuer.</param>
            <param name="claimType">Find claims with this claimType.</param>
            <param name="comparison">The operation used to verify the claim.</param>
            <param name="validValues">The list of valid values against which to compare.</param>
            <returns>True if the claim exists and values passes the comparision test</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Principal">
            <summary>
            The principal to use when finding and verifying claims.
            </summary>
            <remarks>
            If not supplied at construction, the principal is taken off
            the current thread of execution.   If there is no principal
            on the current thread, vthen an anonymous principal is used
            as a default.
            </remarks>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthHelper.Issuer">
            <summary>
            The issuer to use when checking for claims.
            </summary>
            <remarks>
            If not supplied at construction,  or in configuration the
            issuer defaults to "xsts.xboxlive.com".
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthTrace">
            <summary>The AuthTrace class allows for tracing of authorization
            policy.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Error(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Error or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Warning(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Warning or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Info(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Info or higher.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthTrace.Verbose(System.String,System.Object[])">
            <summary>
            Writes trace information to the  trace  listeners  if  the
            TraceLevel is set to TraceLevel.Verbose.
            </summary>
            <param name="format">A composite format string. See remarks
            for <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">An object  array  that contains zero or
            more objects to format.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.AuthTrace.TraceSwitch">
            <summary>
            Gets the TraceSwitch that controls  tracing.  Applications
            can set the Level to programmatically control trace output
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups">
            <summary>AuthAgeGroups defines the set of possible
            values for the claimType  AuthClaimTypes.AgeGroups.
            The values are assigned to users as a function  of
            their country of record.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Child">
            <summary>The user  is  considered  a  child  in
            their country of record.  Typically this  means
            less than 13 years of  age,  but it  varies  by
            country (e.g. less han 14 years of age in Korea)
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Teen">
            <summary>The user is considered  a teenager  in
            their country  (not a child or an adult  -  see
            definitions above/below.</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups.Adult">
            <summary>The user  is  considered  an adult  in
            their country of record.  Typically this  means
            greater than or equal to 18 years of  age,  but
            it varies by country.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.AgeGroup">
            <summary>the user's agegroup</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ClientIpPort">
            <summary>the client's external ip address and port</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Country">
            <summary>the country id of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DelegationToken">
            <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceName">
            <summary>the identifier for the device name</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.DeviceType">
            <summary>the device type</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.FlowToken">
            <summary>the unique session identifier</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Gamertag">
            <summary>the gamertag of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Language">
            <summary>the user's language</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ParentXuid">
            <summary>the parent xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerDeviceId">
            <summary>the unique identifier for the device</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerParentXuid">
            <summary>the partner parent xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.PartnerXuid">
            <summary>the partner xuid for the user (based on the relying party)</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Privileges">
            <summary>the privileges granted to the user</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Puid">
            <summary>the passport user id (puid) of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Status">
            <summary>the user status</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Tier">
            <summary>the xbox live subscription tier of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleId">
            <summary>the title id</summary>
            <seealso cref="T:Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.TitleVersion">
            <summary>the title version</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Xuid">
            <summary>the xuid of the user</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.ValueTypes">
            <summary>the claim value types for all AuthClaimTypes</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthClaimTypes.Create(System.String,System.Object,System.String,System.String)">
            <summary>
            Create a Claim from an arbitrary C# object with the appropriate formatting.
            </summary>
            <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
            <param name="claimValue">The claim's value, may be any basic C# type</param>
            <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
            <param name="issuer">Name of the issuer of this claim</param>
            <returns>New Claim with proper formatting</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IntegerArray">
            <summary>a comma-separated list of integers</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.IpAddress">
            <summary>a "dotted 4" notation with optional port</summary>
            <example>1.2.3.4, 1.2.3.4:2000</example>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthClaimValueTypes.Decimal">
            <summary>
            Microsoft.IdentityModel.Claims.ClaimValueTypes does not
            define this one.  Make this one claim value type easier
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.SG">
            <summary>the machine / device identity</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthIdentityTypes.ActiveAuth">
            <summary>the user identity</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes">
            <summary>
            AuthDeviceTypes defines the set of possible
            values for the claimType AuthClaimTypes.DeviceTypes.    
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone">
            <summary>
            The token was issued for a Windows Phone device.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.WindowsPhone7">
            <summary>
            The token was issued for is a Windows Phone 7 device.
            Deprecated: we can't tell the difference between WP7 and Apollo
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Web">
            <summary>
            The token was issued for a web browser or other unknown platform.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.Xbox360">
            <summary>
            The token was issued for an Xbox 360 console.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes.PC">
            <summary>
            The token was issued for a PC running Games for Windows Live.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthPrivileges">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.AddFriend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Multiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerEnabledByTier">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoMessagingSend">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PurchaseContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformMultiplayer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.CrossPlatformCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PreviousLiveProtocols">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.VideoCommunications">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.TradeContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MusicExplicitContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MetroAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PassportSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.BillingSwitching">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.MultiplayerDedicatedServer">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UserGraduation">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumVideo">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Primetime">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ContentAuthor">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PiiAccess">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SocialNetworkSharing">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.SubscriptionTitle">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.PremiumContent">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.Family">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.UnsafeProgramming">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthPrivileges.ShareContent">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthStatus">
            <summary>AuthStatus defines the set of possible values
            for the claimType AuthClaimTypes.Status</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Maintenance">
            <summary>The user account requires maintenance and
            can only access maintenance services.  The account
            must be fixed before accessing other user services
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthStatus.Ok">
            <summary>The user account is in good standing  and
            is allowed to access all user  services.</summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTiers">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.NewUser">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Silver">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.Gold">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTiers.FamilyGold">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.LiveSignup">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Web">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.XenonDashboard">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.Zune">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.DashboardTitles">
            <summary> </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthTitles.WebTitles">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthValue.Create(System.Object,System.String)">
            <summary>
            Create the appropriate AuthValue object as a function of the
            claimType
            </summary>
            <param name="o">The object to convert into an AuthValue</param>
            <param name="claimValueType">The type to which the object is converted</param>
            <returns>An AuthValue representing the supplied object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthByteArray">
            <summary>
            AuthByteArray is a common class used to wrap a byte array. It
            is derived by the AuthBase64Binary and AuthHexBinary  classes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.#ctor">
            <summary>
            Initializes a new instance of the AuthByteArray class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthByteArray.CompareTo(System.Object)">
            <summary>
            Compare the value of the wrapped byte array with the user
            supplied value.  Arrays of different lengths are compared
            up to the length of the shorter array.  If they are equal
            at that point, then the  longer array is considered to be
            greater.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthBase64Binary  class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBase64Binary.ToString">
            <summary>
            Return the canonical representation of a base  64  string.
            This is the standard conversion from .NET.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthHexBinary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthHexBinary class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthHexBinary.ToString">
            <summary>
            Return the canonical representation of a hex string. That
            is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthInteger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthInteger class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDateTime.ToString">
            <summary>
            Return the canonical representation of a #time
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthString">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.#ctor(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthString.CompareTo(System.Object)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.CompareTo(System.Object)">
            <summary>
            Compare the wrapped boolean value. Return 0 if  they  are
            equal.  For the purposes of greater than  and  less  than
            assume that true is greater than false.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthBoolean.ToString">
            <summary>
            Return the canonical representation of a boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthBoolean.Value">
            <summary>
            Get the wrapped boolean value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthTime class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthTime.ToString">
            <summary>
            Return canonical representation of a time (hours, minutes,
            seconds and a timezone).
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthDecimal class.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthDecimal.ToString">
            <summary>
            Return the canonical representation of a decimal
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIpAddress">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIpAddress class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIpAddress.Address">
            <summary>
            Get the wrapped address values
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the AuthIntegerArray class.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Claims.AuthIntegerArray.Values">
            <summary>
            Get the wrapped integer array value
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthConfig">
            <summary>
            The AuthConfig class is the top node in the configuration. It
            has no attributes, and is just a collection of service  nodes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String,System.String)">
            <summary>
            Find configured policy for the specifed service and action
            </summary>
            <param name="serviceName">The name of  the  service. This
            varies by framework type. For instance, for ASP.NET  SOAP
            this is the [WebService] class name. For ASP.NET MVC this
            is the controller name.</param>
            <param name="actionName">The name  of  the  action.  This
            varies by framework type.  For instance, for ASP.NET SOAP
            this is the [WebMethod] name.  For WCF, this is the  name
            of the [OperationContract].   For ASP.NET MVC this is the
            action name.</param>
            <returns>The configued policy for the specificed service
            and action. If no policy is defined then null.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthConfig.Find(System.String)">
             <summary>
             Find configured global policy for  the  specifed  service
             </summary>
             <param name="serviceName">The name of  the  service. This
             varies by framework type. For instance, for ASP.NET  SOAP
             this is the [WebService] class name. For ASP.NET MVC this
             is the controller name.</param>
             <returns>The configured policy for the specificed service.
            If no policy is defined then null.</returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Services">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Issuer">
            <summary>
            By default we look for an issuer  of  "xsts.xboxlive.com".
            Setting the issuer attribute on the configuration element
            changes the default to the specified value. That value is
            used in AuthAttribute and AuthHelper code.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthConfig.Current">
            <summary>
            Return the configuration for the current thread.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthServiceElement">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Name">
            <summary>
            This is the service name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            For ASP.NET using SOAP it is the class name  of  the  web
            service.  For MVC it is the class name of the  controller.
            For WCF it is the interface name of the service  contract.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Policies">
            <summary>
            Each  service  element  can  have  zero  or  more  global
            policies to be applied to all actions.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthServiceElement.Actions">
            <summary>
            Each service element has zero  or  more  action  elements.
            Depending  on  the  application  framework,  each  action 
            represents a method or action on which policy is  defined.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionCollection">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.IndexOf(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CreateNewElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.String)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.Item(System.Int32)">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionCollection.ElementName">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthActionElement">
            <summary>
            An AuthActionElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Config.AuthPolicyElement">
            <summary>
            An AuthPolicyElement is the  root  element  for configuration
            policy on an action (e.g. web method, operation contract, etc)
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Get the policy elements for the service or action using a
            custom deserializer.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthPolicyElement.Policy">
            <summary>
            This is the actual authorization policy  associated  with 
            the action. The policy has a check method that is invoked
            just before the action.
            
            The policy is configured using custom  configuration  XML
            inside of the action node.  That is,  there is no further
            definition  using  the  System.ServiceModel.Configuration
            classes.  It hooks in a custom parser by  overriding  the
            DeserializeElement method below..
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Config.AuthActionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Skip over parts for the current  AuthActionElement.  Then
            read the inner nodes and parse the XML to  obtain  policy
            for this action.
            </summary>
            <param name="reader">XmlReader sent by the  configuration
            processing code.</param>
            <param name="serializeCollectionKey">required parameter
            in the base class.  This is unused.</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Config.AuthActionElement.Name">
            <summary>
            This is the action  name for which the policy is  defined.
            The use of this value varies depending on the application
            framework being used.
            
            In all cases it is the name of a method that  is  invoked.
            For ASP.NET using SOAP it is the web method name, for MVC
            it the method name for the action.  For  WCF  it  is  the
            interface method  attributed  with  the  OperationContact .
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthExtensions">
            <summary>
            AuthExtensions contains a number class extensions  to  make  it
            easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
            </summary>
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this identity,  check to see if there is a claim that matches the
            specified predicate.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="predicate">The Predicate to be evaluated.</param>
            <returns>True if the predicate evaluates to true, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String@)">
            <summary>
            For this identitty, try to get the value of the specified claim (claimType)
            without respect to the issuer of the claim.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsIdentity,System.String,System.String,System.String@)">
            <summary>
            For this identity,  try to get the value of the specified claim (claimType)
            from the specified issuer.
            </summary>
            <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
            <param name="claimType">The claimType (name)</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">The string that will receive the claimValue</param>
            <returns>True if the claim and value were found, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, find all claims that match the specified predicate.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType without
            to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.FindClaims(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, find all claims that match the specified claimType and claimIssuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>A enumerable collection of matching claims</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.Predicate{Microsoft.IdentityModel.Claims.Claim})">
            <summary>
            For this principal, check if there exists a claim matching the predicate.
             </summary>
             <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="predicate">The predicate used to match claims</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, check if the specified claim type exists without respect to issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.ClaimExists(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, check if the specified claim type from the specified issuer exists. 
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String,System.String@)">
            <summary>
            For this principal, try to get the value of the specified claim from the specified issuer.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.TryGetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String@)">
            <summary>
            For this principal,  try to get the value of the specified claim without respect to issuer.  
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimValue">Receives the claim value</param>
            <returns>True if the claim is found, otherwise false</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the specified
            issuer from the principal. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <param name="claimIssuer">Only return claims matching the claimIssuer</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthExtensions.GetClaimValue(Microsoft.IdentityModel.Claims.IClaimsPrincipal,System.String)">
            <summary>
            For this principal, get the value of the specified claim from the principal
            without respect to the issuer. Only the first value is returned.
            </summary>
            <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
            <param name="claimType">Only return claims matching the claimType</param>
            <returns>The claim value</returns>
            <exception cref="T:Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthAttribute">
            <summary>
            Represents the base class for authorization policy attributes.
            </summary>
            <remarks>
            The authorization attributes are used to define authorization
            policy on classes, methods, and their parameters.  Each  time
            a method is invoked it is checked  for  authorization  policy.
            If there is a policy defined for a given  method   then  that
            policy is checked against the current  authorization  context
            before the method is invoked.  If the policy check fails then
            an exception is thrown and the method is not called.
            </remarks>
            <example>
            <code>
            // Example of a SOAP web method with authorization attributes
            
            [AuthExists(AuthClaimTypes.Xuid)]
            [WebMethod]
            public void ChangeGamertag(
               [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
            );
            
            Example of a WCF operation contact with authorization attributes
            
            [VerifyPlatformId(AuthPlatforms.Xbox360)]
            [RequireClaim(AuthClaimTypes.DeviceId)]
            [OperationContract]
            public void AutoUpdateReferral()
            </code>
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthAttribute.#ctor">
            <summary>
            The constructor for all  auth attributes sets the default
            issuer.  This can be set via  configuration  or  using  a
            named attribute parameter.
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.ClaimType">
            <summary>
            The claim type to look for and test
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthAttribute.Issuer">
            <summary>
            The issuer from which claims of the specified type should
            originate.
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute">
            <summary>
            This is the base attribute for all  authorization  attributes
            placed on classes and methods.  Class and  method  attributes
            are  limited to simple claim existence checks and  comparison
            of claim values against compile time values.
            </summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a AttributeTarget of Class or Method.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthClassMethodAttribute.GetPolicy">
            <summary>
            Abstract method for converting auth attributes AuthPolicy.
            </summary>
            
            <returns>An AuthPolicy object called later to do policy
            enforcement checks.</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute">
            <summary>
            The AuthArrayAttribute is used to check claims against a  set
            of values (provided in an array).  Multiple checks are made - 
            one against each value in the array.  Allows  for  and/or  of
            results.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute._values">
            <summary>
            Array of values used by Allowed and  Required  attributes.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthArrayAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes new instance of the  AuthArrayAttribute class.
            This is a protected constructor.  It is currently used to
            derive other attributes.
            </summary>
            <param name="claimType">claimType to  be  checked</param>
            <param name="values">The array values against  which  the
            claim value is checked</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="claimType"></param>
            <param name="values"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredValuesAttribute.GetPolicy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute">
            <summary>
            The AllowedPlatformsAttribute is used to affect policy checks
            of the device type against an array of valid  platform  types
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedPlatformsAttribute.#ctor(System.String[])">
            <summary>
            Initializes an instance of AllowedPlatformsAttribute
            </summary>
            <param name="values">The array of allowed platform types</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute">
            <summary>
            The AllowedTitlesAttribute is used to affect policy checks of
            the title id claim  against  an  array  of  valid  title  ids
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AllowedTitlesAttribute.#ctor(System.UInt32[])">
            <summary>
            Initializes an instance of AllowedTitlesAttribute
            </summary>
            <param name="values">The array of allowed titles ids</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute">
            <summary>
            Verify that all of the  privileges  in  the  specified  array
            appear in the privileges claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.RequiredPrivilegesAttribute.#ctor(System.Byte[])">
            <summary>
            Initializes an instance of RequiredPrivilegesAttribute
            </summary>
            <param name="privileges">The array of required privileges</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthExistsAttribute.#ctor(System.String)">
            <summary>
            Initializes an instance of the AuthExistsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for
            which we are checking</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute">
            <summary>
            Verify that the specified claim is present and then perform the
            specified comparison operation between the specified value  and
            the claim value.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthComparisonAttribute.#ctor(System.String,System.Object,Microsoft.XboxLive.Auth.Claims.AuthComparison)">
            <summary>
            Initializes an instance of the AuthComparisonAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
            <param name="comparison">The comparision operation to perform</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthEqualsAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthEqualsAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is  equal  to  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthGreaterThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthGreaterThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute">
            <summary>
            Verify that the specified claim is present in the  auth  data
            and that the claim value is less  than  the  specified  value
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthLessThanAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of the AuthLessThanAttribute
            </summary>
            <param name="claimType">the specific claimType (name) for which we are checking</param>
            <param name="value">The value against which the claim value is compared</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute">
            <summary>Represents the base class for  authorization  policy
            attributes applied to method parameters.   Class  and  method
            parameters make static checks for the  presence  of  specific
            claims or specific well know  values.   Parameter  attributes
            compare specific claims against  the  parameter  value  being
            passed into the method.</summary>
            <remarks>This is an abstract class and cannot be instantiated.
            It is the base class for all authorization policy  attributes
            with a Parameter.</remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.#ctor">
            <summary>
            protected constructor to hook into constructor  for  base
            class which sets the default issuer.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthParameterAttribute.GetPolicy(System.Reflection.ParameterInfo)">
            <summary>
            Abstract method for converting auth attributes into policy
            rexpression.  Parameter attributes differ from method  and
            class attributes in that they take a  parameter  which  is
            used to lookup the value of the  parameter  on  each  call.
            </summary>
            
            <returns>An AuthPolicy object</returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the specified claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthVerifyAttribute.#ctor(System.String)">
            <summary>
            Initializes an  instance  of  the AuthVerifyAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the specified claim type</remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the device id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyMachineAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyMachineAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known claimType  AuthClaimTypes.DeviceId.
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the user (xuid) claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyUserAttribute.#ctor">
            <summary>
            Initializes a new instance of the VerifyUserAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against  the  well  known  claimType  AuthClaimTypes.Xuid
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the title id claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyTitleAttribute.#ctor">
            <summary>
            Initializes a new instance  of  the  VerifyTitleAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.TitleId
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute">
            <summary>
            Verify that the attributed parameter is equal to the value of
            the country claim.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.VerifyCountryAttribute.#ctor">
            <summary>
            Initializes a new instance of the  VerifyCountryAttribute
            </summary>
            <remarks>Compare the value  of  the  declaring  parameter
            against the well known  claimType  AuthClaimTypes.Country
            </remarks>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.AuthActionFilter">
            <summary>
            Authentication filter for MVC Actions.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Runs after the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.AuthActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Runs before the Action has executed.
            </summary>
            <param name="filterContext">Context of the action</param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.CreateBehavior">
            <summary> </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Policy.AuthBehaviorElement.BehaviorType">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthBehavior">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthBehavior.#ctor(System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Claims.AuthComparison">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.Equals">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Claims.AuthComparison.LessThan">
            <summary></summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthInvoker">
            <summary>
            The AuthInvoker class is the main interception point for  WCF
            policy checks.  The AuthBehavior reflects over  AuthAttribute
            attributes and policies defined in the web.config and inserts
            the AuthInvoker into the OperationInvoker chain as  necessary.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker,System.String,System.Reflection.MethodInfo,Microsoft.XboxLive.Auth.Policy.AuthPolicy)">
            <summary> </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthPolicy">
            <summary>
            AuthPolicy is the root class used to check policy for a given
            service and action.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.Add(System.String,System.String,System.Reflection.MethodInfo)">
            <summary>
            Add policy for the  specified service and action. Look in
            the configuration for defined  policy,  and if  there  is
            none,  then through reflection on the supplied methodInfo
            </summary>
            <param name="serviceName">The name of the service</param>
            <param name="actionName">The name of the action</param>
            <param name="methodInfo">The methodInfo for the action</param>
            <returns>The configured policy for the service and action.
            If no policy is defined then return AuthPolicy.NullPolicy
            </returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthPolicy.GetParameter(System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.ParameterInfo)">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension">
            <summary> </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.Initialize(System.Object)">
            <summary>
            This is a required abstract method.  We don't  need  to  do
            anything here.  It just has to be present
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Type)">
            <summary>
            Called when ASP.NET finds a SoapExtension in the web config
            file.  Reflect on the serviceType to find all  web  methods
            Then look to see if there is any policy defined  (it  would
            come from the config  file).  If there is none then see  if
            the code is attributed for authorization.
            </summary>
            <param name="serviceType">the method  we  are  expected  to
            initialize.  use this to get the declaring type for the web
            method (that is the web  service  class)
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>
            Called when ASP.NET finds a SoapExtensionAttribute on a web
            web method.  Even though this is for a  single  method,  we
            initialize the whole web service by calling back  into  the
            GetInitializer for a web.config defined SoapExtension.
            </summary>
            <param name="methodInfo">the method we are initializing. we
            use this to get the declaring type for the web method (that
            is the web service class)
            </param>
            <param name="attribute">the attribute that  triggered  this
            call. we don't need use it because the common code reflects
            </param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Policy.AuthSoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            ProcessMessage is called multiple times at different stages
            We enforce authorization policy during the AfterDeserialize
            stage.
            </summary>
            <param name="message">The request we  are  authorizing.  We
            need this to get the methodName, and then the parameters to
            do any data binding
            </param>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy">
            <summary>
            Reads in authorization header.  Presents header to  token  handlers
            to see who can read the token, one of which will return a principal
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.#ctor">
            <summary>
            Null constructor required so WCF can instantiate the authorization policy
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)">
            <summary>
            Take the request and look for authorization context on the
            headers.   If we find it and can parse it,  then create  a
            principal and put it on the thread.
            </summary>
            <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
            <param name="state"></param>
            <returns>
            true if access is granted; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Id">
            <summary>
            Get the id of the authorization policy object.  
            </summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthorizationPolicy.Issuer">
            <summary>
            Get the Issuer of the authorization policy object.  
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule">
            <summary>
            XblAuthProtocolModule is an HttpModule to provide basic token authentication
            handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
            the 'Authorization' or 'X-Authorization' HTTP header. 
            </summary>
            <remarks>
            The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
            functionality to WS-Federation but more active. The client provides the STS
            token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
            module reads that token and verifies it and creates an IClaimsPrincipal.
            
            The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
            token received from the XSTS service. The output of the module is an 
            IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
            the module does nothing. 
            
            Authorization is left to the user of this module. Any errors that occur during
            parsing or validation are passed to a callback event, and if not cancelled, the
            exception is rethrown. ASP.Net will catch this and abort the request.
            </remarks>
            <example>
            In the configuration section of your web.config:
            
              <system.webServer>
                <modules>
                   <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
                </modules>
              </system.webServer>
              
            </example>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialize module. Hooks into AuthenticateRequest handler.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ProcessAuthenticateRequest(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Handles bulk of reading and validating the incoming token. 
            </summary>
            <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
            <param name="rawUrl">Full URL of incoming request.</param>
            <returns>Validated IClaimsPrincipal, or null if none available.</returns>
            <remarks>
            Marked public to allow for testing, but not intended for external use.
            </remarks>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.IsFatal(System.Exception)">
            <summary>
            Determines whether an exception is fatal or whether we should attempt to 
            handle it gracefully.
            </summary>
            <param name="exception"></param>
            <returns>True if fatal</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Handles writing a diagnostic trace line.
            </summary>
            <param name="e">Optional exception, pass null if none</param>
            <param name="msgFormat">Optional message and format string</param>
            <param name="msgArgs">Message format arguments</param>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.ModuleName">
            <summary>
            Name of the HTTP module
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.AuthenticateError">
            <summary>
            Fires for any unhandled error during AuthenticateRequest
            </summary>
        </member>
        <member name="E:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule.TraceOutput">
            <summary>
            Fires for any traceline generated during execution
            </summary>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs">
            <summary>
            Arguments for handling a traceline event callback
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Message">
            <summary>
            The trace message
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.Error">
            <summary>
            An exception associated with the trace, if any. May be null.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.TraceEventArgs.ToString">
            <summary>
            Helper for printing the trace event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler">
            <summary>
            Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
            for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
            box.
            </summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.HEADER_NAME">
            <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="F:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ALT_HEADER_NAME">
            <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.#ctor">
            <summary>Instantiate an XblAuthProtocolHandler</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ProcessToken(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Read token from header then authenitcate it. Same as calling ReadToken() 
            and AuthenticateToken().
            </summary>
            <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
            <param name="resourceName">Resource being requested, usually the URL of the request</param>
            <returns>New IClaimsPrincipal from token, else null if none</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadTokens(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
            header, parses the XML token value, and reads it using the WIF library. This
            allows for custom handlers and authenticators can be plugged in and configured 
            as desired.
            </summary>
            <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
            <returns>array of security tokens, may have zero entries</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ReadToken(System.String)">
            <summary>
            Uses WIF to read an XML formatted token.
            </summary>
            <param name="tokenXml">Token in XML format.</param>
            <returns>New SecurityToken, or else null if none.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Creates the value for the 'Authorization' header for the given token.
            </summary>
            <param name="token">Valid security token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.SecurityTokenHandler)">
            <summary>
            Creates the value for the 'Authorization' header for the given token and token
            handler.
            </summary>
            <param name="token">Valid security token</param>
            <param name="handler">Handler to use for writing the token</param>
            <returns>Header value of encoded token</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.AuthenticateToken(System.IdentityModel.Tokens.SecurityToken,System.String)">
            <summary>
            Uses WIF's token authentication to authenticate a security token and extract the
            IClaimsPrincipal from it. 
            </summary>
            <param name="securityToken">Security token read from the request</param>
            <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
            <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetCurrentConfiguration">
            <summary>Get the current service configuration from the OperationContext.  If
            none is present then look in the FederatedAuthentication service configuration.
            </summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.GetSecurityTokenXml(System.Collections.Specialized.NameValueCollection)">
            <summary>Get one of the well-known Authorization headers from the collection
            of headers, strip off the protocol parts go get to the XML and then decode
            the HTTP encoded elements to generate a straight up XML string</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.Collections.Specialized.NameValueCollection,System.String@,System.String@)">
            <summary>
            Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
            token. 
            </summary>
            <param name="headerCollection">HTTP headers</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns>True if successful, false if not</returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.TryParseAuthorizationHeader(System.String,System.String@,System.String@)">
            <summary>
            Parse the authorization header into 2 tokens.
            </summary>
            <param name="authHdrValue">HTTP header value</param>
            <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
            <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.DecodeHeaderXml(System.String)">
            <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        </member>
        <member name="M:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.EncodeHeaderXml(System.String)">
            <summary>Remove new lines and carriage returns from the XML string</summary>
        </member>
        <member name="P:Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolHandler.ServiceConfig">
            <summary>
            WIF-provided configuration, either from web.config or a default.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\azure\objd\i386\azure.csproj.FileListAbsolute.txt ===
j:\xonline_main\target\Debug\i386\azure\xonline.common.Azure.dll
j:\xonline_main\target\Debug\i386\azure\xonline.common.Azure.pdb
j:\xonline_main\private\common\azure\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\azure\objd\i386\xonline.common.Azure.dll
j:\xonline_main\private\common\azure\objd\i386\xonline.common.Azure.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\obj\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="certimpx" processorArchitecture="x86" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\dll\obj\i386\community_dll.csproj.FileListAbsolute.txt ===
j:\xonline_main\target\i386\community_dll\Xblcommunity.dll
j:\xonline_main\private\common\community\dll\obj\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\community\dll\obj\i386\Xblcommunity.dll
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\objd\i386\_asmid.xml ===
﻿<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
<assemblyIdentity  name="certimpx" processorArchitecture="x86" version="12.4.56.0"/>
</assembly>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\dll\objd\i386\community_dll.csproj.FileListAbsolute.txt ===
j:\xonline_main\target\debug\i386\community_dll\Xblcommunity.dll
j:\xonline_main\target\debug\i386\community_dll\Xblcommunity.pdb
j:\xonline_main\private\common\community\dll\objd\i386\ResolveAssemblyReference.cache
j:\xonline_main\private\common\community\dll\objd\i386\Xblcommunity.dll
j:\xonline_main\private\common\community\dll\objd\i386\Xblcommunity.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\config\config\configItems.xml ===
<configItems>

    <!--Default values-->

    <component name="unknown" />
    <interface name="None" />
    <virtualInterface name="None" />

    <!--acceleration-->

    <component name="acceleration" friendly="Acceleration Svc" />
    <interface name="acceleration" />
    <setting name="acceleration_max_key_length" />
    <setting name="acceleration_total_data_storage_bytes" dynamic="true" />
    <setting name="acceleration_low_water_data_storage_bytes" dynamic="true" />
    <setting name="acceleration_heartbeat_interval" dynamic="true" />
    <setting name="acceleration_record_maintenance_period" dynamic="true" />
    <setting name="acceleration_context_duration_alert_limit" dynamic="true" />
    <setting name="acceleration_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="acceleration_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="acceleration_fastFailBlockIntervalSeconds" dynamic="true" />
    <setting name="acceleration_replyTimeout" dynamic="true" />
    <setting name="acceleration_localCacheMaxSize" dynamic="true" />
    <setting name="acceleration_localCacheItemDuration" dynamic="true" />
    <setting name="acceleration_notificationChangelistSize" />
    <setting name="acceleration_notificationPollInterval" dynamic="true" />
    <setting name="acceleration_numHashtableBuckets" />
    <setting name="acceleration_allocation_sizes" />
    <setting name="acceleration_allocation_page_size" />

    <!-- acceleration clusters -->
    <component name="NotificationCache" friendly="Notification Cache Svc" />
    <interface name="NotificationCache" />
    <setting name="NotificationCache_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="NotificationCache_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="NotificationCache_fastFailBlockIntervalSeconds" dynamic="true" />
    <setting name="NotificationCache_replyTimeout" dynamic="true" />

    <component name="PresenceCache" friendly="Presence Cache Svc" />
    <interface name="PresenceCache" />
    <setting name="PresenceCache_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="PresenceCache_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="PresenceCache_fastFailBlockIntervalSeconds" dynamic="true" />
    <setting name="PresenceCache_replyTimeout" dynamic="true" />

    <component name="ProfileCache" friendly="Profile Cache Svc" />
    <interface name="ProfileCache" />
    <setting name="ProfileCache_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="ProfileCache_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="ProfileCache_fastFailBlockIntervalSeconds" dynamic="true" />
    <setting name="ProfileCache_replyTimeout" dynamic="true" />

    <!-- activeauth module -->

    <component name="aamodule" friendly="ActiveAuth Module" />
    <interface name="aamodule" />
    <setting name="aamodule_Rps_site" dynamic="true" />
    <setting name="aamodule_antidosTrackingThreshold" dynamic="true" />
    <setting name="aamodule_antidosThrottlingThreshold" dynamic="true" />
    <setting name="aamodule_antidosBlockingThreshold" dynamic="true" />
    <setting name="aamodule_antidosMaxRecordsToTrack" dynamic="true" />
    <setting name="aamodule_antidosBanTimeInSeconds" dynamic="true" />
    <setting name="aainfo_xbancExpirationInSeconds" dynamic="true" />
    <setting name="aamodule_suppress_xmgmt_connection" dynamic="false" />
    <setting name="aamodule_sts_deviceId_cert_subject_prefix" dynamic="true" />
    <setting name="aamodule_audienceUriMode" dynamic="false" />
    <setting name="aamodule_certificateValidationMode" dynamic="false" />
    <setting name="aamodule_certificateRevocationMode" dynamic="false" />
    <setting name="aamodule_useLoadBalancerSslHeaders" dynamic="true" />
    <setting name="aamodule_wp7_deviceId_cert_subject_prefix" dynamic="true" />
    <setting name="aamodule_wp8_deviceId_cert_subject_prefix" dynamic="true" />
    <multiSetting name="aamodule_antidosIpOverrides" dynamic="true" />
    <multiSetting name="aamodule_XblEnhancedKeyUsages" dynamic="true" />
    <multiSetting name="aamodule_audienceUris" dynamic="false" />
    <multiSetting name="aamodule_trustedIssuersSubject" dynamic="false" />
    <multiSetting name="aamodule_serviceCertsSubject" dynamic="false" />
    <multiSetting name="aamodule_rpsSiteNames" dynamic="true" />
    <multiSetting name="aamodule_rpsDelegationSiteNames" dynamic="true" />
    <multiSetting name="aamodule_rpsDelegationOfferActions" dynamic="true" />
    <multiSetting name="aamodule_rpsDelegationAppIdAllowList" dynamic="true" />

  <!--alertsApp-->

    <interface name="alertsApp" />

    <!--alertsInstance-->

    <interface name="alertsInstance" />

    <!--ALL-->

    <component name="ALL" />

    <!--audit-->
    <component name="audit" />
    <interface name="audit" />
    <setting name="bdk_auditEnabled" dynamic="true" />
    <setting name="dmp_auditEnabled" dynamic="true" />
    <setting name="musicnet_auditEnabled" dynamic="true" />
    <setting name="xbos_auditEnabled" dynamic="true" />
    <setting name="xcbk_auditEnabled" dynamic="true" />
    <setting name="xuacs_auditEnabled" dynamic="true" />

    <!--auditdb-->

    <component name="auditdb" />
    <interface name="auditdb" />

    <!--authsg-->

    <component name="authsg" friendly="ActiveAuth Gateway FD" />
    <interface name="authsg" />
    <interface name="authsg_int" />
    <interface name="authsg_ssl" />
    <setting name="authsg_whitelistheaders" dynamic="true" />
    <setting name="authsg_allowlistheadersincoming" dynamic="true" />
    <setting name="authsg_allowlistheadersoutgoing" dynamic="true" />
    <setting name="authsg_requestTimeoutSeconds" dynamic="true" />
    <setting name="authsg_gatewayTimeoutSeconds" dynamic="true" />
    <setting name="authsg_sslCertSubject" dynamic="true" />
    <multiSetting name="authsg_hostNameMappings" dynamic="true" />
    <virtualInterface name="authsg" healthCheckEnabled="true" />
    <virtualInterface name="authsg_ssl" healthCheckEnabled="true" />
    <virtualInterface name="authsg_int" healthCheckEnabled="true" />
    
    <!--avatardb-->

    <component name="avatardb" />
    <interface name="avatardb" />
    <virtualInterface name="avatardb" />

    <!--billing-->

    <setting name="billing_activateTokenTimeout" dynamic="true" />
    <setting name="billing_activateTokenTimeout_LiveService" dynamic="true" />
    <setting name="billing_activateTokenTimeout_Xbox1" dynamic="true" />
    <setting name="billing_addCommentTimeout" dynamic="true" />
    <setting name="billing_addCommentTimeout_LiveService" dynamic="true" />
    <setting name="billing_addCommentTimeout_Xbox1" dynamic="true" />
    <setting name="billing_addPaymentInstrumentTimeout" dynamic="true" />
    <setting name="billing_addPaymentInstrumentTimeout_LiveService" dynamic="true" />
    <setting name="billing_addPaymentInstrumentTimeout_Xbox1" dynamic="true" />
    <setting name="billing_addRoleAssignmentTimeout" dynamic="true" />
    <setting name="billing_addRoleAssignmentTimeout_LiveService" dynamic="true" />
    <setting name="billing_addRoleAssignmentTimeout_Xbox1" dynamic="true" />
    <setting name="billing_addViolationTimeout" dynamic="true" />
    <setting name="billing_addViolationTimeout_LiveService" dynamic="true" />
    <setting name="billing_addViolationTimeout_Xbox1" dynamic="true" />
    <setting name="billing_allowEditorialPurchasesAsZeroPoints" dynamic="true" />
    <setting name="billing_allowFakeActivationCode" dynamic="true" />
    <setting name="billing_allowInjectedScsErrorInRequest" dynamic="true" />
    <setting name="billing_allowUrlOverrideInRequest" dynamic="true" />
    <setting name="billing_bdkUrl" dynamic="true" />
    <setting name="billing_calculateTaxTimeout" dynamic="true" />
    <setting name="billing_calculateTaxTimeout_LiveService" dynamic="true" />
    <setting name="billing_calculateTaxTimeout_Xbox1" dynamic="true" />
    <setting name="billing_cancelSubscriptionTimeout" dynamic="true" />
    <setting name="billing_cancelSubscriptionTimeout_LiveService" dynamic="true" />
    <setting name="billing_cancelSubscriptionTimeout_Xbox1" dynamic="true" />
    <setting name="billing_checkProvisioningStatusTimeout" dynamic="true" />
    <setting name="billing_checkProvisioningStatusTimeout_LiveService" dynamic="true" />
    <setting name="billing_checkProvisioningStatusTimeout_Xbox1" dynamic="true" />
    <setting name="billing_closeBalanceTimeout" dynamic="true" />
    <setting name="billing_connectionLimit" dynamic="true" />
    <setting name="billing_connectToBilling" dynamic="true" />
    <setting name="billing_convertSubscriptionExTimeout" dynamic="true" />
    <setting name="billing_convertSubscriptionExTimeout_LiveService" dynamic="true" />
    <setting name="billing_convertSubscriptionExTimeout_Xbox1" dynamic="true" />
    <setting name="billing_convertSubscriptionTimeout" dynamic="true" />
    <setting name="billing_convertSubscriptionTimeout_LiveService" dynamic="true" />
    <setting name="billing_convertSubscriptionTimeout_Xbox1" dynamic="true" />
    <setting name="billing_createAccountTimeout" dynamic="true" />
    <setting name="billing_createAccountTimeout_LiveService" dynamic="true" />
    <setting name="billing_createAccountTimeout_Xbox1" dynamic="true" />
    <setting name="billing_creditPaymentInstrumentTimeout" dynamic="true" />
    <setting name="billing_ctpTenantName" dynamic="true" />
    <setting name="billing_creditPaymentInstrumentExTimeout" dynamic="true" />
    <setting name="billing_deprovisionServicesTimeout" dynamic="true" />
    <setting name="billing_deprovisionServicesTimeout_LiveService" dynamic="true" />
    <setting name="billing_deprovisionServicesTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getAccountIdFromAdminPUIDTimeout" dynamic="true" />
    <setting name="billing_getAccountIdFromAdminPUIDTimeout_LiveService" dynamic="true" />
    <setting name="billing_getAccountIdFromAdminPUIDTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getAccountInfoTimeout" dynamic="true" />
    <setting name="billing_getAccountInfoTimeout_LiveService" dynamic="true" />
    <setting name="billing_getAccountInfoTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getCommentsTimeout" dynamic="true" />
    <setting name="billing_getCommentsTimeout_LiveService" dynamic="true" />
    <setting name="billing_getCommentsTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getEligibleOfferingsTimeout" dynamic="true" />
    <setting name="billing_getEligibleOfferingsTimeout_LiveService" dynamic="true" />
    <setting name="billing_getEligibleOfferingsTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getKeyTimeout" dynamic="true" />
    <setting name="billing_getKeyTimeout_LiveService" dynamic="true" />
    <setting name="billing_getKeyTimeout_Xbox1" dynamic="true" />
  <setting name="billing_getPartnerConfigurationTimeout" dynamic="true" />
  <setting name="billing_getPartnerConfigurationTimeout_LiveService" dynamic="true" />
  <setting name="billing_getPartnerConfigurationTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsTimeout" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsTimeout_LiveService" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsExTimeout" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsExTimeout_LiveService" dynamic="true" />
    <setting name="billing_getPaymentInstrumentsExTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getPermitsForObjectIdTimeout" dynamic="true" />
    <setting name="billing_getPermitsForObjectIdTimeout_LiveService" dynamic="true" />
    <setting name="billing_getPermitsForObjectIdTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getSubscriptionStatusTimeout" dynamic="true" />
    <setting name="billing_getSubscriptionStatusTimeout_LiveService" dynamic="true" />
    <setting name="billing_getSubscriptionStatusTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getSubscriptionsTimeout" dynamic="true" />
    <setting name="billing_getSubscriptionsTimeout_LiveService" dynamic="true" />
    <setting name="billing_getSubscriptionsTimeout_Xbox1" dynamic="true" />
    <setting name="billing_getTokenInfoExTimeout" dynamic="true" />
    <setting name="billing_getTokenInfoExTimeout_LiveService" dynamic="true" />
    <setting name="billing_getTokenInfoExTimeout_Xbox1" dynamic="true" />
  <setting name="billing_loadTokenInstanceTimeout" dynamic="true" />
  <setting name="billing_loadTokenInstanceTimeout_LiveService" dynamic="true" />
  <setting name="billing_loadTokenInstanceTimeout_Xbox1" dynamic="true" />
    <setting name="billing_maxTrialCount" dynamic="true" />
    <setting name="billing_maxEditorialPurchasesAsZeroPointsPerMinute" dynamic="true" />
    <setting name="billing_migrateOfferTimeout" dynamic="true" />
    <setting name="billing_migrateOfferTimeout_LiveService" dynamic="true" />
    <setting name="billing_migrateOfferTimeout_Xbox1" dynamic="true" />
    <setting name="billing_migrationOfferId" dynamic="true" />
    <setting name="billing_newContentWindow" dynamic="true" />
    <setting name="billing_offsetOrderTimeout" dynamic="true" />
    <setting name="billing_offsetOrderTimeout_LiveService" dynamic="true" />
    <setting name="billing_offsetOrderTimeout_Xbox1" dynamic="true" />
    <setting name="billing_provisionServicesTimeout" dynamic="true" />
    <setting name="billing_provisionServicesTimeout_LiveService" dynamic="true" />
    <setting name="billing_provisionServicesTimeout_Xbox1" dynamic="true" />
    <setting name="billing_proxy" />
    <setting name="billing_pumpUserBillingInfoQueue" dynamic="true" />
    <setting name="billing_pumpUserBillingInfoQueueInterval" dynamic="true" />
    <setting name="billing_purchaseItemTimeout" dynamic="true" />
    <setting name="billing_purchaseItemTimeout_LiveService" dynamic="true" />
    <setting name="billing_purchaseItemTimeout_Xbox1" dynamic="true" />
    <setting name="billing_purchaseOfferingExTimeout" dynamic="true" />
    <setting name="billing_purchaseOfferingExTimeout_LiveService" dynamic="true" />
    <setting name="billing_purchaseOfferingExTimeout_Xbox1" dynamic="true" />
    <setting name="billing_purchaseOfferingTimeout" dynamic="true" />
    <setting name="billing_purchaseOfferingTimeout_LiveService" dynamic="true" />
    <setting name="billing_purchaseOfferingTimeout_Xbox1" dynamic="true" />
    <setting name="billing_queueUserBillingInfo" dynamic="true" />
    <setting name="billing_reinstateSubscriptionTimeout" dynamic="true" />
    <setting name="billing_reinstateSubscriptionTimeout_LiveService" dynamic="true" />
    <setting name="billing_reinstateSubscriptionTimeout_Xbox1" dynamic="true" />
    <setting name="billing_removePaymentInstrumentTimeout" dynamic="true" />
    <setting name="billing_removePaymentInstrumentTimeout_LiveService" dynamic="true" />
    <setting name="billing_removePaymentInstrumentTimeout_Xbox1" dynamic="true" />
    <setting name="billing_removeRoleAssignmentTimeout" dynamic="true" />
    <setting name="billing_removeRoleAssignmentTimeout_LiveService" dynamic="true" />
    <setting name="billing_removeRoleAssignmentTimeout_Xbox1" dynamic="true" />
    <setting name="billing_removeViolationTimeout" dynamic="true" />
    <setting name="billing_removeViolationTimeout_LiveService" dynamic="true" />
    <setting name="billing_removeViolationTimeout_Xbox1" dynamic="true" />
  <setting name="billing_scsSourcePartnerId" dynamic="true" />
  <setting name="billing_setPartnerConfigurationTimeout" dynamic="true" />
  <setting name="billing_setPartnerConfigurationTimeout_LiveService" dynamic="true" />
  <setting name="billing_setPartnerConfigurationTimeout_Xbox1" dynamic="true" />
    <setting name="billing_settleBalanceTimeout" dynamic="true" />
    <setting name="billing_settleBalanceTimeout_LiveService" dynamic="true" />
    <setting name="billing_settleBalanceTimeout_Xbox1" dynamic="true" />
    <setting name="billing_stopPaymentsTimeout" dynamic="true" />
    <setting name="billing_submitOrderTimeout" dynamic="true" />
    <setting name="billing_submitOrderTimeout_LiveService" dynamic="true" />
    <setting name="billing_submitOrderTimeout_Xbox1" dynamic="true" />
    <setting name="billing_switchPaymentInstrumentsTimeout" dynamic="true" />
    <setting name="billing_switchPaymentInstrumentsTimeout_LiveService" dynamic="true" />
    <setting name="billing_switchPaymentInstrumentsTimeout_Xbox1" dynamic="true" />
    <setting name="billing_testConnectionTimeout" dynamic="true" />
    <setting name="billing_testConnectionTimeout_LiveService" dynamic="true" />
    <setting name="billing_testConnectionTimeout_Xbox1" dynamic="true" />
    <setting name="billing_timeout" dynamic="true" />
    <setting name="billing_timeoutBlockInterval" dynamic="true" />
    <setting name="billing_transferBalanceTimeout" dynamic="true" />
    <setting name="billing_transferBalanceTimeout_LiveService" dynamic="true" />
    <setting name="billing_transferBalanceTimeout_Xbox1" dynamic="true" />
    <setting name="billing_updateAccountInfoTimeout" dynamic="true" />
    <setting name="billing_updateAccountInfoTimeout_LiveService" dynamic="true" />
    <setting name="billing_updateAccountInfoTimeout_Xbox1" dynamic="true" />
    <setting name="billing_updatePaymentInstrumentInfoTimeout" dynamic="true" />
    <setting name="billing_updatePaymentInstrumentInfoTimeout_LiveService" dynamic="true" />
    <setting name="billing_updatePaymentInstrumentInfoTimeout_Xbox1" dynamic="true" />
    <setting name="billing_updateSubscriptionInfoTimeout" dynamic="true" />
    <setting name="billing_updateSubscriptionInfoTimeout_LiveService" dynamic="true" />
    <setting name="billing_updateSubscriptionInfoTimeout_Xbox1" dynamic="true" />
    <setting name="billing_validateProvisioningDataTimeout" dynamic="true" />
    <setting name="billing_validateProvisioningDataTimeout_LiveService" dynamic="true" />
    <setting name="billing_validateProvisioningDataTimeout_Xbox1" dynamic="true" />
  <setting name="billing_ctpPurchaseTransactionServiceTimeoutSeconds" dynamic="true" />
  <setting name="billing_ctpJoinSubscriptionTimeoutSeconds" dynamic="true" />
  <setting name="billing_ctpMigrateAccountTimeoutSeconds" dynamic="true" />
  <setting name="billing_ctpPurchaseTransactionServiceUrl" dynamic="true" />
  <setting name="billing_ctpAllowUrlOverride" dynamic="true" />
  <setting name="billing_ctpconnectbilling" dynamic="true" />
  <setting name="billing_ctppurchase_roundboundarymonths" dynamic="true" />
  <setting name="billing_initializeCTPWrapper" dynamic="true" />
  <setting name="billing_useCatalogSubscriptionOffers" dynamic="true" />
  <setting name="catalog_subscriptionMediaTypes" dynamic="true" />
  <setting name="CTPPurchase_fastFailWindow" dynamic="true" />
  <setting name="CTPPurchase_fastFailMinThreshold" dynamic="true" />
  <setting name="CTPPurchase_fastFailMaxThreshold" dynamic="true" />
  <setting name="CTPPurchase_fastFailThrottling" dynamic="true" />
  <setting name="billing_familyGoldLimit" dynamic="true" />
  <setting name="xbos_CTPTransactionExpiredSeconds" dynamic="true" />
  <setting name="xbos_CTPPurchaseTransactionConsiderFailedSeconds" dynamic="true" />
  <setting name="xbos_pumpCTPPurchaseQueue" dynamic="true" />
  <setting name="xbos_subscriptionMaxTimeCredit" dynamic="true" />
  <setting name="xbos_ctpTimeConversionRatio" dynamic="true" />
  <multiSetting name="xbos_subscriptionCountryCreditMapping" dynamic="true" />
  <multiSetting name="xbos_zeroTaxIncludedCountryList" dynamic="true" />

  <!-- mix settings -->
  <multiSetting name="mix_offerMgmt_nonOfferType" dynamic="true" />
  <setting name="mix_productMgmt_imageCleanup" dynamic="true" />

    <!-- non-timeout related setting for OffsetOrder calls-->
    <setting name="billing_offsetOrderFinancialReportingCode" dynamic="true" />
    <setting name="billing_offsetOrderCommentInfoCommentCode" dynamic="true" />

    <multiSetting name="billing_geoid_region" />
    <multiSetting name="billing_nonUserBillingErrors" dynamic="true" />

  <!--Marketplace Catalog FD -->
  <component name="marketplacecatalog" friendly="Marketplace Catalog FD" />
  <interface name="marketplacecatalog" />
  <interface name="marketplacecatalog_int" />
  <virtualInterface name="marketplacecatalog" healthCheckEnabled="true" />
  <virtualInterface name="marketplacecatalog_int" healthCheckEnabled="true" />
    <!--catalog-->
    <component name="catalog" friendly="Catalog FD" />
    <interface name="catalog" />
    <interface name="catalog_int" />
    <virtualInterface name="catalog" healthCheckEnabled="true" />
    <virtualInterface name="catalog_int" healthCheckEnabled="true" />

    <setting name="catalog_editorial_ips0"   dynamic="true" />
    <setting name="catalog_editorial_ips1"   dynamic="true" />
    <setting name="catalog_editorial_ips2"   dynamic="true" />
    <setting name="catalog_editorial_priv0" dynamic="true" />
    <setting name="catalog_editorial_priv1" dynamic="true" />
    <setting name="catalog_editorial_priv2" dynamic="true" />
    <setting name="catalog_editorial_time0"  dynamic="true" />
    <setting name="catalog_editorial_time1"  dynamic="true" />
    <setting name="catalog_editorial_time2"  dynamic="true" />

    <setting name="catalog_appMediaTypes" dynamic="true" />
    <setting name="catalog_musicMediaTypes" dynamic="true" />
    <setting name="catalog_videoMediaTypes" dynamic="true" />
    <setting name="catalog_gameMediaTypes" dynamic="true" />
    <setting name="catalog_consumableMediaTypes" dynamic="true" />
    <setting name="catalog_repurchasableMediaTypes" dynamic="true" />
  <setting name="catalog_pointsBundleMediaTypes" dynamic="true" />

    <multiSetting name="catalog_storeCatalogDefault" dynamic="true" />
    <multiSetting name="catalog_storeMediaTypeCatalogOverride" dynamic="true" />

    <!-- Catalog Watcher -->
    <setting name="catalogwatcher_fast_esp_max_documents_per_batch"   dynamic="true" />
    <setting name="catalogwatcher_fast_wait_for_indexing"   dynamic="true" />
    <setting name="catalogwatcher_perform_and_log_validation_on_error"   dynamic="true" />
    <setting name="catalogwatcher_media_extractor_version"   dynamic="true" />
    <setting name="catalogwatcher_fast_esp_virtual_collection_name"   dynamic="true" />
    <setting name="catalogwatcher_media_extractor_batch_size"   dynamic="true" />
    <setting name="catalogwatcher_video_extractor_batch_size"   dynamic="true" />
    <setting name="catalogwatcher_producer_consumer_media_max_queue_size"   dynamic="true" />
    <setting name="catalogwatcher_producer_consumer_video_max_queue_size"   dynamic="true" />
    <setting name="catalogwatcher_fast_esp_ingestion_port"   dynamic="true" />
    <setting name="catalogwatcher_fast_esp_collection_name"   dynamic="true" />
    <setting name="catalogwatcher_commands_timeout_in_secs"   dynamic="true" />
    <setting name="catalogwatcher_extractor_timeout_in_secs"   dynamic="true" />
    <setting name="catalogwatcher_video_extractor_timeout_in_secs"   dynamic="true" />
    <setting name="catalogwatcher_fast_esp_max_document_size"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_max_documents_per_batch"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_container"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_blob_format_full"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_blob_format_delta"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_blob_format_date_part"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_blob_format_full_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_blob_format_delta_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_connection_string"   dynamic="true" />
    <setting name="catalogwatcher_azure_feed_prefix"   dynamic="true" />
    <setting name="catalogwatcher_azure_feed_suffix"   dynamic="true" />
    <setting name="catalogwatcher_speech_extractor_timeout_in_secs"   dynamic="true" />
    <setting name="catalogwatcher_speech_extractor_version"   dynamic="true" />
    <setting name="catalogwatcher_speech_extractor_batch_size"   dynamic="true" />
    <setting name="catalogwatcher_producer_consumer_speech_max_queue_size"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_max_documents_per_batch_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_storage_container_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_connection_string_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_feed_prefix_speech"   dynamic="true" />
    <setting name="catalogwatcher_azure_feed_suffix_speech"   dynamic="true" />
    <setting name="catalogwatcher_video_document_builder_firstpartyprovider"   dynamic="true" />
    <setting name="fastEsp_persist_connection_in_secs"   dynamic="true" />
    <setting name="fastEsp_use_result_views"   dynamic="true" />
    <setting name="fastEsp_allow_debug_xslt"   dynamic="true" />

    <multiSetting name="fastEspRemappingParameters" dynamic="true" />
    <multiSetting name="fastEspMarketplaceIngestionIps" dynamic="true" />
    <multiSetting name="fastEspNavigatorParameters" dynamic="true" />
    <multiSetting name="fastEspOrderByParameters" dynamic="true" />
    <multiSetting name="fastEspFlatFieldsXml" dynamic="true" />
    <multiSetting name="fastEspFlatFieldsString" dynamic="true" />
    <multiSetting name="fastEspFlatFieldsSingle" dynamic="true" />
    <multiSetting name="fastEspFlatFieldsInt32" dynamic="true" />
    <multiSetting name="fastEspFlatFieldsDateTime" dynamic="true" />

    <multiSetting name="fastEspReplaceDashForParameter" dynamic="true" />
    <multiSetting name="pdlc_mediatypes" dynamic="true" />

    <multiSetting name="fastRatingExemptGCForTitles" dynamic="true" />
    <multiSetting name="fastRatingExemptMediaTypes" dynamic="true" />
    <multiSetting name="fastRatingNonExemptRatingSystem" dynamic="true" />
    <multiSetting name="fastRatingNonExemptMediaIds" dynamic="true" />
  
    <!--ZuneDB catalog watcher-->
    <setting name="zunedb_catalogwatcher_fast_esp_max_documents_per_batch"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_fast_wait_for_indexing"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_fast_esp_ingestion_port"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_fast_esp_collection_name"   dynamic="true" />    
    <setting name="zunedb_catalogwatcher_extractor_timeout_in_secs"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_extractor_batch_size"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_producer_consumer_zuneapp_max_queue_size"   dynamic="true" />
    <setting name="zunedb_catalogwatcher_perform_and_log_validation_on_error"   dynamic="true" />

    <multiSetting name="fastEspZuneAppIngestionIps" dynamic="true" />
  
  <!--rawcatalogdb-->
  <component name="rawcatalogdb" />
  <interface name="rawcatalogdb" />

    <!--fecatalogdbxbox-->
    <component name="fecatalogdbxbox" />
    <interface name="fecatalogdbxbox" />
    <virtualInterface name="fecatalogdbxbox" healthCheckEnabled="false" />

    <!--fecatalogdbzune/search selector settings-->
    <setting name="catalog_activeFECatalogDBZuneVirtualInterface" dynamic="true" />
    <setting name="catalog_activeFECatalogDBSearchVirtualInterface" dynamic="true" />
	
	<!--fecatalogdbzuneapps selector settings-->
	<setting name="zune_dvi_FECatalogDBZuneApps_active" dynamic="true" />
	
    <!-- VI for the VIP which the catalog watcher processes point to -->
    <virtualInterface name="fecatalogdbwatcher" healthCheckEnabled="false" />

    <!--fecatalogdbzune-->
    <component name="fecatalogdbzune" />
    <interface name="fecatalogdbzune" />
    <virtualInterface name="fecatalogdbzune" healthCheckEnabled="false" />

    <!--fecatalogdbxbox-->
    <component name="fecatalogdbsearch" />
    <interface name="fecatalogdbsearch" />
    <virtualInterface name="fecatalogdbsearch" healthCheckEnabled="false" />

    <!--cleanser-->

    <component name="cleanser" friendly="Cleanser Svc" />
    <interface name="cleanser" />
    <virtualInterface name="cleanseriis" />
    <virtualInterface name="cleanserinh" />
    <virtualInterface name="cleansersg" />
    <virtualInterface name="cleanservx" />
    <setting name="cleanser_clientDeadSec" dynamic="true" />
    <setting name="cleanser_maxQueueLength" />
    <setting name="cleanser_maxTcpConnections" />
    <setting name="cleanser_watchDogTimerIntervalSec" dynamic="true" />
    <setting name="cleanser_workerThreadsPerProcessor" />
    <setting name="cleanser_fdbReconnectIntervalSec" dynamic="true" />
    <setting name="cleanser_fdbUpdateIntervalSec" />
    <setting name="cleanser_fdbQueueMaxFreeEntriesCount" />
    <setting name="cleanser_log_target" />
    <setting name="cleanser_XomFileTarget" dynamic="true" />
    <setting name="cleanser_EtxEventTarget" dynamic="true" />
    <multiSetting name="reporting_nonSplitComponentIds" />

    <!--compplugins-->

    <component name="compplugins" />
    <interface name="compplugins" />

    <!--compPlugins-->

    <setting name="compPlugins_allowClientResultsSubmissions" dynamic="true" />
    <setting name="compPlugins_allowTimeAdjustment" dynamic="true" />

    <!--config-->

    <setting name="config_cacheRefreshInterval" />
    <setting name="config_minEventInterval" />
    <setting name="config_loadTitleConnectionTimeoutSeconds" />

    <!--cron-->

    <component name="cron" friendly="Cron FD" />
    <interface name="cron_int" />
    <virtualInterface name="cron_int" healthCheckEnabled="true" />
    <setting name="cron_deleteCompletedJobs" dynamic="true" />
    <setting name="cron_jobCheckInterval" dynamic="true" />
    <setting name="cron_requestThreads" dynamic="true" />
    <setting name="cron_retryInterval" dynamic="true" />
    <setting name="cron_load_job_max_sleep_time_milliseconds" dynamic="true" />

    <!--CleanClip-->
    <setting name="clean_clip_delete_window_minute" dynamic="true" />

  <!-- FAST ESP -->
  <component name="fastEspMarketplaceSearch" friendly="Fast ESP Document Search" />
  <interface name="fastEspMarketplaceSearch" />
  <virtualInterface name="fastEspMarketplaceSearch" healthCheckEnabled="false" />

  <multiSetting name="fastEspSpellCheckLanguage" dynamic="true"/>

  <!--Content Ingestion -->
  <interface name="contentIngestion" />
  <interface name="ContentIngestionCatalogDB" />
  <component name="ContentIngestionCatalogDB" />
  <virtualInterface name="contentIngestion" />

    <!--cronlib-->
    <component name="cronlib" />
    <interface name="cronlib" />

    <!--crux-->
    <setting name="crux_passportSiteAddress" dynamic="true" />
    <setting name="crux_MusicNetAESKeyType" dynamic="true" />
    <setting name="crux_MusicNetAESKeyVer" dynamic="true" />
    <setting name="crux_MusicNetTokenSaltLen" dynamic="true" />
    <setting name="crux_MusicNetTokenMagicString" dynamic="true" />
    <setting name="crux_allowTestCreateAccount" dynamic="true" />
    <setting name="crux_allowTestAddPoints" dynamic="true" />
    <setting name="crux_VODLicenseWindowInMinutes" dynamic="true" />
    <setting name="crux_useMusicNetForProvisioning" dynamic="true" />

    <!--crypto-->

    <setting name="crypto_serviceKeyType" />
    <setting name="crypto_serviceKeyVersion" />

    <!--dmp-->

    <setting name="dmp_addPromotionalBalanceMaxAttempts" dynamic="true" />
    <setting name="dmp_addPromotionalBalanceTimeoutSeconds" dynamic="true" />
    <setting name="dmp_allowUrlOverride" dynamic="true" />
    <setting name="dmp_autoRegisterUsers" dynamic="true" />
    <setting name="dmp_blacklistBlockIntervalSeconds" dynamic="true" />
    <setting name="dmp_blacklistTimeoutThresholdCount" dynamic="true" />
    <setting name="dmp_blacklistTimeoutTimespanSeconds" dynamic="true" />
    <setting name="dmp_cancelPurchaseItemMaxAttempts" dynamic="true" />
    <setting name="dmp_cancelPurchaseItemTimeoutSeconds" dynamic="true" />
    <setting name="dmp_clientCertSubject" dynamic="true" />
    <setting name="dmp_getBalanceDetailsMaxAttempts" dynamic="true" />
    <setting name="dmp_getBalanceDetailsTimeoutSeconds" dynamic="true" />
    <setting name="dmp_getBalanceMaxAttempts" dynamic="true" />
    <setting name="dmp_getBalanceTimeoutSeconds" dynamic="true" />
    <setting name="dmp_maxAcquisitionTitleLength" dynamic="true" />
    <setting name="dmp_maxItemCategoryLength" dynamic="true" />
    <setting name="dmp_maxItemTitleLength" dynamic="true" />
    <setting name="dmp_pumpPurchasesQueue" dynamic="true" />
    <setting name="dmp_pumpRewardsQueue" dynamic="true" />
    <setting name="dmp_purchaseItemMaxAttempts" dynamic="true" />
    <setting name="dmp_purchaseItemTimeoutSeconds" dynamic="true" />
    <setting name="dmp_purchaseTransactionExpiredSeconds" dynamic="true" />
    <setting name="dmp_purchaseTransactionConsiderFailedSeconds" dynamic="true" />
    <setting name="dmp_queuePumpIntervalSeconds" dynamic="true" />
    <setting name="dmp_registerUserMaxAttempts" dynamic="true" />
    <setting name="dmp_registerUserTimeoutSeconds" dynamic="true" />
    <setting name="dmp_rewardTransactionExpiredSeconds" dynamic="true" />
    <setting name="dmp_tenantID" dynamic="true" />
    <setting name="dmp_transactionUrl" dynamic="true" />
    <setting name="dmp_transferBalanceMaxAttempts" dynamic="true" />
    <setting name="dmp_transferBalanceTimeoutSeconds" dynamic="true" />

    <setting name="dmp_maxPointsBalance" dynamic="true" />
  <setting name="dmp_transferPointsTimeoutSeconds" dynamic="true" />

    <!--FinBus-->
    <component name="finbus" friendly="FinBus Publisher Svc" />
    <interface name="finbus" />

    <setting name="finbus_endpointAddress" dynamic="true" />
    <setting name="finbus_transactionExpiredSeconds" dynamic="true" />
    <setting name="finbus_transactionConsiderFailureSeconds" dynamic="true" />
    <setting name="finbus_queuePumpIntervalSeconds" dynamic="true" />
    <setting name="finbus_pumpQueue" dynamic="true" />
    <setting name="finbus_maxBufferSize" dynamic="true" />
    <setting name="finbus_maxReceivedMessageSize" dynamic="true" />
    <setting name="finbus_maxConnections" dynamic="true" />
    <setting name="finbus_receiveTimeout" dynamic="true" />
    <setting name="finbus_closeTimeout" dynamic="true" />
    <setting name="finbus_openTimeout" dynamic="true" />
    <setting name="finbus_sendTimeout" dynamic="true" />
    <setting name="finbus_maxBufferPoolSize" dynamic="true" />
    <setting name="finbus_certificateSubject" dynamic="true" />
    <setting name="finbus_maxActiveRequests" dynamic="true" />
    <setting name="finbus_clientPartnerId" dynamic="true" />
    <setting name="finbus_throttleWaitMilliseconds" dynamic="true" />
    <setting name="finbus_getPendingItemsMaxItems" dynamic="true" />
    <setting name="finbus_ignoreSslPolicyErrors" dynamic="true" />
    <setting name="finbus_fastFailWindow" dynamic="true" />
    <setting name="finbus_fastFailMinThreshold" dynamic="true" />
    <setting name="finbus_fastFailMaxThreshold" dynamic="true" />

   <!--fse-->
    <setting name="fse_configChange" dynamic="true" />
    <setting name="fse_reservationSeconds" dynamic="true" />
    <setting name="fse_reservationWaitSeconds" dynamic="true" />
    <setting name="fse_reservationWaitSecondsMaximum" dynamic="true" />
    <setting name="fse_bookmarkMinutesThreshold" dynamic="true" />
    <setting name="fse_bookmarkMinutesFloor" dynamic="true" />
    <setting name="fse_bookmarkHoursThreshold" dynamic="true" />
    <setting name="fse_bookmarkHoursFloor" dynamic="true" />
    <setting name="fse_bookmarkDaysThreshold" dynamic="true" />
    <setting name="fse_bookmarkDaysFloor" dynamic="true" />

    <!-- Master Key -->
    <setting name="MasterKey_currentEncryptKeyVersion" dynamic="true" />

    <!--musicnet-->

    <setting name="musicnet_retailerID" dynamic="true" />

    <setting name="musicnet_dmpPurchaseTitleArtistFormatString" dynamic="true" />
    <setting name="musicnet_dmpPurchaseGlobalMusicSKU" dynamic="true" />
    <setting name="musicnet_dmpPurchaseGlobalMusicCampaignID" dynamic="true" />

    <setting name="musicnet_dmpPurchaseMusicTrackCategory" dynamic="true" />
    <setting name="musicnet_dmpPurchaseMusicAlbumCategory" dynamic="true" />

    <setting name="musicnet_getServiceConfigurationUrl" dynamic="true" />
    <setting name="musicnet_allowUrlOverride" dynamic="true" />
    <setting name="musicnet_failFastThresholdCount" dynamic="true" />
    <setting name="musicnet_failFastThresholdIntervalSeconds" dynamic="true" />
    <setting name="musicnet_failFastBlockIntervalSeconds" dynamic="true" />

    <setting name="musicnet_apiMaxRetryAttempts" dynamic="true" />

    <setting name="musicnet_getServiceConfigurationTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_createAccountTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_suspendAccountTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_resumeAccountTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_closeAccountTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_addTrialSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_endTrialSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_addSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_cancelSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_upgradeSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_downgradeSubscriptionOfferTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_purchaseAssetsTimeoutSeconds" dynamic="true" />
    <setting name="musicnet_transferPurchaseDBEntitlementsTimeoutSeconds" dynamic="true" />

    <setting name="musicnet_pumpPurchasesQueue" dynamic="true" />
    <setting name="musicnet_queuePumpIntervalSeconds" dynamic="true" />
    <setting name="musicnet_purchaseTransactionExpiredSeconds" dynamic="true" />
    <setting name="musicnet_purchaseTransactionConsiderFailedSeconds" dynamic="true" />

    <setting name="musicnet_subscriptionSku" dynamic="true" />
    <setting name="musicnet_trialSubscriptionSku" dynamic="true" />
    <setting name="musicnet_offerIdMusicNetSkuOverrides" dynamic="true" />


    <!--msnRR-->
    <setting name="msnrr_ignorefdrequests" dynamic="true" />

    <setting name="msnrr_testContentType" dynamic="true" />
    <setting name="msnrr_testUserPuid" dynamic="true" />

    <setting name="msnrr_failFastThresholdCount" dynamic="true" />
    <setting name="msnrr_failFastThresholdIntervalSeconds" dynamic="true" />
    <setting name="msnrr_failFastBlockIntervalSeconds" dynamic="true" />

    <setting name="msnrr_allowUrlOverride" dynamic="true" />
    <setting name="msnrr_serviceSingleRatingUrl" dynamic="true" />
    <setting name="msnrr_serviceAggregatorUrl" dynamic="true" />

    <setting name="msnrr_saveRatingTimeoutSeconds" dynamic="true" />
    <setting name="msnrr_getRatingByUserWithAverageTimeoutSeconds" dynamic="true" />

    <setting name="msnrr_getRatingAveragesTimeoutSeconds" dynamic="true" />

    <!--VenturaRR-->
    <setting name="venturarr_failFastMaxThreshold" dynamic="true" />
    <setting name="venturarr_failFastMinThreshold" dynamic="true" />
    <setting name="venturarr_failFastTimeWindow" dynamic="true" />
    <setting name="venturarr_failFastEnabled" dynamic="true" />

    <setting name="venturarr_serviceDirectoryServiceUrl" dynamic="true" />

    <setting name="venturarr_serviceAuthKeyArray" dynamic="true" />
    <setting name="venturarr_serviceAuthKeyIndex" dynamic="true" />

    <setting name="venturarr_singleRatingTimeoutSeconds" dynamic="true" />
    <setting name="venturarr_aggregateRatingTimeoutSeconds" dynamic="true" />

    <setting name="venturarr_customerGroup" dynamic="true" />
    <setting name="venturarr_superUserVuidPart" dynamic="true" />
    <setting name="venturarr_formatVuid" dynamic="true" />
    <setting name="venturarr_formatSuperVuid" dynamic="true" />
    <setting name="venturarr_clientVersion" dynamic="true" />
    <setting name="venturarr_deviceId" dynamic="true" />
    <setting name="venturarr_locale" dynamic="true" />

    <setting name="venturarr_padCredentialExpiryMilliseconds" dynamic="true" />

    <setting name="venturarr_defaultConnectionLimit" dynamic="true" />
    <setting name="venturarr_ignoreSslPolicyErrors" dynamic="true" />

    <!--WMIS-->

    <setting name="wmis_clientCertSubject" dynamic="true" />
    <setting name="wmis_serviceUrl" dynamic="true" />
    <setting name="wmis_allowUrlOverride" dynamic="true" />

    <setting name="wmis_apiMaxRetryAttempts" dynamic="true" />

    <setting name="wmis_getVideoPurchaseDetailsTimeoutSeconds" dynamic="true" />

    <setting name="wmis_dmpPurchaseGlobalVideoSKU" dynamic="true" />
    <setting name="wmis_dmpPurchaseGlobalVideoCampaignID" dynamic="true" />

    <setting name="wmis_dmpPurchaseVideoCategory" dynamic="true" />

    <setting name="wmis_failFastThresholdCount" dynamic="true" />
    <setting name="wmis_failFastThresholdIntervalSeconds" dynamic="true" />
    <setting name="wmis_failFastBlockIntervalSeconds" dynamic="true" />

    <!--download-->

    <component name="download" />
    <interface name="download" />
    <interface name="download_share" />
    <virtualInterface name="download" />
    <setting name="download_contentDirectory" />

    <!--eventsdb-->

    <component name="eventsdb" />
    <interface name="eventsdb" />

    <!--eventservice-->

    <component name="eventservice" friendly="EventService" />
    <interface name="eventservice" />
    <virtualInterface name="eventservice" healthCheckEnabled="true" />

    <!--eventsink-->

    <component name="eventsink" />
    <interface name="eventsink" />
    <setting name="eventsink_excludeApps" />

    <!--fbserver-->

    <component name="fbserver" friendly="Feedback FD" />
    <interface name="fbserver" />
    <interface name="fbserver_int" />
    <virtualInterface name="fbserver" healthCheckEnabled="true" />
    <virtualInterface name="fbserver_int" healthCheckEnabled="true" />

    <!--feapp-->

    <setting name="feapp_completionPortThreads" />
    <setting name="feapp_workerThreads" />
    <multiSetting name="feapp_compressionPaths" dynamic="true" />

    <!--feedback-->

    <setting name="feedback_coeffBias" dynamic="true" />
    <setting name="feedback_coeffFudgeFactor" dynamic="true" />
    <setting name="feedback_coeffNegativeReview" dynamic="true" />
    <setting name="feedback_coeffPositiveReview" dynamic="true" />
    <setting name="feedback_coeffRange" dynamic="true" />
    <setting name="feedback_coeffSlope" dynamic="true" />
    <setting name="feedback_maxComplaintType" dynamic="true" />
    <setting name="feedback_maxFeedbackTypes" dynamic="true" />
    <setting name="feedback_maxReviewType" dynamic="true" />
    <setting name="feedback_minFeedbackServiceType" dynamic="true" />
    <setting name="feedback_ratingDecayFactor" dynamic="true" />
    <setting name="feedback_ratingDecayFloor" dynamic="true" />
    <setting name="feedback_reviewIgnoreThreshold" dynamic="true" />

    <!--filterdb-->

    <component name="filterdb" />
    <interface name="filterdb" />

    <!--xblmetadb-->

    <component name="xblmetadb" />
    <interface name="xblmetadb" />

    <!--genealogy-->

    <component name="genealogy" />
    <interface name="genealogy" />

    <!--geofencing-->

    <setting name="geofencing_allowAccessOnGeoInfoExceptions" dynamic="true" />
    <setting name="geofencing_allowAccessOnGeoInfoNulls" dynamic="true" />
    <setting name="geofencing_videoGeoFencingEnabled" dynamic="true" />
    <setting name="geofencing_offerGeoFencingEnabled" dynamic="true" />
    <setting name="geofencing_pathToGeoDb" dynamic="true" />
    <setting name="geofencing_maximumDaysBetweenGeoDbUpdate" dynamic="true" />
    <multiSetting name="geofencing_territoryMapping" dynamic="true" />

    <!--global-->

    <setting name="global_buildVersion"/>
    <setting name="global_enableTestApis"/>
    <setting name="global_protocolVersion" dynamic="true" />

    <!--healthcheck -->

    <setting name="healthcheck_executionPeriodInSeconds" dynamic="true" />

    <!--kdcsvc-->

    <!-- @@@ cleanserinh right? -->
    <component name="kdcsvc" friendly="KDC Svc" reportMessageId="30" reportVirtualInterface="cleanservx" />
    <interface name="kdcsvc" />
    <virtualInterface name="kdcsvc" />

    <setting name="kdcsvc_askdc_checkForDos" />
    <setting name="kdcsvc_askdc_DoS_cacheTimeMillis" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS_tooSoonTimeMillis" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS_numEntries" />
    <setting name="kdcsvc_askdc_keyVersion" dynamic="true" />
    <setting name="kdcsvc_askdc_machine_allowLegacyKey" dynamic="true" />
    <setting name="kdcsvc_askdc_timeSkewSeconds" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS2_enabled" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS2_cacheSize"/>
    <setting name="kdcsvc_askdc_DoS2_maxRequests" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS2_interval" dynamic="true" />
    <setting name="kdcsvc_askdc_DoS2_blockingTime" dynamic="true" />
    <setting name="kdcsvc_askdc_echo_enabled" dynamic="true" />
    <setting name="kdcsvc_askdc_echo_lifetimeInSeconds" dynamic="true" />

    <setting name="kdcsvc_core_ATQThreads" dynamic="true" />

    <setting name="kdcsvc_managed_command_timeout" dynamic="true" />
    <setting name="kdcsvc_managed_limitThreadPercentPerPartition" dynamic="true" />
    <setting name="kdcsvc_managed_limitThreadPercentThreshold" dynamic="true" />
    <setting name="kdcsvc_managed_limitThreadPercentDeactivationThreshold" dynamic="true" />
    <setting name="kdcsvc_managed_simulateDbLatencyInMs" dynamic="true" />
    <setting name="kdcsvc_managed_limitEventWarnRecurranceInSeconds" dynamic="true" />
    <setting name="kdcsvc_managed_rpsPCLifetimeInSeconds" dynamic="true" />
    <setting name="kdcsvc_managed_rpsXenonLifetimeInSeconds" dynamic="true" />
    <multiSetting name="kdcsvc_managed_rpsPCSites" dynamic="true" />
    <multiSetting name="kdcsvc_managed_rpsXenonSites" dynamic="true" />

    <setting name="kdcsvc_xkdc_allowUnknownVersion" dynamic="true" />
    <setting name="kdcsvc_xkdc_cacheLifeTimeInSeconds" dynamic="true" />
    <setting name="kdcsvc_xkdc_cacheTableSize" />
    <setting name="kdcsvc_xkdc_DoS_checkForDos" />
    <setting name="kdcsvc_xkdc_DoS_numEntries" />
    <setting name="kdcsvc_xkdc_enforceClientVersion" dynamic="true" />
    <setting name="kdcsvc_xkdc_hashTableSize" />
    <setting name="kdcsvc_xkdc_timeSkewSeconds" dynamic="true" />
    <setting name="kdcsvc_xkdc_DoS2_enabled" dynamic="true" />
    <setting name="kdcsvc_xkdc_DoS2_cacheSize"/>
    <setting name="kdcsvc_xkdc_DoS2_maxRequests" dynamic="true" />
    <setting name="kdcsvc_xkdc_DoS2_interval" dynamic="true" />
    <setting name="kdcsvc_xkdc_DoS2_blockingTime" dynamic="true" />
    <setting name="kdcsvc_xkdc_RequestCache_enabled" dynamic="true" />
    <setting name="kdcsvc_xkdc_RequestCache_lifetimeInSeconds" dynamic="true" />
    <setting name="kdcsvc_xkdc_ignoreDuplicateRequests" dynamic="true" />
    <setting name="kdcsvc_xkdc_enableUserMachineTrust" dynamic="true" />
    <setting name="kdcsvc_xkdc_userAuthorizationBackwardsCompatibility" dynamic="true" />
    <setting name="kdcsvc_xkdc_useUniqueSigninKey" dynamic="true" />
    <setting name="kdcsvc_xkdc_removeUserPrivilegesOnRequiresManagement" dynamic="true" />
    <setting name="kdcsvc_xkdc_minTicketLifetimeSeconds" dynamic="true" />
    <multiSetting name="kdcsvc_xkdc_sgSite1Ips" dynamic="true" />
    <multiSetting name="kdcsvc_xkdc_legacyPcTitles" dynamic="true" />

    <setting name="kdcsvc_xmacs_acceptDevKits" dynamic="true" />
    <setting name="kdcsvc_xmacs_consoleExceptionList" dynamic="true" />
    <setting name="kdcsvc_xmacs_consoleTypeMask" dynamic="true" />
    <setting name="kdcsvc_xmacs_disableDOS" />
    <setting name="kdcsvc_xmacs_DOSStage1CacheTimeout" dynamic="true" />
    <setting name="kdcsvc_xmacs_DOSStage2CacheTimeout" dynamic="true" />
    <setting name="kdcsvc_xmacs_hashListPercentageWarning" dynamic="true" />
    <setting name="kdcsvc_xmacs_keyEncryptionKeyVersion" dynamic="true" />
    <setting name="kdcsvc_xmacs_maxAllowancePerHour" dynamic="true" />
    <setting name="kdcsvc_xmacs_nCipherInitTimeoutInSecs" />
    <setting name="kdcsvc_xmacs_PUIDBlockSize" dynamic="true" />
    <setting name="kdcsvc_xmacs_timeSkewSeconds" dynamic="true" />
    <setting name="kdcsvc_xmacs_useNCipher" />
    <setting name="kdcsvc_xmacs_UseTestMasterSigningKey" />
    <setting name="kdcsvc_xmacs_UseTestXmacsKey" />
    <setting name="kdcsvc_xmacs_DoS2_enabled" dynamic="true" />
    <setting name="kdcsvc_xmacs_DoS2_cacheSize"/>
    <setting name="kdcsvc_xmacs_DoS2_maxRequests" dynamic="true" />
    <setting name="kdcsvc_xmacs_DoS2_interval" dynamic="true" />
    <setting name="kdcsvc_xmacs_DoS2_blockingTime" dynamic="true" />
    <setting name="kdcsvc_xmacs_LimitedPcTokens" dynamic="true"/>
    <setting name="kdcsvc_xmacs_use_xcrypto" dynamic="true"/>

    <!--lbsvr-->

    <component name="lbsvr" friendly="Leaderboard Svc" />
    <interface name="lbsvr" />
    <setting name="lbsvr_BufferManagerPageSize" />
    <setting name="lbsvr_DbLoadingThreadCount" />
    <setting name="lbsvr_FullNamePagingFile" />
    <setting name="lbsvr_IOThreadCount" />
    <setting name="lbsvr_JobResetHour" />
    <setting name="lbsvr_MaxCSndBuffer" />
    <setting name="lbsvr_NetHelloTimeout" />
    <setting name="lbsvr_NetMaxConnections" />
    <setting name="lbsvr_PagingFileInitialSize" />
    <setting name="lbsvr_PersisterRetryInterval" />
    <setting name="lbsvr_ReservedPhysicalMemory" />
    <setting name="lbsvr_SizeRcvBuffer" />
    <setting name="lbsvr_SizeSndBuffer" />
    <setting name="lbsvr_VirtualAllocSize" />
    <setting name="lbsvr_DatabaseWriteThreads" />
    <setting name="lbsvr_DbLoadRetryCount" />
    <setting name="lbsvr_DbLoadIntervalSeconds" />

    <!--Lists-->
    <component name="Lists" friendly="Lists FD" />
    <interface name="Lists" />
    <interface name="Lists_int" />
    <virtualInterface name="Lists" healthCheckEnabled="true" />
    <virtualInterface name="Lists_int" healthCheckEnabled="true" />
    <setting name="Lists_ConfigChange" dynamic="true" />
    <setting name="Lists_ValidateXmlMode" dynamic="true" />

    <!--livecache-->

    <component name="livecache" friendly="Livecache FD" />
    <interface name="livecache" />
    <virtualInterface name="livecache" healthCheckEnabled="true" />
    <setting name="livecache_defaultConnectionLimit" />
    <setting name="livecache_errorResultTTL" dynamic="true" />
    <setting name="livecache_forwardRetryInterval" dynamic="true" />
    <setting name="livecache_MaxRequestRatePerUser" dynamic="true" />
    <setting name="livecache_serviceEnabled" dynamic="true" />
    <setting name="livecache_UserLimitInMinutes" dynamic="true" />
    <setting name="livecache_UserLimitRandMinutes" dynamic="true" />
    <setting name="livecache_lastModified" dynamic="true" />
    <setting name="livecache_maxHeaderCollectionCount" dynamic="true" />

    <!--LiveContent-->
    <setting name="livecontent_sites" dynamic="true" />

    <!--LiveConnectDb -->
    <interface name="LiveConnectDb" />
    <component name="LiveConnectDb" />
    <setting name="mix_titlemgmt_liveconnectdbhost" dynamic="true" />


    <!--LiveInfo-->
    <component name = "liveinfo" friendly="LiveInfo FD" />
    <interface name = "liveinfo" />
    <interface name = "liveinfo_int" />
    <virtualInterface name = "liveinfo"     healthCheckEnabled="true" />
    <virtualInterface name = "liveinfo_int" healthCheckEnabled="true" />
    <setting name ="liveinfo_clientconfiglimit" dynamic = "true" />
    <multiSetting name = "liveinfo_allowed_shared_config_names" dynamic = "true" />

    <!--LiveOffer-->
    <setting name="liveoffer_ContentCheckMode" dynamic="true" />

    <!--livepxy-->

    <component name="livepxy" friendly="WebCache: LiveProxy" />
    <interface name="livepxy" />
    <virtualInterface name="livepxy" healthCheckEnabled="true" />
    <setting name="livepxy_forwardHeaders" />
    <setting name="livepxy_MasterKeyVersion" />
    <setting name="livepxy_maxGamerTagLookupsPerRequest" />
    <setting name="livepxy_maxPUIDLookupsPerRequest" />
    <setting name="livepxy_SiteKeyType" />

    <!--livetitle-->
    <setting name="livetitle_allowBaseVersionZero" />

    <!--locale-->

    <setting name="locale_AE" />
    <setting name="locale_AT" />
    <setting name="locale_AU" />
    <setting name="locale_BE" />
    <setting name="locale_BR" />
    <setting name="locale_CA" />
    <setting name="locale_CH" />
    <setting name="locale_CL" />
    <setting name="locale_CO" />
    <setting name="locale_CZ" />
    <setting name="locale_DE" />
    <setting name="locale_DK" />
    <setting name="locale_ES" />
    <setting name="locale_FI" />
    <setting name="locale_FR" />
    <setting name="locale_GB" />
    <setting name="locale_GR" />
    <setting name="locale_HK" />
    <setting name="locale_HU" />
    <setting name="locale_IE" />
    <setting name="locale_IT" />
    <setting name="locale_JP" />
    <setting name="locale_KR" />
    <setting name="locale_PL" />
    <setting name="locale_RU" />
    <setting name="locale_ZA" />
    <setting name="locale_language1" />
    <setting name="locale_language2" />
    <setting name="locale_language3" />
    <setting name="locale_language4" />
    <setting name="locale_language5" />
    <setting name="locale_language6" />
    <setting name="locale_language7" />
    <setting name="locale_language8" />
    <setting name="locale_language9" />
    <setting name="locale_language10" />
    <setting name="locale_language11" />
    <setting name="locale_language12" />
    <setting name="locale_language13" />
    <setting name="locale_language14" />
    <setting name="locale_language15" />
    <setting name="locale_language16" />
    <setting name="locale_language17" />
    <setting name="locale_language18" />
    <setting name="locale_language19" />
    <setting name="locale_language20" />
    <setting name="locale_MX" />
    <setting name="locale_NL" />
    <setting name="locale_NO" />
    <setting name="locale_NZ" />
    <setting name="locale_PT" />
    <setting name="locale_SE" />
    <setting name="locale_SG" />
    <setting name="locale_TW" />
    <setting name="locale_US" />
    <setting name="locale_validLocales" />

    <!--lspfd-->

    <component name="lspfd" friendly="LSP FD" />
    <interface name="lspfd" />
    <interface name="lspfd_int" />
    <setting name="lspfd_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="lspfd_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="lspfd_fastFailBlockIntervalSeconds" dynamic="true" />
    <setting name="lspfd_databaseCachingEnabled" dynamic="true" />

    <!--messagingfd-->
    <component name="messagingfd" friendly="Messaging FD" reportMessageId="18" reportVirtualInterface="cleanseriis" />
    <interface name="xpnfd_messaging" />
    <interface name="xpnfd_messaging_int" />
    <virtualInterface name="xpnfd_messaging" healthCheckEnabled="true" />
    <virtualInterface name="xpnfd_messaging_int" healthCheckEnabled="true" />

    <!--metro/abch-->

    <setting name="abch_abserviceUrl" />
    <setting name="abch_applicationId" />
    <setting name="abch_getMessengerBuddiesTimeoutSeconds" />
    <setting name="abch_getSoapConnectionPoolSize" />
    <setting name="abch_allowQueryAtLoginAsQueryAtSignup" />
    <setting name="abch_sharingServiceUrl" />
    <setting name="abch_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="abch_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="abch_fastFailBlockIntervalSeconds" dynamic="true" />

    <!--msgdb-->

    <component name="msgdb" />
    <interface name="msgdb" />
    <virtualInterface name="msgdb" />

    <!--nameResolver-->

    <setting name="nameResolver_ruleExpirationHours" dynamic="true" />

    <!--npdb-->

    <component name="npdb" />
    <interface name="npdb" />
    <virtualInterface name="npdb" />

    <!--offer-->

    <setting name="offer_cacheTimeSeconds" />

    <!--olap (reporting)-->

    <interface name="olapGameUsage" />
    <interface name="olapCruxUsage" />
    <interface name="olapAchievements" />
    <interface name="olapRealtime" />
    <interface name="olapCdbCruxUsage" />

    <!--partnermgr-->

    <setting name="partnermgr_webCaches" />

    <!--passport-->

    <setting name="passport_blacklistBlockIntervalSeconds" dynamic="true" />
    <setting name="passport_blacklistTimeoutThresholdCount" dynamic="true" />
    <setting name="passport_blacklistTimeoutTimespanSeconds" dynamic="true" />
    <setting name="passport_clientCertName" />
    <setting name="passport_fakeService" />
    <setting name="passport_partnerUrl" />
    <setting name="passport_partnerCallTimeoutSeconds" dynamic="true" />
    <setting name="passport_publicKeyCert" dynamic="true" />
    <setting name="passport_publicKeyCertUrl" />
    <setting name="passport_siteAddress" />
    <setting name="passport_siteId" />
    <setting name="passport_sitePolicy" />
    <setting name="passport_siteAddressMsn" />
    <setting name="passport_sitePolicyMsn" />
    <multiSetting name="passport_secretQuestionsXml" />

    <!--presence-->

    <setting name="presence_AffiliatesAvoidingMeListSize" dynamic="true" />
    <setting name="presence_AffiliatesCompletedGameListSize" dynamic="true" />
    <setting name="presence_AffiliatesEncounteredListSize" dynamic="true" />
    <setting name="presence_AffiliatesFavoritesListSize" dynamic="true" />
    <setting name="presence_AffiliatesNegativeFeedbackListSize" dynamic="true" />
    <setting name="presence_AffiliatesPositiveFeedbackListSize" dynamic="true" />
    <setting name="presence_BucketReloadDelay" dynamic="true" />
    <setting name="presence_ConcurrentSQLThreads" dynamic="true" />
    <setting name="presence_DeadSgOnFailedQVal" dynamic="true" />
    <setting name="presence_ExpirationCheckInterval" dynamic="true" />
    <setting name="presence_HeartbeatDelay" dynamic="true" />
    <setting name="presence_IdleQValsCheck" dynamic="true" />
    <setting name="presence_MaxNumPoolBuffers" dynamic="true" />
    <setting name="presence_MaxPresenceUsers" dynamic="true" />
    <setting name="presence_MaxQValsPerHeartbeat" dynamic="true" />
    <setting name="presence_MaxRichPresenceBytes" dynamic="true" />
    <setting name="presence_MessageTimeout" dynamic="true" />
    <setting name="presence_MessageTypeExpiration" dynamic="true" />
    <setting name="presence_NumSQLThreads" dynamic="true" />
    <setting name="presence_PeerPort" />
    <setting name="presence_PoolBufferSize" dynamic="true" />
    <setting name="presence_PresUserCleanupDelay" dynamic="true" />
    <setting name="presence_QueryAffiliatesOkToPeerSubscribe" dynamic="true" />
    <setting name="presence_QValRetryDelays" dynamic="true" />
    <setting name="presence_RichPresenceDebug" dynamic="true" />
    <setting name="presence_SGIndexSize" dynamic="true" />
    <setting name="presence_SGQValRecvPort" />
    <setting name="presence_SGQValSendPort" />
    <setting name="presence_StartNumPoolBuffers" dynamic="true" />
    <setting name="presence_UserIndexSize" dynamic="true" />
    <setting name="presence_ValidMessageTypes" dynamic="true" />
    <setting name="presence_WebUserTimeout" dynamic="true" />
    <setting name="presence_XBoxIndexSize" dynamic="true" />
    <setting name="presence_XonWatchIPs" dynamic="true" />
    <setting name="presence_MessagingDailySends" dynamic="true" />
    <setting name="presence_MessagingDailyRecipients" dynamic="true" />
    <setting name="presence_ContextDurationAlertLimit" dynamic="true" />
    <setting name="presence_StateBitsNotifyWhitelist" dynamic="true" />
    <setting name="presence_EnableRichPresence" dynamic="true" />
    <setting name="presence_StoreStateInVelocity" dynamic="true" />
    <setting name="presence_WelcomeToXboxLiveMessage" dynamic="true"/>
    <setting name="presence_WelcomeToNewConsoleMessage" dynamic="true"/>
    <setting name="presence_MaxFriends" dynamic="true"/>
    <setting name="presence_pubsubEventUrl" dynamic="true" />
    <setting name="presence_pubsubNotificationEnabled" dynamic="true" />
    <setting name="presence_pubsubEventTimeout" dynamic="true" />
    <setting name="PubSubEvent_fastFailTimeoutThresholdCount" dynamic="true" />
    <setting name="PubSubEvent_fastFailTimeoutTimespanSeconds" dynamic="true" />
    <setting name="PubSubEvent_fastFailBlockIntervalSeconds" dynamic="true" />

    <!--presenceFD-->

    <setting name="presenceFD_NumPoolThreads" />
    <multiSetting name="presenceFD_StringPresence_BlackList" dynamic="true" />
   
    <!--presenceWidget-->
    <setting name="presenceWidget_friendsCacheExpirationSeconds" />
  
             
    <!--provisioning-->

    <component name="provisioning" />
    <interface name="provisioning" />

    <!--puidmgr-->

    <setting name="puidmgr_blockSize" />
    <setting name="puidmgr_bucketCount" />
    <setting name="puidmgr_userPuidBucket" />

    <!--query-->

    <setting name="query_enableTitleLog" dynamic="true" />
    <setting name="query_LspBackcompTitles" dynamic="true" />

    <!--querydb-->

    <component name="querydb" />
    <interface name="querydb" />

    <!--querylib-->

    <component name="querylib" />
    <interface name="querylib" />
    <setting name="querylib_trustUpdates" />

        <!--Ratings-->
        <component name="ratings" friendly="Ratings FD" reportMessageId="28" reportVirtualInterface="cleanseriis" />
        <multiSetting name="ratings_mediatypes" dynamic="true" />
        <interface name="ratings" />
        <interface name="ratin