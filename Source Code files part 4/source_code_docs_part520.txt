ationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Converts the elements of a ParallelQuery to the specified type.</summary>
      <returns>A sequence that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The sequence that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Concat overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatenates two parallel sequences.</summary>
      <returns>A sequence that contains the concatenated elements of the two input sequences.</returns>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines in parallel whether a sequence contains a specified element by using a specified IEqualityComparer{T}.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the number of elements in a parallel sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>A sequence that contains default(TSource) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>A sequence that contains defaultValue if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a parallel sequence by using a specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence.</summary>
      <returns>The element at the specified position in the source sequence.</returns>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</summary>
      <returns>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Returns an empty ParallelQuery{TResult} that has the specified type argument.</summary>
      <returns>An empty sequence whose type argument is .</returns>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic sequence.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Except overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Except overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. </param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence.</summary>
      <returns>The first element in the specified sequence.</returns>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a parallel sequence that satisfies a specified condition.</summary>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(TSource) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(TSource) if <paramref name="source" /> is empty or if no element passes the test specified by predicate; otherwise, the first element in <paramref name="source" /> that passes the test specified by predicate.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Invokes in parallel the specified action for each element in the <paramref name="source" />.</summary>
      <param name="source">The <see cref="T:System.Linq.ParallelQuery`1" /> whose elements will be processed by <paramref name="action" />.</param>
      <param name="action">An Action to invoke on each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function.</summary>
      <returns>An OrderedParallelQuery{TSource}whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource}than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TSource} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />&gt;.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>A ParallelQuery&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping generic object contains a collection of objects of type  and a key.</returns>
      <param name="source">An OrderedParallelQuery&lt;(Of &lt;(TElement&gt;)&gt;) than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the IGrouping</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a key selector function.  The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <returns>A ParallelQuery{IGrouping{TKey, TElement}} in C# or ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping generic object contains a collection of objects of type  and a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource}than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping.</param>
      <param name="comparer">An IComparer{TSource} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the IGrouping</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.  The elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping{Key, TElement}.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An IEqualityComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <returns>An ParallelQuery&lt;IGrouping&lt;TKey, TResult&gt;&gt; in C# or ParallelQuery(Of IGrouping(Of TKey, TResult)) in Visual Basic where each IGrouping&lt;(Of &lt;(TKey, TResult&gt;)&gt;) object contains a collection of objects of type  and a key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An IEqualityComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>This GroupJoin overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This GroupJoin overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates in parallel the elements of two sequences based on equality of keys and groups the results.  The default equality comparer is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on key equality and groups the results.  A specified IEqualityComparer{T} is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Intersect overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Intersect overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>This Join overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This Join overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys.  The default equality comparer is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys.  A specified IEqualityComparer{T} is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence.</summary>
      <returns>The value at the last position in the source sequence.</returns>
      <param name="source">The sequence to return the last element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a specified condition.</summary>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default() if the source sequence is empty; otherwise, the last element in the sequence.</returns>
      <param name="source">The sequence to return an element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</summary>
      <returns>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns an Int64 that represents the total number of elements in a parallel sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filters the elements of a ParallelQuery based on a specified type.</summary>
      <returns>A sequence that contains elements from the input sequence of type .</returns>
      <param name="source">The sequence whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in descending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a parallel sequence of integral numbers within a specified range.</summary>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0 -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a parallel sequence that contains one repeated value.</summary>
      <returns>A sequence that contains a repeated value.</returns>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Inverts the order of the elements in a parallel sequence.</summary>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Projects in parallel each element of a sequence into a new form.</summary>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements resturned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements resturned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an IEnumerable{T}, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of elements in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an IEnumerable{T} and flattens the resulting sequences into one sequence.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an IEnumerable{T}, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of elements to return.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an IEnumerable{T}, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This SequenceEqual overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This SequenceEqual overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">A sequence to compare to second.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">A sequence to compare to <paramref name="second" />.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element. -or- The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />. -or- More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default() if the sequence contains no elements.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</summary>
      <returns>A sequence that contains the elements that occur after the specified index in the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a parallel sequence.</summary>
      <returns>A sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true.</summary>
      <returns>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true.  The element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates an array from a ParallelQuery{T}.</summary>
      <returns>An array that contains the elements from the input sequence.</returns>
      <param name="source">A sequence to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a specified key selector function.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a specified key selector function and key comparer.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to specified key selector and element selector functions.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type  selected from the input sequence</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a Dictionary{TKey,TValue from a ParallelQuery{T} according to a specified key selector function, a comparer, and an element selector function.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type  selected from the input sequence</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates a List{T} from an ParallelQuery{T}.</summary>
      <returns>A List&lt;(Of &lt;(T&gt;)&gt;) that contains elements from the input sequence.</returns>
      <param name="source">A sequence to create a List&lt;(Of &lt;(T&gt;)&gt;) from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function and key comparer.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to specified key selector and element selector functions.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to a specified key selector function, a comparer and an element selector function.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Union overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Union overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set union of two parallel sequences by using the default equality comparer.</summary>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</summary>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate.</summary>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to associate with the query.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered cancellation token.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="cancellationToken">A cancellation token.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">WithCancellation is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</summary>
      <returns>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</returns>
      <param name="source">A ParallelQuery on which to set the limit on the degrees of parallelism.</param>
      <param name="degreeOfParallelism">The degree of parallelism for the query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> is less than 1 or greater than 64.</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Sets the execution mode of the query.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered execution mode.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="executionMode">The mode in which to execute the query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> is not a valid <see cref="T:System.Linq.ParallelExecutionMode" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Sets the merge options for this query, which specify how the query will buffer output.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered merge options.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="mergeOptions">The merge options to set for this query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> is not a valid <see cref="T:System.Linq.ParallelMergeOptions" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">WithMergeOptions is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>This Zip overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TFirst">This type parameter is not used.</typeparam>
      <typeparam name="TSecond">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Merges in parallel two sequences by using the specified predicate function.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing resultSelector pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</returns>
      <param name="first">The first sequence to zip.</param>
      <param name="second">The second sequence to zip.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TFirst">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TResult">The type of the return elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>The query execution mode is a hint that specifies how the system should handle performance trade-offs when parallelizing queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>By default, the system will use algorithms for queries that are ripe for parallelism and will avoid algorithms with high overheads that will likely result in slow downs for parallel execution.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallelize the entire query, even if that means using high-overhead algorithms.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Specifies the preferred type of output merge to use in a query. This is a hint only, and may not be respected by the system when parallelizing all queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Use the default merge type, which is AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Use a merge without output buffers. As soon as result elements have been computed, make that element available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Use a merge with output buffers of a size chosen by the system. Results will accumulate into an output buffer before they are available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Use a merge with full output buffers. The system will accumulate all of the results before making any of them available to the consumer of the query.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Represents a parallel sequence.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Represents a parallel sequence.</summary>
      <typeparam name="TSource">The type of element in the source sequence.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <param name="selector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether all the elements of a sequence satisfy a condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">A sequence to check for being empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <typeparam name="TElement">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <param name="source1">The first sequence to concatenate.</param>
      <param name="source2">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the number of elements in the specified sequence that satisfies a condition.</summary>
      <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <returns>The element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <returns>The first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition.</summary>
      <returns>The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">A comparer to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set intersection of the two sequences.</returns>
      <param name="source1">A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence.</summary>
      <returns>The value at the last position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.</summary>
      <returns>The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.</summary>
      <returns>A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by using the default equality comparer to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>A collection whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key that is returned by the <paramref name="keySelector" /> function.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="source1">The first sequence to merge.</param>
      <param name="source2">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Represents an expression that has a binary operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the expression tree node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Gets the type conversion function that is used by a coalescing or compound assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Gets the left operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Gets the implementing method for the binary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Gets the right operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="left">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result. </param>
      <param name="conversion">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</param>
      <param name="right">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Represents a block that contains a sequence of expressions where variables can be defined.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Gets the expressions in this block.</summary>
      <returns>The read-only collection containing all the expressions in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Gets the last expression in this block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the last expression in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.BlockExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> property of the result. </param>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Gets the variables defined in this block.</summary>
      <returns>The read-only collection containing all the variables defined in this block.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Represents a catch statement in a try block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Gets the body of the catch block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the catch body.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Gets the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Gets the type of <see cref="T:System.Exception" /> this handler catches.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of <see cref="T:System.Exception" /> this handler catches.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variable">The <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> property of the result.</param>
      <param name="filter">The <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Gets a reference to the <see cref="T:System.Exception" /> object caught by this handler.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ParameterExpression" /> object representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Represents an expression that has a conditional operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Gets the expression to execute if the test evaluates to false.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Gets the expression to execute if the test evaluates to true.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Gets the test of the conditional operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the test of the conditional operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="test">The <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property of the result.</param>
      <param name="ifTrue">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property of the result.</param>
      <param name="ifFalse">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Represents an expression that has a constant value.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConstantExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Gets the value of the constant expression.</summary>
      <returns>An <see cref="T:System.Object" /> equal to the value of the represented expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Gets the <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Gets the end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Gets the end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Gets the value to indicate if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point.</summary>
      <returns>True if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Gets the start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Gets the start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Represents the default value of a type or an empty expression.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DefaultExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Represents a dynamic operation.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Gets the arguments to the dynamic operation.</summary>
      <returns>The read-only collections containing the arguments to the dynamic operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Gets the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DynamicExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments for a method that adds an element to a collection.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit" /> object.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit" /> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</summary>
      <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression that represents the multidimensional array.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression representing the array to index.</param>
      <param name="indexes">An array that contains expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="index" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-<paramref name="array" />.Type represents an array type whose rank is not 1.-or-<paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</param>
      <param name="indexes">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The property represented by <paramref name="member" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The property accessed by <paramref name="propertyAccessor" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <param name="arg4">The fifth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance fo an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.-or-<paramref name="arguments" /> is not null and one or more of its elements is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arguments">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that takes one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <param name="arg4">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that has arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents a static (Shared in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified static (Shared in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</returns>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type that contains the specified static (Shared in Visual Basic) method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.-or-<paramref name="conversion" /> is not null and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.-or-<paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="value">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not null and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.-or-<paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.-or-The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.-or-<paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method that matches the <paramref name="method" /> description was found.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</param>
      <param name="startLine">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="startColumn">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater than 0.</param>
      <param name="endLine">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Must be greater or equal than the start line.</param>
      <param name="endColumn">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="returnType">The result type of the dynamic expression.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).-or-The method that <paramref name="addMethod" /> represents is not an instance method.-or-<paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</returns>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> or <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The method that addMethod represents is not named "Add" (case insensitive).-or-The method that addMethod represents is not an instance method.-or-arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Creates an empty expression that has <see cref="T:System.Void" /> type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the XOR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. For static (Shared in Visual Basic), <paramref name="expression" /> must be null.</param>
      <param name="field">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> is null.-or-The field represented by <paramref name="field" /> is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <paramref name="fieldName" />. This can be null for static fields.</param>
      <param name="fieldName">The name of a field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="fieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the field. This can be null for static fields.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</param>
      <param name="fieldName">The field to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Creates a <see cref="T:System.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>The type of a System.Action delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of <see cref="T:System.Type" /> objects that specify the type arguments for the System.Action delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains more than four elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func or System.Action delegate type that has specific type arguments.</summary>
      <returns>The delegate type.</returns>
      <param name="typeArgs">The type arguments of the delegate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>The type of a System.Func delegate that has the specified type arguments.</returns>
      <param name="typeArgs">An array of one to five <see cref="T:System.Type" /> objects that specify the type arguments for the System.Func delegate type.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> contains less than one or more than five elements.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an if statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values. The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with if and else statements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</returns>
      <param name="test">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</param>
      <param name="ifTrue">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</param>
      <param name="ifFalse">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to false.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns whether the expression evaluates to true.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</param>
      <param name="defaultValue">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</summary>
      <returns>The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">The type of value that is passed when jumping to the label.</param>
      <param name="name">The name of the label.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements of <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> contains more than sixteen elements.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <typeparam name="TDelegate">A delegate type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> is not a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging info.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> property equal to <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> and the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> and <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> properties set to the specified values.</returns>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.Expression`1.Body" /> property equal to.</param>
      <param name="name">The name of the lambda. Used for generating debugging information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> collection.</param>
      <typeparam name="TDelegate">The delegate type. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</param>
      <param name="parameters">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
      <returns>An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="parameters">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> or <paramref name="body" /> is null.-or-One or more elements in <paramref name="parameters" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> does not represent a delegate type.-or-<paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.-or-<paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to. </param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="tailCall">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression. </param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</returns>
      <param name="delegateType">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</param>
      <param name="body">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</param>
      <param name="name">The name for the lambda. Used for emitting debug information.</param>
      <param name="parameters">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null. -or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.-or-The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.-or-The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</param>
      <param name="addMethod">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="initializers" /> is null.-or-One or more elements of <paramref name="initializers" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.-or-<paramref name="addMethod" /> is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-<paramref name="addMethod" /> is not null and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> is null and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">The body of the loop.</param>
      <param name="break">The break target used by the loop body.</param>
      <param name="continue">The continue target used by the loop body.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="binaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</param>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function. This parameter is used only if <paramref name="binaryType" /> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> does not correspond to a binary expression node.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</param>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
      <param name="filter">The body of the <see cref="T:System.Exception" /> filter.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arg0">The first argument to the dynamic operation.</param>
      <param name="arg1">The second argument to the dynamic operation.</param>
      <param name="arg2">The third argument to the dynamic operation.</param>
      <param name="arg3">The fourth argument to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</returns>
      <param name="delegateType">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">The runtime binder for the dynamic operation.</param>
      <param name="arguments">The arguments to the dynamic operation.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />. The value passed to the label upon jumping can also be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="kind">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. It should be null if the property is static (shared in Visual Basic).</param>
      <param name="indexer">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</param>
      <param name="arguments">An IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to. This can be null for static members.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="member" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">The result type of the try expression. If null, bodh and all handlers must have identical type.</param>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
      <param name="fault">The body of the t block. Pass null if the try block has no fault block associated with it.</param>
      <param name="handlers">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</returns>
      <param name="unaryType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</param>
      <param name="operand">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</param>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass null if not applicable).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> does not correspond to a unary expression node.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</returns>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</returns>
      <param name="newExpression">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</param>
      <param name="bindings">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> or <paramref name="bindings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary minus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary minus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The constructor that <paramref name="constructor" /> represents has at least one parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.-or-An element of members represents a property that does not have a get accessor.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <param name="members">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.-or-An element of <paramref name="members" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.-or-The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.-or-An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.-or-An element of <paramref name="members" /> represents a property that does not have a get accessor.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="constructor">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> is null.-or-An element of <paramref name="arguments" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</returns>
      <param name="type">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The type that <paramref name="type" /> represents does not have a constructor without parameters.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="bounds">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="bounds" /> is null.-or-An element of <paramref name="bounds" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</returns>
      <param name="type">A <see cref="T:System.Type" /> that represents the element type of the array.</param>
      <param name="initializers">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="initializers" /> is null.-or-An element of <paramref name="initializers" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary not operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary not operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="liftToNull">true to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to true; false to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to false.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Returns the expression representing the ones complement.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise OR operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="propertyAccessor">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> is null.-or-The method that <paramref name="propertyAccessor" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.-or-The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to. This can be null for static properties.</param>
      <param name="property">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.-or-The property that <paramref name="property" /> represents is not static (Shared in Visual Basic) and <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="indexer">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <paramref name="propertyName" />. This can be null for static properties.</param>
      <param name="propertyName">The name of a property to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
      <param name="propertyName">The name of the indexer.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">The containing object of the property. This can be null for static properties.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</param>
      <param name="propertyName">The property to be accessed.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <paramref name="propertyOrFieldName" />. This can be null for static members.</param>
      <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</returns>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</returns>
      <param name="variables">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement without a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a switch statement that has a default case..</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">The result type of the switch.</param>
      <param name="switchValue">The value to be tested against each case.</param>
      <param name="defaultBody">The result of the switch if <paramref name="switchValue" /> does not match any of the cases.</param>
      <param name="comparison">The equality comparison method to use.</param>
      <param name="cases">The set of cases for this switch expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">The body of the case.</param>
      <param name="testValues">The test values of the case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</returns>
      <param name="fileName">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</param>
      <param name="language">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</param>
      <param name="languageVendor">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</param>
      <param name="documentType">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</returns>
      <param name="value">An <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
      <param name="handlers">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="fault">The body of the fault block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">The body of the try block.</param>
      <param name="finally">The body of the finally block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</summary>
      <returns>true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
      <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
      <returns>true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</returns>
      <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
      <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the <paramref name="typeArgs" />.This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="T:System.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="type">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</param>
      <param name="type">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> or <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The unary plus operator is not defined for <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the unary plus operator is not defined for <paramref name="expression" />.Type.-or-<paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</summary>
      <returns>An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</param>
      <param name="type">The new <see cref="T:System.Type" /> of the expression.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</returns>
      <param name="type">The type of the parameter or variable.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</returns>
      <param name="type">The type of the parameter or variable.</param>
      <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
      <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
      <param name="visitor">An instance of <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Represents a strongly typed lambda expression as a data structure in the form of an expression tree. This class cannot be inherited.</summary>
      <typeparam name="TDelegate">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</param>
      <param name="parameters">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Describes the node types for the nodes of an expression tree.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>An addition operation, such as a + b, without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>An addition operation, such as (a + b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>A bitwise or logical AND operation, such as (a &amp; b) in C# and (a And b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>A conditional AND operation that evaluates the second operand only if the first operand evaluates to true. It corresponds to (a &amp;&amp; b) in C# and (a AndAlso b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>An operation that obtains the length of a one-dimensional array, such as array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>An indexing operation in a one-dimensional array, such as array[index] in C# or array(index) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>A method call, such as in the obj.sampleMethod() expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>A node that represents a null coalescing operation, such as (a ?? b) in C# or If(a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>A conditional operation, such as a &gt; b ? a : b in C# or If(a &gt; b, a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>A constant value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>A cast or conversion operation, such as (SampleType)obj in C#or CType(obj, SampleType) in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>A division operation, such as (a / b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>A node that represents an equality comparison, such as (a == b) in C# or (a = b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>A bitwise or logical XOR operation, such as (a ^ b) in C# or (a Xor b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>A "greater than" comparison, such as (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>A "greater than or equal to" comparison, such as (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>An operation that invokes a delegate or lambda expression, such as sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>A lambda expression, such as a =&gt; a + a in C# or Function(a) a + a in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>A bitwise left-shift operation, such as (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>A "less than" comparison, such as (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>A "less than or equal to" comparison, such as (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>An operation that creates a new <see cref="T:System.Collections.IEnumerable" /> object and initializes it from a list of elements, such as new List&lt;SampleType&gt;(){ a, b, c } in C# or Dim sampleList = { a, b, c } in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>An operation that reads from a field or property, such as obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>An operation that creates a new object and initializes one or more of its members, such as new Point { X = 1, Y = 2 } in C# or New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>An arithmetic remainder operation, such as (a % b) in C# or (a Mod b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>A multiplication operation, such as (a * b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>An multiplication operation, such as (a * b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>An arithmetic negation operation, such as (-a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>A unary plus operation, such as (+a). The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>An arithmetic negation operation, such as (-a), that has overflow checking. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>An operation that calls a constructor to create a new object, such as new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as new SampleType[]{a, b, c} in C# or New SampleType(){a, b, c} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>An operation that creates a new array, in which the bounds for each dimension are specified, such as new SampleType[dim1, dim2] in C# or New SampleType(dim1, dim2) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>A bitwise complement or logical negation operation. In C#, it is equivalent to (~a) for integral types and to (!a) for Boolean values. In Visual Basic, it is equivalent to (Not a). The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>An inequality comparison, such as (a != b) in C# or (a &lt;&gt; b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>A bitwise or logical OR operation, such as (a | b) in C# or (a Or b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>A short-circuiting conditional OR operation, such as (a || b) in C# or (a OrElse b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>A mathematical operation that raises a number to a power, such as (a ^ b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>An expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />. A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> node can contain references to parameters that are defined in the context of the expression it represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>A bitwise right-shift operation, such as (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>A subtraction operation, such as (a - b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>An arithmetic subtraction operation, such as (a - b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>An explicit reference or boxing conversion in which null is supplied if the conversion fails, such as (obj as SampleType) in C# or TryCast(obj, SampleType) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>A type test, such as obj is SampleType in C# or TypeOf obj is SampleType in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>An assignment operation, such as (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>A block of expressions.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debugging information.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>A unary decrement operation, such as (a - 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>A dynamic operation.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>A default value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>An extension expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>A "go to" expression, such as goto Label in C# or GoTo Label in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>A unary increment operation, such as (a + 1) in C# and Visual Basic. The object a should not be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>An index operation or an operation that accesses a property that takes arguments. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>A label.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>A list of run-time variables. For more information, see <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>A loop, such as for or while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>A switch operation, such as switch in C# or Select Case in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>An operation that throws an exception, such as throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>A try-catch expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>An unbox value type operation, such as unbox and unbox.any instructions in MSIL. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>An addition compound assignment operation, such as (a += b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>A bitwise or logical AND compound assignment operation, such as (a &amp;= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>An division compound assignment operation, such as (a /= b), for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>A bitwise or logical XOR compound assignment operation, such as (a ^= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>A bitwise left-shift compound assignment, such as (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>An arithmetic remainder compound assignment operation, such as (a %= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>A multiplication compound assignment operation, such as (a *= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>A bitwise or logical OR compound assignment, such as (a |= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>A compound assignment operation that raises a number to a power, such as (a ^= b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>A bitwise right-shift compound assignment operation, such as (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>A subtraction compound assignment operation, such as (a -= b), without overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>An addition compound assignment operation, such as (a += b), with overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>A multiplication compound assignment operation, such as (a *= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>A subtraction compound assignment operation, such as (a -= b), that has overflow checking, for numeric operands.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>A unary prefix increment, such as (++a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>A unary prefix decrement, such as (--a). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>A unary postfix increment, such as (a++). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>A unary postfix decrement, such as (a--). The object a should be modified in place.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>An exact type test.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>A ones complement operation, such as (~a) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>A true condition value.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>A false condition value.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Represents a visitor or rewriter for expression trees.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Dispatches the list of expressions to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</returns>
      <param name="nodes">The expressions to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Visits all nodes in the collection using a specified element visitor.</summary>
      <returns>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</returns>
      <param name="nodes">The nodes to visit.</param>
      <param name="elementVisitor">A delegate that visits a single element, optionally replacing it with a new element.</param>
      <typeparam name="T">The type of the nodes.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Dispatches the expression to one of the more specialized visit methods in this class.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="nodes">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Visits an expression, casting the result back to the original expression type.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
      <typeparam name="T">The type of the expression.</typeparam>
      <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Visits the children of the extension expression.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
      <typeparam name="T">The type of the delegate.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
      <param name="node">The expression to visit.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Represents an unconditional jump. This includes return statements, break and continue statements, and other jumps.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>The kind of the "go to" expression. Serves information purposes only.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> object representing the kind of the "go to" expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>The target label where this node jumps to.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing the target label for this node.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.GotoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property of the result. </param>
      <param name="value">The <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>The value passed to the target, or null if the target is of type System.Void.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the value passed to the target or null.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Specifies what kind of jump this <see cref="T:System.Linq.Expressions.GotoExpression" /> represents.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a jump to some location.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a return statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a break statement.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>A <see cref="T:System.Linq.Expressions.GotoExpression" /> that represents a continue statement.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Represents indexing a property or array.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Gets the arguments that will be used to index the property or array.</summary>
      <returns>The read-only collection containing the arguments that will be used to index the property or array.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Gets the <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, returns null otherwise.</summary>
      <returns>The <see cref="T:System.Reflection.PropertyInfo" /> for the property if the expression represents an indexed property, otherwise null.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>An object to index.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the object to index.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.IndexExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Represents an expression that applies a delegate or lambda expression to a list of argument expressions.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Gets the arguments that the delegate or lambda expression is applied to.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments that the delegate is applied to.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Gets the delegate or lambda expression to be applied.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate to be applied.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.InvocationExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Represents a label, which can be put in any <see cref="T:System.Linq.Expressions.Expression" /> context. If it is jumped to, it will get the value provided by the corresponding <see cref="T:System.Linq.Expressions.GotoExpression" />. Otherwise, it receives the value in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />. If the <see cref="T:System.Type" /> equals System.Void, no value should be provided.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>The value of the <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow (for example, is not jumped to).</summary>
      <returns>The Expression object representing the value of the <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this label is associated with.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LabelExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="target">The <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> property of the result.</param>
      <param name="defaultValue">The <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> property of the result</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Used to represent the target of a <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Gets the name of the label.</summary>
      <returns>The name of the label.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>The type of value that is passed when jumping to the label (or <see cref="T:System.Void" /> if no value should be passed).</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the value that is passed when jumping to the label or <see cref="T:System.Void" /> if no value should be passed</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Describes a lambda expression. This captures a block of code that is similar to a .NET method body.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Gets the body of the lambda expression.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the body of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A <see cref="T:System.Delegate" /> that contains the compiled version of the lambda expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Produces a delegate that represents the lambda expression.</summary>
      <returns>A delegate containing the compiled version of the lambda.</returns>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Compiles the lambda into a method definition.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Compiles the lambda into a method definition and custom debug information.</summary>
      <param name="method">A <see cref="T:System.Reflection.Emit.MethodBuilder" /> which will be used to hold the lambda's IL.</param>
      <param name="debugInfoGenerator">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</param>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Gets the name of the lambda expression.</summary>
      <returns>The name of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Gets the parameters of the lambda expression.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects that represent the parameters of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Gets the return type of the lambda expression.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the lambda expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Gets the value that indicates if the lambda expression will be compiled with the tail call optimization.</summary>
      <returns>True if the lambda expression will be compiled with the tail call optimization, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LambdaExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Represents a constructor call that has a collection initializer.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Gets the element initializers that are used to initialize a collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects which represent the elements that are used to initialize the collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Gets the expression that contains a call to the constructor of a collection type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the call to the constructor of a collection type.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ListInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property of the result.</param>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Represents an infinite loop. It can be exited with "break".</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is the body of the loop.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a break statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Gets the <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> that is used by the loop body as a continue statement target.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.LoopExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="breakLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> property of the result.</param>
      <param name="continueLabel">The <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Represents assignment operation for a field or property of an object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Gets the expression to assign to the field or property.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that represents the value to assign to the field or property.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Provides the base class from which the classes that represent bindings that are used to initialize members of a newly created object derive.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.MemberBinding" /> class.</summary>
      <param name="type">The <see cref="T:System.Linq.Expressions.MemberBindingType" /> that discriminates the type of binding that is represented.</param>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to be initialized.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Gets the type of binding that is represented.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Gets the field or property to be initialized.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be initialized.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Returns a textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Describes the binding types that are used in <see cref="T:System.Linq.Expressions.MemberInitExpression" /> objects.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>A binding that represents initializing a member with the value of an expression.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>A binding that represents recursively initializing members of a member.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>A binding that represents initializing a member of type <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> from a list of elements.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Represents accessing a field or property.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Gets the containing object of the field or property.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the containing object of the field or property.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Gets the field or property to be accessed.</summary>
      <returns>The <see cref="T:System.Reflection.MemberInfo" /> that represents the field or property to be accessed.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Returns the node type of this <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Represents calling a constructor and initializing one or more members of the new object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of the newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects which describe how to initialize the members.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Gets the expression that represents the constructor call.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.NewExpression" /> that represents the constructor call.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduces the <see cref="T:System.Linq.Expressions.MemberInitExpression" /> to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="newExpression">The <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property of the result.</param>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Represents initializing the elements of a collection member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Gets the element initializers for initializing a collection member of a newly created object.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection member with.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="initializers">The <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Represents initializing members of a member of a newly created object.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Gets the bindings that describe how to initialize the members of a member.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects that describe how to initialize the members of the member.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="bindings">The <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Represents a call to either static or an instance method.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Gets a collection of expressions that represent arguments of the called method.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent the arguments to the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the method to be called.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the called method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> that represents the instance for instance method calls or null for static method calls.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the receiving object of the method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="object">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property of the result.</param>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Gets the bounds of the array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, or the values to initialize the elements of the new array if the value of the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects which represent either the bounds of the array or the initialization values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Represents a constructor call.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Gets the arguments to the constructor.</summary>
      <returns>A collection of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Gets the called constructor.</summary>
      <returns>The <see cref="T:System.Reflection.ConstructorInfo" /> that represents the called constructor.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Gets the members that can retrieve the values of the fields that were initialized with constructor arguments.</summary>
      <returns>A collection of <see cref="T:System.Reflection.MemberInfo" /> objects that represent the members that can retrieve the values of the fields that were initialized with constructor arguments.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.NewExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Represents a named parameter expression.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Indicates that this ParameterExpression is to be treated as a ByRef parameter.</summary>
      <returns>True if this ParameterExpression is a ByRef parameter, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Gets the name of the parameter or variable.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the parameter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ParameterExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>An expression that provides runtime read/write permission for variables.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>The variables or parameters to which to provide runtime access.</summary>
      <returns>The read-only collection containing parameters that will be provided the runtime access.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Represents one case of a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Gets the body of this case.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object that represents the body of the case block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Gets the values of this case. This case is selected for execution when the <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> matches any of these values.</summary>
      <returns>The read-only collection of the values for this case block.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="testValues">The <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Represents a control expression that handles multiple selections by passing control to <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects for the switch.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.SwitchCase" /> objects.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Gets the equality comparison method, if any.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> object representing the equality comparison method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Gets the test for the switch.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the test for the switch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.SwitchExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="switchValue">The <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> property of the result.</param>
      <param name="cases">The <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> property of the result.</param>
      <param name="defaultBody">The <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</summary>
      <returns>The document type's unique identifier.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>The source file name.</summary>
      <returns>The string representing the source file name.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Returns the language's unique identifier, if any.</summary>
      <returns>The language's unique identifier</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Returns the language vendor's unique identifier, if any.</summary>
      <returns>The language vendor's unique identifier.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Represents a try/catch/finally/fault block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the body of the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the fault block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Gets the <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> representing the finally block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Gets the collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</summary>
      <returns>The collection of <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions associated with the try block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="body">The <see cref="P:System.Linq.Expressions.TryExpression.Body" /> property of the result.</param>
      <param name="handlers">The <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> property of the result.</param>
      <param name="finally">The <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> property of the result.</param>
      <param name="fault">The <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Represents an operation between an expression and a type.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Gets the expression operand of a type test operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression operand of a type test operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Gets the type operand of a type test operation.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type operand of a type test operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="expression">The <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Represents an expression that has a unary operator.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if a node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Gets the implementing method for the unary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Gets the operand of the unary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand of the unary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduces the expression node to a simpler expression. </summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.UnaryExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="operand">The <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property of the result.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>The exception thrown to indicate that no instances are returned by a provider.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>Initializes a new instance of the InstanceNotFoundException class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with the specified serialization information and streaming context.</summary>
      <param name="info">The SerializationInfo that contains all the data required to serialize the exception.</param>
      <param name="context">The StreamingContext that specifies the source and destination of the stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with its message string set to message.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InstanceNotFoundException class with the specified error message and the inner exception.</summary>
      <param name="message">A string that contains the error message that explains the reason for the exception.</param>
      <param name="innerException">The Exception that caused the current exception to be thrown.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>Represents the base provider-related exception.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />. class. This is the default constructor.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with serialization information.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">Description of the source and destination of the specified serialized stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with a message that describes the exception.</summary>
      <param name="message">Message that describes the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with the specified string and exception.</summary>
      <param name="message">Message that describes the exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>Represents a provider-related exception.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class. This is the default constructor.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with the System.Exception that caused the current exception.</summary>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with serialization information.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">Description of the source and destination of the specified serialized stream.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with a message that describes the exception.</summary>
      <param name="message">Message that describes the exception.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with the specified string and exception.</summary>
      <param name="message">Message that describes the exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>The ManagementBind attribute indicates that a method is used to return the instance of a WMI class associated with a specific key value.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementBindAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method marked with the <see cref="ManagementBind" /> attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>The ManagementCommit attribute marks a method that is called when it is necessary to update a set of read-write properties in one, atomic operation.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementCommitAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>The ManagementConfiguration attribute indicates that a property or field represents a read-write WMI property.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementConfigurationAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>Gets or sets the mode of the property, which specifies whether changes to it are applied as soon as possible or when a commit method is called.</summary>
      <returns>Returns a <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" /> that indicates whether the WMI property uses <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> or <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" /> mode.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the property that is marked with the ManagementConfiguration attribute will return.</summary>
      <returns>A <see cref="T:System.Type" /> value representing the type of output that the property marked with the ManagementConfiguration attribute will return.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>Represents the possible commit behaviors of a read/write property. It is used as the value of a parameter of the <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" /> attribute.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>Set values take effect only when Commit is called.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>Set values are applied immediately.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>The ManagementCreateAttribute is used to indicate that a method creates a new instance of a managed entity.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementCreateAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEntityAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly.</summary>
      <returns>A boolean value that is true if the class represents an external WMI class and false otherwise.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>Gets or sets the name of the WMI class.</summary>
      <returns>A string that contains the name of the WMI class.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>Specifies whether the associated class represents a singleton WMI class.</summary>
      <returns>A boolean value that is true if the class represents a singleton WMI class and false otherwise.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>The ManagementEnumerator attribute marks a method that returns all the instances of a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEnumeratorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementEnumerator attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method marked with the <see cref="ManagementEnumerator" /> attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>Defines values that specify the hosting model for the provider.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>Activates the provider as a decoupled provider.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>Activates the provider in the provider host process that is running under the NetworkService account.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>Activates the provider in the provider host process that is running under the LocalService account.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>Activates the provider in the provider host process that is running under the LocalSystem account.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>The ManagementKey attribute identifies the key properties of a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementKeyAttribute" />  class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>This class is used by the WMI.NET Provider Extensions framework. It is the base class for all the management attributes that can be applied to members.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Management.ManagementMemberAttribute" /> the class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>Gets or sets the name of the management attribute.</summary>
      <returns>Returns a string which is the name of the management attribute.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>The ManagementName attribute is used to override names exposed through a WMI class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementNameAttribute" /> class that specifies a value for the <see cref="P:System.Management.ManagementNameAttribute.Name" /> property of the class.</summary>
      <param name="name">The user-friendly name for the object.</param>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>Gets or sets the user-friendly name for an object. The object can be a method parameter or properties marked with the ManagementProbe, ManagementKey, or ManagementConfiguration attributes.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the user friendly name for an object.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>The base class for management attributes that have only run-time functionality and no schema representation. The management attribute classes ManagementBindAttribute, ManagementCreateAttribute and ManagementEnumeratorAttribute are all derived from this class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementNewInstanceAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>The ManagementProbe attribute indicates that a property or field represents a read-only WMI property.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementProbeAttribute" /> class. This is the default constructor for the class.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the property that is marked with the ManagementProbe attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the property that is marked with the ManagementProbe attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>The ManagementReferenceAttribute marks a class member, property or method parameter as a reference to another management object or class.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementReferenceAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>Gets or sets the name of the referenced type.</summary>
      <returns>A string containing the name of the referenced type.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>The ManagementRemoveAttribute is used to indicate that a method cleans up an instance of a managed entity.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementRemoveAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the object that is marked with the ManagementRemove attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the object marked with the Remove attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>The ManagementTask attribute indicates that the target method implements a WMI method.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementTaskAttribute" /> class. This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>Gets or sets a value that defines the type of output that the method that is marked with the ManagementTask attribute will output.</summary>
      <returns>A <see cref="T:System.Type" /> value that indicates the type of output that the method that is marked with the ManagementTask attribute will output.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>The WmiConfiguration attribute indicates that an assembly contains code that implements a WMI provider by using the WMI.NET Provider Extensions model. The attribute accepts parameters that establish the high-level configuration of the implemented WMI provider. </summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.WmiConfigurationAttribute" /> class that specifies the WMI namespace in which the WMI provider will expose classes.</summary>
      <param name="scope">The WMI namespace in which the provider will expose classes. For example, "root\MyProviderNamespace".</param>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>Gets or sets the hosting group for the WMI provider.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the hosting group for the WMI provider.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>Gets or sets the hosting model for the WMI provider.</summary>
      <returns>A <see cref="T:System.Management.Instrumentation.ManagementHostingModel" /> value that indicates the hosting model of the WMI provider.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>Gets or sets a value that specifies whether the WMI provider can impersonate its callers. If the value is false, the provider cannot impersonate, and if the value is true, the provider can impersonate.</summary>
      <returns>A Boolean value that indicates whether a provider can or cannot impersonate its callers. If the value is false, the provider cannot impersonate, and if the value is true, the provider can impersonate.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>Gets or sets a Security Descriptor Definition Language (SDDL) string that specifies the security descriptor on the namespace in which the provider exposes management objects.</summary>
      <returns>An SDDL string that represents the security descriptor on the namespace in which the provider exposes management objects.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>Gets or sets the WMI namespace in which the WMI provider exposes classes.</summary>
      <returns>A <see cref="T:System.String" /> value that indicates the namespace in which the WMI provider exposes classes.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>Gets or sets a security descriptor for the WMI provider. For more information, see the SecurityDescriptor property information in the "__Win32Provider" topic in the MSDN online library at http://www.msdn.com. </summary>
      <returns>A <see cref="T:System.String" /> value that contains the security descriptor for the WMI provider.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>A dynamic call site base class. This type is used as a parameter type to the dynamic site targets.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Class responsible for binding dynamic operations on the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> object responsible for binding dynamic operations.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates a call site with the given delegate type and binder.</summary>
      <returns>The new call site.</returns>
      <param name="delegateType">The call site delegate type.</param>
      <param name="binder">The call site binder.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Dynamic site type.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Creates an instance of the dynamic call site, initialized with the binder responsible for the runtime binding of the dynamic operations at this call site.</summary>
      <returns>The new instance of dynamic call site.</returns>
      <param name="binder">The binder responsible for the runtime binding of the dynamic operations at this call site.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>The Level 0 cache - a delegate specialized based on the site history.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>The update delegate. Called when the dynamic site experiences cache miss.</summary>
      <returns>The update delegate.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Class responsible for runtime binding of the dynamic operations on the dynamic call site.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Provides low-level runtime binding support. Classes can override this and provide a direct delegate for the implementation of rule. This can enable saving rules to disk, having specialized rules available at runtime, or providing a different caching policy.</summary>
      <returns>A new delegate which replaces the CallSite Target.</returns>
      <param name="site">The CallSite the bind is being performed for.</param>
      <param name="args">The arguments for the binder.</param>
      <typeparam name="T">The target type of the CallSite.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Adds a target to the cache of known targets. The cached targets will be scanned before calling BindDelegate to produce the new rule.</summary>
      <param name="target">The target delegate to be added to the cache.</param>
      <typeparam name="T">The type of target being added.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Gets a label that can be used to cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.LabelTarget" /> object representing a label that can be used to trigger the binding update.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Class that contains helper methods for DLR CallSites.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Checks if a <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack.</summary>
      <returns>True if the input <see cref="T:System.Reflection.MethodBase" /> is internally used by DLR and should not be displayed on the language code's stack. Otherwise, false.</returns>
      <param name="mb">The input <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>Creates and caches binding rules.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>Adds a rule to the cache maintained on the dynamic call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="rule">An instance of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Updates the call site target with a new rule based on the arguments.</summary>
      <returns>The new call site target.</returns>
      <param name="binder">The call site binder.</param>
      <param name="site">An instance of the dynamic call site.</param>
      <param name="args">Arguments to the call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Clears the match flag on the matchmaker call site.</summary>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Creates an instance of a dynamic call site used for cache lookup.</summary>
      <returns>The new call site.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>Searches the dynamic rule cache for rules applicable to the dynamic operation.</summary>
      <returns>The collection of applicable rules.</returns>
      <param name="cache">The cache.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks whether the executed rule matched</summary>
      <returns>true if rule matched, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Retrieves binding rule cache.</summary>
      <returns>The cache.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Gets the dynamic binding rules from the call site.</summary>
      <returns>An array of dynamic binding rules.</returns>
      <param name="site">An instance of the dynamic call site.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>Moves the binding rule within the cache.</summary>
      <param name="cache">The call site rule cache.</param>
      <param name="rule">An instance of the call site rule.</param>
      <param name="i">An index of the call site rule.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>Checks if a dynamic site requires an update.</summary>
      <returns>true if rule does not need updating, false otherwise.</returns>
      <param name="site">An instance of the dynamic call site.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>Updates rules in the cache.</summary>
      <param name="this">An instance of the dynamic call site.</param>
      <param name="matched">The matched rule index.</param>
      <typeparam name="T">The type of the delegate of the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>Creates an object to hold state of a dynamically generated method.</summary>
      <param name="constants">The constant values that are used by the method.</param>
      <param name="locals">The hoisted local variables from the parent context.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Generates debug information for lambda expressions in an expression tree.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Creates a program database (PDB) symbol generator.</summary>
      <returns>A PDB symbol generator.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Marks a sequence point in Microsoft intermediate language (MSIL) code.</summary>
      <param name="method">The lambda expression that is generated.</param>
      <param name="ilOffset">The offset within MSIL code at which to mark the sequence point.</param>
      <param name="sequencePoint">Debug information that corresponds to the sequence point.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Indicates that the use of <see cref="T:System.Object" /> on a member is meant to be treated as a dynamically dispatched type.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> class.</summary>
      <param name="transformFlags">Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Specifies, in a prefix traversal of a type's construction, which <see cref="T:System.Object" /> occurrences are meant to be treated as a dynamically dispatched type.</summary>
      <returns>The list of <see cref="T:System.Object" /> occurrences that are meant to be treated as a dynamically dispatched type.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Represents the runtime state of a dynamically generated method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Creates a delegate that can be used to execute a dynamically generated method.</summary>
      <returns>A <see cref="T:System.Delegate" /> that can execute a dynamically generated method.</returns>
      <param name="indexLambda">The index of the object that stores information about associated lambda expression of the dynamic method.</param>
      <param name="locals">An array that contains the hoisted local variables from the parent context.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Creates an array to store the hoisted local variables.</summary>
      <returns>An array to store hoisted local variables.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Represents the non-trivial constants and locally executable expressions that are referenced by a dynamically generated method.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Frees a specified expression tree of external parameter references by replacing the parameter with its current value.</summary>
      <returns>An expression tree that does not contain external parameter references.</returns>
      <param name="expression">An expression tree to free of external parameter references.</param>
      <param name="locals">An array that contains the hoisted local variables.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Represents the hoisted local variables from the parent context.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Represents the execution scope of the calling delegate.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Indicates that a method is an extension method, or that a class or assembly contains extension methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Represents the values of run-time variables.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Gets a count of the run-time variables.</summary>
      <returns>The number of run-time variables.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Gets the value of the run-time variable at the specified index.</summary>
      <returns>The value of the run-time variable.</returns>
      <param name="index">The zero-based index of the run-time variable whose value is to be returned.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Defines a property for accessing the value that an object references.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Gets or sets the value that an object references.</summary>
      <returns>The value that the object references.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>The builder for read only collection.</summary>
      <typeparam name="T">The type of the collection element.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Constructs a ReadOnlyCollectionBuilder.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Constructs a ReadOnlyCollectionBuilder, copying contents of the given collection.</summary>
      <param name="collection">Collection to copy elements from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Constructs a ReadOnlyCollectionBuilder with a given initial capacity. The contents are empty but builder will have reserved room for the given number of elements before any reallocations are required.</summary>
      <param name="capacity">Initial capacity.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Adds an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Gets and sets the capacity of this ReadOnlyCollectionBuilder.</summary>
      <returns>The capacity of this ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> contains a specific value</summary>
      <returns>true if item is found in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false.</returns>
      <param name="item">the object to locate in the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to an <see cref="T:System.Array" />, starting at particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Returns number of elements in the ReadOnlyCollectionBuilder.</summary>
      <returns>The number of elements in the ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Returns the index of the first occurrence of a given value in the builder.</summary>
      <returns>The index of the first occurrence of an item.</returns>
      <param name="item">An item to search for.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>true if item was successfully removed from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Reverses the order of the elements in the entire <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, –1.</returns>
      <param name="value">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="value">The object to insert into the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The object to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Copies the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> to a new array.</summary>
      <returns>An array containing copies of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> containing all of the elements of the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, avoiding copying the elements to the new array if possible. Resets the <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> after the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> has been created.</summary>
      <returns>A new instance of <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Represents a cache of runtime binding rules.</summary>
      <typeparam name="T">The delegate type.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>Contains helper methods called from dynamically generated methods.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>Creates an interface that can be used to modify closed over variables at runtime.</summary>
      <returns>An interface to access variables.</returns>
      <param name="data">The closure array.</param>
      <param name="indexes">An array of indicies into the closure array where variables are found.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>Checks the version of the Expando object.</summary>
      <returns>Returns true if the version is equal; otherwise, false.</returns>
      <param name="expando">The Expando object.</param>
      <param name="version">The version to check.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>Promotes an Expando object from one class to a new class.</summary>
      <param name="expando">The Expando object.</param>
      <param name="oldClass">The old class of the Expando object.</param>
      <param name="newClass">The new class of the Expando object.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>Deletes the value of an item in an expando object.</summary>
      <returns>true if the item was successfully removed; otherwise, false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>Gets the value of an item in an expando object.</summary>
      <returns>True if the member exists in the expando object, otherwise false.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="value">The out parameter containing the value of the member.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>Sets the value of an item in an expando object.</summary>
      <returns>Returns the index for the set member.</returns>
      <param name="expando">The expando object.</param>
      <param name="indexClass">The class of the expando object.</param>
      <param name="index">The index of the member.</param>
      <param name="value">The value of the member.</param>
      <param name="name">The name of the member.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>Combines two runtime variable lists and returns a new list.</summary>
      <returns>The merged runtime variables.</returns>
      <param name="first">The first list.</param>
      <param name="second">The second list.</param>
      <param name="indexes">The index array indicating which list to get variables from.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>Quotes the provided expression tree.</summary>
      <returns>The quoted expression.</returns>
      <param name="expression">The expression to quote.</param>
      <param name="hoistedLocals">The hoisted local state provided by the compiler.</param>
      <param name="locals">The actual hoisted local values.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Holds a reference to a value.</summary>
      <typeparam name="T">The type of the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Initializes a new StrongBox which can receive a value when used in a reference call.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> class by using the supplied value. </summary>
      <param name="value">A value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> will reference.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Gets or sets the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
      <returns>The value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Represents the value that the <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> references.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permits late-bound registration of an event handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> class by using the specified type and a name of the event on the type.</summary>
      <param name="type">The type of object. </param>
      <param name="eventName">The name of an event on <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Attaches an event handler to a COM object.</summary>
      <param name="target">The target object that the event delegate should bind to.</param>
      <param name="handler">The event delegate.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Gets the method that was used to add an event handler delegate to the event source.</summary>
      <returns>The method that was used to add an event handler delegate to the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</summary>
      <returns>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</returns>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</summary>
      <returns>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</returns>
      <param name="attributeType">The attribute type to search for. Only attributes that are assignable to this type can be returned.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that was called when the event was raised. </summary>
      <returns>The object that was called when the event was raised.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo" /> object for removing a method of the event.</summary>
      <returns>The method that was used to remove an event handler delegate from the event source.</returns>
      <param name="nonPublic">true to return non-public methods; otherwise, false. </param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is true and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of the specified attribute are applied to this member.</summary>
      <returns>true if the specified attribute has been applied to this member; otherwise, false.</returns>
      <param name="attributeType">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance chain to find the attributes; otherwise, false.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Gets the class object that was used to initialize this instance.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to initialize the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Detaches an event handler from a COM object.</summary>
      <param name="target">The target object that the event delegate is bound to.</param>
      <param name="handler">The event delegate.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public remove accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is null and the event is not static.-or- The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access permission to the member.</exception>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>Represents the type of manifest that the signature information applies to.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>The manifest is of no particular type. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>The manifest is for deployment only.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>The manifest is for an application. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>The manifest is for deployment and application. The is the default value for verifying signatures. </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>Performs symmetric encryption and decryption using the Cryptographic Application Programming Interfaces (CAPI) implementation of the Advanced Encryption Standard (AES) algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" /> class. </summary>
      <exception cref="T:System.PlatformNotSupportedException">There is no supported key size for the current platform.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>Creates a symmetric AES decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES decryptor object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The current key is invalid or missing.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric AES decryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric AES decryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>Creates a symmetric AES encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric AES encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric AES encryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> or <paramref name="iv" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the algorithm.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The initialization vector (IV) could not be generated. </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>Generates a random key to use for the algorithm. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key could not be generated.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>Gets or sets the symmetric key that is used for encryption and decryption.</summary>
      <returns>The symmetric key that is used for encryption and decryption.</returns>
      <exception cref="T:System.ArgumentNullException">The value for the key is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The size of the key is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key. </summary>
      <returns>The size, in bits, of the key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Provides a managed implementation of the Advanced Encryption Standard (AES) symmetric algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.AesManaged" /> class. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The Windows security policy setting for FIPS is enabled.</exception>
      <exception cref="T:System.InvalidOperationException">This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Creates a symmetric decryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric decryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric decryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Creates a symmetric encryptor object using the current key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Creates a symmetric encryptor object using the specified key and initialization vector (IV).</summary>
      <returns>A symmetric encryptor object.</returns>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="iv" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> is invalid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Gets or sets the number of bits to use as feedback. </summary>
      <returns>The feedback size, in bits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Generates a random initialization vector (IV) to use for the symmetric algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Generates a random key to use for the symmetric algorithm. </summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Gets or sets the initialization vector (IV) to use for the symmetric algorithm. </summary>
      <returns>The initialization vector to use for the symmetric algorithm</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Gets or sets the secret key used for the symmetric algorithm.</summary>
      <returns>The key for the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Gets or sets the size, in bits, of the secret key used for the symmetric algorithm. </summary>
      <returns>The size, in bits, of the key used by the symmetric algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Gets or sets the mode for operation of the symmetric algorithm.</summary>
      <returns>One of the enumeration values that specifies the block cipher mode to use for encryption. The default is <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> is set to <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> or <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Gets or sets the padding mode used in the symmetric algorithm. </summary>
      <returns>One of the enumeration values that specifies the type of padding to apply. The default is <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>Encapsulates the name of an encryption algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithm" /> class.</summary>
      <param name="algorithm">The name of the algorithm to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithm" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>Gets the algorithm name that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDH algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-256 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-256 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-384 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-384 curve.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-521 curve.</summary>
      <returns>An object that specifies an ECDSA algorithm that uses the P-521 curve.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> that specifies the same algorithm as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object. </summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same algorithm as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>Generates a hash value for the algorithm name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>The hash value of the embedded algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Message Digest 5 (MD5) hash algorithm.</summary>
      <returns>An object that specifies the MD5 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects specify the same algorithm name.</summary>
      <returns>true if the two objects specify the same algorithm name; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithm" /> objects do not specify the same algorithm.</summary>
      <returns>true if the two objects do not specify the same algorithm name; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 1 (SHA-1) algorithm.</summary>
      <returns>An object that specifies the SHA-1 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 256 (SHA-256) algorithm.</summary>
      <returns>An object that specifies the SHA-256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 384 (SHA-384) algorithm.</summary>
      <returns>An object that specifies the SHA-384 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies the Secure Hash Algorithm 512 (SHA-512) algorithm.</summary>
      <returns>An object that specifies the SHA-512 algorithm.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>Gets the name of the algorithm that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>Encapsulates the name of an encryption algorithm group. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> class.</summary>
      <param name="algorithmGroup">The name of the algorithm group to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithmGroup" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="algorithmGroup" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Diffie-Hellman family of algorithms.</summary>
      <returns>An object that specifies the Diffie-Hellman family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Digital Signature Algorithm (DSA) family of algorithms.</summary>
      <returns>An object that specifies the DSA family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Diffie-Hellman (ECDH) family of algorithms.</summary>
      <returns>An object that specifies the ECDH family of algorithms.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Elliptic Curve Digital Signature Algorithm (ECDSA) family of algorithms.</summary>
      <returns>An object that specifies the ECDSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> that specifies the same algorithm group as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same algorithm group as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>Generates a hash value for the algorithm group name that is embedded in the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>The hash value of the embedded algorithm group name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects specify the same algorithm group.</summary>
      <returns>true if the two objects specify the same algorithm group; otherwise, false.</returns>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> objects do not specify the same algorithm group.</summary>
      <returns>true if the two objects do not specify the same algorithm group; otherwise, false. </returns>
      <param name="left">An object that specifies an algorithm group.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object that specifies the Rivest-Shamir-Adleman (RSA) family of algorithms.</summary>
      <returns>An object that specifies the RSA family of algorithms.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>Gets the name of the algorithm group that the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object specifies.</summary>
      <returns>The embedded algorithm group name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>Specifies the key export policies for a key. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>No export policies are established. Key export is allowed without restriction.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>The private key can be exported multiple times.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>The private key can be exported multiple times as plaintext.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>The private key can be exported one time for archiving purposes.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>The private key can be exported one time as plaintext.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>Gets the algorithm that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>Gets the algorithm group that is used by the key.</summary>
      <returns>An object that specifies the name of an encryption algorithm group.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>Creates a <see cref="T:System.Security.Cryptography.CngKey" /> object that can be used with the specified algorithm.</summary>
      <returns>An ephemeral key.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm.</summary>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>Creates a named <see cref="T:System.Security.Cryptography.CngKey" /> object that provides the specified algorithm, using the supplied key creation parameters.</summary>
      <returns>A persisted or ephemeral key that provides the specified algorithm.</returns>
      <param name="algorithm">The algorithm that the key will be used with.</param>
      <param name="keyName">The key name. If a name is not provided, the key will not be persisted.</param>
      <param name="creationParameters">An object that specifies advanced parameters for the method, including the <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>Removes the key that is associated with the object.</summary>
      <exception cref="T:System.ObjectDisposedException">An attempt was made to access a deleted key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.CngKey" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>Checks to see whether a named key exists in the default key storage provider (KSP).</summary>
      <returns>true if the named key exists in the default KSP; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP).</summary>
      <returns>true if the named key exists in the specified provider; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to check for the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.</summary>
      <returns>true if the named key exists in the specified provider; otherwise, false.</returns>
      <param name="keyName">The key name.</param>
      <param name="provider">The KSP to search for the key.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for opening a key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Exports the key material into a BLOB, in the specified format.</summary>
      <returns>A BLOB that contains the key material in the specified format.</returns>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors. Typically, the <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> does not allow the key to be exported. </exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>Gets the export policy that is used by the key.</summary>
      <returns>An object that specifies the export policy for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Gets a property, given a name and a set of property options.</summary>
      <returns>An object that contains the raw value of the specified property.</returns>
      <param name="name">The name of the desired property.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE). </summary>
      <returns>A safe handle that represents the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Checks to see whether the specified property exists on the key.</summary>
      <returns>true if the specified property is found; otherwise, false.</returns>
      <param name="name">The property name to check.</param>
      <param name="options">A bitwise combination of the enumeration values that specify options for the named property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.</summary>
      <returns>A new key.</returns>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> or <paramref name="format" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.</summary>
      <returns>A new key.</returns>
      <param name="keyBlob">An array that contains the key information.</param>
      <param name="format">An object that specifies the format of the <paramref name="keyBlob" /> array.</param>
      <param name="provider">The KSP.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />, <paramref name="format" />, or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>Gets the persistence state of the key.</summary>
      <returns>true if the key is ephemeral; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>Gets the scope (machine or user) of the key.</summary>
      <returns>true if the key is available on a machine-wide basis; false if the key is only for the current user.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>Gets the name of the key.</summary>
      <returns>The name of the key. If the key is ephemeral, the value is null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>Gets the key size in bits.</summary>
      <returns>The key size in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>Gets the cryptographic operations specified by the key.</summary>
      <returns>A bitwise combination of the enumeration values that specify the usages allowed for the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object by using a handle to an existing key.</summary>
      <returns>An existing key.</returns>
      <param name="keyHandle">A handle to an existing key.</param>
      <param name="keyHandleOpenOptions">One of the enumeration values that indicates whether <paramref name="keyHandle" /> represents an ephemeral key or a named key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> value is not specified.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key.</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP).</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Creates an instance of an <see cref="T:System.Security.Cryptography.CngKey" /> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.</summary>
      <returns>An existing key.</returns>
      <param name="keyName">The name of the key.</param>
      <param name="provider">The KSP that contains the key.</param>
      <param name="openOptions">A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> or <paramref name="provider" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) is not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.</summary>
      <returns>The parent window handle for the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>Gets the key storage provider (KSP) that manages the key.</summary>
      <returns>The KSP that manages the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).</summary>
      <returns>A handle to the KSP.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>Sets a named property on the key.</summary>
      <param name="property">The key property to set.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>Gets parameters that control the user interface (UI) for accessing the key.  </summary>
      <returns>An object that contains configuration parameters for displaying the UI.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>Gets the unique name for the key.</summary>
      <returns>An alternate name for the key. If the key is ephemeral, the value is null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> class by using the specified format.</summary>
      <param name="format">The key BLOB format to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="format" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="format" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</summary>
      <returns>An object that specifies an ECC public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies the same key BLOB format as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same key BLOB format as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic private key BLOB.</summary>
      <returns>An object that specifies a generic private key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a generic public key BLOB.</summary>
      <returns>An object that specifies a generic public key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>Generates a hash value for the embedded key BLOB format in the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>The hash value of the embedded key BLOB format. </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects specify the same key BLOB format.</summary>
      <returns>true if the two objects specify the same key BLOB format; otherwise, false.</returns>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> objects do not specify the same key BLOB format.</summary>
      <returns>true if the two objects do not specify the same key BLOB format; otherwise, false.</returns>
      <param name="left">An object that specifies a key BLOB format.</param>
      <param name="right">A second object, to be compared to the object identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies an opaque transport key BLOB.</summary>
      <returns>An object that specifies an opaque transport key BLOB.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</summary>
      <returns>An object that specifies a PKCS #8 private key BLOB.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>Gets the name of the key BLOB format that the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object specifies.</summary>
      <returns>The embedded key BLOB format name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>Specifies options used for key creation.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>No key creation options are used.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>A machine-wide key is created.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>The existing key is overwritten during key creation.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>Contains advanced properties for key creation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>Gets or sets the key export policy.</summary>
      <returns>An object that specifies a key export policy. The default value is null, which indicates that the key storage provider's default export policy is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>Gets or sets the key creation options.</summary>
      <returns>An object that specifies options for creating keys. The default value is null, which indicates that the key storage provider's default key creation options are set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>Gets or sets the cryptographic operations that apply to the current key. </summary>
      <returns>A bitwise combination of one or more enumeration values that specify key usage. The default value is null, which indicates that the key storage provider's default key usage is set.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>Enables a <see cref="T:System.Security.Cryptography.CngKey" /> object to be created with additional properties that are set before the key is finalized.</summary>
      <returns>A collection object that contains any additional parameters that you must set on a <see cref="T:System.Security.Cryptography.CngKey" /> object during key creation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>Gets or sets the window handle that should be used as the parent window for dialog boxes that are created by Cryptography Next Generation (CNG) classes.</summary>
      <returns>The HWND of the parent window that is used for CNG dialog boxes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>Gets or sets the key storage provider (KSP) to create a key in.</summary>
      <returns>An object that specifies the KSP that a new key will be created in.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> property is set to a null value.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>Gets or sets information about the user interface to display when a key is created or accessed.</summary>
      <returns>An object that contains details about the user interface shown by Cryptography Next Generation (CNG) classes when a key is created or accessed. A null value indicates that the key storage provider's default user interface policy is set.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>Specifies options for opening key handles.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>The key handle being opened does not specify an ephemeral key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>The key handle being opened specifies an ephemeral key.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>Specifies options for opening a key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>No key open options are specified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>If the <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> value is not specified, a user key is opened instead.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>A machine-wide key is opened.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>UI prompting is suppressed.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>Specifies the cryptographic operations that a Cryptography Next Generation (CNG) key may be used with. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>No usage values are assigned to the key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>The key can be used for encryption and decryption.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>The key can be used for signing and verification.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>The key can be used for secret agreement generation and key exchange.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>The key can be used for all purposes.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>Encapsulates a property of a Cryptography Next Generation (CNG) key or provider.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProperty" /> class.</summary>
      <param name="name">The property name to initialize.</param>
      <param name="value">The property value to initialize.</param>
      <param name="options">A bitwise combination of the enumeration values that specify how the property is stored.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProperty" /> object that specifies the same property as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProperty" /> object to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter represents the same property as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>Generates a hash value for the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</summary>
      <returns>The hash value of the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>Gets the property value that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An array that represents the value stored in the property.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>Gets the property name that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>The property name that is set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects specify the same property name, value, and options.</summary>
      <returns>true if the two objects specify the same property; otherwise, false.</returns>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProperty" /> objects do not specify the same property name, value, and options.</summary>
      <returns>true if the two objects do not specify the same property; otherwise, false.</returns>
      <param name="left">An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>Gets the property options that the current <see cref="T:System.Security.Cryptography.CngProperty" /> object specifies.</summary>
      <returns>An object that specifies the options that are set in the current <see cref="T:System.Security.Cryptography.CngProperty" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>Provides a strongly typed collection of Cryptography Next Generation (CNG) properties.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>Initializes a new <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> object.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>Specifies Cryptography Next Generation (CNG) key property options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>The referenced property has no options.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>The property is not specified by CNG. Use this option to avoid future name conflicts with CNG properties.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>The property should be persisted.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>Encapsulates the name of a key storage provider (KSP) for use with Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProvider" /> class.</summary>
      <param name="provider">The name of the key storage provider (KSP) to initialize.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="provider" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> parameter length is 0 (zero).</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Security.Cryptography.CngProvider" /> that specifies the same key storage provider(KSP) as the current object; otherwise, false.</returns>
      <param name="obj">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProvider" /> object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>true if the <paramref name="other" /> parameter specifies the same key storage provider (KSP) as the current object; otherwise, false.</returns>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>Generates a hash value for the name of the key storage provider (KSP) that is embedded in the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>The hash value of the embedded KSP name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Smart Card Key Storage Provider. </summary>
      <returns>An object that specifies the Microsoft Smart Card Key Storage Provider.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngProvider" /> object that specifies the Microsoft Software Key Storage Provider.</summary>
      <returns>An object that specifies the Microsoft Software Key Storage Provider.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects specify the same key storage provider (KSP).</summary>
      <returns>true if the two objects represent the same KSP; otherwise, false.</returns>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CngProvider" /> objects do not represent the same key storage provider (KSP).</summary>
      <returns>true if the two objects do not represent the same KSP; otherwise, false.</returns>
      <param name="left">An object that specifies a KSP.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>Gets the name of the key storage provider (KSP) that the current <see cref="T:System.Security.Cryptography.CngProvider" /> object specifies.</summary>
      <returns>The embedded KSP name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>Encapsulates optional configuration parameters for the user interface (UI) that Cryptography Next Generation (CNG) displays when you access a protected key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level and friendly name.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, and description.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, and use context.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngUIPolicy" /> class by using the specified protection level, friendly name, description string, use context, and title.</summary>
      <param name="protectionLevel">A bitwise combination of the enumeration values that specify the protection level.  </param>
      <param name="friendlyName">A friendly name for the key to be used in the UI prompt. Specify a null string to use the default name.</param>
      <param name="description">The full-text description of the key. Specify a null string to use the default description.</param>
      <param name="useContext">A description of how the key will be used. Specify a null string to use the default description.</param>
      <param name="creationTitle">The title for the dialog box that provides the UI prompt. Specify a null string to use the default title.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>Gets the title that is displayed by the UI prompt.</summary>
      <returns>The title of the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>Gets the description string that is displayed by the UI prompt.</summary>
      <returns>The description text for the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>Gets the friendly name that is displayed by the UI prompt.</summary>
      <returns>The friendly name that is used to describe the key in the dialog box that appears when the key is accessed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>Gets the UI protection level for the key.</summary>
      <returns>An object that describes the level of UI protection to apply to the key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>Gets the description of how the key will be used.</summary>
      <returns>The description of how the key will be used.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>Specifies the protection level for the key in user interface (UI) prompting scenarios.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>No UI prompt is displayed when the key is accessed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>A UI prompt is displayed the first time the key is accessed in a process.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>A UI prompt is displayed every time the key is accessed.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <returns>A new instance of the default implementation of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</summary>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns null.</returns>
      <param name="algorithm">The name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:"ECDH""ECDiffieHellman""ECDiffieHellmanCng""System.Security.Cryptography.ECDiffieHellmanCng"You can also provide the name of a custom ECDH implementation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives bytes that can be used as a key, given another party's public key.</summary>
      <returns>The key material from the key exchange with the other party’s public key.</returns>
      <param name="otherPartyPublicKey">The other party's public key.</param>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>The name of the key exchange algorithm. </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</summary>
      <returns>The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm. This class is used to perform cryptographic operations.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> specifies an invalid length.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key. </summary>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is invalid. Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</exception>
      <exception cref="T:System.InvalidOperationException">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key. </summary>
      <returns>A byte array that contains the key material. This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</summary>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</summary>
      <returns>A handle to the secret agreement. This information is calculated from the current object's private key and the specified public key.</returns>
      <param name="otherPartyPublicKey">The public key from the other party in the key exchange.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>This method is not implemented.</summary>
      <param name="xmlString">The XML-based key information to be deserialized.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> is malformed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when generating key material.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</summary>
      <returns>An <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</summary>
      <returns>The key pair used by this object to perform cryptographic operations.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The enumeration value is out of range.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>Gets or sets the label value that is used for key derivation.</summary>
      <returns>The label value.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</summary>
      <returns>The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>Gets or sets a value that will be appended to the secret agreement when generating key material.</summary>
      <returns>The value that is appended to the secret agreement.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</summary>
      <returns>The value that is appended to the beginning of the secret agreement during key derivation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>Gets or sets the seed value that will be used when deriving key material.</summary>
      <returns>The seed value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>This method is not implemented.</summary>
      <returns>Not applicable.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <returns>A string object that contains the key information, serialized to an XML string, according to the requested format.</returns>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</summary>
      <returns>true if the secret agreement is used as an HMAC key to derive key material; otherwise, false.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>Specifies an Elliptic Curve Diffie-Hellman (ECDH) public key for use with the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>Gets the key BLOB format for a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <returns>The format that the key BLOB is expressed in.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Converts a byte array that contains a public key to a <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object according to the specified format.</summary>
      <returns>An object that contains the ECDH public key that is serialized in the byte array.</returns>
      <param name="publicKeyBlob">A byte array that contains an Elliptic Curve Diffie-Hellman (ECDH) public key.</param>
      <param name="format">An object that specifies the format of the key BLOB.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="publicKeyBlob" /> or <paramref name="format" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="publicKeyBlob" /> parameter does not contain an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>Converts an XML string to an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</summary>
      <returns>An object that contains the ECDH public key that is specified by the given XML.</returns>
      <param name="xml">An XML string that contains an Elliptic Curve Diffie-Hellman (ECDH) key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="xml" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="xml" /> parameter does not specify an <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>Converts the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object to a <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <returns>An object that contains the key represented by the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key to an XML string in RFC 4050 format.</summary>
      <returns>An XML string that contains the serialized <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>Specifies the key derivation function that the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class will use to convert secret agreements into key material.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>A hash algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> property specifies the name of the algorithm to use. If the algorithm name is not specified, <see cref="T:System.Security.Cryptography.SHA256" /> is used as the default algorithm. </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>A Hash-based Message Authentication Code (HMAC) algorithm is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> property specifies the key to use. Either this property must be set or the <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> property must be set to true; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />. If both properties are set, the secret agreement is used as the HMAC key. </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>The Transport Layer Security (TLS) protocol is used to generate key material. The <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> and <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> properties must be set; otherwise, a <see cref="T:System.Security.Cryptography.CryptographicException" /> is thrown when you use <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />. </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Provides an abstract base class from which all <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> implementations must inherit. </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> class.</summary>
      <param name="keyBlob">A byte array that represents an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key BLOB to a byte array.</summary>
      <returns>A byte array that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Serializes the <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> public key to an XML string.</summary>
      <returns>An XML string that contains the serialized Elliptic Curve Diffie-Hellman (ECDH) public key.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <returns>A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</summary>
      <returns>A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDSA implementation, this method returns null. </returns>
      <param name="algorithm">The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the .NET Framework:"ECDsa""ECDsaCng""System.Security.Cryptography.ECDsaCng"You can also provide the name of a custom ECDSA implementation.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="algorithm" /> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Gets the name of the key exchange algorithm.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Gets the name of the signature algorithm.</summary>
      <returns>The string "ECDsa".</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Generates a digital signature for the specified hash value. </summary>
      <returns>A digital signature that consists of the given hash value encrypted with the private key.</returns>
      <param name="hash">The hash value of the data that is being signed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="hash" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies a digital signature against the specified hash value. </summary>
      <returns>true if the hash value equals the decrypted signature; otherwise, false.</returns>
      <param name="hash">The hash value of a block of data.</param>
      <param name="signature">The digital signature to be verified.</param>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA). </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair, using the specified key size.</summary>
      <param name="keySize">The size of the key. Valid key sizes are 256, 384, and 521 bits.</param>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> specifies an invalid length. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>This method is not implemented.</summary>
      <param name="xmlString">The XML-based key information to be deserialized.</param>
      <exception cref="T:System.NotImplementedException">This method was not overridden for this instance. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Deserializes the key information from an XML string by using the specified format.</summary>
      <param name="xml">The XML-based key information to be deserialized.</param>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>Gets or sets the hash algorithm to use when signing and verifying data.</summary>
      <returns>An object that specifies the hash algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>Gets or sets the key to use when signing and verifying data.</summary>
      <returns>An object that specifies the key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>Generates a signature for the specified data.</summary>
      <returns>A digital signature for the specified data.</returns>
      <param name="data">The message data to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>Generates a digital signature for the specified length of data, beginning at the specified offset. </summary>
      <returns>A digital signature for the specified length of data.</returns>
      <param name="data">The message data to be signed.</param>
      <param name="offset">The location in the string at which to start signing.</param>
      <param name="count">The length of the string, in characters, following <paramref name="offset" /> that will be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="offset" /> caused reading outside the bounds of the data string. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>Generates a signature for the specified data stream, reading to the end of the stream.</summary>
      <returns>A digital signature for the specified data stream.</returns>
      <param name="data">The data stream to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>Generates a signature for the specified hash value.</summary>
      <returns>A digital signature for the specified hash value.</returns>
      <param name="hash">The hash value of the data to be signed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The key information that is associated with the instance does not have a private key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>This method is not implemented.</summary>
      <returns>Not applicable.</returns>
      <param name="includePrivateParameters">true to include private parameters; otherwise, false.</param>
      <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Serializes the key information to an XML string by using the specified format.</summary>
      <returns>A string object that contains the key information, serialized to an XML string according to the requested format.</returns>
      <param name="format">One of the enumeration values that specifies the format of the XML string. The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> specifies an invalid format. The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">All other errors.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>Verifies the digital signature of the specified data. </summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>Verifies a signature for the specified length of data, beginning at the specified offset.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data that was signed.</param>
      <param name="offset">The location in the data at which the signed data begins.</param>
      <param name="count">The length of the data, in characters, following <paramref name="offset" /> that will be signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is less then zero. -or-<paramref name="offset" /> or <paramref name="count" /> is larger than the length of the byte array passed in the <paramref name="data" /> parameter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>Verifies the digital signature of the specified data stream, reading to the end of the stream.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="data">The data stream that was signed.</param>
      <param name="signature">The signature to be verified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifies the specified digital signature against a specified hash value.</summary>
      <returns>true if the signature is valid; otherwise, false.</returns>
      <param name="hash">The hash value of the data to be verified.</param>
      <param name="signature">The digital signature of the data to be verified against the hash value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="signature" /> is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>Defines XML serialization formats for elliptic curve keys.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>An XML serialization format described in RFC 4050, "Using the Elliptic Curve Signature Algorithm (ECDSA) for XML Digital Signatures."</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>Provides information for a manifest signature. </summary>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>Gets the Authenticode signature information for a manifest. </summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> object that contains Authenticode signature information for the manifest, or null if there is no signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>Gets the type of a manifest.</summary>
      <returns>One of the <see cref="T:System.Security.ManifestKinds" /> values.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>Gets the details of the strong name signature of a manifest.</summary>
      <returns>A <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" /> object that contains the signature, or null if there is no strong name signature.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The activation context of the manifest. Activation contexts belong to an application and contain multiple manifests.</param>
      <param name="manifests">The type of manifest. This parameter specifies which manifests in the activation context you want to verify.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>Gathers and verifies information about the signatures of manifests that belong to a specified activation context and manifest type, and allows certificates to be selected for revocation.</summary>
      <returns>A collection that contains a <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> object for each manifest that is verified.</returns>
      <param name="application">The application context of the manifests. Activation contexts belong to an application and contain multiple manifests.</param>
      <param name="manifests">The type of manifest. This parameter specifies which manifests in the activation context you want to verify.</param>
      <param name="revocationFlag">One of the enumeration values that specifies which certificates in the chain are checked for revocation. The default is <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />.</param>
      <param name="revocationMode">Determines whether the X.509 verification should look online for revocation lists. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value specified for the <paramref name="revocationFlag" /> or <paramref name="revocationMode" /> parameter is invalid.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>Represents a read-only collection of <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> objects.  </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>Provides a CNG (Cryptography Next Generation) implementation of the MD5 (Message Digest 5) 128-bit hashing algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MD5Cng" /> class. </summary>
      <exception cref="T:System.InvalidOperationException">This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA1Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 256-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA256" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 384-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA384" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Secure Hash Algorithm (SHA) for 512-bit hash values.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512Cng" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>Initializes, or re-initializes, the instance of the hash algorithm. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA512" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>Initializes, or reinitializes, an instance of a hash algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>Specifies most of the result codes for signature verification. </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>The certificate verification result is valid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>The identity of the assembly specified in the /asm:assembly/asm:assemblyIdentity node of the manifest does not match the identity of the assembly in the Authenticode signature in the /asm:assembly/ds:signature/ds:KeyInfo/msrel:RelData/r:license/r:grant/as:ManifestInformation/as:assemblyIdentity node.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>The strong name signature does not verify in the <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> object. Because the strong name signature wraps the Authenticode signature, someone could replace the Authenticode signature with a signature of their choosing. To prevent this, this error code is returned if the strong name does not verify because substituting a part of the strong name signature will invalidate it.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>The public key token from the manifest identity in the /asm:assembly/asm:AssemblyIdentity node does not match the public key token of the key that is used to sign the manifest.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>The publisher name from /asm:assembly/asmv2:publisherIdentity does not match the subject name of the signing certificate, or the issuer key hash from the same publisherIdentity node does not match the key hash of the signing certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>A system-level error occurred while verifying trust.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>The certificate for the signer of the message is invalid or not found.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>One of the counter signatures is invalid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>The signature of the certificate cannot be verified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>The time stamp signature or certificate could not be verified or is malformed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>The digital signature of the object did not verify.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>The basic constraint extension of a certificate has not been observed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>The certificate has an unknown trust provider.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>The certificate has an unknown verification action.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>The signature format is invalid.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>The certificate is not trusted explicitly.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>The signature is missing.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>The certificate has expired.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>A certificate was issued after the issuing certificate has expired.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>The certificate has an invalid role.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>A path length constraint in the certification chain has been violated.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>A certificate contains an unknown extension that is marked critical.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>The certificate cannot be used for signing and verification.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>A parent of a given certificate did not issue that child certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>The certificate is missing or has an empty value for an important field, such as a subject or issuer name.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>The root certificate is not trusted.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>The chain could not be built.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>There is a general trust failure with the certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>The certificate has been revoked.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>The test root certificate is not trusted.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>The revocation check failed.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>The certificate has an invalid usage.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>The certificate was explicitly marked as not trusted by the user.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>The certification chain processed correctly, but one of the CA certificates is not trusted by the policy provider.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>The certificate has an invalid policy.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>The certificate has an invalid name. The name is either not included in the permitted list or is explicitly excluded.</summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>Holds the strong name signature information for a manifest.</summary>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>Gets the hash algorithm that is used to calculate the strong name signature.</summary>
      <returns>The name of the hash algorithm that is used to calculate the strong name signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>Gets the HRESULT value of the result code.</summary>
      <returns>The HRESULT value of the result code.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>Gets a value indicating whether the strong name signature is valid.</summary>
      <returns>true if the strong name signature is valid; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>Gets the public key that is used to verify the signature.</summary>
      <returns>The public key that is used to verify the signature. </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>Gets the results of verifying the strong name signature.</summary>
      <returns>The result codes for signature verification.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>Provides information about an Authenticode signature for a manifest. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>Gets the description of the signing certificate.</summary>
      <returns>The description of the signing certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>Gets the description URL of the signing certificate.</summary>
      <returns>The description URL of the signing certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>Gets the hash algorithm used to compute the signature.</summary>
      <returns>The hash algorithm used to compute the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>Gets the HRESULT value from verifying the signature.</summary>
      <returns>The HRESULT value from verifying the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>Gets the chain of certificates used to verify the Authenticode signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> object that contains the certificate chain.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>Gets the certificate that signed the manifest.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>Gets the time stamp that was applied to the Authenticode signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" /> object that contains the signature time stamp.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>Gets the trustworthiness of the Authenticode signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" /> values. </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>Gets the result of verifying the Authenticode signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>Provides details about the time stamp that was applied to an Authenticode signature for a manifest. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>Gets the hash algorithm used to compute the time stamp signature.</summary>
      <returns>The hash algorithm used to compute the time stamp signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>Gets the HRESULT value that results from verifying the signature.</summary>
      <returns>The HRESULT value that results from verifying the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>Gets a value indicating whether the time stamp of the signature is valid.</summary>
      <returns>true if the time stamp is valid; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>Gets the chain of certificates used to verify the time stamp of the signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> object that represents the certificate chain.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>Gets the certificate that signed the time stamp.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>Gets the time stamp that was applied to the signature.</summary>
      <returns>A <see cref="T:System.DateTime" /> object that represents the time stamp.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>Gets the result of verifying the time stamp signature.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>Identifies the level of trustworthiness that is assigned to the signature for a manifest.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>The signature 
                    was created by an explicitly distrusted publisher.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>The identity is not known and the signature is invalid. Because there is no verified signature, an identity cannot be determined.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>The identity is known and the signature is valid. A valid Authenticode signature provides an identity.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>The signature is valid and was created by an explicitly trusted publisher.</summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Specifies whether a lock can be entered multiple times by the same thread.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>A thread can enter a lock recursively. Some classes may restrict this capability. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Represents a lock that is used to manage access to a resource, allowing multiple threads for reading or exclusive access for writing.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class, specifying the lock recursion policy.</summary>
      <param name="recursionPolicy">One of the enumeration values that specifies the lock recursion policy. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Gets the total number of unique threads that have entered the lock in read mode.</summary>
      <returns>The number of unique threads that have entered the lock in read mode.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Tries to enter the lock in read mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered read mode. -or-The recursion number would exceed the capacity of the counter. This limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Tries to enter the lock in upgradeable mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode. -or-The current thread has entered read mode, so trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Tries to enter the lock in write mode.</summary>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock in any mode. -or-The current thread has entered read mode, so trying to enter the lock in write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in read mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Reduces the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in upgradeable mode.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">The current thread has not entered the lock in write mode.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in read mode.</summary>
      <returns>true if the current thread has entered read mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in upgradeable mode. </summary>
      <returns>true if the current thread has entered upgradeable mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Gets a value that indicates whether the current thread has entered the lock in write mode.</summary>
      <returns>true if the current thread has entered write mode; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Gets a value that indicates the recursion policy for the current <see cref="T:System.Threading.ReaderWriterLockSlim" /> object.</summary>
      <returns>One of the enumeration values that specifies the lock recursion policy.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Gets the number of times the current thread has entered the lock in read mode, as an indication of recursion.</summary>
      <returns>0 (zero) if the current thread has not entered read mode, 1 if the thread has entered read mode but has not entered it recursively, or n if the thread has entered the lock recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Gets the number of times the current thread has entered the lock in upgradeable mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered upgradeable mode, 1 if the thread has entered upgradeable mode but has not entered it recursively, or n if the thread has entered upgradeable mode recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Gets the number of times the current thread has entered the lock in write mode, as an indication of recursion.</summary>
      <returns>0 if the current thread has not entered write mode, 1 if the thread has entered write mode but has not entered it recursively, or n if the thread has entered write mode recursively n - 1 times.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Tries to enter the lock in read mode, with an optional integer time-out.</summary>
      <returns>true if the calling thread entered read mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in read mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered read mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely. </param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered upgradeable mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Tries to enter the lock in upgradeable mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered upgradeable mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter upgradeable mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered write mode, otherwise, false.</returns>
      <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 (<see cref="F:System.Threading.Timeout.Infinite" />) to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Tries to enter the lock in write mode, with an optional time-out.</summary>
      <returns>true if the calling thread entered write mode, otherwise, false.</returns>
      <param name="timeout">The interval to wait, or -1 milliseconds to wait indefinitely.</param>
      <exception cref="T:System.Threading.LockRecursionException">The <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> property is <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> and the current thread has already entered the lock. -or-The current thread initially entered the lock in read mode, and therefore trying to enter write mode would create the possibility of a deadlock. -or-The recursion number would exceed the capacity of the counter. The limit is so large that applications should never encounter it.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="timeout" /> is negative, but it is not equal to -1 milliseconds, which is the only negative value allowed.-or-The value of <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in read mode.</summary>
      <returns>The total number of threads that are waiting to enter read mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in upgradeable mode.</summary>
      <returns>The total number of threads that are waiting to enter upgradeable mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Gets the total number of threads that are waiting to enter the lock in write mode.</summary>
      <returns>The total number of threads that are waiting to enter write mode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <see cref="T:System.Threading.Tasks.Task" /> instances.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Unwraps a Task that returns another Task.</summary>
      <returns>A Task{TResult} that represents the asynchronous operation of the provided Task{Task{TResult}}.</returns>
      <param name="task">The Task{Task{TResult}} to unwrap.</param>
      <typeparam name="TResult"></typeparam>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Creates a proxy <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation of a Task{Task}.</summary>
      <returns>A Task that represents the asynchronous operation of the provided Task{Task}.</returns>
      <param name="task">The Task{Task} to unwrap.</param>
      <exception cref="T:System.ArgumentNullException">The exception that is thrown if the <paramref name="task" /> argument is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Data.Services.Design.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services.Design</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.BuildProvider.DataServiceBuildProvider">
      <summary>Generates C# or Visual Basic code for a WCF Data Services client application based on the metadata returned by the data service.</summary>
    </member>
    <member name="M:System.Data.Services.BuildProvider.DataServiceBuildProvider.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Services.BuildProvider.DataServiceBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Services.BuildProvider.DataServiceBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates C# or Visual Basic code for a WCF Data Services client application based on the metadata returned by the data service.</summary>
      <param name="assemblyBuilder">A container for building an assembly.</param>
    </member>
    <member name="T:System.Data.Services.Design.DataServiceCodeVersion">
      <summary>Specifies the specific version of The following code-behind page for the XAML file creates an WCF Data Services that should be targeted by code generation. </summary>
    </member>
    <member name="F:System.Data.Services.Design.DataServiceCodeVersion.V1">
      <summary>Generate code targets version 1.0.</summary>
    </member>
    <member name="F:System.Data.Services.Design.DataServiceCodeVersion.V2">
      <summary>Generate code targets version 2.0.</summary>
    </member>
    <member name="T:System.Data.Services.Design.EdmToObjectNamespaceMap">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services.</summary>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Add(System.String,System.String)">
      <summary>Adds mapping between the Entity Data Model namespace and the object.</summary>
      <param name="edmNamespace">String containing the namespace name.</param>
      <param name="objectNamespace">String containing the object namespace.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Clear">
      <summary>Clears <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Contains(System.String)">
      <summary>Queries whether mapping contains object in <paramref name="edmNamespace" /> parameter. </summary>
      <returns>true if the object is found; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the mapping object to query.</param>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.Count">
      <summary>Gets a count of mappings contained by <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>Integer value that contains the count of mappings.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.EdmNamespaces">
      <summary>Gets edmNamespace items in an <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" /> object.</summary>
      <returns>String value that contains EdmNamespace items.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EdmToObjectNamespaceMap.Item(System.String)">
      <summary>Gets namespace identified by <paramref name="edmNamespace" /> parameter.</summary>
      <returns>EdmNamespace object. </returns>
      <param name="edmNamespace">String value that contains edmNamespace name.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.Remove(System.String)">
      <summary>Removes object identified by <paramref name="edmNamespace" /> parameter.</summary>
      <returns>true if operation succeeds; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the mapping object.</param>
    </member>
    <member name="M:System.Data.Services.Design.EdmToObjectNamespaceMap.TryGetObjectNamespace(System.String,System.String@)">
      <summary>Tests whether an object identified by <paramref name="objectNamespace" /> and <paramref name="edmNamespace" /> is mapped by <see cref="T:System.Data.Services.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>true if the mapping is returned; otherwise false.</returns>
      <param name="edmNamespace">String value that contains the namespace name.</param>
      <param name="objectNamespace">String value that identifies the object namespace</param>
    </member>
    <member name="T:System.Data.Services.Design.EntityClassGenerator">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.EntityClassGenerator" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.#ctor(System.Data.Services.Design.LanguageOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.EntityClassGenerator" /> class. </summary>
      <param name="languageOption">Selects the programming language.</param>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.EdmToObjectNamespaceMap">
      <summary>Gets the EdmToObjectNamespaceMap object used in entity class generation.</summary>
      <returns>EdmToObjectNamespaceMap object.</returns>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter,System.String)">
      <summary>Generates code for the data model from switches identified by parameters.</summary>
      <returns>The list of schema errors that occurred during generation.</returns>
      <param name="sourceReader">The XML reader object.</param>
      <param name="targetWriter">The text writer object.</param>
      <param name="namespacePrefix">The string that contains the namespace prefix.</param>
    </member>
    <member name="M:System.Data.Services.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.String)">
      <summary>Generates code for the object model.</summary>
      <returns>The list of schema errors that occurred during generation.</returns>
      <param name="sourceReader">The XML reader object.</param>
      <param name="targetFilePath">The string that contains the path to the target file.</param>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.LanguageOption">
      <summary>Gets the language option used in generation of the data model.</summary>
      <returns>Language option.</returns>
    </member>
    <member name="E:System.Data.Services.Design.EntityClassGenerator.OnPropertyGenerated">
      <summary>Occurs when a property is generated. </summary>
    </member>
    <member name="E:System.Data.Services.Design.EntityClassGenerator.OnTypeGenerated">
      <summary>Occurs when a type is generated.</summary>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.UseDataServiceCollection">
      <summary>Gets or sets whether code generation should include the code that is required to support data binding.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when data binding code is required; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Services.Design.EntityClassGenerator.Version">
      <summary>Gets and sets the version of WCF Data Services that the generated code targets.</summary>
      <returns>A <see cref="T:System.Data.Services.Design.DataServiceCodeVersion" /> value that indicates the version of the generated code.</returns>
    </member>
    <member name="T:System.Data.Services.Design.LanguageOption">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services.</summary>
    </member>
    <member name="F:System.Data.Services.Design.LanguageOption.GenerateCSharpCode">
      <summary>Generates C# code.</summary>
    </member>
    <member name="F:System.Data.Services.Design.LanguageOption.GenerateVBCode">
      <summary>Generates Visual Basic code. </summary>
    </member>
    <member name="T:System.Data.Services.Design.PropertyGeneratedEventArgs">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.PropertyGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.PropertyGeneratedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.PropertyGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.MetadataItem,System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.PropertyGeneratedEventArgs" /> class. </summary>
      <param name="propertySource">Property source.</param>
      <param name="backingFieldName">Backing field name.</param>
      <param name="returnType">Return type.</param>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalAttributes">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional attributes.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalGetStatements">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional Get statements.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.AdditionalSetStatements">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional Set statements.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.BackingFieldName">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Backing field name.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.PropertySource">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Property source.</returns>
    </member>
    <member name="P:System.Data.Services.Design.PropertyGeneratedEventArgs.ReturnType">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Return type.</returns>
    </member>
    <member name="T:System.Data.Services.Design.TypeGeneratedEventArgs">
      <summary>Used by the code generation command line tools and tools in Visual Studio to generate strongly typed client-side objects for communicating with data services. </summary>
    </member>
    <member name="M:System.Data.Services.Design.TypeGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.TypeGeneratedEventArgs" /> class. </summary>
    </member>
    <member name="M:System.Data.Services.Design.TypeGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.GlobalItem,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Services.Design.TypeGeneratedEventArgs" /> class. </summary>
      <param name="typeSource">The type source.</param>
      <param name="baseType">The base type.</param>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalAttributes">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional attributes.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalInterfaces">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional interfaces.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.AdditionalMembers">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Additional members.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.BaseType">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Base type.</returns>
    </member>
    <member name="P:System.Data.Services.Design.TypeGeneratedEventArgs.TypeSource">
      <summary>This class is not intended for public use and is used to generate strongly typed client-side objects for communicating with data services.</summary>
      <returns>Type source.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Data.Linq.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Data.Linq.Binary">
      <summary>Represents an immutable block of binary data.</summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Binary" /> class.</summary>
      <param name="value">The bytes representing the binary data.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>Determines whether two binary objects are equal.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to which the current object is being compared.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current binary object.</returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>Gets the length of the binary object.</summary>
      <returns>An integer representing the length.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Describes the equality relationship between two binary objects.</summary>
      <returns>true if the binary objects are equal; otherwise false.</returns>
      <param name="binary1">First binary object.</param>
      <param name="binary2">Second binary object.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>Enables arrays of bytes to be implicitly coerced to the <see cref="T:System.Data.Linq.Binary" /> type in a programming language.</summary>
      <returns>A <see cref="T:System.Data.Linq.Binary" /> class containing the coerced value.</returns>
      <param name="value">The array of bytes to convert into an instance of the <see cref="T:System.Data.Linq.Binary" /> type.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Describes the inequality relationship between two binary objects.</summary>
      <returns>true if the binary objects are not equal; otherwise false.</returns>
      <param name="binary1">The first binary object.</param>
      <param name="binary2">The second binary object.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>Returns an array of bytes that represents the current binary object.</summary>
      <returns>A byte array that contains the value of the current binary object.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current binary object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current binary object.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>Describes the type of change the entity will undergo when changes are submitted to the database.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>The entity will not be submitted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>The entity will be deleted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>The entity will be inserted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>The entity will be updated.</summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>Returns a collection of objects involved in concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>Removes all conflicts from the collection.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>Specifies whether a given conflict is a member of the collection.</summary>
      <returns>Returns true if the specified conflict is a member of the collection.</returns>
      <param name="item">The specified conflict.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The array index where the copy is to start.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>Returns the number of conflicts in the collection</summary>
      <returns>integer</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>Returns the enumerator for the collection.</summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>Returns an item in conflict.</summary>
      <returns>An <see cref="T:System.Data.Linq.ObjectChangeConflict" /> representing the item in conflict.</returns>
      <param name="index">Index in the collection of the item in conflict.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>Specifies whether the specified conflict is removed from the collection.</summary>
      <returns>Returns true if the <see cref="T:System.Data.Linq.ObjectChangeConflict" /> is removed from the collection.</returns>
      <param name="item">The conflict to remove.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>Resolves all conflicts in the collection by using the specified strategy.</summary>
      <param name="mode">One of the options available in <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Resolves all conflicts in the collection by using the specified strategy.</summary>
      <param name="mode">The strategy to use to resolve the conflict.</param>
      <param name="autoResolveDeletes">If true, automatically resolves conflicts that result from a modified object that is no longer in the database.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>Returns true if the collection is read-only.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection to an array.</summary>
      <param name="array">Name of the array.</param>
      <param name="index">Index of the array.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if access to the collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns an object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>Thrown when an update fails because database values have been updated since the client last read them.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class and specifies a message to explain the exception.</summary>
      <param name="message">The message to be exposed when the exception is thrown.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class, specifies a message to explain the exception, and specifies the exception that caused this exception.</summary>
      <param name="message">The message to be exposed when the exception is thrown.</param>
      <param name="innerException">Specifies the exception of which <see cref="T:System.Data.Linq.ChangeConflictException" /> is a result.</param>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>Provides a container to hold changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>Gets a list of entities that have been deleted from the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of deleted entities.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>Gets a list of entities that have been inserted into the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of inserted entities.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>Gets a list of entities that have been updated in the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of updated entities.</returns>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>Provides for compilation and caching of queries for reuse.</summary>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query. </returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg15">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>Returns the query as a lambda expression.</summary>
      <returns>The lambda expression that represents the query.</returns>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>Specifies when concurrency conflicts should be reported.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>Specifies that attempts to update the database should stop immediately when the first concurrency conflict error is detected.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>Specifies that all updates to the database should be tried, and that concurrency conflicts should be accumulated and returned at the end of the process.</summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>Represents the main entry point for the LINQ to SQL framework. </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing the connection used by the .NET Framework.</summary>
      <param name="connection">The connection used by the .NET Framework.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a connection and a mapping source.</summary>
      <param name="connection">The connection used by the .NET Framework.</param>
      <param name="mapping">The <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source.</summary>
      <param name="fileOrServerOrConnection">This argument can be any one of the following:The name of a file where a SQL Server Express database resides.The name of a server where a database is present. In this case the provider uses the default database for a user.A complete connection string. LINQ to SQL just passes the string to the provider without modification.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source and a mapping source.</summary>
      <param name="fileOrServerOrConnection">This argument can be any one of the following:The name of a file where a SQL Server Express database resides.The name of a server where a database is present. In this case the provider uses the default database for a user.A complete connection string. LINQ to SQL just passes the string to the provider without modification.</param>
      <param name="mapping">The <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>Returns a collection of objects that caused concurrency conflicts when <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> was called.</summary>
      <returns>A collection of the objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.CommandTimeout">
      <summary>Increases the time-out period for queries that would otherwise time out during the default time-out period.</summary>
      <returns>An integer value that represents seconds.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>Returns the connection used by the framework. </summary>
      <returns>The connection.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>Creates a database on the server.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Executes the table-valued database function associated with the specified CLR method. </summary>
      <returns>A collection of resultant values returned by the database query.</returns>
      <param name="instance"> The instance of the method invocation (the current object).</param>
      <param name="methodInfo">Identifies the CLR method that corresponds to a database method.</param>
      <param name="parameters">The array of parameters to be passed to the command.</param>
      <typeparam name="TResult">The type of the elements in the returned collection.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>Determines whether the associated database can be opened. </summary>
      <returns>true if the specified database can be opened; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>Specifies whether to delay-load one-to-many or one-to-one relationships. </summary>
      <returns>true if deferred loading is enabled; otherwise false. </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>Deletes the associated database. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>Releases resources used by the <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
      <summary>Executes SQL commands directly on the database.</summary>
      <returns>An int representing the number of rows modified by the executed command.</returns>
      <param name="command">The SQL command to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If any one of the parameters is null, it is converted to DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>Called inside delete override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for delete operations.</summary>
      <param name="entity">The entity to be deleted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>Called inside insert override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for insert operations.</summary>
      <param name="entity">The entity to be inserted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>Called inside update override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for update operations.</summary>
      <param name="entity">The entity to be updated.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Executes the stored database procedure or scalar function associated with the specified CLR method.</summary>
      <returns>The result (the return value and output parameters) of executing the specified method.</returns>
      <param name="instance"> The instance of the method invocation (the current object).</param>
      <param name="methodInfo">Identifies the CLR method that corresponds to a database method. </param>
      <param name="parameters">The array of parameters to be passed to the command.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>Executes SQL queries directly on the database and returns objects. </summary>
      <returns>A collection of objects returned by the query.</returns>
      <param name="query">The SQL query to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If a parameter is null, it is converted to DBNull.Value.</param>
      <typeparam name="TResult">The type of the elements in the returned collection.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>Executes SQL queries directly on the database.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects returned by the query.</returns>
      <param name="elementType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.The algorithm for matching columns in the result of the query to fields or properties in the object works as follows:If a field or property is mapped to a particular column name, that column name is expected in the resultset.If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.The comparison is performed by looking for a case-sensitive match first. If this match is not found, a subsequent search occurs for a case-insensitive match.The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:<paramref name="T" /> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.<see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is true.The entity has a primary key.Otherwise an exception is thrown.</param>
      <param name="query">The SQL query to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If a parameter is null, it is converted to DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>Provides access to the modified objects tracked by <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>The set of objects is returned as three read-only collections.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
      <summary>Provides information about SQL commands generated by LINQ to SQL.</summary>
      <returns>The requested command information object.</returns>
      <param name="query">The query whose SQL command information is to be retrieved.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>Returns a collection of objects of a particular type, where the type is defined by the <paramref name="TEntity" /> parameter.</summary>
      <returns>A collection of objects.</returns>
      <typeparam name="TEntity">The type of the objects to be returned.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>Returns a collection of objects of a particular type, where the type is defined by the <paramref name="type" /> parameter.</summary>
      <returns>A collection of objects.</returns>
      <param name="type">The type of the objects to be returned.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>Gets or sets the <see cref="T:System.Data.Linq.DataLoadOptions" /> associated with this <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>The prefetch load options for related data. </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>Specifies the destination to write the SQL query or command. </summary>
      <returns>The <see cref="T:System.IO.TextReader" /> to use for writing the command.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>Returns the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> on which the mapping is based.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>Instructs the framework to track the original value and object identity for this <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>true to enable object tracking; otherwise, false. The default is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>Refreshes a collection of entity objects according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entities">The collection of entities to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>Refreshes an entity object according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entity">The object to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>Refreshes an array of entity objects according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entities">The array of entity objects to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>Sends changes that were made to retrieved objects to the underlying database, and specifies the action to be taken if the submission fails.</summary>
      <param name="failureMode">The action to be taken if the submission fails. Valid arguments are as follows:<see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></param>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>Sets a local transaction for the .NET Framework to use to access the database.</summary>
      <returns>The transaction object used by the <see cref="T:System.Data.Linq.DataContext" /> when executing queries and commands.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A collection of objects returned by the conversion.</returns>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned. </typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A list of objects returned by the conversion.</returns>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A list of objects returned by the conversion.</returns>
      <param name="elementType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.The algorithm for matching columns in the result to fields and properties in the object works as follows:If a field or property is mapped to a particular column name, that column name is expected in the resultset.If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.The comparison is performed by looking for a case-sensitive match first. If this match is not found, a subsequent search is occurs for a case-insensitive match.The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:<paramref name="T" /> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.<see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is true.The entity has a primary key.Otherwise an exception is thrown.</param>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>Provides for immediate loading and filtering of related data.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Filters objects retrieved for a particular relationship.</summary>
      <param name="expression">Identifies the query to be used on a particular one-to-many field or property. Note the following:If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <typeparam name="T">The type that is queried against.If the type is unmapped, an exception is thrown.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Filters the objects retrieved for a particular relationship.</summary>
      <param name="expression">Identifies the query to be used on a particular one-to-many field or property. Note the following:If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</summary>
      <param name="expression">Identifies the field or property to be retrieved.If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</param>
      <typeparam name="T">Type that is queried against.If this type is unmapped, an exception is thrown.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Retrieves specified data related to the main target by using a lambda expression.</summary>
      <param name="expression">A lambda expression that identifies the related material.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>Used internally to convert one type to another.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>Changes the specified value to the current type.</summary>
      <returns>An object of the specified type that contains the converted value.</returns>
      <param name="value">The object to be converted.</param>
      <typeparam name="T">The type to change to.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>Changes the specified value to the specified type.</summary>
      <returns>An object that contains the converted value of the specified type.</returns>
      <param name="value">The object to be converted.</param>
      <param name="type">The type to convert the object to.</param>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>Thrown when an attempt is made to add an object to the identity cache by using a key that is already being used.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class by referencing the duplicate key and providing an error message.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
      <param name="message">The message to appear when the exception is thrown.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class by referencing the duplicate key, providing an error message, and specifying the exception that caused this exception to be thrown.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
      <param name="message">The message to appear when the exception is thrown.</param>
      <param name="innerException">The previous exception that caused the <see cref="T:System.Data.Linq.DuplicateKeyException" /> exception to be thrown.</param>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>Gets the object that caused the exception.</summary>
      <returns>The object that caused the exception.</returns>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>Provides for deferred loading and relationship maintenance for the singleton side of a one-to-many relationship in a LINQ to SQL application. </summary>
      <typeparam name="TEntity">The type of the target entity.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by specifying the source.</summary>
      <param name="source">The reference source.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by referencing the target entity.</summary>
      <param name="entityRef">The target entity.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by specifying the target entity.</summary>
      <param name="entity">The target entity.</param>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>Gets or sets the target entity.</summary>
      <returns>The target entity.</returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>Gets a value that indicates whether the target has been loaded or assigned.</summary>
      <returns>True if the target has been loaded or assigned.</returns>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>Provides for deferred loading and relationship maintenance for the collection side of one-to-many and one-to-one relationships in a LINQ to SQL applications. </summary>
      <typeparam name="TEntity">The data type of the target entity.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntitySet`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntitySet`1" /> class while supplying handlers for add and remove operations.</summary>
      <param name="onAdd">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
      <param name="onRemove">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>Adds an entity.</summary>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds a collection of entities.</summary>
      <param name="collection">The collection to be added.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>Assigns an <see cref="T:System.Data.Linq.EntitySet`1" /> collection to another <see cref="T:System.Data.Linq.EntitySet`1" /> collection.</summary>
      <param name="entitySource">The collection to assign.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>Removes all items.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.EntitySet`1" /> contains a specific entity.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.EntitySet`1" /> contains the entity; otherwise, false.</returns>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Data.Linq.EntitySet`1" /> to an array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The starting index in the array.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>Gets the number of entities in the <see cref="T:System.Data.Linq.EntitySet`1" /> collection.</summary>
      <returns>An integer representing the number of entities.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>Creates a new list for binding to a data source.</summary>
      <returns>A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.EntitySet`1" /> has loaded or assigned a value.</summary>
      <returns>Returns true if the <see cref="T:System.Data.Linq.EntitySet`1" /> has either loaded or assigned a value.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>Returns the index of the entity.</summary>
      <returns>An integer representing the index.</returns>
      <param name="entity">The entity whose index is to be returned.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>Inserts an entity at an index position.</summary>
      <param name="index">The index representing the position at which to insert the entity.</param>
      <param name="entity">The entity to be inserted.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>Specifies whether this <see cref="T:System.Data.Linq.EntitySet`1" /> has a deferred query that has not yet executed.</summary>
      <returns>true if a deferred query has not yet been executed; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>An <see cref="T:System.Data.Linq.EntitySet`1" /> representing the item.</returns>
      <param name="index">The index of the element.</param>
    </member>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>Occurs when the contents of a list are changed.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>Loads the <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>Removes an entity.</summary>
      <returns>true if the entity is successfully removed; otherwise, false.</returns>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>Removes an entity at a specified index.</summary>
      <param name="index">The index of the entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>Sets the source of the <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">The source of the <see cref="T:System.Data.Linq.EntitySet`1" />.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The array to which elements of the collection are copied.</param>
      <param name="index">The array index at which copying begins.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false. </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through a collection.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The object to locate in the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The index of the object in the list.</param>
      <param name="value">The object to insert into the list.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the collection has a fixed size; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The index at which to set or get the element.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
      <returns>true if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise false;</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that can be bound to a data source from the object.</returns>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>Represents errors that occur when an attempt is made to change a foreign key when the entity is already loaded.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>Provides access to the return value or results of executing a query.</summary>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>Provides access to the nth output parameter.</summary>
      <returns>An object that contains the value of the specified parameter. </returns>
      <param name="parameterIndex">The index of the parameter to be retrieved.</param>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>Gets the return value or result of the executed query.</summary>
      <returns>The value or result of the executed query.</returns>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>Provides access to the return value of a function.</summary>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>Gets the return value of a function.</summary>
      <returns>The value returned by the function.</returns>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>Represents the results of mapped functions or queries with variable return sequences.</summary>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>Retrieves the next result as a sequence of a specified type.</summary>
      <returns>An enumeration for iterating over the results.</returns>
      <typeparam name="TElement">The type of the sequence to be returned.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>Represents the result of a mapped function that has a single return sequence.</summary>
      <typeparam name="T">The type of the elements in the return sequence.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>Used for weakly typed query scenarios.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</summary>
      <param name="entity">The entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entity">The collection of entities.</param>
      <param name="asModified">true to attach the entities as modified.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">true to attach the entities as modified.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Puts all entities from the collection into a pending delete state.</summary>
      <param name="entities">The collection from which all items are removed.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>Puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>Returns an array of modified members that contain their current and original values.</summary>
      <param name="entity">The entity from which to get the array.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>Retrieves original values.</summary>
      <returns>A copy of the original entity. The value is null if the entity passed in is not tracked. Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state. The "original state" of a newly attached entity is established based on values supplied by the client. The data context does not track the state of disconnected entities.</returns>
      <param name="entity">The entity whose original value is to be retrieved.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a pending insert state.</summary>
      <param name="entities">The entities to add.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>Adds an entity in a pending insert state to this table.</summary>
      <param name="entity">The entity to be added.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</summary>
      <returns>Returns true if the entity type does not have a primary key; otherwise, false.</returns>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>Represents a table for a particular type in the underlying database. </summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>When overridden, attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</summary>
      <param name="entity">The object to be added.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>When overridden, puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The object to delete.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>When overridden, adds an entity in a pending insert state to this <see cref="T:System.Data.Linq.ITable`1" />.</summary>
      <param name="entity">The object to insert.</param>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>Used to enable deferred loading of individual properties (similar to <see cref="T:System.Data.Linq.EntityRef`1" />).</summary>
      <typeparam name="T">The type of the elements in the deferred source.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by referencing the source.</summary>
      <param name="source">The source collection.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by copying the internal state from another <see cref="T:System.Data.Linq.Link`1" /> instance.</summary>
      <param name="link">The <see cref="T:System.Data.Linq.Link`1" /> instance from which to copy.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by referencing the value of the property.</summary>
      <param name="value">The value for the property.</param>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.Link`1" /> has loaded or assigned a value.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.Link`1" /> has either loaded or assigned a value; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>Gets a value that specifies whether the source has a value.</summary>
      <returns>Returns true if the source has an assigned or loaded value (including null).</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>Gets or sets the value assigned to or loaded by the <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <returns>The value of this deferred property.</returns>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>Represents a situation in which an attempted update fails because member values have been updated since the client last read them.</summary>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>Gets the current value of the member in conflict.</summary>
      <returns>The object in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>Gets the database value of the member in conflict.</summary>
      <returns>The value of the object in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>Gets a value that indicates whether the member data has been changed since the last database read or refresh.</summary>
      <returns>True if the member data has been changed.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>Gets a value that indicates whether the conflict has been resolved.</summary>
      <returns>True if the conflict has been resolved.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>Gets metadata information about the member in conflict.</summary>
      <returns>Information about the member in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>Gets the original value of the member in conflict.</summary>
      <returns>The original value of the member in conflict.</returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Uses a <see cref="T:System.Data.Linq.RefreshMode" /> parameter to automatically specify the value to set as the current value for the member in conflict.</summary>
      <param name="refreshMode">See <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>Specifies the value to set as the current value for the member in conflict.</summary>
      <param name="value">The value to set as the current value.</param>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>Holds values of members that have been modified in LINQ to SQL applications.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>Gets the current value of the modified member.</summary>
      <returns>The value of the member.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>Gets member information for the modified member.</summary>
      <returns>Information about the member in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>Gets the original value of the modified member.</summary>
      <returns>The original value for the modified member.</returns>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>Represents an update attempt with one or more optimistic concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>Gets a value that indicates whether the object in conflict has been deleted from the database.</summary>
      <returns>True if the object has been deleted.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>Gets a value that indicates whether the conflicts for this object have already been resolved.</summary>
      <returns>True if the conflicts have been resolved.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>Gets a collection of all member conflicts that caused the update to fail.</summary>
      <returns>A collection of member conflicts.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>Gets the object in conflict.</summary>
      <returns>The object in conflict.</returns>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>Resolves member conflicts by keeping current values and resetting the baseline original values to match the more recent database values.</summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Resolves member conflicts by using the specified <see cref="T:System.Data.Linq.RefreshMode" />.</summary>
      <param name="refreshMode">The appropriate option from <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Resolve member conflicts keeping current values and resetting the baseline original values.</summary>
      <param name="refreshMode">The appropriate option from <see cref="T:System.Data.Linq.RefreshMode" />.</param>
      <param name="autoResolveDeletes">When true, automatically resolves conflicts resulting from a modified object that is no longer in the database. </param>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>Defines how the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method handles optimistic concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to swap the original value with the values retrieved from the database. No current value is modified.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to keep the current value that has been changed, but updates the other values with the database values.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to override all the current values with the values from the database.</summary>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>Represents a table for a particular type in the underlying database.</summary>
      <typeparam name="TEntity">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</summary>
      <param name="entity">The original values of the entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="asModified">True to attach the entity as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <typeparam name="TSubEntity">The type of entities to attach.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">true if the object has a timestamp or RowVersion member, false if original values are being used for the optimistic concurrency check.</param>
      <typeparam name="TSubEntity">The type of entities to attach.</typeparam>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.DataContext" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Puts all entities from the collection into a pending delete state.</summary>
      <param name="entities">The entities to delete.</param>
      <typeparam name="TSubEntity">The type of the elements to delete.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>Puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The entity to be deleted.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>Gets an enumerator for the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>Returns an array of modified members that contain their current and original values.</summary>
      <returns>An array of modified members.</returns>
      <param name="entity">The entity from which to get the array.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>Creates a new list for binding to a data source.</summary>
      <returns>A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>Returns an instance that contains the original state of the entity.</summary>
      <returns>A <see cref="T:System.Data.Linq.Table`1" /> instance in its original state.</returns>
      <param name="entity">The entity whose original state is to be returned.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a pending insert state.</summary>
      <param name="entities">The entities to add.</param>
      <typeparam name="TSubEntity">The type of the elements to insert.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>Adds an entity in a pending insert state to this <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <param name="entity">The entity to be added.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</summary>
      <returns>Returns true if the entity type does not have a primary key; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />. </summary>
      <returns>true if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object)" />.</summary>
      <param name="entity">The entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="asModified">True to attach the entity as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">True to attach the entities as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The entities being removed.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />.</summary>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />.</summary>
      <returns>An array of modified members.</returns>
      <param name="entity">The entity from which to obtain the modified members.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />.</summary>
      <returns>A copy of the original entity. </returns>
      <param name="entity">The entity whose original state is to be accessed. </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />.</summary>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.ElementType" />.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.Provider" />.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">The query expression.</param>
      <typeparam name="TResult">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">The query expression.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)" />.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">The query expression to execute.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">The query expression to execute.</param>
      <typeparam name="TResult">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>Returns a string that represents the table.</summary>
      <returns>A string representing the table.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>Designates a property to represent a database association, such as a foreign key relationship.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>When placed on a 1:1 association whose foreign key members are all non-nullable, deletes the object when the association is set to null.</summary>
      <returns>Setting to True deletes the object. The default value is False.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>Gets or sets delete behavior for an association.</summary>
      <returns>A string representing the rule.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets the member as the foreign key in an association representing a database relationship.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>Gets or sets the indication of a uniqueness constraint on the foreign key.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>Gets or sets one or more members of the target entity class as key values on the other side of the association.</summary>
      <returns>Default = Id of the related class.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>Gets or sets members of this entity class to represent the key values on this side of the association.</summary>
      <returns>Default = Id of the containing class.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>A mapping source that uses attributes on the context to create the mapping model.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" /> class.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>Instructs the runtime how to retrieve the value after an insert or update operation.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>Automatically selects the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>Always returns the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>Never returns the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>Returns the value only after an insert operation.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>Returns the value only after an update operation.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>Associates a class with a column in a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>Gets or sets the <see cref="T:System.Data.Linq.Mapping.AutoSync" /> enumeration.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.AutoSync" /> value.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>Gets or sets whether a column can contain null values.</summary>
      <returns>Default = true.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>Gets or sets the type of the database column.</summary>
      <returns>See Remarks.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>Gets or sets whether a column is a computed column in a database.</summary>
      <returns>Default = empty.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>Gets or sets whether a column contains values that the database auto-generates.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>Gets or sets whether a column contains a discriminator value for a LINQ to SQL inheritance hierarchy.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>Gets or sets whether this class member represents a column that is part or all of the primary key of the table.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>Gets or sets whether the column type of the member is a database timestamp or version number.</summary>
      <returns>Default value = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>Gets or sets how LINQ to SQL approaches the detection of optimistic concurrency conflicts.</summary>
      <returns>Default = <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, unless <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> is true for a member.Other values are <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> and <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>Provides members to describe attributes of data in columns.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DataAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>Gets or sets the name of a column.</summary>
      <returns>The name.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>Gets or sets a private storage field to hold the value from a column.</summary>
      <returns>The name of the storage field. </returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>Specifies certain attributes of a class that represents a database.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>Gets or sets the name of the database.</summary>
      <returns>The name.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>Associates a method with a stored procedure or user-defined function in the database.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>Gets or sets whether a method is mapped to a function or to a stored procedure.</summary>
      <returns>true if a function; false if a stored procedure.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>Gets or sets the name of the function.</summary>
      <returns>The name of the function or stored procedure.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>Maps an inheritance hierarchy in a LINQ to SQL application. </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>Gets or sets the discriminator code value in a mapped inheritance hierarchy.</summary>
      <returns>Must be user-specified. There is no default value.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>Gets or sets whether an object of this type in instantiated when the discriminator value does not match a specified value.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>Gets or sets the type of the class in the hierarchy.</summary>
      <returns>Must be user-specified. There is no default value.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>Represents a source for mapping information.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MappingSource" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>Creates a new mapping model.</summary>
      <returns>The meta-model created to match the current mapping scheme.</returns>
      <param name="dataContextType">The type of <see cref="T:System.Data.Linq.DataContext" /> on which to base the mapping.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>Returns the mapping model.</summary>
      <returns>The mapping model associated with this mapping source.</returns>
      <param name="dataContextType">The type of <see cref="T:System.Data.Linq.DataContext" /> of the model to be returned.</param>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>Represents an accessor to a member.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>Specifies an object on which to set a value or from which to get a value.</summary>
      <returns>The boxed value of this instance.</returns>
      <param name="instance">The instance from which to get the value or on which to set the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>Specifies whether the instance has an assigned value.</summary>
      <returns>true if the instance currently has an assigned value; otherwise, false.</returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>Specifies whether the instance has a value loaded from a deferred source.</summary>
      <returns>true if the instance currently has a value loaded from a deferred source; otherwise, false. </returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>Specifies whether the instance has a loaded or assigned value.</summary>
      <returns>true if the instance currently has a loaded or assigned value; otherwise, false. </returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>Sets the value as an object.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>Gets the type of the member accessed by this accessor.</summary>
      <returns>The type of the member.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>A strongly typed version of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> class.</summary>
      <typeparam name="TEntity">The type of the source.</typeparam>
      <typeparam name="TMember">The type of the member of that source.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>Specifies an object on which to set a value or from which to get a value.</summary>
      <returns>The boxed value of this instance.</returns>
      <param name="instance">The instance from which to get the value or on which to set the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>Specifies the strongly typed value.</summary>
      <returns>The value of this instance.</returns>
      <param name="instance">The instance from which to get the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>Specifies an instance on which to set the boxed value.</summary>
      <param name="instance">The instance into which to set the boxed value.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>Specifies an instance on which to set the strongly typed value.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">The strongly typed value to set.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>Gets the type of the member accessed by this accessor. </summary>
      <returns>The member type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>Represents an association relationship between two entity types.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>Gets whether the object should be deleted when the association is set to null.</summary>
      <returns>If true, the object is deleted when the association is set to null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>Gets the behavior when the child is deleted.</summary>
      <returns>The string representing the rule, or null if no action is specified on delete.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>Gets whether the other type is the parent of this type.</summary>
      <returns>Returns true is the other type is the parent of this type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>Gets whether the association represents a one-to-many relationship.</summary>
      <returns>Returns true if the association represents a one-to-many relationship.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>Gets whether the association can be null.</summary>
      <returns>Returns true if the association can be null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>Gets whether the association is unique.</summary>
      <returns>Returns true if the association is unique.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>Gets a list of members that represents the values on the other side of the association.</summary>
      <returns>Returns a collection representing values on the other side of the association.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>Gets whether the <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms the identity of the other type.</summary>
      <returns>true if the <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms the identity (primary key) of the other type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>Gets the member on the other side of this association that represents the reverse association.</summary>
      <returns>The member on the other side.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>Gets the type on the other side of the association.</summary>
      <returns>The type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>Gets a list of members representing the values on this side of the association.</summary>
      <returns>A collection.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>Gets whether <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> forms the identity of this type.</summary>
      <returns>true if <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> forms the identity (primary key) of the association.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>Gets the member on this side that represents the association.</summary>
      <returns>The member.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>Represents the mapping between a field or a property of a domain object into a column of a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> that corresponds to this member.</summary>
      <returns>The corresponding <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> if one exists; otherwise, null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>Gets the read-back behavior for this member for insert and update operations. </summary>
      <returns>An <see cref="T:System.Data.Linq.Mapping.AutoSync" /> enumeration.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>Gets whether the value of this member can be assigned the null value.</summary>
      <returns>true if this member can be assigned the null value; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>Gets the type of the corresponding database column.</summary>
      <returns>The type of the database column as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> that contains this data member.</summary>
      <returns>The meta-type that contains the current member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>Gets the accessor that is used to get and set the deferred source of this member.</summary>
      <returns>The accessor used to access the deferred source for this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>Gets the accessor that is used to get and set the deferred value of this member (without causing fetch).</summary>
      <returns>The accessor used to access the deferred value for this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>Gets the expression that defines a computed column.</summary>
      <returns>The expression for the computed column as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>Gets whether this member defines an association relationship.</summary>
      <returns>true if this member defines an association relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>Gets whether this member is automatically generated by the database.</summary>
      <returns>true if this member is automatically generated by the database; otherwise false.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>Specifies whether this member is declared by the specified type.</summary>
      <returns>true if this member is declared by the specified type; otherwise, false.</returns>
      <param name="type">The type to check.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>Gets whether the default behavior is to load this member on a deferred basis.</summary>
      <returns>true if this member loaded on a deferred basis by default; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>Gets whether this member represents the inheritance discriminator.</summary>
      <returns>true if this member represents the inheritance discriminator; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>Gets whether this member is mapped to a column (or constraint).</summary>
      <returns>true if this member is mapped to a column (or constraint); otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>Gets whether this member is part of the type's identity.</summary>
      <returns>true if this member is part of the type's identity; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>Gets whether this member represents the row version or timestamp.</summary>
      <returns>true if this member represents the row version or timestamp; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform load operations.</summary>
      <returns>The load method as <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>Gets the name of the column (or constraint) in the database.</summary>
      <returns>The name of the column (or constraint) as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>Gets the underlying <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Member attribute and metadata information.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>Gets the accessor that is used to get or set the value of this member.</summary>
      <returns>The accessor.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>Gets the name of the member, same as the <see cref="T:System.Reflection.MemberInfo" /> name.</summary>
      <returns>The name, same as the <see cref="T:System.Reflection.MemberInfo" /> name.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>Gets the ordinal position of this member in the default layout of query results.</summary>
      <returns>The ordinal position.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>Gets the accessor that is used to get or set the storage value of this member.</summary>
      <returns>The accessor for the storage value of this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>Gets the member that stores the data for this member.</summary>
      <returns>The storage member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>Gets the type of this member.</summary>
      <returns>The type of the current member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>Gets the optimistic concurrency check policy for this member.</summary>
      <returns>An <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> enum.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>Represents the mapping between a context method and a database function.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>Gets whether or not the stored procedure has multiple result types.</summary>
      <returns>true if the stored procedure has multiple result types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>Gets whether the function can be composed within a query.</summary>
      <returns>true if the function can be composed within a query.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>Gets the name of the database function or procedure.</summary>
      <returns>A string representing the name of the database function or procedure.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>Gets the underlying context method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that corresponds with the underlying context method.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this function.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" /> object that contains this function.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>Gets the name of the method.</summary>
      <returns>A string that represents the name of the method.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>Gets an enumeration of the function parameters.</summary>
      <returns>A collection of the parameters.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>Gets the enumeration of possible result row types.</summary>
      <returns>A collection of possible types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>Gets the return parameter.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> that corresponds to the return parameter.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>An abstraction that represents the mapping between a database and domain objects.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>Gets the type of <see cref="T:System.Data.Linq.DataContext" /> type that this model describes.</summary>
      <returns>The data context type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>Gets the name of the database.</summary>
      <returns>The database name as a string.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> that corresponds to a database function.</summary>
      <returns>The meta-function that corresponds to a database function.</returns>
      <param name="method">The method defined on the <see cref="T:System.Data.Linq.DataContext" /> or subordinate class that represents the database function.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>Gets an enumeration of all functions.</summary>
      <returns>An enumeration that can be used to iterate through all functions.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>Discovers the <see cref="T:System.Data.Linq.Mapping.MetaType" /> for the specified <see cref="T:System.Type" />.</summary>
      <returns>A meta-type that corresponds to the specified type.</returns>
      <param name="type">The type for which the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is sought.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> associated with a specified <see cref="T:System.Type" />.</summary>
      <returns>A meta-table associated with the specified row type.</returns>
      <param name="rowType">The common language runtime (CLR) row type.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>Get an enumeration of all tables.</summary>
      <returns>An enumerator that can be used to iterate over the tables. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>Gets the mapping source that originated this model.</summary>
      <returns>The originating mapping source.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>Gets or sets the provider type.</summary>
      <returns>The provider type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>Represents the mapping between a method parameter and a database function parameter.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>Gets the database type of the parameter.</summary>
      <returns>The database type of the parameter as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>Gets the name of the parameter in the database function.</summary>
      <returns>The name as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>Gets the underlying method parameter.</summary>
      <returns>The underlying method parameter.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>Gets the common language runtime (CLR) type of the parameter.</summary>
      <returns>The type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>Represents an abstraction of a database table or view.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform delete operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for delete operations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform insert operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for insert operations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this <see cref="T:System.Data.Linq.Mapping.MetaTable" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that includes this MetaTable.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> that describes the type of the rows of the table.</summary>
      <returns>The type of rows in the table.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>Gets the name of the table as defined by the database.</summary>
      <returns>A string representing the name of the table.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform update operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for update operations.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>Represents the mapping of a domain object type to the columns of a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaType" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>Gets an enumeration of all the associations.</summary>
      <returns>A collection of associations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>Gets whether the underlying type can be instantiated as the result of a query.</summary>
      <returns>true if the underlying type can be instantiated as the result of a query; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>Gets an enumeration of all the data members (fields and properties).</summary>
      <returns>A collection of the data members.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>Gets the member that represents the auto-generated identity column. </summary>
      <returns>The member that represents the auto-generated identity column, or null if there is no auto-generated identity column.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>Gets an enumeration of the immediate derived types in an inheritance hierarchy.</summary>
      <returns>An enumeration of meta-types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>Gets the member that represents the inheritance discriminator column.</summary>
      <returns>The member that represents the inheritance discriminator column, or null if there is none.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> associated with the specified member.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> if one is associated with the specified member; otherwise, null. </returns>
      <param name="member">The member for which the associated <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> is sought.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> for an inheritance subtype.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaType" /> for an inheritance subtype.</returns>
      <param name="type">The subtype.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>Gets the meta-type associated with the specified inheritance code.</summary>
      <returns>The meta-type associated with the specified inheritance code.</returns>
      <param name="code">The inheritance code.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Data.Linq.Mapping.MetaType" /> or any of its bases types has an OnLoaded method.</summary>
      <returns>true if the meta-type or any base meta-type has an OnLoaded method; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Linq.Mapping.MetaType" /> or any of its bases types has an OnValidate method.</summary>
      <returns>true if the meta-type or any base meta-type has an OnValidate method; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>Gets a value indicating whether the type is part of a mapped inheritance hierarchy.</summary>
      <returns>true if the type is part of a mapped inheritance hierarchy; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>Gets a value indicating whether this type defines an inheritance code.</summary>
      <returns>true if this type defines an inheritance code; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>Gets a value indicating whether the type has any persistent member that may require a test for optimistic concurrency conflicts. </summary>
      <returns>true if the type has any persistent member with an <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> policy other than <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>Gets an enumeration of all the data members that define the unique identity of the type.</summary>
      <returns>An enumeration of members that define the unique identity of the type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>Gets the base meta-type in the inheritance hierarchy.</summary>
      <returns>The base meta-type for the current inheritance hierarchy.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>Gets a value indicating whether this type defines an inheritance code.</summary>
      <returns>true if this type defines an inheritance code; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>Gets a value indicating whether this type is used as the default of an inheritance hierarchy.</summary>
      <returns>The metadata for the default type in the inheritance mapping.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>Gets the root type of the inheritance hierarchy.</summary>
      <returns>The root type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>Gets a collection of all types that are defined by an inheritance hierarchy.</summary>
      <returns>A collection of meta-types in the current inheritance hierarchy.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is an entity type.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is an entity type; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>Gets a value indicating whether this type is used as the default of an inheritance hierarchy.</summary>
      <returns>true if this type is used as the default of an inheritance hierarchy; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The containing meta-model.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>Gets the name of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The name of the current meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>Gets information about the OnLoaded method contained by this meta-type.</summary>
      <returns>A description of the OnLoaded method for this meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>Gets information about the OnValidate method contained by this meta-type.</summary>
      <returns>A description of the OnValidate method for this meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>Gets a collection of all the persistent data members.</summary>
      <returns>A collection of all the meta-data members in the current type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> that uses this <see cref="T:System.Data.Linq.Mapping.MetaType" /> for row definition.</summary>
      <returns>A meta-table that uses the current meta-type for its row definition. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>Gets the underlying common language runtime (CLR) type.</summary>
      <returns>The associated CLR type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>Gets a row-version or timestamp column for this <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The meta-data member that represents the row-version or timestamp column for this meta-type, or null if there is none.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>Enables specification of mapping details for a stored procedure method parameter.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>Gets or sets the type of the parameter for a provider-specific database.</summary>
      <returns>The type as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>Gets or sets the name of the parameter.</summary>
      <returns>The name as a string.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>Specifies which database provider to use.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
      <param name="type">The provider type to use to construct the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>Gets the type of the provider that is used to construct the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
      <returns>The type of the provider.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>Used to specify each type of result; for functions having various result types.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" /> class.</summary>
      <param name="type">The type of the result returned by a function having various result types.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>Gets the valid or expected type mapping for a function having various result types.</summary>
      <returns>The type of result (<see cref="T:System.Type" />).</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>Designates a class as an entity class that is associated with a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>Gets or sets the name of the table or view.</summary>
      <returns>By default, the value is the same as the name of the class.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>Specifies when objects are to be tested for concurrency conflicts.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>Always check. This is the default unless <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> is true for a member.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>Never check.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>Check only when the object has been changed.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>Represents a mapping source that uses an external XML mapping file to create the model.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>Creates a mapping source from an XML reader.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="reader">An XML reader.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>Creates a mapping source from XML in a stream.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="stream">A stream of XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>Creates a mapping source from XML that is loaded from a URL.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="url">The URL pointing to the XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>Creates a mapping source from an XML string. </summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="xml">A string that contains XML.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2000.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" /> class. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2005.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" /> class. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2008.  </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" /> class.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>Provides helper methods for operations that match string patterns.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text before and following it.</summary>
      <returns>A search pattern string that contains the specified string and the '%' character before and after it.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text before it but not following it.</summary>
      <returns>A search pattern string that contains the '%' character followed by the specified string.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text after it but not before it.</summary>
      <returns>A search pattern string that contains the specified string followed by the '%' character.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>Translates a search pattern for the Visual Basic Like operator to a search pattern for the SQL Server LIKE operator.</summary>
      <returns>A search pattern for the SQL Server LIKE operator that corresponds to the specified Visual Basic Like search pattern.</returns>
      <param name="pattern">The Visual Basic Like search pattern to translate to a SQL Server LIKE search pattern.</param>
      <param name="escape">The character to use to escape special SQL characters or the escape character itself.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>Provides methods that correspond to SQL Server functions. Methods in the <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> class are only supported in LINQ to SQL queries.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>Counts the number of day boundaries between two non-nullable dates.</summary>
      <returns>The number of day boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of day boundaries between two non-nullable dates.</summary>
      <returns>The number of day boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of day boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of day boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of day boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of day boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>Counts the number of hour boundaries between two non-nullable dates.</summary>
      <returns>The number of hour boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of hour boundaries between two non-nullable dates.</summary>
      <returns>The number of hour boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of hour boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of hour boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of hour boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of hour boundaries between the two specified dates. When one or both parameters are null, returns a null value is returned.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of microsecond boundaries between two non-nullable dates.</summary>
      <returns>The number of microsecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of microsecond boundaries between two non-nullable dates.</summary>
      <returns>The number of microsecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of microsecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of microsecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of microsecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of microsecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of millisecond boundaries between two non-nullable dates.</summary>
      <returns>The number of millisecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of millisecond boundaries between two non-nullable dates.</summary>
      <returns>The number of millisecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of millisecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of millisecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of millisecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of millisecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>Counts the number of minute boundaries between two non-nullable dates.</summary>
      <returns>The number of minute boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of minute boundaries between two non-nullable dates.</summary>
      <returns>The number of minute boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of minute boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of minute boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of minute boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of minute boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>Counts the number of month boundaries between two non-nullable dates.</summary>
      <returns>The number of month boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of month boundaries between two non-nullable dates.</summary>
      <returns>The number of month boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of month boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of month boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of month boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of month boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of nanosecond boundaries between two non-nullable dates.</summary>
      <returns>The number of nanosecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of nanosecond boundaries between two non-nullable dates.</summary>
      <returns>The number of nanosecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of nanosecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of nanosecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of nanosecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of nanosecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of second boundaries between two non-nullable dates.</summary>
      <returns>The number of second boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of second boundaries between two non-nullable dates.</summary>
      <returns>The number of second boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of second boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of second boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of second boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of second boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>Counts the number of year boundaries between two non-nullable dates.</summary>
      <returns>The number of year boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of year boundaries between two non-nullable dates.</summary>
      <returns>The number of year boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of year boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of year boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of year boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of year boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>Determines whether a specific character string matches a specified pattern. This method is currently only supported in LINQ to SQL queries.</summary>
      <returns>true if <paramref name="matchExpression" /> matches the pattern; otherwise, false.</returns>
      <param name="matchExpression">The string to be searched for a match.</param>
      <param name="pattern">The pattern, which may include wildcard characters, to match in <paramref name="matchExpression" />.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>Determines whether a specific character string matches a specified pattern. This method is currently only supported in LINQ to SQL queries.</summary>
      <returns>true if <paramref name="matchExpression" /> matches the pattern; otherwise, false.</returns>
      <param name="matchExpression">The string to be searched for a match.</param>
      <param name="pattern">The pattern, which may include wildcard characters, to match in <paramref name="matchExpression" />.</param>
      <param name="escapeCharacter">The character to put in front of a wildcard character to indicate that it should be interpreted as a regular character and not as a wildcard character.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>Contains functionality to connect to and communicate with a SQL Server.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>Releases managed references and closes connections opened by the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>Optionally releases managed references and closes connections opened by the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
      <param name="disposing">true to release managed references and close connections; otherwise, false.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>Defines methods for dynamically materializing objects.</summary>
      <typeparam name="TDataReader">The type of the data reader.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" /> class. </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>Represents a reader that reads data rows in a forward-only manner. </summary>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>When overridden in a derived class, gets a value that indicates whether deferred loading is enabled.</summary>
      <returns>true if deferred loading is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>Changes the type of each element in a specified sequence.</summary>
      <returns>A sequence that contains the type-converted elements.</returns>
      <param name="source">A sequence that contains elements to convert.</param>
      <typeparam name="TOutput">The type to convert the elements to.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>Creates a group from a specified key and collection of values.</summary>
      <returns>A group that has the specified key and the specified collection of values.</returns>
      <param name="key">The key for the group.</param>
      <param name="items">The values for the group.</param>
      <typeparam name="TKey">The type of the key of the group.</typeparam>
      <typeparam name="TElement">The type of the values in the group.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an ordered sequence from a specified collection of values.</summary>
      <returns>An ordered sequence that contains the specified values.</returns>
      <param name="items">The values to put in the ordered sequence.</param>
      <typeparam name="TElement">The type of the values in the ordered sequence.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>Represents a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>Returns an exception that indicates that a null value was tried to be assigned to a non-nullable value type.</summary>
      <returns>An exception that indicates that a null value was attempted to be assigned to a non-nullable value type.</returns>
      <param name="type">The type to which a null value was attempted to be assigned.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>When overridden in a derived class, executes a query.</summary>
      <returns>The results from executing the query.</returns>
      <param name="iSubQuery">The index of the query.</param>
      <param name="args">The arguments to the query.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="keyValues">The key values for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="instance">The instance for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>When overridden in a derived class, inserts a value into a data structure.</summary>
      <returns>The value that was inserted into the data structure.</returns>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The object to insert into the data structure.</param>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>Represents column ordinals of a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>When overridden in a derived class, advances the reader to the next record.</summary>
      <returns>true if there are more rows; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>When overridden in a derived class, invokes the method represented by <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />.</summary>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The parameter to pass to the invoked method.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Microsoft.JScript.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.JScript</name>
  </assembly>
  <members>
    <member name="T:Microsoft.JScript.ActivationObject">
      <summary>Represents an object that is taking part in a scope hierarchy. This class contains methods for resolving scope and for getting member information. It belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>Creates a new global variable, using the specified name, value, and attributes.</summary>
      <returns>A global variable that has the specified name, value, and attributes.</returns>
      <param name="name">The name of the field.</param>
      <param name="attributeFlags">A bitwise combination of the enumeration values that describe the attributes of a field. <see cref="F:System.Reflection.FieldAttributes.Static" /> is added automatically.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="F:Microsoft.JScript.ActivationObject.field_table">
      <summary>Stores an array of variables that are in scope.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetDefaultThisObject">
      <summary>Gets the current default scope, which is either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetField(System.String,System.Int32)">
      <summary>Returns a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetGlobalScope">
      <summary>Gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that corresponds to all members of the current object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>Gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="T:Microsoft.JScript.ActiveXObjectConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ActiveXObjectConstructor.Invoke">
      <summary>Returns null in all cases.</summary>
      <returns>null.</returns>
    </member>
    <member name="T:Microsoft.JScript.ArgumentsObject">
      <summary>Represents the information that is used to call a function. This includes the function, the caller, the arguments, and information about the stack frame. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.callee">
      <summary>A closure function that represents the function that is being called.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.caller">
      <summary>The calling scope information from the stack frame.</summary>
    </member>
    <member name="F:Microsoft.JScript.ArgumentsObject.length">
      <summary>The number of arguments.</summary>
    </member>
    <member name="T:Microsoft.JScript.ArrayConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])">
      <summary>Helper method that creates a new array and populates it with the specified values.</summary>
      <returns>The new array.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayConstructor.Invoke(System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayLiteral">
      <summary>This class is used by the JScript parser to represent an array literal.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayLiteral.#ctor(Microsoft.JScript.Context,Microsoft.JScript.ASTList)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ArrayLiteral" /> class, specifying the context and elements.</summary>
      <param name="context">The current document context.</param>
      <param name="elements">The elements of the array.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayObject">
      <summary>Represents an array object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ArrayObject.length">
      <summary>Gets or sets the length of the array.</summary>
      <returns>The length of the array.</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayObject.SpliceSlowly(System.UInt32,System.UInt32,System.Object[],Microsoft.JScript.ArrayObject,System.UInt32,System.UInt32)">
      <summary>Adds elements to and removes elements from an array, at the specified position in the array. You can add elements, remove elements, or both.</summary>
      <param name="start">The position in this array at which to add and remove elements.</param>
      <param name="deleteCount">The number of elements to remove, if any.</param>
      <param name="args">The elements to add, if any.</param>
      <param name="outArray">An array that contains the elements removed from this array, if any have been removed.</param>
      <param name="oldLength">The previous length of this array.</param>
      <param name="newLength">The new length of this array.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.ArrayObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])">
      <summary>Concatenates objects or arrays to the end of the specified object or array.</summary>
      <returns>
        <paramref name="thisob" /> and <paramref name="args" /> concatenated.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="args">The objects or arrays to append to <paramref name="thisob" />.</param>
    </member>
    <member name="P:Microsoft.JScript.ArrayPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)">
      <summary>Concatenates the elements of the specified array into a string. The elements are separated by the specified separator.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="separator">The string to use to separate the elements. The default is a comma.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)">
      <summary>Removes the last element from the specified array and returns it.</summary>
      <returns>The last element of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])">
      <summary>Adds new elements to the end of the specified array.</summary>
      <returns>The new length of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The elements to add to <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)">
      <summary>Reverses the elements of the specified array.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)">
      <summary>Removes the first element from the specified array and returns it. Shifts the remaining elements to the previous positions. </summary>
      <returns>The first element of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)">
      <summary>Creates a new array that contains the specified consecutive elements from the specified array.</summary>
      <returns>A new array that contains the consecutive elements between <paramref name="thisob" />[<paramref name="start" />] and <paramref name="thisob" />[<paramref name="end" />].</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="start">The first consecutive element to get.</param>
      <param name="end">The last consecutive element to get.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)">
      <summary>Sorts the elements of the specified array by using the specified function to compare the elements.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="function">The function to use to compare elements.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])">
      <summary>Adds and removes elements from an array at the specified position in the array. You can add elements, remove elements, or both.</summary>
      <returns>A new array that contains the elements removed from <paramref name="thisob" />, if any have been removed.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="start">The position in the array to add and remove elements.</param>
      <param name="deleteCnt">The number of elements to remove, if any.</param>
      <param name="args">The elements to add, if any.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object that concatenates the elements and separates them with a <see cref="P:System.Globalization.TextInfo.ListSeparator" /> and a space.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" /> and separates them with a <see cref="P:System.Globalization.TextInfo.ListSeparator" /> and a space.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object that concatenates the elements and separates them with a comma.</summary>
      <returns>A string that concatenates the elements of <paramref name="thisob" /> and separates them with a comma.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])">
      <summary>Adds new elements to the start of the specified array. Shifts the existing elements to the next positions.</summary>
      <returns>The new length of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The elements to add to <paramref name="thisob" />.</param>
    </member>
    <member name="T:Microsoft.JScript.ArrayWrapper">
      <summary>Wraps an array to create a JScript <see cref="T:Microsoft.JScript.ArrayObject" />. This class wraps either a .NET Framework <see cref="T:System.Array" /> object or a JScript <see cref="T:Microsoft.JScript.ArrayObject" /> object. </summary>
    </member>
    <member name="M:Microsoft.JScript.ArrayWrapper.GetType">
      <summary>Gets the type of the array.</summary>
      <returns>The type of <see cref="T:System.Array" /> or <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.ArrayWrapper.length">
      <summary>Gets the length of the array.</summary>
      <returns>The length of the array.</returns>
    </member>
    <member name="T:Microsoft.JScript.AssemblyCustomAttributeList">
      <summary>This class is used by the JScript parser to store the attributes that are assigned to an assembly.</summary>
    </member>
    <member name="T:Microsoft.JScript.AST">
      <summary>Represents the abstract syntax tree that is used to parse JScript code.</summary>
    </member>
    <member name="T:Microsoft.JScript.ASTList">
      <summary>Maintains a list of <see cref="T:Microsoft.JScript.AST" /> elements. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.BinaryOp">
      <summary>Represents the base class for classes that perform operations on two operands, such as <see cref="T:Microsoft.JScript.Plus" />, <see cref="T:Microsoft.JScript.Equality" />, and <see cref="T:Microsoft.JScript.Relational" />. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BinaryOp.GetOperator(System.Reflection.IReflect,System.Reflection.IReflect)">
      <summary>Determines the best method to call based on the operation that is requested and the data types of the operands.</summary>
      <returns>The recommended method to call on the operands.</returns>
      <param name="ir1">The data type of the first operand.</param>
      <param name="ir2">The data type of the second operand.</param>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand1">
      <summary>Represents the first operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operand2">
      <summary>Represents the second operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorMeth">
      <summary>Represents the operation that is actually performed.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.operatorTok">
      <summary>Represents the operation that is requested. One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type1">
      <summary>Represents the data type of the first operand of the operation.</summary>
    </member>
    <member name="F:Microsoft.JScript.BinaryOp.type2">
      <summary>Represents the data type of the second operand of the operation.</summary>
    </member>
    <member name="T:Microsoft.JScript.Binding">
      <summary>Represents a reference to a class member, callable expression, or variable name. This class attempts to resolve the reference to the correct value at compile time. </summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.defaultMember">
      <summary>Stores a reference to a default indexed property.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.GetObject">
      <summary>When overridden in a derived class, gets the object that the binding reference is defined on.</summary>
      <returns>The object that the binding reference is defined on.</returns>
    </member>
    <member name="M:Microsoft.JScript.Binding.HandleNoSuchMemberError">
      <summary>When overridden in a derived class, handles situations in which the binding reference is to a member that cannot be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isAssignmentToDefaultIndexedProperty">
      <summary>Stores a value that indicates whether the binding reference is to a default indexed property.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.isFullyResolved">
      <summary>Stores a value that indicates whether the binding reference is fully resolved.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.IsMissing(System.Object)">
      <summary>Determines whether the specified object is equivalent to <see cref="T:Microsoft.JScript.Missing" />.</summary>
      <returns>true if <paramref name="value" /> is equivalent to <see cref="T:Microsoft.JScript.Missing" />; otherwise, false.</returns>
      <param name="value">The object to compare.</param>
    </member>
    <member name="F:Microsoft.JScript.Binding.isNonVirtual">
      <summary>Stores a value that indicates whether the binding reference is to a member that overrides a member in a base class.</summary>
    </member>
    <member name="F:Microsoft.JScript.Binding.name">
      <summary>Stores a string that identifies the binding reference.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.ResolveRHValue">
      <summary>Resolves the right-hand side of the binding reference.</summary>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILObject(System.Reflection.Emit.ILGenerator,System.Type,System.Boolean)">
      <summary>When overridden in a derived class, generates Microsoft intermediate language (MSIL) code for the object that the binding reference is defined on.</summary>
      <param name="il">An object that generates Microsoft intermediate language (MSIL) instructions.</param>
      <param name="obtype">The type of the object.</param>
      <param name="noValue">true if the object does not have a value; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Binding.TranslateToILWithDupOfThisOb(System.Reflection.Emit.ILGenerator)">
      <summary>When overridden in a derived class, generates Microsoft intermediate language (MSIL) code for the binding reference. If necessary, copies the current topmost value on the evaluation stack and then pushes the copy onto the evaluation stack.</summary>
      <param name="il">An object that generates Microsoft intermediate language (MSIL) instructions.</param>
    </member>
    <member name="T:Microsoft.JScript.BitwiseBinary">
      <summary>Performs bitwise binary operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BitwiseBinary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.BitwiseBinary.EvaluateBitwiseBinary(System.Object,System.Object)">
      <summary>Performs a bitwise binary operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.Block">
      <summary>Represents a block in JScript. This class is used mainly by the <see cref="T:Microsoft.JScript.JSParser" /> to create <see cref="T:Microsoft.JScript.Block" /> objects when it parses code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.BlockScope">
      <summary>Represents the scope of a block of code that is taking part in a scope hierarchy and that can be pushed onto the global scope stack. For example, this class can represent the scope of a try block. </summary>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.#ctor(Microsoft.JScript.ScriptObject,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BlockScope" /> class.</summary>
      <param name="parent">The parent of the scope.</param>
      <param name="name">The name of the scope.</param>
      <param name="scopeId">The ID of the scope.</param>
    </member>
    <member name="M:Microsoft.JScript.BlockScope.CreateField(System.String,System.Reflection.FieldAttributes,System.Object)">
      <summary>Creates a new scope variable, using the specified name, value, and attributes.</summary>
      <returns>A scope variable that has the specified name, value, and attributes.</returns>
      <param name="name">The name of the field.</param>
      <param name="attributeFlags">A bitwise combination of the enumeration values that describe the attributes of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanConstructor.Invoke(System.Object)">
      <summary>Invokes a method of a prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="arg">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.BooleanObject">
      <summary>Represents a Boolean object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.#ctor(Microsoft.JScript.ScriptObject,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BooleanObject" /> class, specifying the parent and subtype.</summary>
      <param name="prototype">The parent of the object.</param>
      <param name="subType">The subtype of the object.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanObject.GetType">
      <summary>Returns <see cref="T:System.Boolean" /> or <see cref="T:Microsoft.JScript.BooleanObject" />.</summary>
      <returns>
        <see cref="T:System.Boolean" /> or <see cref="T:Microsoft.JScript.BooleanObject" />.</returns>
    </member>
    <member name="T:Microsoft.JScript.BooleanPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.BooleanObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.#ctor(Microsoft.JScript.ObjectPrototype,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
      <param name="parent">A static instance of the parent class of this class.</param>
      <param name="baseType">An instance of the type of this class.</param>
    </member>
    <member name="P:Microsoft.JScript.BooleanPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object by using the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
      <returns>A string representation of <paramref name="thisob" /> that is created by the <see cref="T:Microsoft.JScript.Convert" /> class.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)">
      <summary>Returns the specified object as a <see cref="T:Microsoft.JScript.BooleanObject" /> or a <see cref="T:System.Boolean" />.</summary>
      <returns>
        <paramref name="thisob" /> as a <see cref="T:Microsoft.JScript.BooleanObject" /> or a <see cref="T:System.Boolean" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.BreakOutOfFinally">
      <summary>Represents the exception state when code execution breaks out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified target.</summary>
      <param name="target">The target of the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.BreakOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Microsoft.JScript.BreakOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />. The stored information includes the <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> value.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="F:Microsoft.JScript.BreakOutOfFinally.target">
      <summary>Stores the target of the exception.</summary>
    </member>
    <member name="T:Microsoft.JScript.Closure">
      <summary>Represents a closure function. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.#ctor(Microsoft.JScript.FunctionObject)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Closure" /> class.</summary>
      <param name="func">The function that this closure represents.</param>
    </member>
    <member name="F:Microsoft.JScript.Closure.arguments">
      <summary>The arguments to use for the function.</summary>
    </member>
    <member name="F:Microsoft.JScript.Closure.caller">
      <summary>The calling scope information from the stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.Closure.ToString">
      <summary>Creates a string representation of the function, such as the name of the function or the context.</summary>
      <returns>A string representation of the function.</returns>
    </member>
    <member name="T:Microsoft.JScript.CmdLineError">
      <summary>Specifies errors that occur when you run the command-line compiler jsc.exe. This enumeration is used to create <see cref="T:Microsoft.JScript.CmdLineException" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoError">
      <summary>No error. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.AssemblyNotFound">
      <summary>The referenced assembly '{0}' could not be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CannotCreateEngine">
      <summary>Cannot create JScript engine.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.CompilerConstant">
      <summary>Cannot change value of compiler constant '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateFileAsSourceAndAssembly">
      <summary>Duplicate file name: '{0}' is listed as both a source file and an imported assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceFile">
      <summary>Resource file '{0}' referenced more than once.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateResourceName">
      <summary>Resource name '{0}' is not unique.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.DuplicateSourceFile">
      <summary>Duplicate file name: '{0}' is listed as a source file more than once.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ErrorSavingCompiledState">
      <summary>Error saving compiled state: {0}.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.IncompatibleTargets">
      <summary>The value of the <see cref="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" /> property is not compatible with target type '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidAssembly">
      <summary>'{0}' is not a valid assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCharacters">
      <summary>File name '{0}' contains invalid characters (wildcard characters are not supported).</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidCodePage">
      <summary>Code page '{0}' is invalid or not installed.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidDefinition">
      <summary>Definition '{0}' must be assigned a Boolean or integral value.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidForCompilerOptions">
      <summary>'{0}' is not allowed in the CompilerOptions field.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidLocaleID">
      <summary>Locale ID '{0}' is invalid or not installed.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidPlatform">
      <summary>Platform '{0}' is invalid. Specify 'x86', 'Itanium', 'x64', or 'anycpu'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidTarget">
      <summary>Target '{0}' is invalid. Specify 'exe' or 'library'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidSourceFile">
      <summary>'{0}' is not a valid source file.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidVersion">
      <summary>'{0}' is not a valid version string.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.InvalidWarningLevel">
      <summary>Invalid warning level specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ManagedResourceNotFound">
      <summary>Managed resource '{0}' was not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingDefineArgument">
      <summary>Missing identifier for '-define:' command-line option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingExtension">
      <summary>Missing file extension for '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingLibArgument">
      <summary>Missing file specification for '-lib:' command-line option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingReference">
      <summary>Missing reference in argument list '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MissingVersionInfo">
      <summary>Missing version information in -assembly.version option.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleOutputNames">
      <summary>Multiple output file names specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleTargets">
      <summary>Multiple targets specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.MultipleWin32Resources">
      <summary>Cannot specify more than one Win32 resource file.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NestedResponseFiles">
      <summary>Cannot process nested response files.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoCodePage">
      <summary>No code page is specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoFileName">
      <summary>No file name specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoInputSourcesSpecified">
      <summary>No input sources specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoLocaleID">
      <summary>No Locale ID is specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.NoWarningLevel">
      <summary>No warning level specified with option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.ResourceNotFound">
      <summary>Win32 resource '{0}' was not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceFileTooBig">
      <summary>Source file too big.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.SourceNotFound">
      <summary>Could not find source file '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.UnknownOption">
      <summary>Unknown option '{0}'.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.Unspecified">
      <summary>Unspecified error.</summary>
    </member>
    <member name="F:Microsoft.JScript.CmdLineError.LAST">
      <summary>A placeholder enumeration member that contains the same value as the last (highest) assigned enumeration value.</summary>
    </member>
    <member name="T:Microsoft.JScript.CmdLineException">
      <summary>Represents errors that occur when you run the command-line compiler jsc.exe. </summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error code and culture information.</summary>
      <param name="errorCode">One of the enumeration values. Specifies what the error is.</param>
      <param name="culture">Culture-specific information.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(Microsoft.JScript.CmdLineError,System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error code, context, and culture information.</summary>
      <param name="errorCode">One of the enumeration values. Specifies what the error is.</param>
      <param name="context">The context in which the error occurred.</param>
      <param name="culture">Culture-specific information.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using serialized data.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores serialized object data about the exception that is being thrown.</summary>
      <param name="s">Serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination</param>
    </member>
    <member name="P:Microsoft.JScript.CmdLineException.Message">
      <summary>Gets a message that describes the current exception.</summary>
      <returns>The error message that explains the reason for the exception.</returns>
    </member>
    <member name="M:Microsoft.JScript.CmdLineException.ResourceKey(Microsoft.JScript.CmdLineError)">
      <summary>Returns the key for the specified error in a resource file.</summary>
      <returns>The key for <paramref name="errorCode" />.</returns>
      <param name="errorCode">One of the enumeration values. Specifies the error to get the key for.</param>
    </member>
    <member name="T:Microsoft.JScript.CmdLineOptionParser">
      <summary>Determines whether options that are specified to the command-line compiler jsc.exe are correctly formed, and reads the arguments if any are included.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.CmdLineOptionParser" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String)">
      <summary>Gets the argument from the specified command-line option. Applies to options that have only one name, such as /out:&lt;filename&gt;.</summary>
      <returns>The argument, "" if the argument is not specified, or null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsArgumentOption(System.String,System.String,System.String)">
      <summary>Gets the argument from the specified command-line option. Applies to options that can be specified by a short or long form of the option name, such as /r or /reference for /r[eference]:&lt;file list&gt;.</summary>
      <returns>The argument, "" if the argument is not specified, or null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="shortPrefix">The short form of the option name.</param>
      <param name="longPrefix">The long form of the option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String)">
      <summary>Gets the + or - argument from the specified command-line option. Applies to options that have only one name, such as /debug[+|-].</summary>
      <returns>false for -; true for + or if the argument is not specified; null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsBooleanOption(System.String,System.String,System.String)">
      <summary>Gets the + or - argument from the specified command-line option. Applies to options that can be specified by a short or long form of the option name.</summary>
      <returns>false for -; true for + or if the argument is not specified; null if the option or argument is not correctly formed.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="shortPrefix">The short form of the option name.</param>
      <param name="longPrefix">The long form of the option name.</param>
    </member>
    <member name="M:Microsoft.JScript.CmdLineOptionParser.IsSimpleOption(System.String,System.String)">
      <summary>Verifies that the specified option is correctly formed.</summary>
      <returns>true if the option is correctly formed; otherwise, false.</returns>
      <param name="option">The command-line option that the user specified.</param>
      <param name="prefix">The option name.</param>
    </member>
    <member name="T:Microsoft.JScript.COMCharStream">
      <summary>Represents a stream that sends its data to an <see cref="T:Microsoft.JScript.IMessageReceiver" />. The data is stored in a buffer until the data is flushed or the stream is closed. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.#ctor(Microsoft.JScript.IMessageReceiver)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMCharStream" /> class.</summary>
      <param name="messageReceiver">The receiver of the data of the stream.</param>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanRead">
      <summary>Gets a value that indicates whether the current stream supports reading.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanSeek">
      <summary>Gets a value that indicates whether the current stream supports seeking.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.CanWrite">
      <summary>Gets a value that indicates whether the current stream supports writing.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Close">
      <summary>Sends this stream's data to the <see cref="T:Microsoft.JScript.IMessageReceiver" /> and clears its buffer.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Flush">
      <summary>Sends this stream's data to the <see cref="T:Microsoft.JScript.IMessageReceiver" /> and clears its buffer.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Length">
      <summary>Gets the length of the stream.</summary>
      <returns>The length of the stream.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMCharStream.Position">
      <summary>Gets the current position in the stream. The set method does not do anything.</summary>
      <returns>The current position in the stream.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" /> exception in all cases.</returns>
      <param name="buffer">An array of bytes in which to store the data that is read from the stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data that is read from the stream.</param>
      <param name="count">The maximum number of bytes to read from the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position in the current stream. This method does not do anything. It always returns 0.</summary>
      <returns>0 in all cases.</returns>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name="origin">A value that indicates the reference point that is used to obtain the new position.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.SetLength(System.Int64)">
      <summary>Sets the length of the stream.</summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.COMCharStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes the specified byte data to the stream.</summary>
      <param name="buffer">An array of byte data to copy to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to copy from <paramref name="buffer" /> to the current stream.</param>
    </member>
    <member name="T:Microsoft.JScript.COMFieldInfo">
      <summary>Enables JScript to communicate with an external COM field. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMFieldInfo" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>null, because the type that declares this field is an external COM object.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldHandle">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM field.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM field.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.GetValue(System.Object)">
      <summary>Gets the value of the external COM field by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The value of the external COM field.</returns>
      <param name="obj">The argument list to pass to the external COM field. This parameter is ignored.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM field.</summary>
      <param name="name">The name of the external COM field that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM field.</param>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="t">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.Name">
      <summary>Gets the name of the external COM field that this object represents.</summary>
      <returns>The name of the external COM field that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMFieldInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the external COM field by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <param name="obj">The object whose field value will be set. This parameter is ignored.</param>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.COMMemberInfo">
      <summary>Defines methods that enable JScript to communicate with an external COM member. This interface is used by an external COM implementation to expose its objects to JScript because JScript requires a managed <see cref="T:System.Reflection.MemberInfo" /> to bind to an external object.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.Call(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to call an external COM member. Uses the specified binding information.</summary>
      <returns>The value of the call to the external COM member.</returns>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="arguments">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.GetValue(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to get the value of an external COM member using the specified binding information.</summary>
      <returns>The value of the external COM member.</returns>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMemberInfo.SetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>When implemented in a class, enables JScript to set the value of an external COM member to the specified new value, using the specified binding information.</summary>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.COMMethodInfo">
      <summary>Enables JScript to communicate with an external COM method. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMMethodInfo" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._comObject">
      <summary>Stores a managed object that enables JScript to communicate with this external COM method.</summary>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo._name">
      <summary>Stores the name of the external COM method that this object represents.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Attributes">
      <summary>Gets the attributes that are associated with this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodAttributes.Public" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.DeclaringType">
      <summary>Gets the type that declares this method.</summary>
      <returns>null, because the type that declares this method is an external COM object.</returns>
    </member>
    <member name="F:Microsoft.JScript.COMMethodInfo.EmptyParams">
      <summary>Stores an array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</summary>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which this method was first declared.</summary>
      <returns>this in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM method.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM method.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.GetParameters">
      <summary>Gets the parameters of this external COM method.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM method.</summary>
      <param name="name">The name of the external COM method that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM method.</param>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Calls the external COM method by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The return value of the call to the external COM method.</returns>
      <param name="obj">The object to call the method on. This parameter is ignored.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the external COM member.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.MethodHandle">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.InternalError" /> exception in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.Name">
      <summary>Gets the name of the external COM method that this object represents.</summary>
      <returns>The name of the external COM method that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnType">
      <summary>Gets the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMMethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMMethodInfo.ToString">
      <summary>Returns a string that represents the current method.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:Microsoft.JScript.COMPropertyInfo">
      <summary>Enables JScript to communicate with an external COM property. This class is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> in order to bind to an external object. </summary>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.COMPropertyInfo" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Attributes">
      <summary>Gets the attributes that are associated with this property.</summary>
      <returns>
        <see cref="F:System.Reflection.PropertyAttributes.None" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanRead">
      <summary>Gets a value that indicates whether the property can be read.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.CanWrite">
      <summary>Gets a value that indicates whether the property can be written to.</summary>
      <returns>true in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.DeclaringType">
      <summary>Gets the type that declares this property.</summary>
      <returns>null, because the type that declares this property is an external COM object.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetAccessors(System.Boolean)">
      <summary>Gets an array whose elements contain the get and set accessors of the external COM property that this object represents.</summary>
      <returns>A two-element array of <see cref="T:System.Reflection.MethodInfo" /> objects that contains the get and set methods of this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCOMMemberInfo">
      <summary>Gets a managed object that enables JScript to communicate with this external COM property.</summary>
      <returns>A managed object that enables JScript to communicate with this external COM property.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this property.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this property, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetGetMethod(System.Boolean)">
      <summary>Returns the get accessor for this property.</summary>
      <returns>The get accessor for this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetIndexParameters">
      <summary>Returns an array of all the index parameters for the property.</summary>
      <returns>An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that has zero elements.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetSetMethod(System.Boolean)">
      <summary>Returns the set accessor for this property.</summary>
      <returns>The set accessor for this property.</returns>
      <param name="nonPublic">true to include non-public accessors.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Gets the value of the external COM property by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <returns>The value of the external COM property.</returns>
      <param name="obj">The object whose property value you want to get. This parameter is ignored.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM property.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>Initializes the information that enables JScript to communicate with this external COM property.</summary>
      <param name="name">The name of the external COM property that this object represents.</param>
      <param name="dispatch">Information that enables JScript to access the external COM property.</param>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this property.</summary>
      <returns>false in all cases.</returns>
      <param name="t">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.MemberType">
      <summary>Gets the type of member that this property is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Property" />, because this class derives from <see cref="T:System.Reflection.PropertyInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.Name">
      <summary>Gets the name of the external COM property that this object represents.</summary>
      <returns>The name of the external COM property that this object represents.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.PropertyType">
      <summary>Gets the type of this property.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.COMPropertyInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>null, because this instance was not obtained through reflection.</returns>
    </member>
    <member name="M:Microsoft.JScript.COMPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Sets the value of the external COM property by using the <see cref="T:Microsoft.JScript.COMMemberInfo" /> that was specified to the <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" /> method.</summary>
      <param name="obj">The object whose property value will be set. This parameter is ignored.</param>
      <param name="value">The new value of the external COM member.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="index">The argument list to pass to the external COM property.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.Context">
      <summary>Represents JScript source code. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="P:Microsoft.JScript.Context.EndColumn">
      <summary>Gets the column number in the line where this code ends. This includes whitespace at the start of the line.</summary>
      <returns>The column number where this code ends.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndLine">
      <summary>Gets the ending line number of this code.</summary>
      <returns>The ending line number of this code.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.EndPosition">
      <summary>Gets the position in the code string where this code ends, because all lines of code are stored in a single string.</summary>
      <returns>The position in the code string where this code ends.</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetCode">
      <summary>Gets the code that the context contains, discarding any whitespace.</summary>
      <returns>The code that the context contains.</returns>
    </member>
    <member name="M:Microsoft.JScript.Context.GetToken">
      <summary>Gets an individual unit of code, or a token, that the context contains.</summary>
      <returns>An individual unit of code, or a token, that the context contains.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartColumn">
      <summary>Gets the column number in the line where this code starts. This includes whitespace at the start of the line.</summary>
      <returns>The column number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartLine">
      <summary>Gets the line number where this code starts.</summary>
      <returns>The line number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.Context.StartPosition">
      <summary>Gets the position in the code string where this code starts, because all lines of code are stored in a single string.</summary>
      <returns>The position in the code string where this code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.ContinueOutOfFinally">
      <summary>Represents the exception state when code execution continues out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified target.</summary>
      <param name="target">The target of the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ContinueOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Microsoft.JScript.ContinueOutOfFinally.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />. The stored information includes the <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" /> value.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="F:Microsoft.JScript.ContinueOutOfFinally.target">
      <summary>Stores the target of the exception.</summary>
    </member>
    <member name="T:Microsoft.JScript.Convert">
      <summary>Converts data from one type to another. This is a utility class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfDoubleIsInteger(System.Double)">
      <summary>Determines whether a <see cref="T:System.Double" /> variable contains an integer value.</summary>
      <returns>If <paramref name="d" /> contains an integer value, <paramref name="d" /> is returned. If not, an exception is thrown.</returns>
      <param name="d">The <see cref="T:System.Double" /> to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CheckIfSingleIsInteger(System.Single)">
      <summary>Determines whether a <see cref="T:System.Single" /> variable contains an integer value.</summary>
      <returns>If <paramref name="s" /> contains an integer value, <paramref name="s" /> is returned. If not, an exception is thrown.</returns>
      <param name="s">The <see cref="T:System.Single" /> to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce(System.Object,System.Object)">
      <summary>Converts the specified value to the specified type.</summary>
      <returns>
        <paramref name="value" /> converted to <paramref name="type" />.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="type">The type to convert <paramref name="value" /> to.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.Coerce2(System.Object,System.TypeCode,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="target" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="target">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.CoerceT(System.Object,System.Type,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.Type" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the type <paramref name="t" />.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="t">The type to convert <paramref name="value" /> to.</param>
      <param name="explicitOK">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.IsBadIndex(Microsoft.JScript.AST)">
      <summary>Determines whether a variable contains an array index value.</summary>
      <returns>true if <paramref name="ast" /> contains an array index value; otherwise, false.</returns>
      <param name="ast">The variable to test.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ThrowTypeMismatch(System.Object)">
      <summary>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</summary>
      <param name="val">The source code that caused the exception.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>false if <paramref name="d" /> is 0; otherwise, true.</returns>
      <param name="d">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Boolean" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToBoolean(System.Object,System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Object" /> value to a <see cref="T:System.Boolean" /> structure, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Boolean" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="explicitConversion">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToForInObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" /> that represents a collection of <see cref="T:Microsoft.JScript.AST" /> objects.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToInt32(System.Object)">
      <summary>Converts the specified value to an <see cref="T:System.Int32" />.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Int32" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNativeArray(System.Object,System.RuntimeTypeHandle)">
      <summary>Converts the specified <see cref="T:Microsoft.JScript.ArrayObject" /> to a typed <see cref="T:System.Array" />.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Array" /> if this is possible; otherwise, <paramref name="value" />.</returns>
      <param name="value">The <see cref="T:Microsoft.JScript.ArrayObject" /> to convert. </param>
      <param name="handle">The type of the elements in the array.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.Object)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.Double" />.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.Double" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToNumber(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</summary>
      <returns>
        <paramref name="str" /> converted to a <see cref="T:System.Double" />.</returns>
      <param name="str">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" />. Throws an error if it cannot perform the conversion.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToObject2(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts the specified value to an <see cref="T:System.Object" />. Returns null if it cannot perform the conversion.</summary>
      <returns>
        <paramref name="value" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</summary>
      <returns>
        <paramref name="b" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="b">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</summary>
      <returns>
        <paramref name="d" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="d">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Convert.ToString(System.Object,System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Object" /> to a <see cref="T:System.String" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="explicitOK">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="T:Microsoft.JScript.DateConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.Invoke">
      <summary>Returns the number of milliseconds that have elapsed since January 1, 1970.</summary>
      <returns>The number of milliseconds that have elapsed since January 1, 1970.</returns>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.parse(System.String)">
      <summary>Converts the specified string representation of a date and time to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A <see cref="T:System.Double" /> equivalent of the date and time that is contained in <paramref name="str" />.</returns>
      <param name="str">A string that contains a date and time to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
      <summary>Converts the specified date and time to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A <see cref="T:System.Double" /> equivalent of the specified date and time.</returns>
      <param name="year">The year of the date and time to convert.</param>
      <param name="month">The month of the date and time to convert.</param>
      <param name="date">The date of the date and time to convert.</param>
      <param name="hours">The hours of the date and time to convert.</param>
      <param name="minutes">The minutes of the date and time to convert.</param>
      <param name="seconds">The seconds of the date and time to convert.</param>
      <param name="ms">The milliseconds of the date and time to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.DateObject">
      <summary>Represents a date object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="T:Microsoft.JScript.DatePrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.DateObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.DatePrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDate(System.Object)">
      <summary>Gets the date value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The date value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getDay(System.Object)">
      <summary>Gets the day-of-the-week value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The day-of-the-week value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The year value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getHours(System.Object)">
      <summary>Gets the hour value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The hour value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)">
      <summary>Gets the millisecond value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The millisecond value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)">
      <summary>Gets the minutes value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The minutes value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)">
      <summary>Gets the month value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The month value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)">
      <summary>Gets the seconds value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The seconds value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTime(System.Object)">
      <summary>Gets the time value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The time value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)">
      <summary>Gets the offset of the specified <see cref="T:Microsoft.JScript.DateObject" /> from Coordinated Universal Time (UTC).</summary>
      <returns>The difference between <paramref name="thisob" /> and Coordinated Universal Time (UTC).</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)">
      <summary>Gets the date value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The date value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)">
      <summary>Gets the day-of-the-week value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The day-of-the-week value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The year value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)">
      <summary>Gets the hour value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The hour value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)">
      <summary>Gets the millisecond value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The millisecond value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)">
      <summary>Gets the minutes value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The minutes value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)">
      <summary>Gets the month value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The month value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)">
      <summary>Gets the seconds value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The seconds value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)">
      <summary>Returns the specified <see cref="T:Microsoft.JScript.DateObject" /> as a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The value of <paramref name="thisob" />, expressed as a <see cref="T:System.DateTime" /> object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.getYear(System.Object)">
      <summary>Gets the year value of the specified <see cref="T:Microsoft.JScript.DateObject" />, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The year value of <paramref name="thisob" />, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)">
      <summary>Sets the date value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified date value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ddate">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value.</summary>
      <returns>The year value that is set for <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
      <param name="month">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>Sets the hour value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified hour value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dhour">The hour value to set for <paramref name="thisob" />.</param>
      <param name="min">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)">
      <summary>Sets the millisecond value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified millisecond value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmsec">The millisecond value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the minutes value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified minutes value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmin">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)">
      <summary>Sets the month value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified month value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmonth">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)">
      <summary>Sets the seconds value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified seconds value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dsec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)">
      <summary>Sets the time value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified time value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="time">The time value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)">
      <summary>Sets the date value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified date value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ddate">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
      <param name="month">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)">
      <summary>Sets the hour value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified hour value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dhour">The hour value to set for <paramref name="thisob" />.</param>
      <param name="min">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)">
      <summary>Sets the millisecond value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified millisecond value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmsec">The millisecond value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)">
      <summary>Sets the minutes value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified minutes value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmin">The minutes value to set for <paramref name="thisob" />.</param>
      <param name="sec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)">
      <summary>Sets the month value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified month value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dmonth">The month value to set for <paramref name="thisob" />.</param>
      <param name="date">The date value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)">
      <summary>Sets the seconds value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified seconds value, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set, expressed in UTC.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dsec">The seconds value to set for <paramref name="thisob" />.</param>
      <param name="msec">The milliseconds value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)">
      <summary>Sets the year value of a <see cref="T:Microsoft.JScript.DateObject" /> to the specified year value.</summary>
      <returns>The new value of <paramref name="thisob" /> after the value is set.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dyear">The year value to set for <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, and the year.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the year, and the time, expressed in Coordinated Universal Time (UTC). Use <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> instead, when you can.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the date but not the time.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the date and time.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the time but not the date.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the time and the time zone.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.DateObject" /> that contains the day of the week, the month, the date, the year, and the time, expressed in Coordinated Universal Time (UTC).</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified <see cref="T:Microsoft.JScript.DateObject" />.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.DebugBreak">
      <summary>This class is used by the JScript parser to represent a breakpoint in a debugger.</summary>
    </member>
    <member name="T:Microsoft.JScript.DebugConvert">
      <summary>Converts data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger. </summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DebugConvert" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.BooleanToString(System.Boolean)">
      <summary>Converts the specified <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The literal string "true" or the literal string "false".</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DecimalToString(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToDateString(System.Double)">
      <summary>Creates a string representation of the specified <see cref="T:System.Double" />. The string representation contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.DoubleToString(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>Gets an error message that is created from the specified <see cref="P:System.Exception.HResult" /> and the <see cref="T:System.Globalization.CultureInfo" /> of the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />.</summary>
      <returns>A localized string that contains information about the error.</returns>
      <param name="hr">The HRESULT error code.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.Char" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to a <see cref="T:System.Char" /> and then an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.Int64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedObject(System.Object)">
      <summary>Creates a managed object that has the specified primitive value.</summary>
      <returns>
        <paramref name="value" /> converted to a managed <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>Creates a managed object that has the specified primitive <see cref="T:System.UInt64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>Converts the specified <see cref="T:System.Int64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Converts the specified regular expression information to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of the regular expression information.</returns>
      <param name="source">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>Converts the specified <see cref="T:System.SByte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.SingleToString(System.Single)">
      <summary>Converts the specified <see cref="T:System.Single" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.StringToPrintable(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> to a <see cref="T:System.String" /> that contains escape characters for non-printable characters.</summary>
      <returns>The string representation of <paramref name="source" /> that contains escape characters.</returns>
      <param name="source">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>Converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="typeCode" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="typeCode">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.DebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>Converts the specified <see cref="T:System.UInt64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="T:Microsoft.JScript.DocumentContext">
      <summary>Represents a source code file that is written in the JScript language.</summary>
    </member>
    <member name="T:Microsoft.JScript.DynamicFieldInfo">
      <summary>Represents field information. This class is used to return fields of expando classes and script arrays to the debugger. </summary>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> class, using the specified name and value.</summary>
      <param name="name">The name of the field.</param>
      <param name="value">The value of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.DynamicFieldInfo.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.DynamicFieldInfo" /> class, using the specified name, value, and type.</summary>
      <param name="name">The name of the field.</param>
      <param name="value">The value of the field.</param>
      <param name="fieldTypeName">The type of the field.</param>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.fieldTypeName">
      <summary>The type of the field.</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.name">
      <summary>The name of the field.</summary>
    </member>
    <member name="F:Microsoft.JScript.DynamicFieldInfo.value">
      <summary>The value of the field.</summary>
    </member>
    <member name="T:Microsoft.JScript.Empty">
      <summary>Represents the value of a variable that has not been instantiated.</summary>
    </member>
    <member name="F:Microsoft.JScript.Empty.Value">
      <summary>Specifies the value of a variable that has not been instantiated.</summary>
    </member>
    <member name="T:Microsoft.JScript.EndOfFile">
      <summary>This class is used by the JScript parser to represent reaching the end of a file as an exception. Code can throw this error to stop the parser.</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorConstructor.Invoke">
      <summary>Returns null in all cases.</summary>
      <returns>null.</returns>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorObject">
      <summary>Represents an enumerator object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.EnumeratorObject.enumerator">
      <summary>Contains the enumerator that is represented by the <see cref="T:Microsoft.JScript.EnumeratorObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorObject.LoadObject">
      <summary>Advances the enumerator to the next element of the collection and stores a reference to the current element of the collection.</summary>
    </member>
    <member name="T:Microsoft.JScript.EnumeratorPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.EnumeratorObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)">
      <summary>Determines whether the enumerator has passed the last item of the collection.</summary>
      <returns>true if the enumerator has passed the last item of the collection; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="P:Microsoft.JScript.EnumeratorPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)">
      <summary>Moves the enumerator to its initial position, which is before the first element in the collection.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Equality">
      <summary>Performs comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Equality.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Equality" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the comparison to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.EvaluateEquality(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Equality.JScriptEquals(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorObject">
      <summary>Represents an error object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.description">
      <summary>Specifies the message that explains the reason for the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.message">
      <summary>Specifies the message that explains the reason for the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorObject.number">
      <summary>Specifies a number or code for the error.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.op_Explicit(Microsoft.JScript.ErrorObject)~System.Exception">
      <summary>Converts an <see cref="T:Microsoft.JScript.ErrorObject" /> to an <see cref="T:System.Exception" />, explicitly.</summary>
      <returns>The converted <see cref="T:Microsoft.JScript.ErrorObject" />.</returns>
      <param name="err">The object to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.ErrorObject.ToException(Microsoft.JScript.ErrorObject)">
      <summary>Converts an <see cref="T:Microsoft.JScript.ErrorObject" /> to an <see cref="T:System.Exception" />, implicitly.</summary>
      <returns>The converted <see cref="T:Microsoft.JScript.ErrorObject" />.</returns>
      <param name="err">The object to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.ErrorObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ErrorPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="F:Microsoft.JScript.ErrorPrototype.name">
      <summary>Specifies the name of the type of the error. Possible values include Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, and URIError.</summary>
    </member>
    <member name="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" /> that contains the name of the type of the error object, and an error message if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.ErrorType">
      <summary>Specifies the JScript error types.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.OtherError">
      <summary>Any error other than one of the other error types. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.EvalError">
      <summary>An eval Method (JScript) error. Corresponds to the <see cref="T:Microsoft.JScript.EvalErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.RangeError">
      <summary>A range error. Corresponds to the <see cref="T:Microsoft.JScript.RangeErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.ReferenceError">
      <summary>A reference error. Corresponds to the <see cref="T:Microsoft.JScript.ReferenceErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.SyntaxError">
      <summary>A syntax error. Corresponds to the <see cref="T:Microsoft.JScript.SyntaxErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.TypeError">
      <summary>A type error. Corresponds to the <see cref="T:Microsoft.JScript.TypeErrorObject" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.ErrorType.URIError">
      <summary>A Uniform Resource Identifier (URI) error. Corresponds to the <see cref="T:Microsoft.JScript.URIErrorObject" /> object.</summary>
    </member>
    <member name="T:Microsoft.JScript.Eval">
      <summary>Evaluates JScript code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Evaluates the specified JScript code by using the specified engine.</summary>
      <returns>The result of the evaluation. If <paramref name="source" /> is not a string, return value is <paramref name="source" />.</returns>
      <param name="source">The code to evaluate.</param>
      <param name="engine">A reference to the scripting engine to use to evaluate <paramref name="source" />.</param>
    </member>
    <member name="M:Microsoft.JScript.Eval.JScriptEvaluate(System.Object,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Evaluates the specified JScript code by using the specified engine and safety option.</summary>
      <returns>The result of the evaluation. If <paramref name="source" /> is not a string, return value is <paramref name="source" />.</returns>
      <param name="source">The code to evaluate.</param>
      <param name="unsafeOption">The string literal unsafe to enable unsafe evaluation; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine to use to evaluate <paramref name="source" />.</param>
    </member>
    <member name="T:Microsoft.JScript.EvalErrorObject">
      <summary>Represents an error that occurs when the eval method is used. For more information, see eval Method (JScript).</summary>
    </member>
    <member name="T:Microsoft.JScript.Expando">
      <summary>Indicates that a class or method is an expando class or method.</summary>
    </member>
    <member name="M:Microsoft.JScript.Expando.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Expando" /> attribute class.</summary>
    </member>
    <member name="T:Microsoft.JScript.FieldAccessor">
      <summary>Represents a field accessor.</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.FieldAccessor" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.GetValue(System.Object)">
      <summary>When overridden in a derived class, gets the value of the field for the specified object.</summary>
      <returns>The value of the field for <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.FieldAccessor.SetValue(System.Object,System.Object)">
      <summary>When overridden in a derived class, sets the specified value of the field for the specified object.</summary>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="value">The value to set for the field.</param>
    </member>
    <member name="T:Microsoft.JScript.ForIn">
      <summary>Represents the JScript for...in statement. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ForIn.JScriptGetEnumerator(System.Object)">
      <summary>Returns an enumerator that iterates through the specified collection.</summary>
      <returns>An enumerator that iterates through <paramref name="coll" />.</returns>
      <param name="coll">The collection for which to get an enumerator.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionDeclaration">
      <summary>Represents a function declaration. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionDeclaration.JScriptFunctionDeclaration(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new closure function, using the specified information.</summary>
      <returns>A new closure function that represents the function declaration.</returns>
      <param name="handle">A handle to the type of the function.</param>
      <param name="name">The name of the function.</param>
      <param name="method_name">The name of the function.</param>
      <param name="formal_parameters">The parameters of the function.</param>
      <param name="fields">The fields of the function.</param>
      <param name="must_save_stack_locals">true to save local stack variables. This is important for a nested function that accesses one of its local variables or for an eval statement.</param>
      <param name="hasArgumentsObject">true if the function has a parameter array.</param>
      <param name="text">The text of the function declaration.</param>
      <param name="declaringObject">Gets the type that declares this method.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionExpression">
      <summary>Represents a function object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionExpression.JScriptFunctionExpression(System.RuntimeTypeHandle,System.String,System.String,System.String[],Microsoft.JScript.JSLocalField[],System.Boolean,System.Boolean,System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new function object, using the specified information.</summary>
      <returns>A new function object.</returns>
      <param name="handle">A handle to the type of the function.</param>
      <param name="name">The name of the function.</param>
      <param name="method_name">The name of the function.</param>
      <param name="formal_params">The parameters of the function.</param>
      <param name="fields">The fields of the function.</param>
      <param name="must_save_stack_locals">true to save local stack variables. This is important for a nested function that accesses one of its local variables, or for an eval statement.</param>
      <param name="hasArgumentsObject">true if the function has a parameter array.</param>
      <param name="text">The text of the function declaration.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionObject">
      <summary>Represents a function object. </summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionObject.ToString">
      <summary>Returns a string representation of this function object.</summary>
      <returns>A string representation of this function object that contains the text of the function.</returns>
    </member>
    <member name="T:Microsoft.JScript.FunctionPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.FunctionObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)">
      <summary>Calls the function that this object represents, converting the specified argument object to an array of arguments if it has to.</summary>
      <returns>The return value of the call to the function that this object represents.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thisarg">The current default scope. Either the contained object of a with statement scope, or the global scope.</param>
      <param name="argArray">The arguments to pass to the function, as an <see cref="T:Microsoft.JScript.ArgumentsObject" /> or an <see cref="T:Microsoft.JScript.ArrayObject" />.</param>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])">
      <summary>Calls the function that this object represents.</summary>
      <returns>The return value of the call to the function that this object represents.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thisarg">The current default scope. Either the contained object of a with statement scope, or the global scope.</param>
      <param name="args">The arguments to pass to the function as an array.</param>
    </member>
    <member name="P:Microsoft.JScript.FunctionPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" /> that contains the name of the function.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.FunctionWrapper">
      <summary>Binds the members of a function to an object. </summary>
    </member>
    <member name="M:Microsoft.JScript.FunctionWrapper.ToString">
      <summary>Creates a string representation of the function.</summary>
      <returns>A string representation of the function that contains the function source, the function members, and the function name.</returns>
    </member>
    <member name="T:Microsoft.JScript.GlobalObject">
      <summary>Stores constants, data type information, utility functions, and references to prototype-based objects. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ActiveXObject">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Array">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.boolean">
      <summary>Gets the managed type that corresponds to the JScript boolean data type.</summary>
      <returns>The managed type that corresponds to the JScript boolean data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Boolean">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.byte">
      <summary>Gets the managed type that corresponds to the JScript byte data type.</summary>
      <returns>The managed type that corresponds to the JScript byte data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.char">
      <summary>Gets the managed type that corresponds to the JScript char data type.</summary>
      <returns>The managed type that corresponds to the JScript char data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.CollectGarbage">
      <summary>Calls the garbage collector.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Date">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.decimal">
      <summary>Gets the managed type that corresponds to the JScript decimal data type.</summary>
      <returns>The managed type that corresponds to the JScript decimal data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)">
      <summary>Decodes the specified Uniform Resource Identifier (URI), accounting for reserved characters.</summary>
      <returns>The decoded version of <paramref name="encodedURI" />.</returns>
      <param name="encodedURI">The URI to decode.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)">
      <summary>Decodes the specified Uniform Resource Identifier (URI).</summary>
      <returns>The decoded version of <paramref name="encodedURI" />.</returns>
      <param name="encodedURI">The URI to decode.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.double">
      <summary>Gets the managed type that corresponds to the JScript double data type.</summary>
      <returns>The managed type that corresponds to the JScript double data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)">
      <summary>Encodes the specified Uniform Resource Identifier (URI), accounting for reserved characters.</summary>
      <returns>The encoded version of <paramref name="uri" />.</returns>
      <param name="uri">The URI to encode.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)">
      <summary>Encodes the specified Uniform Resource Identifier (URI).</summary>
      <returns>The encoded version of <paramref name="uriComponent" />.</returns>
      <param name="uriComponent">The URI to encode.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Enumerator">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Error">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.escape(System.Object)">
      <summary>Converts the specified string to use the % character to escape reserved characters (@, *, _, +, -, ., /) and express them in Unicode notation.</summary>
      <returns>A new copy of <paramref name="string" /> in which the reserved characters are escaped by the % character and expressed in Unicode.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.eval(System.Object)">
      <summary>Throws an <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> exception in all cases.</summary>
      <returns>Throws an <see cref="F:Microsoft.JScript.JSError.IllegalEval" /> exception in all cases.</returns>
      <param name="x">The expression to evaluate.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.EvalError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.float">
      <summary>Gets the managed type that corresponds to the JScript float data type.</summary>
      <returns>The managed type that corresponds to the JScript float data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Function">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)">
      <summary>Creates a managed object from an unmanaged object by using either the moniker or the ProgID.</summary>
      <returns>The managed object.</returns>
      <param name="moniker">The moniker of the object.</param>
      <param name="progId">The ProgID of the object.</param>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.Infinity">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.int">
      <summary>Gets the managed type that corresponds to the JScript int data type.</summary>
      <returns>The managed type that corresponds to the JScript int data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)">
      <summary>Determines whether the specified number represents infinity.</summary>
      <returns>true if <paramref name="number" /> is not <see cref="F:System.Double.NaN" />, not <see cref="F:System.Double.PositiveInfinity" />, and not <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
      <param name="number">The number to check.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)">
      <summary>Determines whether the specified number can be converted to a JScript number.</summary>
      <returns>true if <paramref name="num" /> can be converted to a JScript number; otherwise, false.</returns>
      <param name="num">The number to check.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.long">
      <summary>Gets the managed type that corresponds to the JScript long data type.</summary>
      <returns>The managed type that corresponds to the JScript long data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Math">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.MathObject" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.MathObject" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Number">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.Object">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalActiveXObjectField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalArrayField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalBooleanField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalDateField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEnumeratorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalEvalErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalFunctionField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalNumberField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalObjectPrototypeField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectPrototype" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRangeErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalReferenceErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalRegExpField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalStringField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalSyntaxErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalTypeErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalURIErrorField">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.originalVBArrayField">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)">
      <summary>Converts the specified string to its <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A value equivalent to the value that is contained in <paramref name="string" />.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)">
      <summary>Converts the specified string to its <see cref="T:System.Double" /> equivalent, using the specified base.</summary>
      <returns>A value that is equivalent to the value that is contained in <paramref name="string" />.</returns>
      <param name="string">The string to convert.</param>
      <param name="radix">A number between 2 and 36 that represents the base of the number system that <paramref name="string" /> is expressed in. The default is 10.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RangeError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ReferenceError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.RegExp">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.sbyte">
      <summary>Gets the managed type that corresponds to the JScript sbyte data type.</summary>
      <returns>The managed type that corresponds to the JScript sbyte data type.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngine">
      <summary>Gets the name of the scripting engine.</summary>
      <returns>The string literal "JScript".</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion">
      <summary>Gets the build number of the scripting engine.</summary>
      <returns>The build number of the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion">
      <summary>Gets the major version number of the scripting engine.</summary>
      <returns>The major version number of the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion">
      <summary>Gets the minor version number of the scripting engine.</summary>
      <returns>The minor version number of the scripting engine.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.short">
      <summary>Gets the managed type that corresponds to the JScript short data type.</summary>
      <returns>The managed type that corresponds to the JScript short data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.String">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.SyntaxError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.TypeError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.uint">
      <summary>Gets the managed type that corresponds to the JScript uint data type.</summary>
      <returns>The managed type that corresponds to the JScript uint data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ulong">
      <summary>Gets the managed type that corresponds to the JScript ulong data type.</summary>
      <returns>The managed type that corresponds to the JScript ulong data type.</returns>
    </member>
    <member name="F:Microsoft.JScript.GlobalObject.undefined">
      <summary>Represents a value that is null.</summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalObject.unescape(System.Object)">
      <summary>Converts % escaped characters (@, *, _, +, -, ., /) in the specified string to their original form. The escaped characters are expressed in Unicode notation.</summary>
      <returns>A new copy of <paramref name="string" /> in which the escaped characters are converted to their original form.</returns>
      <param name="string">The string to convert.</param>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.URIError">
      <summary>Gets a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
      <returns>A reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object. The object is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.ushort">
      <summary>Gets the managed type that corresponds to the JScript ushort data type.</summary>
      <returns>The managed type that corresponds to the JScript ushort data type.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.VBArray">
      <summary>Gets a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
      <returns>A reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.GlobalObject.void">
      <summary>Gets the managed type that corresponds to the return value of a function that does not return a value.</summary>
      <returns>The managed type that corresponds to the return value of a function that does not return a value.</returns>
    </member>
    <member name="T:Microsoft.JScript.Globals">
      <summary>Stores references to all globally available types and manages the stack. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArray(System.Object[])">
      <summary>Provides global access to the <see cref="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])" /> method.</summary>
      <returns>A new instance of a JScript <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="M:Microsoft.JScript.Globals.ConstructArrayLiteral(System.Object[])">
      <summary>Provides global access to the <see cref="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])" /> method.</summary>
      <returns>A new instance of a JScript <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="args">The values to populate the array with.</param>
    </member>
    <member name="F:Microsoft.JScript.Globals.contextEngine">
      <summary>Stores a global reference to the single scripting engine that is running in the current context.</summary>
    </member>
    <member name="T:Microsoft.JScript.GlobalScope">
      <summary>Represents the global scope. </summary>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.#ctor(Microsoft.JScript.GlobalScope,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.GlobalScope" /> class.</summary>
      <param name="parent">A reference to the parent object.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.AddField(System.String)">
      <summary>Adds the specified field to the global scope.</summary>
      <returns>The new field, if it is successfully added.</returns>
      <param name="name">The name of the field to add.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetDefaultThisObject">
      <summary>Gets the current default scope, which is either the contained object of a with statement scope, or the global scope.</summary>
      <returns>This object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetField(System.String,System.Int32)">
      <summary>Gets a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A field that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the global scope.</summary>
      <returns>An array of objects that contains all fields of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetGlobalScope">
      <summary>Gets the global scope by returning a reference to this object.</summary>
      <returns>This object.</returns>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the global scope.</summary>
      <returns>An array of objects that contains all members of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the global scope.</summary>
      <returns>An array of objects that contains all methods of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the global scope.</summary>
      <returns>An array of objects that contains all properties of the global scope.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>Adds the specified method to the global scope. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="method">The delegate to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>Adds the specified property to the global scope. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the property to add.</param>
    </member>
    <member name="M:Microsoft.JScript.GlobalScope.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>Removes the specified member from the global scope.</summary>
      <param name="m">The name of the member to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.Hide">
      <summary>Indicates that a method or field hides a method or field in a base class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Hide.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Hide" /> attribute class.</summary>
    </member>
    <member name="T:Microsoft.JScript.IActivationObject">
      <summary>Defines methods for resolving scope. This interface is implemented by all objects that take part in a scope hierarchy.</summary>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetDefaultThisObject">
      <summary>When implemented in a class, gets the current default scope. Either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetField(System.String,System.Int32)">
      <summary>When implemented in a class, returns a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object that has the specified name.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetGlobalScope">
      <summary>When implemented in a class, gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetLocalField(System.String)">
      <summary>When implemented in a class, gets the local declaration of a field that has the specified name. This is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.IActivationObject.GetMemberValue(System.String,System.Int32)">
      <summary>When implemented in a class, gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="T:Microsoft.JScript.IAuthorServices">
      <summary>Defines services for authoring JScript code in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetCodeSense">
      <summary>When implemented in a class, gets an object that is used to add IntelliSense to text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to add IntelliSense to text.</returns>
    </member>
    <member name="M:Microsoft.JScript.IAuthorServices.GetColorizer">
      <summary>When implemented in a class, gets an object that is used to colorize text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to colorize text.</returns>
    </member>
    <member name="T:Microsoft.JScript.IColorizeText">
      <summary>Defines services for colorizing text when JScript code is being authored in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.Colorize(System.String,Microsoft.JScript.SourceState)">
      <summary>When implemented in a class, scans the specified source code for individual units of code and identifies the color that each should have.</summary>
      <returns>An enumeration of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects that represent units of code to colorize.</returns>
      <param name="sourceCode">The source code to colorize.</param>
      <param name="state">The current state (normal, comment, string) of the source code.</param>
    </member>
    <member name="M:Microsoft.JScript.IColorizeText.GetStateForText(System.String,Microsoft.JScript.SourceState)">
      <summary>When implemented in a class, scans the specified source code for individual units of code and identifies the state (normal, comment, string) of the specified code.</summary>
      <returns>The state of the source code.</returns>
      <param name="sourceCode">The source code to analyze.</param>
      <param name="currentState">The current state (normal, comment, string) of the source code.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert">
      <summary>Defines a set of utility methods that convert data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.BooleanToString(System.Boolean)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The literal string "true" or the literal string "false".</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ByteToString(System.Byte,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToDateString(System.Double)">
      <summary>When implemented in a class, creates a string representation of the specified <see cref="T:System.Double" />. The string representation contains the day of the week, the month, the date, the time, the time zone, and the year.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.DoubleToString(System.Double)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Double" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetErrorMessageForHR(System.Int32,Microsoft.JScript.Vsa.IJSVsaEngine)">
      <summary>When implemented in a class, gets an error message that is created from the specified <see cref="P:System.Exception.HResult" /> and the <see cref="T:System.Globalization.CultureInfo" /> of the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />.</summary>
      <returns>A localized string that contains information about the error.</returns>
      <param name="hr">The HRESULT error code.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedCharObject(System.UInt16)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.Char" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to a <see cref="T:System.Char" /> and then an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedInt64Object(System.Int64)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.Int64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedObject(System.Object)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive value.</summary>
      <returns>
        <paramref name="value" /> converted to a managed <see cref="T:System.Object" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.GetManagedUInt64Object(System.UInt64)">
      <summary>When implemented in a class, creates a managed object that has the specified primitive <see cref="T:System.UInt64" /> value.</summary>
      <returns>
        <paramref name="i" /> converted to an <see cref="T:System.Object" />.</returns>
      <param name="i">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int16ToString(System.Int16,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int32ToString(System.Int32,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.Int64ToString(System.Int64,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Int64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.RegexpToString(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>When implemented in a class, converts the specified regular expression information to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of the regular expression information.</returns>
      <param name="source">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SByteToString(System.SByte,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.SByte" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.SingleToString(System.Single)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Single" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.StringToPrintable(System.String)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.String" /> to a <see cref="T:System.String" /> that contains escape characters for non-printable characters.</summary>
      <returns>The string representation of <paramref name="source" /> that contains escape characters.</returns>
      <param name="source">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.ToPrimitive(System.Object,System.TypeCode,System.Boolean)">
      <summary>When implemented in a class, converts the specified value to the specified <see cref="T:System.TypeCode" />, optionally allowing data loss.</summary>
      <returns>
        <paramref name="value" /> converted to the <paramref name="typeCode" /> type.</returns>
      <param name="value">The value to convert to a new type.</param>
      <param name="typeCode">The type to convert <paramref name="value" /> to.</param>
      <param name="truncationPermitted">true to allow data loss; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt16ToString(System.UInt16,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt16" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt32ToString(System.UInt32,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt32" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert.UInt64ToString(System.UInt64,System.Int32)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.UInt64" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" /> in base <paramref name="radix" />.</returns>
      <param name="value">The value to convert.</param>
      <param name="radix">The base of the return value. The base must be 2, 8, 10, or 16.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugConvert2">
      <summary>Defines utility methods that convert data from one type to another. Includes methods that convert values to <see cref="T:System.String" /> objects so that they can be displayed by the debugger.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugConvert2.DecimalToString(System.Decimal)">
      <summary>When implemented in a class, converts the specified <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" />.</summary>
      <returns>The string representation of <paramref name="value" />.</returns>
      <param name="value">The value to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebuggerObject">
      <summary>Defines methods that provide information about debugger objects. This interface is implemented by all <see cref="T:System.Reflection.IReflect" /> objects that are implemented by the debugger. Currently, this interface serves only to flag these objects as such to the scripting engine.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.HasEnumerableMember(System.String)">
      <summary>When implemented in a class, determines whether the current object has a member that has the specified name and that is enumerable.</summary>
      <returns>true if the current object has an enumerable member named <paramref name="name" />; otherwise, false.</returns>
      <param name="name">The name of the member to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsCOMObject">
      <summary>When implemented in a class, determines whether the current object is a true COM object or a proxy to a managed object.</summary>
      <returns>true if the current object is a COM object; false if the current object is a proxy to a managed object.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsEqual(Microsoft.JScript.IDebuggerObject)">
      <summary>When implemented in a class, determines whether the current object is equal to the specified object.</summary>
      <returns>true if the current object is the same as <paramref name="o" />; otherwise, false.</returns>
      <param name="o">The object to test for equality.</param>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptFunction">
      <summary>When implemented in a class, determines whether the current object is a proxy to a managed JScript function.</summary>
      <returns>true if the current object is a proxy to a managed JScript function; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebuggerObject.IsScriptObject">
      <summary>When implemented in a class, determines whether the current object is a proxy to a managed JScript object.</summary>
      <returns>true if the current object is a proxy to a managed JScript object; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.JScript.IDebugScriptScope">
      <summary>Defines methods that set the this value that is associated with the global scope. Used by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugScriptScope.SetThisValue(System.Object)">
      <summary>When implemented in a class, sets the this value that is associated with the global scope.</summary>
      <param name="thisValue">The value that is used as the this object for the global scope.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugType">
      <summary>Defines methods that provide information about debugger objects. This interface is implemented by debugger objects that represent a type in the debugger target. </summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugType.HasInstance(System.Object)">
      <summary>When implemented in a class, determines whether the specified object is an instance of the current type.</summary>
      <returns>true if <paramref name="o" /> is an instance of the current type; otherwise, false.</returns>
      <param name="o">The object to test.</param>
    </member>
    <member name="T:Microsoft.JScript.IDebugVsaScriptCodeItem">
      <summary>Defines methods that evaluate expressions and parse strings. This interface is typically implemented by an object that represents a code block, and it is typically called by a debugger. This interface provides extra functionality that is needed by an IActiveScript host.</summary>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.Evaluate">
      <summary>When implemented in a class, evaluates the block, expression, or statement represented by the code item and returns the value. It is typically called by a debugger that needs to evaluate an expression (in a Watch window, for example). For expressions, the value is the result of the expression. For blocks and statements, the resulting expression is the last expression calculated by the block or statement. </summary>
      <returns>Returns a value that represents the evaluation of the statement, expression, or block.</returns>
    </member>
    <member name="M:Microsoft.JScript.IDebugVsaScriptCodeItem.ParseNamedBreakPoint(System.String,System.String@,System.Int32@,System.String@,System.String@,System.UInt64@)">
      <summary>When implemented in a class, parses strings and returns the parsed-out information. This method is typically called by a debugger that needs to parse information about a breakpoint that is represented as a string. The debugger might have a breakpoint typed in by the user in the form functionname-arguments-ILoffset. A named breakpoint string can have a complex format, for example, F.B(C.D[], int, arg : double ) : C.Abc + 123. The parameter list is optional, as is the IL offset.</summary>
      <returns>Returns true if the named breakpoint is successfully parsed, false otherwise.</returns>
      <param name="input">A well-formed named breakpoint string giving a function, optional argument list, and optional IL offset.</param>
      <param name="functionName">Out parameter returning the name of the function parsed out of the input string, or the empty string if the input string is not well formed.</param>
      <param name="nargs">Out parameter returning the number of arguments in the optional argument list. Returns zero if there is no arguments list or if the string is not well formed.</param>
      <param name="arguments">Out parameter returning a space-separated list of the names of the types of all the arguments in the arguments list, or an empty string if the arguments list was missing or the input string was not well formed.</param>
      <param name="returnType">Out parameter returning a string containing the return type of the function named in the input, or the empty string if the return type was missing or the input string was not well formed.</param>
      <param name="offset">Unsigned long integer giving the IL offset from the input string, or zero if there was no IL offset or the string was not well formed.</param>
    </member>
    <member name="T:Microsoft.JScript.IDefineEvent">
      <summary>Defines extra functionality that is needed by an active script host. </summary>
    </member>
    <member name="M:Microsoft.JScript.IDefineEvent.AddEvent(System.String,System.Int32)">
      <summary>Used by an active script host to define an event.</summary>
      <returns>The event, if it was successfully added.</returns>
      <param name="code">The code that contains the event.</param>
      <param name="startLine">The line number where the code starts.</param>
    </member>
    <member name="T:Microsoft.JScript.IEngine2">
      <summary>Defines extra functionality that is needed by an IActiveScript host. Implemented by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> engine.  </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Clone(System.AppDomain)">
      <summary>When implemented in a class, creates a new identical engine that runs in a new application domain, with the same compiled state and named items. This is not implemented in JScript.</summary>
      <returns>The new engine.</returns>
      <param name="domain">The application domain in which to create the new engine.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.CompileEmpty">
      <summary>When implemented in a class, triggers compilation of all the state currently in the engine. All references, code items, host items, and resources are run through the compiler.</summary>
      <returns>true if the compilation was successful, otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.ConnectEvents">
      <summary>When implemented in a class, communicates to the engine that it can connect any registered event sources that have events to any global event handlers. This is not implemented in JScript. </summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.DisconnectEvents">
      <summary>When implemented in a class, directs the engine to unhook event sources from event handlers. This is not implemented in JScript.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetAssembly">
      <summary>When implemented in a class, gets the compiled assembly that is produced by the compilation step.</summary>
      <returns>The compiled assembly.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetGlobalScope">
      <summary>When implemented in a class, gets the global scope object.</summary>
      <returns>The global scope object.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.GetModule">
      <summary>When implemented in a class, gets the code module from the compiled assembly.</summary>
      <returns>The code module from the compiled assembly.</returns>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)">
      <summary>When implemented in a class, initializes the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
      <param name="rootMoniker">The root moniker of the script engine. For more information, see <see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" />.</param>
      <param name="site">The host-implemented <see cref="T:Microsoft.Vsa.IVsaSite" /> object that is used by the script engine to communicate with the host. For more information, see <see cref="P:Microsoft.Vsa.IVsaEngine.Site" />.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Interrupt">
      <summary>When implemented in a class, calls <see cref="M:System.Threading.Thread.Abort" /> on the thread that is running the script code.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RegisterEventSource(System.String)">
      <summary>When implemented in a class, specifies the name of an item that is marked as an event source, so that the <see cref="M:Microsoft.JScript.IEngine2.ConnectEvents" /> method can determine which events to connect. This is not implemented in JScript.</summary>
      <param name="name">The name of an added item that provides events.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Restart">
      <summary>When implemented in a class, this method is called by the debugger when it has to reset the engine to a clean state before evaluating a new expression. The method resets the added items and the global scope back to their original state.</summary>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.Run(System.AppDomain)">
      <summary>When implemented in a class, runs the compiled code in the specified application domain. This is not implemented in JScript because managed engines do not support running code in user-provided application domains.</summary>
      <param name="domain">The application domain in which to run the compiled code.</param>
    </member>
    <member name="M:Microsoft.JScript.IEngine2.RunEmpty">
      <summary>When implemented in a class, runs the compiled code in the current <see cref="T:System.AppDomain" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.IErrorHandler">
      <summary>Defines methods to handle errors that occur when code is being parsed.</summary>
    </member>
    <member name="M:Microsoft.JScript.IErrorHandler.OnCompilerError(Microsoft.JScript.IVsaFullErrorInfo)">
      <summary>When implemented in a class, determines how to handle an error that occurs when code is being parsed.</summary>
      <returns>false to handle the error; true to ignore the error and continue parsing.</returns>
      <param name="error">An object that contains information about the error.</param>
    </member>
    <member name="T:Microsoft.JScript.IMessageReceiver">
      <summary>Defines methods that receive output from a scripting engine. This interface acts as a callback object to capture output that would otherwise go to the console.</summary>
    </member>
    <member name="M:Microsoft.JScript.IMessageReceiver.Message(System.String)">
      <summary>When implemented in a class, captures the specified output.</summary>
      <param name="strValue">The output to capture.</param>
    </member>
    <member name="T:Microsoft.JScript.IMethodsCompletionInfo">
      <summary>This is a marker interface and has no methods.</summary>
    </member>
    <member name="T:Microsoft.JScript.Import">
      <summary>Imports namespaces for use in code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Import.JScriptImport(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Imports the specified namespace for use by the specified scripting engine.</summary>
      <param name="name">The namespace to import.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.In">
      <summary>Determines whether an object is contained in another object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.In.JScriptIn(System.Object,System.Object)">
      <summary>Determines whether the first specified object is contained in the second specified object.</summary>
      <returns>true if <paramref name="v1" /> is contained in <paramref name="v2" />; otherwise, false.</returns>
      <param name="v1">The object to search for.</param>
      <param name="v2">The object to search in.</param>
    </member>
    <member name="T:Microsoft.JScript.INeedEngine">
      <summary>Defines methods that get and set references to the scripting engine. </summary>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.GetEngine">
      <summary>When implemented in a class, gets a reference to the scripting engine.</summary>
      <returns>A reference to the scripting engine.</returns>
    </member>
    <member name="M:Microsoft.JScript.INeedEngine.SetEngine(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>When implemented in a class, sets a reference to the scripting engine.</summary>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.Instanceof">
      <summary>Determines whether an object can be coerced to the type of another object. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Instanceof.JScriptInstanceof(System.Object,System.Object)">
      <summary>Determines whether the first specified object can be coerced to the type of the second specified object.</summary>
      <returns>true if <paramref name="v1" /> can be coerced to the type of object v2; otherwise, false.</returns>
      <param name="v1">The object to coerce to the type of object <paramref name="v2" />.</param>
      <param name="v2">The object that has the desired type.</param>
    </member>
    <member name="T:Microsoft.JScript.IObjectCompletionInfo">
      <summary>This is a marker interface and has no methods.</summary>
    </member>
    <member name="T:Microsoft.JScript.IParseText">
      <summary>Defines methods for parsing text when JScript code is being authored in an editor.</summary>
    </member>
    <member name="M:Microsoft.JScript.IParseText.Parse(System.String,Microsoft.JScript.IErrorHandler)">
      <summary>When implemented in a class, parses the specified source code.</summary>
      <param name="code">The source code to parse.</param>
      <param name="error">An object that contains information about errors that occur when <paramref name="code" /> is being parsed.</param>
    </member>
    <member name="T:Microsoft.JScript.IRedirectOutput">
      <summary>Defines methods that capture output that would otherwise go to the console. This interface is implemented by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.IRedirectOutput.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <summary>When implemented in a class, redirects the specified output stream to a new stream or data storage.</summary>
      <param name="output">The output to redirect. </param>
    </member>
    <member name="T:Microsoft.JScript.ISite2">
      <summary>Defines methods that are used by the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> for name resolution. Provides extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="M:Microsoft.JScript.ISite2.GetParentChain(System.Object)">
      <summary>When implemented in a class, gets the parent object hierarchy for the specified object.</summary>
      <returns>An array that contains the parent objects of <paramref name="obj" />.</returns>
      <param name="obj">An <see cref="T:System.Reflection.IReflect" /> object to get the parent hierarchy of.</param>
    </member>
    <member name="T:Microsoft.JScript.ITokenColorInfo">
      <summary>Defines properties for coloring specific units of code.</summary>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.Color">
      <summary>When implemented in a class, gets the color that should be used to show a unit of code.</summary>
      <returns>The color that should be used to show the unit of code.</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.EndPosition">
      <summary>When implemented in a class, gets the position where a unit of code ends.</summary>
      <returns>The position where the unit of code ends.</returns>
    </member>
    <member name="P:Microsoft.JScript.ITokenColorInfo.StartPosition">
      <summary>When implemented in a class, gets the position where a unit of code starts.</summary>
      <returns>The position where the unit of code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.ITokenEnumerator">
      <summary>Defines methods for iterating over a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.GetNext">
      <summary>When implemented in a class, returns the next item in a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
      <returns>The next item in the collection.</returns>
    </member>
    <member name="M:Microsoft.JScript.ITokenEnumerator.Reset">
      <summary>When implemented in a class, sets the enumerator to its initial position before the first item in a collection of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="T:Microsoft.JScript.IVsaFullErrorInfo">
      <summary>Defines properties to obtain information about errors. This interface provides extra functionality that is needed by an IActiveScript host.</summary>
    </member>
    <member name="P:Microsoft.JScript.IVsaFullErrorInfo.EndLine">
      <summary>When implemented in a class, gets the end line of the code in which an error occurred.</summary>
      <returns>The end line of the code in which an error occurred.</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptCodeItem">
      <summary>Defines extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptCodeItem.Execute">
      <summary>When implemented in a class, compiles and runs this code.</summary>
      <returns>The return value from running the code, if there is any; otherwise, null.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartColumn">
      <summary>When implemented in a class, gets or sets the column number in the line where this code starts.</summary>
      <returns>The column number where this code starts.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptCodeItem.StartLine">
      <summary>When implemented in a class, gets or sets the line number where this code starts.</summary>
      <returns>The line number where this code starts.</returns>
    </member>
    <member name="T:Microsoft.JScript.IVsaScriptScope">
      <summary>Defines methods for resolving scope. The global scope object of the <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> implements this interface.</summary>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.AddItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>When implemented in a class, adds an item to the scope. </summary>
      <returns>The new item, if it is successfully added.</returns>
      <param name="itemName">The name of the item.</param>
      <param name="type">One of the enumeration values. Specifies the type of the item to add.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.CreateDynamicItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType)">
      <summary>When implemented in a class, adds an item to the scope. The <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> must be running to use this method.</summary>
      <returns>The new item, if it is successfully added.</returns>
      <param name="itemName">The name of the item.</param>
      <param name="type">One of the enumeration values. Specifies the type of the item to add.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItem(System.String)">
      <summary>When implemented in a class, gets the item from the scope that is designated by the specified name.</summary>
      <returns>The item that is named <paramref name="itemName" />.</returns>
      <param name="itemName">The name of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemAtIndex(System.Int32)">
      <summary>When implemented in a class, gets the item from the scope that is designated by the specified index value.</summary>
      <returns>The item at <paramref name="index" />.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetItemCount">
      <summary>When implemented in a class, gets the number of items in the scope.</summary>
      <returns>The number of items in the scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.GetObject">
      <summary>When implemented in a class, gets a reference to the global scope.</summary>
      <returns>A reference to the global scope.</returns>
    </member>
    <member name="P:Microsoft.JScript.IVsaScriptScope.Parent">
      <summary>When implemented in a class, gets a reference to the parent object.</summary>
      <returns>The parent scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(Microsoft.JScript.Vsa.IJSVsaItem)">
      <summary>When implemented in a class, removes the specified <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" /> object from the scope.</summary>
      <param name="item">The item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItem(System.String)">
      <summary>When implemented in a class, removes the item that is designated by the specified name from the scope.</summary>
      <param name="itemName">The name of the item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.IVsaScriptScope.RemoveItemAtIndex(System.Int32)">
      <summary>When implemented in a class, removes the item that is designated by the specified index value from the scope.</summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.IWrappedMember">
      <summary>Defines methods for accessing the object that a member is defined on.</summary>
    </member>
    <member name="M:Microsoft.JScript.IWrappedMember.GetWrappedObject">
      <summary>When implemented in a class, returns the object that a member is defined on.</summary>
      <returns>The object that a member is defined on.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSAuthor">
      <summary>Provides services for authoring JScript code in an editor. </summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSAuthor" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetCodeSense">
      <summary>Gets an object that is used to add IntelliSense to text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to add IntelliSense to text.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSAuthor.GetColorizer">
      <summary>Gets an object that is used to colorize text when JScript code is being authored in an editor.</summary>
      <returns>An object that is used to colorize text.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSBuiltin">
      <summary>Specifies the built-in JScript functions. These functions correspond to the static methods of the intrinsic JScript objects. The members of this enumeration are used to create <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.None">
      <summary>No method. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_concat">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_join">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_pop">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_push">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_reverse">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_shift">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_slice">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_sort">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_splice">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Array_unshift">
      <summary>The static <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_toString">
      <summary>The static <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Boolean_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getDay">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTime">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getTimezoneOffset">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCDay">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getUTCSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getVarDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_getYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_parse">
      <summary>The static <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setTime">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCDate">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCFullYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCHours">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMinutes">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMilliseconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCMonth">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setUTCSeconds">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_setYear">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toDateString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toGMTString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleDateString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toLocaleTimeString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toTimeString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_toUTCString">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_UTC">
      <summary>The static <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Date_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_atEnd">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_item">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveFirst">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Enumerator_moveNext">
      <summary>The static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Error_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_apply">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_call">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Function_toString">
      <summary>The static <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_CollectGarbage">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.CollectGarbage" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURI">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_decodeURIComponent">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURI">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_encodeURIComponent">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_escape">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_eval">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_GetObject">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isNaN">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_isFinite">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseFloat">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_parseInt">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngine">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineBuildVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMajorVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_ScriptEngineMinorVersion">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Global_unescape">
      <summary>The static <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_abs">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_acos">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_asin">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_atan2">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_ceil">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_cos">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_exp">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_floor">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_log">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_max">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_min">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_pow">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_random">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.random" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_round">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sin">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_sqrt">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Math_tan">
      <summary>The static <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toExponential">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toFixed">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toPrecision">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_toString">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Number_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_hasOwnProperty">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_isPrototypeOf">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_propertyIsEnumerable">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toLocaleString">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_toString">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.Object_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_compile">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_exec">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_test">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.RegExp_toString">
      <summary>The static <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_anchor">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_big">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_blink">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_bold">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charAt">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_charCodeAt">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_concat">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fixed">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontcolor">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fontsize">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_fromCharCode">
      <summary>The static <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_indexOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_italics">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_lastIndexOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_link">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_localeCompare">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_match">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_replace">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_search">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_slice">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_small">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_split">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_strike">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sub">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substr">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_substring">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_sup">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleLowerCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLocaleUpperCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toLowerCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toString">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_toUpperCase">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.String_valueOf">
      <summary>The static <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_dimensions">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_getItem">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_lbound">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_toArray">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSBuiltin.VBArray_ubound">
      <summary>The static <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSConstructor">
      <summary>Wraps a <see cref="T:Microsoft.JScript.FunctionObject" />. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Attributes">
      <summary>Gets the attributes that are associated with this constructor.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.DeclaringType">
      <summary>Gets the type that declares this constructor.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this constructor.</summary>
      <returns>An array of custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this constructor, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.GetParameters">
      <summary>Gets the parameters of this constructor.</summary>
      <returns>An array that contains information that matches the signature of this constructor.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor on the specified object, using the specified culture and binding information.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="obj">The object to call the constructor on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the constructor.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the constructor, using the specified culture and binding information.</summary>
      <returns>An instance of the class associated with the constructor.</returns>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the constructor.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSConstructor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this constructor.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Constructor" />, because this class derives from <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this constructor.</summary>
      <returns>A handle to the internal metadata representation of this constructor.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.Name">
      <summary>Gets the name of this constructor.</summary>
      <returns>The name of this constructor.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSConstructor.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptCodeProvider">
      <summary>Provides access to instances of the JScript code generator and code compiler. </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptCodeProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateCompiler">
      <summary>Returns an instance of the JScript code compiler.</summary>
      <returns>An instance of the JScript code compiler.</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptCodeProvider.CreateGenerator">
      <summary>Returns an instance of the JScript code generator.</summary>
      <returns>An instance of the JScript code generator.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptCodeProvider.FileExtension">
      <summary>Gets the file name extension for JScript code files.</summary>
      <returns>The string literal "js".</returns>
    </member>
    <member name="T:Microsoft.JScript.JScriptException">
      <summary>The exception that is thrown by JScript to notify a common language runtime (CLR) host or program that an error occurred. A <see cref="T:Microsoft.JScript.JScriptException" /> usually takes a <see cref="T:Microsoft.JScript.JSError" /> enumeration value. </summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(Microsoft.JScript.JSError)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified <see cref="T:Microsoft.JScript.JSError" />.</summary>
      <param name="errorNumber">One of the enumeration values. The value specifies the error.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified serialized data.</summary>
      <param name="info">The serialized object data about the exception that is being thrown.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JScriptException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Column">
      <summary>Gets the column in the code in which the error occurs.</summary>
      <returns>The column in the code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Description">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndColumn">
      <summary>Gets the column in the code in which the error ends.</summary>
      <returns>The column in the code in which the error ends, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.EndLine">
      <summary>Gets the line of code in which the error ends.</summary>
      <returns>The line of code in which the error ends, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.ErrorNumber">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="M:Microsoft.JScript.JScriptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Stores information about the exception, including IsError and Code values, in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
      <param name="info">The serialized object data about the exception that is being thrown.</param>
      <param name="context">Contextual information about the source or destination.</param>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Line">
      <summary>Gets the line of code in which the error occurs.</summary>
      <returns>The line of code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.LineText">
      <summary>Gets the text of the code in which the error occurs.</summary>
      <returns>The text of the code, or an empty string if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Message">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Description">
      <summary>Gets a message that describes the error.</summary>
      <returns>A message that describes the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Microsoft#JScript#Vsa#IJSVsaError#Number">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Number">
      <summary>Gets the <see cref="P:System.Exception.HResult" /> code of the error.</summary>
      <returns>The <see cref="P:System.Exception.HResult" /> code of the error.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.Severity">
      <summary>Gets a number between 0 (most severe) and 4 (least severe) that indicates the severity of the error. 0 is the default.</summary>
      <returns>A number between 0 and 4.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceItem">
      <summary>Gets the source code item that caused the error.</summary>
      <returns>The source code item; or throws a <see cref="T:Microsoft.JScript.NoContextException" /> if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.SourceMoniker">
      <summary>Gets the name of the source code file that contains the error.</summary>
      <returns>The name of the source code file, or the string literal "no source" if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StackTrace">
      <summary>Gets the stack trace information at the time of the error.</summary>
      <returns>The stack trace information.</returns>
    </member>
    <member name="P:Microsoft.JScript.JScriptException.StartColumn">
      <summary>Gets the column in the code in which the error occurs.</summary>
      <returns>The column in the code in which the error occurs, or 0 if the <see cref="T:Microsoft.JScript.Context" /> is null.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSError">
      <summary>Specifies the JScript error messages. This class belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoError">
      <summary>No error. This is the default (0) value for the enumeration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCall">
      <summary>Invalid procedure call or argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfMemory">
      <summary>Out of memory.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeMismatch">
      <summary>Type mismatch.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OutOfStack">
      <summary>Out of stack space.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InternalError">
      <summary>An internal error has been thrown.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FileNotFound">
      <summary>File not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedObject">
      <summary>An object is required.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantCreateObject">
      <summary>Cannot create object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OLENoPropOrMethod">
      <summary>Object does not support this property or method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ActionNotSupported">
      <summary>The object does not support this action.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotCollection">
      <summary>This object is not a collection.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SyntaxError">
      <summary>Discovered syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoColon">
      <summary>Expected ":".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSemicolon">
      <summary>Expected ";".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftParen">
      <summary>Expected "(".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParen">
      <summary>Expected ")".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracket">
      <summary>Expected "]".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLeftCurly">
      <summary>Expected "{".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightCurly">
      <summary>Expected "}".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoIdentifier">
      <summary>Expected identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoEqual">
      <summary>Expected "=".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalChar">
      <summary>Invalid character.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnterminatedString">
      <summary>String constant not terminated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommentEnd">
      <summary>Comment not terminated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadReturn">
      <summary>Return statement cannot appear outside the function.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadBreak">
      <summary>Cannot have break outside the loop.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadContinue">
      <summary>Cannot have continue outside the loop.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadHexDigit">
      <summary>Expected hexadecimal digit.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoWhile">
      <summary>Expected while.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadLabel">
      <summary>There is already a label that has that name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoLabel">
      <summary>Label not found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupDefault">
      <summary>default can appear only once in a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMemberIdentifier">
      <summary>Expected identifier or string.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCcEnd">
      <summary>Expected @end.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcOff">
      <summary>Conditional compilation is turned off.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotConst">
      <summary>Expected constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoAt">
      <summary>Expected @.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCatch">
      <summary>Expected catch.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidElse">
      <summary>Unmatched else; no if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoComma">
      <summary>Expected ",".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DupVisibility">
      <summary>Visibility modifier already defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalVisibility">
      <summary>Invalid visibility modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadSwitch">
      <summary>Missing case or default statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidEnd">
      <summary>Unmatched @end; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElse">
      <summary>Unmatched @else; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidElif">
      <summary>Unmatched @elif; no @if defined.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ErrEOF">
      <summary>Expecting more source characters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleVisibility">
      <summary>Incompatible visibility modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClassNotAllowed">
      <summary>Class definition not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedCompileTimeConstant">
      <summary>An expression must be a compile-time constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateName">
      <summary>Identifier already in use.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedType">
      <summary>A type name is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotInsideClass">
      <summary>Valid only inside a class definition.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPositionDirective">
      <summary>An unknown position directive was discovered.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustBeEOL">
      <summary>Directive cannot be followed by other code on the same line.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongDirective">
      <summary>Wrong debugger directive or wrong position for the directive.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotNestPositionDirective">
      <summary>Position directive must be ended before a new one can be started.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CircularDefinition">
      <summary>Circular definition.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.Deprecated">
      <summary>The specified type is deprecated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfThis">
      <summary>It is not valid to use this in the current context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAccessible">
      <summary>The object or member is not accessible from this scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseNameOfClass">
      <summary>Only a constructor function can have the same name as the class it appears in.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustImplementMethod">
      <summary>The class must provide an implementation of the method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInterface">
      <summary>An interface name is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnreachableCatch">
      <summary>Catch clause will never be reached.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeCannotBeExtended">
      <summary>Type cannot be extended.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndeclaredVariable">
      <summary>Variable has not been declared.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableLeftUninitialized">
      <summary>Uninitialized variables are dangerous and slow to use. Did you intend to leave it uninitialized?</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.KeywordUsedAsIdentifier">
      <summary>You cannot use a reserved word as an identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAllowedInSuperConstructorCall">
      <summary>Object or member is not allowed in a call to the base class constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotMeantToBeCalledDirectly">
      <summary>You cannot call this method directly. If possible, use property accessors instead.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.GetAndSetAreInconsistent">
      <summary>The get and set methods of this property do not match each other.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttribute">
      <summary>A custom attribute class must derive from <see cref="T:System.Attribute" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeArgument">
      <summary>Only primitive types are allowed in a custom attribute constructor arguments list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeClassOrCtor">
      <summary>Unknown custom attribute class or constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyParameters">
      <summary>There are too many actual parameters. The excess parameters will be ignored.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfWith">
      <summary>The <see cref="T:Microsoft.JScript.With" /> statement has made the use of this name ambiguous.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousBindingBecauseOfEval">
      <summary>The presence of <see cref="T:Microsoft.JScript.Eval" /> has made the use of this name ambiguous.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchMember">
      <summary>Objects of this type do not have such a member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ItemNotAllowedOnExpandoClass">
      <summary>Cannot define the property Item on an <see cref="T:Microsoft.JScript.Expando" /> class. This Item is reserved for the <see cref="T:Microsoft.JScript.Expando" /> fields.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodNotAllowedOnExpandoClass">
      <summary>Cannot define a property named Item on an <see cref="T:Microsoft.JScript.Expando" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodClashOnExpandoSuperClass">
      <summary>Cannot create the <see cref="T:Microsoft.JScript.Expando" /> class because a property named Item is already defined in the class hierarchy.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BaseClassIsExpandoAlready">
      <summary>A base class is already marked <see cref="T:Microsoft.JScript.Expando" />; current specification will be ignored.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBePrivate">
      <summary>An abstract method cannot be private.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotIndexable">
      <summary>Objects of this type are not indexable.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMissingInStaticInit">
      <summary>Static initializer must specify the static keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingConstructForAttributes">
      <summary>The list of attributes does not apply to the current context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAllowed">
      <summary>Only classes are allowed inside a package.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoClassShouldNotImpleEnumerable">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> classes should not implement <see cref="T:System.Collections.IEnumerable" />. The interface is implicitly defined on <see cref="T:Microsoft.JScript.Expando" /> classes.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantMember">
      <summary>The specified member is not CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotDeletable">
      <summary>The object or member cannot be deleted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageExpected">
      <summary>Package name expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessExpression">
      <summary>Expression has no effect.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesParentMember">
      <summary>base class already contains a member by this name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotChangeVisibility">
      <summary>Cannot change visibility specification of a base method.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.HidesAbstractInBase">
      <summary>Method hides abstract in a base class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NewNotSpecifiedInMethodDeclaration">
      <summary>A method matches a method in a base class. Must specify override or hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MethodInBaseIsNotVirtual">
      <summary>A method in a base class that is final or not virtualoverride is ignored. Specify hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToNew">
      <summary>There is no member in a base class to hide.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DifferentReturnTypeFromBase">
      <summary>Method in base has a different return type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ClashWithProperty">
      <summary>The name of the field conflicts with the name of the property.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OverrideAndHideUsedTogether">
      <summary>Cannot use override and hide together in a member declaration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidLanguageOption">
      <summary>Must specify either "fast" or "versionSafe" language option.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoMethodInBaseToOverride">
      <summary>There is no member in a base class to override.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidForConstructor">
      <summary>Not valid for a constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotReturnValueFromVoidFunction">
      <summary>Cannot return a value from a void function or constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousMatch">
      <summary>More than one method or property matches this parameter list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AmbiguousConstructorCall">
      <summary>More than one constructor matches this parameter list.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuperClassConstructorNotAccessible">
      <summary>Base class constructor is not accessible from this scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OctalLiteralsAreDeprecated">
      <summary>Octal literals are deprecated.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VariableMightBeUnitialized">
      <summary>Variable might not be initialized.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotOKToCallSuper">
      <summary>It is not valid to call a base class constructor from this location.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalUseOfSuper">
      <summary>It is not valid to use the base class in this way.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadWayToLeaveFinally">
      <summary>It is slow and potentially confusing to leave a finally block this way.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoCommaOrTypeDefinitionError">
      <summary>Expected "," or invalid type declaration; write "&lt;Identifier&gt; : &lt;Type&gt;" not "&lt;Type&gt; &lt;Identifier&gt;".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractWithBody">
      <summary>An abstract function cannot have a body.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightParenOrComma">
      <summary>Expected "," or ")".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoRightBracketOrComma">
      <summary>Expected "," or "]".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpressionExpected">
      <summary>Expected expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UnexpectedSemicolon">
      <summary>Unexpected ";".</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooManyTokensSkipped">
      <summary>Too many errors. The file might not be a JScript file.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadVariableDeclaration">
      <summary>Possible invalid variable declaration, var missing, or unrecognized syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadFunctionDeclaration">
      <summary>Possible invalid function declaration, function missing, or unrecognized syntax error.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadPropertyDeclaration">
      <summary>Invalid property declaration. The get accessor must not have arguments and the set accessor must have one argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DoesNotHaveAnAddress">
      <summary>Expression does not have an address.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TooFewParameters">
      <summary>Not all required parameters have been supplied.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UselessAssignment">
      <summary>An assignment creates an <see cref="T:Microsoft.JScript.Expando" /> property that is immediately thrown away.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectAssignment">
      <summary>If condition cannot contain an assignment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectSemicolon">
      <summary>Empty statement found in if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImpossibleConversion">
      <summary>The specified conversion or coercion is not possible.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FinalPrecludesAbstract">
      <summary>final and abstract cannot be used together.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedInstance">
      <summary>An instance is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotBeAbstract">
      <summary>Cannot be abstract unless class is marked as abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidBaseTypeForEnum">
      <summary>enum base type must be a primitive integral type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotInstantiateAbstractClass">
      <summary>It is not possible to construct an instance of an abstract class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayMayBeCopied">
      <summary>Assigning a JScript array to a <see cref="T:System.Array" /> may cause the array to be copied.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AbstractCannotBeStatic">
      <summary>Static methods cannot be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticIsAlreadyFinal">
      <summary>Static methods cannot be final.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotOverride">
      <summary>Static methods cannot override base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticMethodsCannotHide">
      <summary>Static methods cannot hide base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesOverride">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot override base class methods.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalParamArrayAttribute">
      <summary>A variable argument list must be of an array type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesAbstract">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ShouldBeAbstract">
      <summary>A function without a body should be abstract.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadModifierInInterface">
      <summary>This modifier cannot be used on an interface member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VarIllegalInInterface">
      <summary>Variables cannot be declared in an interface.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InterfaceIllegalInInterface">
      <summary>Interfaces cannot be declared in an interface.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoVarInEnum">
      <summary>enum member declarations should not use the var keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidImport">
      <summary>The import statement is not valid in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumNotAllowed">
      <summary>enum definition not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidCustomAttributeTarget">
      <summary>This attribute is not valid for this type of declaration.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PackageInWrongContext">
      <summary>Package definition is not allowed in this context.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ConstructorMayNotHaveReturnType">
      <summary>A constructor cannot have a return type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.OnlyClassesAndPackagesAllowed">
      <summary>Only classes and packages are allowed inside a library.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidDebugDirective">
      <summary>Invalid debug directive.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CustomAttributeUsedMoreThanOnce">
      <summary>This type of attribute must be unique.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NestedInstanceTypeCannotBeExtendedByStatic">
      <summary>A non-static nested type can be extended only by a non-static type nested in the same class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PropertyLevelAttributesMustBeOnGetter">
      <summary>An attribute that targets the property must be specified on the get accessor, if the get accessor is present.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadThrow">
      <summary>A throw statement must have an argument unless it is inside the catch block of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ParamListNotLast">
      <summary>A variable argument list must be the last argument.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchType">
      <summary>Type could not be found. An assembly reference might be missing.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BadOctalLiteral">
      <summary>Malformed octal literal treated as decimal literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InstanceNotAccessibleFromStatic">
      <summary>A non-static member is not accessible from a static scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticRequiresTypeName">
      <summary>A static member must be accessed by the class name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonStaticWithTypeName">
      <summary>A non-static member cannot be accessed with the class name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoSuchStaticMember">
      <summary>Type does not have such a static member.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SuspectLoopCondition">
      <summary>Loop condition cannot contain a function call.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpectedAssembly">
      <summary>Expected assembly.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssemblyAttributesMustBeGlobal">
      <summary>Assembly custom attributes cannot be part of another construct.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoPrecludesStatic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods cannot be static.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateMethod">
      <summary>This method has the same name, parameter types, and return type as another method in this class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotAnExpandoFunction">
      <summary>Class members used as constructors should be marked as <see cref="T:Microsoft.JScript.Expando" /> functions.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotValidVersionString">
      <summary>Not a valid version string.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExecutablesCannotBeLocalized">
      <summary>Executables cannot be localized; <see cref="P:System.Reflection.AssemblyCultureAttribute.Culture" /> should always be empty.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringConcatIsSlow">
      <summary>The plus operator is a slow way to concatenate strings. Consider using <see cref="T:System.Text.StringBuilder" /> instead.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CcInvalidInDebugger">
      <summary>Conditional compilation directives and variables cannot be used in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExpandoMustBePublic">
      <summary>
        <see cref="T:Microsoft.JScript.Expando" /> methods must be public.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DelegatesShouldNotBeExplicitlyConstructed">
      <summary>Delegates should not be explicitly constructed; simply use the method name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ImplicitlyReferencedAssemblyNotFound">
      <summary>A referenced assembly depends on another assembly that is not referenced or could not be found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversion">
      <summary>This conversion may fail at runtime.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PossibleBadConversionFromString">
      <summary>Converting a string to a number or Boolean is slow and may fail at run time.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidResource">
      <summary>This is not a valid .resources file.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WrongUseOfAddressOf">
      <summary>The address of operator can be used only in a list of arguments.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonCLSCompliantType">
      <summary>The specified type is not CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberTypeCLSCompliantMismatch">
      <summary>Class member cannot be marked Common Language Specification (CLS) compliant because the class is not marked CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeAssemblyCLSCompliantMismatch">
      <summary>Type cannot be marked CLS compliant because the assembly is not marked as CLS compliant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncompatibleAssemblyReference">
      <summary>The assembly referenced is incompatible.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidAssemblyKeyFile">
      <summary>An invalid assembly key file has been used.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeNameTooLong">
      <summary>The fully qualified type name is too long. It must be less than 1,024 characters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MemberInitializerCannotContainFuncExpr">
      <summary>A member initializer cannot contain a function expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CantAssignThis">
      <summary>Cannot assign to this.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NumberExpected">
      <summary>Expected a number.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FunctionExpected">
      <summary>A function was expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotAssignToFunctionResult">
      <summary>Cannot assign to a function result.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StringExpected">
      <summary>String expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DateExpected">
      <summary>Date object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ObjectExpected">
      <summary>Expected an object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalAssignment">
      <summary>Invalid assignment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UndefinedIdentifier">
      <summary>Undefined identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.BooleanExpected">
      <summary>No Boolean value found.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.VBArrayExpected">
      <summary>A VBArray is expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.EnumeratorExpected">
      <summary>Enumerator object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpExpected">
      <summary>
        <see cref="T:Microsoft.JScript.RegExpObject" /> object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RegExpSyntax">
      <summary>Syntax error in regular expression.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.UncaughtException">
      <summary>Exception thrown and not caught.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.InvalidPrototype">
      <summary>This function does not have a valid prototype object.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIEncodeError">
      <summary>The URI to be encoded contains an invalid character.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.URIDecodeError">
      <summary>The URI to be decoded is not a valid encoding.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FractionOutOfRange">
      <summary>The number of fractional digits is out of range.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.PrecisionOutOfRange">
      <summary>The precision is out of range.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthConstructIncorrect">
      <summary>Array length must be a finite positive integer.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ArrayLengthAssignIncorrect">
      <summary>Array length must be assigned a finite positive number.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NeedArrayObject">
      <summary>A "|" is not an array object. Array object expected.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoConstructor">
      <summary>No such constructor.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IllegalEval">
      <summary>An <see cref="T:Microsoft.JScript.Eval" /> cannot be called by an alias.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NotYetImplemented">
      <summary>Not yet implemented.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MustProvideNameForNamedParameter">
      <summary>Cannot provide null or empty named parameter name.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.DuplicateNamedParameter">
      <summary>Duplicate named parameter.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MissingNameParameter">
      <summary>The specified named parameter name is not one of the formal parameters.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.MoreNamedParametersThanArguments">
      <summary>Too few arguments specified. The number of named parameter names cannot exceed the number of arguments passed in.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonSupportedInDebugger">
      <summary>The expression cannot be evaluated in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.AssignmentToReadOnly">
      <summary>Cannot assign to read-only field or property.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.WriteOnlyProperty">
      <summary>The property is write-only.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.IncorrectNumberOfIndices">
      <summary>The number of indices does not match the dimension of the array.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.RefParamsNonSupportedInDebugger">
      <summary>Methods with ref parameters cannot be called in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotCallSecurityMethodLateBound">
      <summary>The <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />, and <see cref="M:System.Security.CodeAccessPermission.Assert" /> security methods cannot be called using late binding.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.CannotUseStaticSecurityAttribute">
      <summary>JScript does not support static security attributes.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NonClsException">
      <summary>A target threw a non-CLS exception.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalAborted">
      <summary>Function evaluation was aborted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalTimedout">
      <summary>Function evaluation timed out.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSuspended">
      <summary>Function evaluation failed. The thread is suspended.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalThreadSleepWaitJoin">
      <summary>Function evaluation failed. The thread is sleeping, waiting for an object, or waiting for another thread to finish.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadState">
      <summary>Function evaluation failed. The thread can contain incorrect data.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadThreadNotStarted">
      <summary>Function evaluation failed and the thread has not started.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.NoFuncEvalAllowed">
      <summary>Function evaluation aborted. To turn on property evaluation, click Options on the Tools menu and then select the Debugging in the tree view.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalBadLocation">
      <summary>Function evaluation cannot be done when stopped at this point in the program.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.FuncEvalWebMethod">
      <summary>Cannot call a Web method in the debugger.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.StaticVarNotAvailable">
      <summary>A static variable is not available.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.TypeObjectNotAvailable">
      <summary>The type object for this type is not available.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.ExceptionFromHResult">
      <summary>Exception from HRESULT.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSError.SideEffectsDisallowed">
      <summary>The expression causes side effects and will not be evaluated.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSField">
      <summary>Supports all fields in JScript. This is the base class for all fields that are defined by JScript. This class belongs to the name binding category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSField.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSField" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.JSField.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>
        <see cref="F:System.Reflection.FieldAttributes.PrivateScope" />
      </returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldHandle">
      <summary>Gets a handle to the internal metadata representation of this field.</summary>
      <returns>A handle to the internal metadata representation of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSField.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSField.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSField.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The type that declares this method.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFieldInfo">
      <summary>Wraps a <see cref="T:System.Reflection.FieldInfo" /> object. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldHandle">
      <summary>Gets a handle to the internal metadata representation of this field.</summary>
      <returns>A handle to the internal metadata representation of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Reflection.FieldInfo" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.GetValue(System.Object)">
      <summary>Gets the value of the field.</summary>
      <returns>The value of the field.</returns>
      <param name="obj">The object whose field value will be returned.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this field.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.MemberType">
      <summary>Gets the type of member that this field is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Field" />, because this class derives from <see cref="T:System.Reflection.FieldInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSFieldInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object that was used to obtain this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object)">
      <summary>Sets the value of the field, using the specified value.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field, using the specified value, culture, and binding information.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttribute">
      <summary>Used with <see cref="T:Microsoft.JScript.JSFunctionAttributeEnum" /> to annotate the calling conventions of methods and constructors that are generated by the JScript compiler.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> class, using the specified calling conventions.</summary>
      <param name="value">The calling conventions of the method or constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.#ctor(Microsoft.JScript.JSFunctionAttributeEnum,Microsoft.JScript.JSBuiltin)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> class, using the specified calling conventions. The attribute identifies the specified built-in function.</summary>
      <param name="value">The calling conventions of the method or constructor.</param>
      <param name="builtinFunction">The built-in function that this attribute identifies.</param>
    </member>
    <member name="M:Microsoft.JScript.JSFunctionAttribute.GetAttributeValue">
      <summary>Gets the calling conventions of the method or constructor.</summary>
      <returns>The calling conventions of the method or constructor.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSFunctionAttributeEnum">
      <summary>Specifies the calling conventions of functions that are generated by the JScript compiler. Used with the <see cref="T:Microsoft.JScript.JSFunctionAttribute" /> custom attribute.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.None">
      <summary>Specifies a regular .NET Framework method with no special calling conventions. Typically not used as in this case the JSFunctionAttribute is not emitted.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments">
      <summary>Specifies that the third parameter of the function is of type Object. The caller should pass in an object that implements the JScript arguments object, typically an instance of <see cref="T:Microsoft.JScript.ArgumentsObject" />. The JScript runtime assumes that if <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" /> is set, then <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" /> and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> are also set.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject">
      <summary>Specifies that the first parameter of the function is of type Object and that it is usually named <paramref name="thisob" />. The caller should pass in an instance of the object that the function acts on.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested">
      <summary>Specifies that the function is nested in another JScript function.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame">
      <summary>Specifies that the function copies its local variables into a stack frame object maintained by the JScript runtime before making a call out. It copies the variables back from the stack frame object to its locals when control is returned to the function. This flag is set on functions that contain nested functions that access the parent function's locals.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasVarArgs">
      <summary>Specifies that the function takes a variable number of arguments. The last parameter is of type array of Object, which holds any arguments that are explicitly specified.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine">
      <summary>Specifies that the second parameter of the function is of type <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />. The caller should pass in an instance of <see cref="T:Microsoft.JScript.Vsa.VsaEngine" /> from which the function can retrieve the runtime infrastructure. The JScript runtime assumes that if <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" /> is set then <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" /> is also set.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsExpandoMethod">
      <summary>Specifies that the function is a constructor function for a prototype-based object. For more information, see Prototype-based Objects and expando Modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.IsInstanceNestedClassConstructor">
      <summary>Specifies that the function is a constructor for a nested instance class. The first parameter of the function an instance of the parent class.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />, <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />, and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />, <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested" />, and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicNestedFunction">
      <summary>Specifies the aggregate of <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction" /> and <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSLocalField">
      <summary>Represents a local variable.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.#ctor(System.String,System.RuntimeTypeHandle,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSLocalField" /> class, using the specified name, handle, and slot number.</summary>
      <param name="name">The name of this field.</param>
      <param name="handle">A handle to the internal metadata representation of this field.</param>
      <param name="slotNumber">The slot number of the variable.</param>
    </member>
    <member name="P:Microsoft.JScript.JSLocalField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.GetValue(System.Object)">
      <summary>Gets the value of the field.</summary>
      <returns>The value of the field.</returns>
      <param name="obj">The object whose field value will be returned.</param>
    </member>
    <member name="M:Microsoft.JScript.JSLocalField.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Sets the value of the field, using the specified value, culture, and binding information.</summary>
      <param name="obj">The object whose field value will be set.</param>
      <param name="value">The value to assign to the field.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="T:Microsoft.JScript.JSMethod">
      <summary>Represents a JScript method. This class belongs to the name binding category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method on the direct or indirect base class in which this method was first declared.</summary>
      <returns>this in all cases.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method, searching only for attributes of the specified type.</summary>
      <returns>An array of <see cref="T:System.Object" /> objects that has zero elements.</returns>
      <param name="t">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>
        <see cref="F:System.Reflection.MethodImplAttributes.Managed" /> and <see cref="F:System.Reflection.MethodImplAttributes.IL" />.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the method, using the specified information.</summary>
      <returns>The return value of the call to the method.</returns>
      <param name="obj">The object to call the method on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the method.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this method.</summary>
      <returns>false in all cases.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this method.</summary>
      <returns>A handle to the internal metadata representation of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The type that declares this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethod.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>null in all cases.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSMethodInfo">
      <summary>Wraps a <see cref="T:System.Reflection.MethodInfo" /> object. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Attributes">
      <summary>Gets the attributes that are associated with this method.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.DeclaringType">
      <summary>Gets the type that declares this method.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetBaseDefinition">
      <summary>Returns the <see cref="T:System.Reflection.MethodInfo" /> object for the method of the direct or indirect base class in which this method was first declared.</summary>
      <returns>The first implementation of this method in the hierarchy.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method.</summary>
      <returns>An array that contains the custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this method, searching only for attributes of the specified type.</summary>
      <returns>An array that contains the custom attributes that are attached to this method, or, if there are none, an array that has zero elements.</returns>
      <param name="type">The type of attribute to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetMethodImplementationFlags">
      <summary>Returns information about the implementation of this method.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.GetParameters">
      <summary>Gets the parameters of this method.</summary>
      <returns>An array that contains information that matches the signature of this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Invokes the method, using the specified information.</summary>
      <returns>The return value of the call to the method.</returns>
      <param name="obj">The object to call the method on.</param>
      <param name="options">A bitwise combination of the enumeration values that control the binding.</param>
      <param name="binder">An object that converts the type from actual argument type to formal argument type.</param>
      <param name="parameters">The argument list to pass to the method.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether the specified attribute type is attached to this method.</summary>
      <returns>true if one or more instances of the specified attribute <paramref name="type" /> is attached to this method; otherwise, false.</returns>
      <param name="type">The attribute type to search for.</param>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MemberType">
      <summary>Gets the type of member that this method is. Identifies the type of class derived from <see cref="T:System.Reflection.MemberInfo" /> that this class derives from.</summary>
      <returns>
        <see cref="F:System.Reflection.MemberTypes.Method" />, because this class derives from <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.MethodHandle">
      <summary>Gets a handle to the internal metadata representation of this method.</summary>
      <returns>A handle to the internal metadata representation of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.Name">
      <summary>Gets the name of this method.</summary>
      <returns>The name of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReflectedType">
      <summary>Gets the class object that was used to obtain this instance through reflection.</summary>
      <returns>The Type object that was used to obtain this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnType">
      <summary>Gets the type of the return value of this method.</summary>
      <returns>The type of the return value of this method.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSMethodInfo.ReturnTypeCustomAttributes">
      <summary>Gets the custom attributes for the type of the return value of this method.</summary>
      <returns>The custom attributes for the type of the return value of this method.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSMethodInfo.ToString">
      <summary>Returns a string that represents the method.</summary>
      <returns>A string that represents the method.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSObject">
      <summary>Represents an object in JScript. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSObject" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.AddField(System.String)">
      <summary>Adds the specified field to the object.</summary>
      <returns>The new field, if it is successfully added.</returns>
      <param name="name">The name of the field to add.</param>
    </member>
    <member name="F:Microsoft.JScript.JSObject.field_table">
      <summary>Stores a list of fields that are dynamically added and removed from the object.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match the specified name.</summary>
      <returns>An array of members that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)">
      <summary>Sets the value of a field that was dynamically added to the object and stored in <see cref="F:Microsoft.JScript.JSObject.field_table" />.</summary>
      <param name="name">The name of the field for which to set the value.</param>
      <param name="value">The new value of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the members of the object.</summary>
      <returns>An enumerator object that is used to iterate through the members of the object.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)">
      <summary>Adds the specified method to the object. <see cref="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)" /> is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the method to add.</param>
      <param name="method">The delegate to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)">
      <summary>Adds the specified property to the object. This method is not implemented in JScript.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the property to add.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)">
      <summary>Removes the specified member from the object.</summary>
      <param name="m">The name of the member to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.JSObject.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSParser">
      <summary>Parses JScript code. This class belongs to the scanning and parsing category. For more information about scanning and parsing, see Create a Language Compiler for the .NET Framework.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSParser.#ctor(Microsoft.JScript.Context)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSParser" /> class, specifying the source code to parse.</summary>
      <param name="context">The source code to parse.</param>
    </member>
    <member name="M:Microsoft.JScript.JSParser.Parse">
      <summary>Parses the source code.</summary>
      <returns>The root of the abstract syntax tree that is created by parsing the code.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSParser.ParseEvalBody">
      <summary>Parses the source code. Use this method instead of <see cref="M:Microsoft.JScript.JSParser.Parse" /> when the source code is inside an eval method call.</summary>
      <returns>The root of the abstract syntax tree that is created by parsing the code.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSPrototypeObject">
      <summary>Adds a constructor function property to a <see cref="T:Microsoft.JScript.JSObject" /> for early binding purposes. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSPrototypeObject.constructor">
      <summary>Stores a constructor function object that defines a prototype-based object.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSScanner">
      <summary>Scans JScript code searching for individual units of code, or tokens. This class belongs to the scanning and parsing category. For more information about scanning and parsing, see Create a Language Compiler for the .NET Framework.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSScanner" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.#ctor(Microsoft.JScript.Context)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.JSScanner" /> class, specifying the source code to scan.</summary>
      <param name="sourceContext">The source code to scan.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentLine">
      <summary>Gets the current line number in the code. This is a pointer that moves as the code is scanned.</summary>
      <returns>The current line number in the code.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetCurrentPosition(System.Boolean)">
      <summary>Gets the current position in the code string. This is a pointer that moves as the code is scanned.</summary>
      <returns>The current position in the code string.</returns>
      <param name="absolute">This parameter is ignored.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetNextToken">
      <summary>Scans for the next token in the code.</summary>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetSourceCode">
      <summary>Gets the source code that is associated with this scanner object.</summary>
      <returns>The source code to scan.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStartLinePosition">
      <summary>Gets the position in the code string where the first line of the current code starts. All lines of code are stored in a single string. This is a pointer that moves as the code is scanned.</summary>
      <returns>The position in the code string where the first line of the current code starts.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GetStringLiteral">
      <summary>Gets a string that has been scanned and had all its escape sequences replaced.</summary>
      <returns>A string that has been scanned and had all its escape sequences replaced.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.GotEndOfLine">
      <summary>Indicates whether the end of a line was reached after the scanner scans or peeks for a token.</summary>
      <returns>true if the end of the line was reached; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsKeyword(Microsoft.JScript.JSToken)">
      <summary>Determines whether the specified token is a keyword in the JScript language.</summary>
      <returns>true if the token is a keyword; otherwise, false.</returns>
      <param name="token">The token to check.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.IsOperator(Microsoft.JScript.JSToken)">
      <summary>Determines whether the specified token is an operator in the JScript language.</summary>
      <returns>true if the token is an operator; otherwise, false.</returns>
      <param name="token">The token to check.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetAuthoringMode(System.Boolean)">
      <summary>Sets a flag that indicates whether the scanner is operating in authoring mode.</summary>
      <param name="mode">true to indicate authoring mode; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SetSource(Microsoft.JScript.Context)">
      <summary>Sets the source code to scan.</summary>
      <param name="sourceContext">The source code to scan.</param>
    </member>
    <member name="M:Microsoft.JScript.JSScanner.SkipMultiLineComment">
      <summary>Skips a comment that spans multiple lines, and advances the pointers that identify the current position in the code.</summary>
      <returns>The new current position in the code string.</returns>
    </member>
    <member name="T:Microsoft.JScript.JSToken">
      <summary>Specifies the individual units of code, or tokens, that make up the JScript language.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.None">
      <summary>No token. For example, before scanning any tokens, or in error situations.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfFile">
      <summary>The end of the file being scanned or parsed. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.If">
      <summary>The if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.For">
      <summary>The for statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Do">
      <summary>The do statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.While">
      <summary>The while statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Continue">
      <summary>The continue statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Break">
      <summary>The break statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Return">
      <summary>The return statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Import">
      <summary>The import statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.With">
      <summary>The with statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Switch">
      <summary>The switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throw">
      <summary>The throw statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Try">
      <summary>The try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Package">
      <summary>The package statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Internal">
      <summary>The internal modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Abstract">
      <summary>The abstract modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Public">
      <summary>The public modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Static">
      <summary>The static modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Private">
      <summary>The private modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Protected">
      <summary>The protected modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Final">
      <summary>The final modifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Event">
      <summary>The event reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Var">
      <summary>The var statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Const">
      <summary>The const statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Class">
      <summary>The class statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Function">
      <summary>The function statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftCurly">
      <summary>The { symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Semicolon">
      <summary>The ; symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Null">
      <summary>The null literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.True">
      <summary>The true literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.False">
      <summary>The false literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.This">
      <summary>The this statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Identifier">
      <summary>An identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StringLiteral">
      <summary>A numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.IntegerLiteral">
      <summary>An integer literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NumericLiteral">
      <summary>A numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftParen">
      <summary>The ( symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftBracket">
      <summary>The [ symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.AccessField">
      <summary>The . field accessor symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalNot">
      <summary>The ! logical NOT operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseNot">
      <summary>The ~ bitwise NOT operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Delete">
      <summary>The delete operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Void">
      <summary>The void operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Typeof">
      <summary>The typeof operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Increment">
      <summary>The ++ increment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decrement">
      <summary>The -- decrement operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.FirstBinaryOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Plus">
      <summary>The + addition operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Minus">
      <summary>The - subtraction operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalOr">
      <summary>The || logical OR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LogicalAnd">
      <summary>The &amp;&amp; logical AND operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOr">
      <summary>The | bitwise OR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXor">
      <summary>The ^ bitwise XOR operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAnd">
      <summary>The &amp; bitwise AND operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Equal">
      <summary>The == equality comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.NotEqual">
      <summary>The != inequality comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictEqual">
      <summary>The === identity comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.StrictNotEqual">
      <summary>The !== identity comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThan">
      <summary>The &gt; relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThan">
      <summary>The &lt; relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LessThanEqual">
      <summary>The &lt;= relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.GreaterThanEqual">
      <summary>The &gt;= relational comparison operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShift">
      <summary>The &lt;&lt; bitwise left shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShift">
      <summary>The &gt;&gt; bitwise right shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShift">
      <summary>The &gt;&gt;&gt; unsigned right shift operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Multiply">
      <summary>The * multiplication operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Divide">
      <summary>The / division operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Modulo">
      <summary>The % modulus operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastPPOperator">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastPPOperator then... PPOperators are operations that can be pre-processed.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Instanceof">
      <summary>The instanceof operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.In">
      <summary>The in operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assign">
      <summary>The = assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PlusAssign">
      <summary>The += addition assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MinusAssign">
      <summary>The -= subtraction assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.MultiplyAssign">
      <summary>The *= multiplication assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DivideAssign">
      <summary>The /= division assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseAndAssign">
      <summary>The &amp;= bitwise AND assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseOrAssign">
      <summary>The |= bitwise OR assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.BitwiseXorAssign">
      <summary>The ^= bitwise XOR assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ModuloAssign">
      <summary>The %= modulus assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LeftShiftAssign">
      <summary>The &lt;&lt;= left shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightShiftAssign">
      <summary>The &gt;&gt;= right shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnsignedRightShiftAssign">
      <summary>The &gt;&gt;&gt;= unsigned right shift assignment operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastAssign">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.Assign &lt;= token &amp;&amp; token &lt;= JSToken.LastAssign then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastBinaryOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ConditionalIf">
      <summary>The ? ternary operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Colon">
      <summary>The : ternary operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comma">
      <summary>The , comma operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.LastOp">
      <summary>A placeholder enumeration member that enables comparisons such as if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Case">
      <summary>The case keyword of a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Catch">
      <summary>The catch keyword of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Debugger">
      <summary>The debugger statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Default">
      <summary>The default keyword of a switch statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Else">
      <summary>The else keyword of an if statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Export">
      <summary>The export reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Extends">
      <summary>The extends keyword of a class statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Finally">
      <summary>The finally keyword of a try statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Get">
      <summary>The get keyword of a function get statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Implements">
      <summary>The implements keyword of a class or interface statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Interface">
      <summary>The interface statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.New">
      <summary>The new operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Set">
      <summary>The set keyword of a function set statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Super">
      <summary>The super statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightParen">
      <summary>The ) symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightCurly">
      <summary>The } symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.RightBracket">
      <summary>The ] symbol.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessorConstant">
      <summary>A preprocessor constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Comment">
      <summary>Comment text.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.UnterminatedComment">
      <summary>An un-terminated comment.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Assert">
      <summary>The assert reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Boolean">
      <summary>The boolean data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Byte">
      <summary>The byte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Char">
      <summary>The char data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Decimal">
      <summary>The decimal data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Double">
      <summary>The double data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.DoubleColon">
      <summary>The :: reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Enum">
      <summary>The enum statement.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ensure">
      <summary>The ensure reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Float">
      <summary>The float data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Goto">
      <summary>The goto reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Int">
      <summary>The int data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Invariant">
      <summary>The invariant reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Long">
      <summary>The long data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Namespace">
      <summary>The namespace reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Native">
      <summary>The native reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Require">
      <summary>The require reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Sbyte">
      <summary>The sbyte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Short">
      <summary>The short data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Synchronized">
      <summary>The synchronized reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Transient">
      <summary>The transient reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Throws">
      <summary>The throws reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.ParamArray">
      <summary>The ... reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Volatile">
      <summary>The volatile reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ushort">
      <summary>The ushort data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Uint">
      <summary>The uint data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Ulong">
      <summary>The ulong data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.Use">
      <summary>The use reserved word.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.EndOfLine">
      <summary>The end of the line being parsed.</summary>
    </member>
    <member name="F:Microsoft.JScript.JSToken.PreProcessDirective">
      <summary>A preprocessor directive.</summary>
    </member>
    <member name="T:Microsoft.JScript.JSVariableField">
      <summary>Supports variable fields in JScript. This is the base class for parameters, local variables, global variables, and class members. </summary>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Attributes">
      <summary>Gets the attributes that are associated with this field.</summary>
      <returns>A bitwise combination of the enumeration values.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.DeclaringType">
      <summary>Gets the type that declares this field.</summary>
      <returns>The Type object for the class that declares this member.</returns>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.FieldType">
      <summary>Gets the type of this field.</summary>
      <returns>The type of this field.</returns>
    </member>
    <member name="M:Microsoft.JScript.JSVariableField.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array that contains the custom attributes that are attached to this field.</summary>
      <returns>An array that contains the custom attributes that are attached to this field, or, if there are none, an array that has zero elements.</returns>
      <param name="inherit">true to search this member's inheritance hierarchy to find the attributes.</param>
    </member>
    <member name="P:Microsoft.JScript.JSVariableField.Name">
      <summary>Gets the name of this field.</summary>
      <returns>The name of this field.</returns>
    </member>
    <member name="T:Microsoft.JScript.LateBinding">
      <summary>Represents a reference to a class member, callable expression, or variable name. This class attempts to resolve the reference to the correct value at run time. </summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.LateBinding" /> class, using the specified identifier.</summary>
      <param name="name">A string that identifies the binding reference.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.LateBinding" /> class, using the specified identifier and object.</summary>
      <param name="name">A string that identifies the binding reference.</param>
      <param name="obj">The object that the binding reference is defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Call(System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="thisob">The object that the binding reference is defined on.</param>
      <param name="val">Information about the member to call.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.CallValue2(System.Object,System.Object,System.Object[],System.Boolean,System.Boolean,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Resolves the binding reference by calling a member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="val">Information about the member to call.</param>
      <param name="thisob">The object that the binding reference is defined on.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="construct">true to use the construct method; otherwise, false.</param>
      <param name="brackets">true if the binding reference contains brackets; otherwise, false.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.Delete">
      <summary>Deletes the binding reference member from the object that the binding reference is defined on.</summary>
      <returns>true if the member was successfully deleted; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.DeleteMember(System.Object,System.String)">
      <summary>Deletes the specified member from the specified object.</summary>
      <returns>true if the member was successfully deleted; otherwise, false.</returns>
      <param name="obj">The object to delete from.</param>
      <param name="name">The member to delete.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetNonMissingValue">
      <summary>Gets the value of the binding reference, and converts a <see cref="T:Microsoft.JScript.Missing" /> value to null.</summary>
      <returns>The value of the binding reference; otherwise, null.</returns>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.GetValue2">
      <summary>Gets the value of the binding reference, and throws an exception if it cannot be resolved.</summary>
      <returns>The value of the binding reference.</returns>
    </member>
    <member name="F:Microsoft.JScript.LateBinding.obj">
      <summary>Stores a reference to the object that the binding reference is defined on.</summary>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetIndexedPropertyValueStatic(System.Object,System.Object[],System.Object)">
      <summary>Sets an indexed property.</summary>
      <param name="obj">The object that the binding reference is defined on.</param>
      <param name="arguments">The arguments to pass to the member.</param>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="M:Microsoft.JScript.LateBinding.SetValue(System.Object)">
      <summary>Sets a property.</summary>
      <param name="value">The new value of the property.</param>
    </member>
    <member name="T:Microsoft.JScript.LenientArrayPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientArrayPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.concat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.join">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.pop">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.push">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.reverse">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.shift">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.slice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.sort">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.splice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientArrayPrototype.unshift">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.ArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientBooleanPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientBooleanPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientBooleanPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.BooleanPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDateConstructor">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.DateConstructor" /> class. The <see cref="T:Microsoft.JScript.LenientDateConstructor" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.parse">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDateConstructor.UTC">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DateConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientDatePrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.DatePrototype" /> class. The <see cref="T:Microsoft.JScript.LenientDatePrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.DateConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getDay">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTime">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getTimezoneOffset">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCDay">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getUTCSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getVarDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.getYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setTime">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCDate">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCFullYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCHours">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMilliseconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMinutes">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCMonth">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setUTCSeconds">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.setYear">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toDateString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toGMTString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleDateString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toLocaleTimeString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toTimeString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.toUTCString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientDatePrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.DatePrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientEnumeratorPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientEnumeratorPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.atEnd">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.item">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveFirst">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientEnumeratorPrototype.moveNext">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" /> method of the <see cref="T:Microsoft.JScript.EnumeratorPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientErrorPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientErrorPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.name">
      <summary>Stores a string that contains the name of the subtype of the error.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientErrorPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ErrorPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientFunctionPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientFunctionPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.apply">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.call">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientFunctionPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.FunctionPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientGlobalObject">
      <summary>Stores constructor function objects, data type information, and objects that represent the static methods of the <see cref="T:Microsoft.JScript.GlobalObject" /> class. The <see cref="T:Microsoft.JScript.LenientGlobalObject" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ActiveXObject">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Array">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ArrayConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ArrayConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.boolean">
      <summary>Stores the managed type that corresponds to the JScript boolean data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Boolean">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.BooleanConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.BooleanConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.byte">
      <summary>Stores the managed type that corresponds to the JScript byte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.char">
      <summary>Stores the managed type that corresponds to the JScript char data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Date">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.LenientDateConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientDateConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decimal">
      <summary>Stores the managed type that corresponds to the JScript decimal data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURI">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.decodeURIComponent">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.double">
      <summary>Stores the managed type that corresponds to the JScript double data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURI">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.encodeURIComponent">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Enumerator">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.EnumeratorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Error">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.escape">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.eval">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.EvalError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as an <see cref="F:Microsoft.JScript.ErrorType.EvalError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.float">
      <summary>Stores the managed type that corresponds to the JScript float data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Function">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.FunctionConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.FunctionConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.GetObject">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.Infinity">
      <summary>Represents positive infinity.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.int">
      <summary>Stores the managed type that corresponds to the JScript int data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isFinite">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.isNaN">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.long">
      <summary>Stores the managed type that corresponds to the JScript long data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Math">
      <summary>Gets or sets a <see cref="T:Microsoft.JScript.LenientMathObject" /> object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientMathObject" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.NaN">
      <summary>Represents a value that is not a number (NaN).</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Number">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.NumberConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.Object">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ObjectConstructor" /> constructor function object.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseFloat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.parseInt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RangeError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.RangeError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.ReferenceError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.RegExp">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.RegExpConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.sbyte">
      <summary>Stores the managed type that corresponds to the JScript sbyte data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngine">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineBuildVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMajorVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ScriptEngineMinorVersion">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.short">
      <summary>Stores the managed type that corresponds to the JScript short data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.String">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.LenientStringConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.LenientStringConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.SyntaxError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.TypeError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.TypeError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.uint">
      <summary>Stores the managed type that corresponds to the JScript uint data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ulong">
      <summary>Stores the managed type that corresponds to the JScript ulong data type.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.undefined">
      <summary>Represents a value that is null.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.unescape">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" /> method of the <see cref="T:Microsoft.JScript.GlobalObject" /> class.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.URIError">
      <summary>Gets or sets a prototype-based object that is defined by an <see cref="T:Microsoft.JScript.ErrorConstructor" /> constructor function object, and that is initialized as a <see cref="F:Microsoft.JScript.ErrorType.URIError" />.</summary>
      <returns>An <see cref="T:Microsoft.JScript.ErrorConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.ushort">
      <summary>Stores the managed type that corresponds to the JScript ushort data type.</summary>
    </member>
    <member name="P:Microsoft.JScript.LenientGlobalObject.VBArray">
      <summary>Gets or sets a prototype-based object that is defined by a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> constructor function object.</summary>
      <returns>A <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</returns>
    </member>
    <member name="F:Microsoft.JScript.LenientGlobalObject.void">
      <summary>Stores the managed type that corresponds to the return value of a function that does not return a value.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientMathObject">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.MathObject" /> class. The <see cref="T:Microsoft.JScript.LenientMathObject" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.abs">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.acos">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.asin">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.atan2">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.ceil">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.cos">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.E">
      <summary>Stores a value that represents Euler's constant, the base of the natural logarithm, specified by the constant e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.exp">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.floor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN10">
      <summary>Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LN2">
      <summary>Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.log">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG10E">
      <summary>Stores a value that represents the logarithm base 10 of e, the common logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.LOG2E">
      <summary>Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.max">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.min">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.PI">
      <summary>Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.pow">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.random">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.random" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.round">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sin">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.sqrt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT1_2">
      <summary>Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.SQRT2">
      <summary>Stores a value that represents √2.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientMathObject.tan">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" /> method of the <see cref="T:Microsoft.JScript.MathObject" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientNumberPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientNumberPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.NumberConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toExponential">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toFixed">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toPrecision">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientNumberPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.NumberPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientObjectPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientObjectPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.constructor">
      <summary>Stores a reference to an <see cref="T:Microsoft.JScript.ObjectConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.hasOwnProperty">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.isPrototypeOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.propertyIsEnumerable">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toLocaleString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientObjectPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.ObjectPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientRegExpPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientRegExpPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.compile">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.RegExpConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.exec">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.test">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientRegExpPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.RegExpPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringConstructor">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.StringConstructor" /> class. The <see cref="T:Microsoft.JScript.LenientStringConstructor" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringConstructor.fromCharCode">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringConstructor" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientStringPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.StringPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientStringPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.anchor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.big">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.blink">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.bold">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charAt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.charCodeAt">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.concat">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.StringConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fixed">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontcolor">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.fontsize">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.indexOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.italics">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.lastIndexOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.link">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.localeCompare">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.match">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.replace">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.search">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.slice">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.small">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.split">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.strike">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sub">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substr">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.substring">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.sup">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleLowerCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLocaleUpperCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toLowerCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toString">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.toUpperCase">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientStringPrototype.valueOf">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" /> method of the <see cref="T:Microsoft.JScript.StringPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.LenientVBArrayPrototype">
      <summary>Stores objects that represent the static methods of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class. The <see cref="T:Microsoft.JScript.LenientVBArrayPrototype" /> class belongs to the built-in object model category.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.constructor">
      <summary>Stores a reference to a <see cref="T:Microsoft.JScript.VBArrayConstructor" /> object.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.dimensions">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.getItem">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.lbound">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.toArray">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.LenientVBArrayPrototype.ubound">
      <summary>Stores an object that represents the static <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" /> method of the <see cref="T:Microsoft.JScript.VBArrayPrototype" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.MathObject">
      <summary>Provides constants and static methods for trigonometric functions, logarithmic functions, and other common mathematical functions. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.abs(System.Double)">
      <summary>Calculates the absolute value of the specified number.</summary>
      <returns>The absolute value of <paramref name="d" />.</returns>
      <param name="d">The number to calculate the absolute value of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.acos(System.Double)">
      <summary>Calculates the inverse cosine of the specified number.</summary>
      <returns>The inverse cosine of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse cosine of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.asin(System.Double)">
      <summary>Calculates the inverse sine of the specified number.</summary>
      <returns>The inverse sine of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse sine of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan(System.Double)">
      <summary>Calculates the inverse tangent of the specified number.</summary>
      <returns>The inverse tangent of <paramref name="x" />, measured in radians.</returns>
      <param name="x">The number to calculate the inverse tangent of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)">
      <summary>Calculates the inverse tangent of the quotient of the specified numbers.</summary>
      <returns>The inverse tangent of <paramref name="dy" />/<paramref name="dx" />, measured in radians.</returns>
      <param name="dy">The numerator of the quotient to calculate the inverse tangent of.</param>
      <param name="dx">The denominator of the quotient to calculate the inverse tangent of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.ceil(System.Double)">
      <summary>Calculates the ceiling of the specified number, which is the smallest integer that is greater than or equal to the specified number.</summary>
      <returns>The ceiling of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the ceiling of.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.cos(System.Double)">
      <summary>Calculates the cosine of the specified angle.</summary>
      <returns>The cosine of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.E">
      <summary>Stores a value that represents Euler's constant, which is the base of the natural logarithm, specified by the constant e.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.exp(System.Double)">
      <summary>Calculates the number e to the raised specified power, where e is Euler's constant, the base of the natural logarithm.</summary>
      <returns>The number e raised to the <paramref name="x" /> power.</returns>
      <param name="x">The power to raise e to.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.floor(System.Double)">
      <summary>Calculates the floor of the specified number, which is the largest integer that is less than or equal to the specified number.</summary>
      <returns>The floor of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the floor of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN10">
      <summary>Stores a value that represents the logarithm base e of 10, the natural logarithm of 10.</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LN2">
      <summary>Stores a value that represents the logarithm base e of 2, the natural logarithm of 2.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.log(System.Double)">
      <summary>Calculates the logarithm base e of the specified number, which is the natural logarithm of the specified number.</summary>
      <returns>The natural logarithm of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the natural logarithm of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG10E">
      <summary>Stores a value that represents the logarithm base 10 of e, the common logarithm of e.</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.LOG2E">
      <summary>Stores a value that represents the logarithm base 2 of e, the binary logarithm of e.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])">
      <summary>Returns the largest of two or more specified numbers.</summary>
      <returns>The largest of <paramref name="x" />, <paramref name="y" />, and the numbers that are contained in <paramref name="args" />.</returns>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare.</param>
      <param name="args">Additional numbers to compare.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])">
      <summary>Returns the smallest of two or more specified numbers.</summary>
      <returns>The smallest of <paramref name="x" />, <paramref name="y" />, and the numbers that are contained in <paramref name="args" />.</returns>
      <param name="x">The first number to compare.</param>
      <param name="y">The second number to compare.</param>
      <param name="args">Additional numbers to compare.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.PI">
      <summary>Stores a value that represents the ratio of the circumference of a circle to its diameter, specified by the constant π.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)">
      <summary>Calculates the specified number raised to the specified power.</summary>
      <returns>The number <paramref name="dx" /> raised to the <paramref name="dy" /> power.</returns>
      <param name="dx">The number to raise to the <paramref name="dy" /> power.</param>
      <param name="dy">The power to raise <paramref name="dx" /> to.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.random">
      <summary>Generates a random number between 0 and 1. This method does not generate a cryptographically secure random number.</summary>
      <returns>A number that is greater than or equal to 0, and less than 1.</returns>
    </member>
    <member name="M:Microsoft.JScript.MathObject.round(System.Double)">
      <summary>Rounds the specified number down or up to the nearest integer.</summary>
      <returns>If the fractional part of <paramref name="d" /> is less than halfway to the next integer, <paramref name="d" /> rounded down. If the fractional part of <paramref name="d" /> is halfway or more to the next integer, <paramref name="d" /> rounded up.</returns>
      <param name="d">The number to round.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sin(System.Double)">
      <summary>Calculates the sine of the specified angle.</summary>
      <returns>The sine of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="M:Microsoft.JScript.MathObject.sqrt(System.Double)">
      <summary>Calculates the square root of the specified number.</summary>
      <returns>The square root of <paramref name="x" />.</returns>
      <param name="x">The number to calculate the square root of.</param>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT1_2">
      <summary>Stores a value that represents the following equivalent values: (√2)/2, √(½), and 1/(√2).</summary>
    </member>
    <member name="F:Microsoft.JScript.MathObject.SQRT2">
      <summary>Stores a value that represents √2.</summary>
    </member>
    <member name="M:Microsoft.JScript.MathObject.tan(System.Double)">
      <summary>Calculates the tangent of the specified angle.</summary>
      <returns>The tangent of <paramref name="x" />.</returns>
      <param name="x">An angle, measured in radians.</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoInitializer">
      <summary>Defines methods that an external COM object must implement. This interface is used by an external COM implementation to expose its objects to JScript because JScript needs a managed <see cref="T:System.Reflection.MemberInfo" /> to bind to an external object. This interface is implemented by <see cref="T:Microsoft.JScript.COMFieldInfo" />, <see cref="T:Microsoft.JScript.COMMethodInfo" />, and <see cref="T:Microsoft.JScript.COMPropertyInfo" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.GetCOMMemberInfo">
      <summary>When implemented in a class, gets a managed object that enables JScript to communicate with an external COM member.</summary>
      <returns>A managed object that enables JScript to communicate with an external COM member.</returns>
    </member>
    <member name="M:Microsoft.JScript.MemberInfoInitializer.Initialize(System.String,Microsoft.JScript.COMMemberInfo)">
      <summary>When implemented in a class, initializes the information that enables JScript to communicate with the specified external COM member.</summary>
      <param name="name">The name of the external COM member.</param>
      <param name="dispatch">Information that enables JScript to call, get, and set the external COM member.</param>
    </member>
    <member name="T:Microsoft.JScript.MemberInfoList">
      <summary>Maintains a list of <see cref="T:System.Reflection.MemberInfo" /> elements.</summary>
    </member>
    <member name="T:Microsoft.JScript.MethodInvoker">
      <summary>Represents the invoker for a particular method. Used by the <see cref="T:Microsoft.JScript.JSMethodInfo" /> class to invoke methods.</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.MethodInvoker" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.MethodInvoker.Invoke(System.Object,System.Object[])">
      <summary>When overridden in a derived class, invokes the method.</summary>
      <returns>The result of invoking the method.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="parameters">The arguments to use for the method.</param>
    </member>
    <member name="T:Microsoft.JScript.Missing">
      <summary>Represents the value of a variable that has been instantiated but that has not yet had its value set.</summary>
    </member>
    <member name="F:Microsoft.JScript.Missing.Value">
      <summary>Specifies the value of a variable that has been instantiated but that has not yet had its value set.</summary>
    </member>
    <member name="T:Microsoft.JScript.Namespace">
      <summary>Represents a namespace.</summary>
    </member>
    <member name="M:Microsoft.JScript.Namespace.GetNamespace(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates and returns a new instance of the <see cref="T:Microsoft.JScript.Namespace" /> class.</summary>
      <returns>A new instance of the <see cref="T:Microsoft.JScript.Namespace" /> class.</returns>
      <param name="name">The name of the namespace.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.NoContextException">
      <summary>The exception that is thrown when there is no code <see cref="T:Microsoft.JScript.Context" /> associated with a <see cref="T:Microsoft.JScript.JScriptException" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified serialized data.</summary>
      <param name="s">The serialized object data about the exception that is being thrown.</param>
      <param name="c">Contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.NoContextException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NoContextException" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.JScript.NotRecommended">
      <summary>Indicates that a method or field is not recommended.</summary>
    </member>
    <member name="M:Microsoft.JScript.NotRecommended.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NotRecommended" /> attribute class.</summary>
      <param name="message">The name of the method or field that is not recommended.</param>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.IsError">
      <summary>Gets a value that indicates whether using a method or field that is not recommended is an error.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:Microsoft.JScript.NotRecommended.Message">
      <summary>Gets the name of the method or field that is not recommended.</summary>
      <returns>The name of the method or field that is not recommended.</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberConstructor.Invoke(System.Object)">
      <summary>Converts the specified object to a number.</summary>
      <returns>
        <paramref name="arg" /> expressed as a number, if that is possible.</returns>
      <param name="arg">The object to convert.</param>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MAX_VALUE">
      <summary>Represents the largest possible value of a <see cref="T:System.Double" />. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.MIN_VALUE">
      <summary>Represents the smallest positive <see cref="T:System.Double" /> value that is greater than zero. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NaN">
      <summary>Represents a value that is not a number (NaN). This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.NEGATIVE_INFINITY">
      <summary>Represents negative infinity. This field is constant.</summary>
    </member>
    <member name="F:Microsoft.JScript.NumberConstructor.POSITIVE_INFINITY">
      <summary>Represents positive infinity. This field is constant.</summary>
    </member>
    <member name="T:Microsoft.JScript.NumberObject">
      <summary>Represents a number object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.#ctor(Microsoft.JScript.ScriptObject,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumberObject" /> class.</summary>
      <param name="parent">The parent of the object.</param>
      <param name="value">The underlying value that the class represents.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberObject.GetType">
      <summary>Returns the type of the underlying value object, or returns <see cref="T:Microsoft.JScript.NumberObject" />.</summary>
      <returns>The type of the underlying value object, or <see cref="T:Microsoft.JScript.NumberObject" />.</returns>
    </member>
    <member name="T:Microsoft.JScript.NumberPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.NumberObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.NumberPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that uses scientific (E) notation.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fractionDigits">A number between 0 and 20 that represents the number of decimal places to display. The default is 16.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that displays the specified number of decimal digits.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fractionDigits">A number between 0 and 20 that represents the number of decimal places to display. The default is 0.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object that is based on <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> and <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)">
      <summary>Creates a string representation of the specified <see cref="T:Microsoft.JScript.NumberObject" /> that displays the specified number of precision digits.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="precision">A number between 0 and 21 that represents the number of precision digits to display. Precision digits are the digits of the decimal and the exponent combined.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="radix">A number between 2 and 36 that represents the base of the number system that <paramref name="thisob" /> is expressed in. The default is 10.</param>
    </member>
    <member name="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified <see cref="T:Microsoft.JScript.NumberObject" />.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.NumericBinary">
      <summary>Performs binary operations on numeric operands. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumericBinary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.DoOp(System.Object,System.Object,Microsoft.JScript.JSToken)">
      <summary>Performs the specified binary operation on the specified numeric operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericBinary.EvaluateNumericBinary(System.Object,System.Object)">
      <summary>Performs a binary operation on the specified numeric operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.NumericUnary">
      <summary>Performs unary operations on numeric operands. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.NumericUnary" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.NumericUnary.EvaluateUnary(System.Object)">
      <summary>Performs a unary operation on a numeric operand.</summary>
      <returns>The result of the operation.</returns>
      <param name="v">The operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.ConstructObject">
      <summary>Creates an instance of the prototype-based object.</summary>
      <returns>The instance of the object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectConstructor.Invoke(System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="T:Microsoft.JScript.ObjectPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.JSObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.ObjectPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)">
      <summary>Determines whether the specified object contains the specified property.</summary>
      <returns>true if <paramref name="name" /> is a property of <paramref name="thisob" /> and has been set; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="name">The property to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)">
      <summary>Determines whether the first specified object can be instantiated as the type of the second specified object.</summary>
      <returns>true if <paramref name="ob" /> is in the inheritance hierarchy of <paramref name="thisob" />; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="ob">The object that has the desired type.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)">
      <summary>Determines whether the specified property of the specified object is enumerable.</summary>
      <returns>true if <paramref name="name" /> is an enumerable property; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="name">The property to test.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)">
      <summary>Creates a string representation of the specified object by using the <see cref="T:Microsoft.JScript.Convert" /> class.</summary>
      <returns>A string representation of <paramref name="thisob" /> that is created by the <see cref="T:Microsoft.JScript.Convert" /> class.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>The name of the class of the object, if it has one defined; otherwise, the <see cref="P:System.Reflection.MemberInfo.Name" /> of the <see cref="T:System.Type" /> of the object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)">
      <summary>Returns the specified object.</summary>
      <returns>
        <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Override">
      <summary>Indicates that a method or field overrides a method or field in a base class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Override.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Override" /> class.</summary>
    </member>
    <member name="T:Microsoft.JScript.Package">
      <summary>Creates packages of JScript code for use by other code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Package.JScriptPackage(System.String,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates the specified package by using the specified scripting engine.</summary>
      <param name="rootName">The name of the package.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.ParserException">
      <summary>This class is used by the JScript parser to represent parser exceptions.</summary>
    </member>
    <member name="T:Microsoft.JScript.Plus">
      <summary>Performs addition and concatenation operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Plus" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.Plus.DoOp(System.Object,System.Object)">
      <summary>Performs an addition or concatenation operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Plus.EvaluatePlus(System.Object,System.Object)">
      <summary>Performs an addition or concatenation operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.PostOrPrefixOperator">
      <summary>Performs increment and decrement operations that correspond to the prefix and postfix syntax. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.PostOrPrefixOperator" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the operation to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.PostOrPrefixOperator.EvaluatePostOrPrefix(System.Object@)">
      <summary>Performs an increment or decrement operation on the specified operand.</summary>
      <returns>The result of the operation.</returns>
      <param name="v">The operand.</param>
    </member>
    <member name="T:Microsoft.JScript.RangeErrorObject">
      <summary>Represents a range error. For example, a range error can occur when you use an incorrect index to access an array element.</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceAttribute">
      <summary>Represents a reference to an assembly.</summary>
    </member>
    <member name="M:Microsoft.JScript.ReferenceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReferenceAttribute" /> class.</summary>
      <param name="reference">The reference to the assembly.</param>
    </member>
    <member name="F:Microsoft.JScript.ReferenceAttribute.reference">
      <summary>Specifies the reference to the assembly.</summary>
    </member>
    <member name="T:Microsoft.JScript.ReferenceErrorObject">
      <summary>Represents a reference error. For example, a reference error can occur when you reference an undeclared variable.</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Construct(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.RegExpObject" /> object for the specified regular expression pattern and flags.</summary>
      <returns>A new <see cref="T:Microsoft.JScript.RegExpObject" /> object.</returns>
      <param name="pattern">The regular expression pattern to match.</param>
      <param name="ignoreCase">true to use case-insensitive matching; otherwise, false.</param>
      <param name="global">true to use a global match; otherwise, false.</param>
      <param name="multiline">true to use a multiline match; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.index">
      <summary>Gets the index of the last successful match, before advancing the index.</summary>
      <returns>The index of the last successful match, if there was one. </returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.input">
      <summary>Gets or sets the input string for a regular expression search.</summary>
      <returns>The input string for a regular expression search.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpConstructor.Invoke(System.Object[])">
      <summary>Creates an instance of a prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastIndex">
      <summary>Gets the index of the last successful match, after advancing the index.</summary>
      <returns>The index of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastMatch">
      <summary>Gets a string representation of the last successful match.</summary>
      <returns>A string representation of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.lastParen">
      <summary>Gets the last <see cref="T:System.Text.RegularExpressions.Group" /> from the <see cref="P:System.Text.RegularExpressions.Match.Groups" /> of the last match.</summary>
      <returns>A string representation of the last group, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.leftContext">
      <summary>Gets a substring of the input string between the start of the input and the start of the last successful match.</summary>
      <returns>A substring of the input string, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpConstructor.rightContext">
      <summary>Gets a substring of the input string between the start of the last successful match and the end of the input.</summary>
      <returns>A substring of the input string, if there was one.</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpMatch">
      <summary>Represents the results from a regular expression match. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="T:Microsoft.JScript.RegExpObject">
      <summary>Represents a regular expression object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.global">
      <summary>Gets a value indicating whether searches are performed with the global flag (/g), matching all occurrences.</summary>
      <returns>true if global searches are performed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.ignoreCase">
      <summary>Gets a value indicating whether searches are performed with the case-insensitive flag (/i).</summary>
      <returns>true if case-insensitive searches are performed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.lastIndex">
      <summary>Gets or sets the index of the last successful match.</summary>
      <returns>The index of the last successful match, if there was one.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.multiline">
      <summary>Gets a value indicating whether searches are performed with the multiline flag (/m).</summary>
      <returns>true if searches are performed in multiline mode; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.RegExpObject.source">
      <summary>Gets the regular expression pattern that is represented by this object.</summary>
      <returns>The regular expression pattern that is represented by this object.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpObject.ToString">
      <summary>Creates a string representation of this object that contains the regular expression pattern and flags.</summary>
      <returns>A string representation of this object.</returns>
    </member>
    <member name="T:Microsoft.JScript.RegExpPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.RegExpObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)">
      <summary>Creates and compiles a new <see cref="T:Microsoft.JScript.RegExpObject" /> object for the specified regular expression pattern and flags.</summary>
      <returns>A new <see cref="T:Microsoft.JScript.RegExpObject" /> object.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="source">The regular expression pattern to search for.</param>
      <param name="flags">Flags for the ignore case, global, and multiline modes.</param>
    </member>
    <member name="P:Microsoft.JScript.RegExpPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>The result of the search for the regular expression pattern.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="input">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)">
      <summary>Tests the search for the specified regular expression pattern on the specified object.</summary>
      <returns>true if the search succeeds; otherwise, false.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="input">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object that contains the regular expression pattern and flags.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.Relational">
      <summary>Performs relational comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Relational.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.Relational" /> class.</summary>
      <param name="operatorTok">One of the <see cref="T:Microsoft.JScript.JSToken" /> enumeration values. Specifies the comparison to perform.</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.EvaluateRelational(System.Object,System.Object)">
      <summary>Performs a relational comparison operation on the specified operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Relational.JScriptCompare(System.Object,System.Object)">
      <summary>Performs a relational comparison operation on the specified operands.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.ReturnOutOfFinally">
      <summary>Represents the exception state when code execution returns out of a finally block.  </summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class.</summary>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class, using the specified error message.</summary>
      <param name="m">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.JScript.ReturnOutOfFinally.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ReturnOutOfFinally" /> class, using the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="m">The message that describes the error.</param>
      <param name="e">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.JScript.Runtime">
      <summary>Provides utility functions.</summary>
    </member>
    <member name="M:Microsoft.JScript.Runtime.DoubleToInt64(System.Double)">
      <summary>Converts the specified <see cref="T:System.Double" /> value to an <see cref="T:System.Int64" />.</summary>
      <returns>
        <paramref name="val" /> converted to an <see cref="T:System.Int64" />.</returns>
      <param name="val">The value to convert.</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.Equals(System.Object,System.Object)">
      <summary>Determines whether two specified values are equal.</summary>
      <returns>true if the values are equal; false if the values are not equal.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="M:Microsoft.JScript.Runtime.UncheckedDecimalToInt64(System.Decimal)">
      <summary>Converts the specified <see cref="T:System.Decimal" /> value to an <see cref="T:System.Int64" />.</summary>
      <returns>
        <paramref name="val" /> converted to an <see cref="T:System.Int64" />.</returns>
      <param name="val">The value to convert.</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptBlock">
      <summary>Represents a block of JScript code. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="T:Microsoft.JScript.ScriptFunction">
      <summary>Represents a prototype-based object that is defined by a constructor function. Most of the constructor function classes, such as <see cref="T:Microsoft.JScript.DateConstructor" />, <see cref="T:Microsoft.JScript.NumberConstructor" />, <see cref="T:Microsoft.JScript.StringConstructor" />, and <see cref="T:Microsoft.JScript.ObjectConstructor" />, inherit from this class. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ScriptFunction" /> class.</summary>
      <param name="parent">The parent prototype of the object that this function constructs.</param>
      <param name="name">The name of the object that this function constructs.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.GetPrototypeForConstructedObject">
      <summary>Gets the prototype object for this constructor function.</summary>
      <returns>The prototype object for this constructor function.</returns>
    </member>
    <member name="F:Microsoft.JScript.ScriptFunction.ilength">
      <summary>Stores the number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.Invoke(System.Object,System.Object[])">
      <summary>Invokes a method of the prototype-based object, passing in the specified arguments.</summary>
      <returns>The result of the call to the method.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The arguments to pass to the method.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the <paramref name="args" /> parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="culture">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.length">
      <summary>Gets or sets the number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</summary>
      <returns>The number of elements that are in the <paramref name="args" /> parameter of the <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" /> method.</returns>
    </member>
    <member name="P:Microsoft.JScript.ScriptFunction.prototype">
      <summary>Gets or sets the prototype object for this constructor function.</summary>
      <returns>The prototype object for this constructor function.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptFunction.ToString">
      <summary>Returns a string representation of the constructor function.</summary>
      <returns>A string that contains the name of the constructor function and a placeholder for the code.</returns>
    </member>
    <member name="T:Microsoft.JScript.ScriptObject">
      <summary>Supports all JScript classes. This is the ultimate base class of all JScript classes. This class belongs to the objects and functions category.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.engine">
      <summary>Stores a reference to the scripting engine.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a field that has the specified name.</summary>
      <returns>A field that has the specified <paramref name="name" />, or null if the script object does not contain the field.</returns>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the current script object.</summary>
      <returns>An array of objects that contains all fields of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)">
      <summary>When overridden in a derived class, gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current script object.</summary>
      <returns>An array of objects that contains all members of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a method that has the specified name.</summary>
      <returns>A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a method that has the specified name by using the specified selection criteria.</summary>
      <returns>A method that has the specified <paramref name="name" />, or null if the script object does not contain the method.</returns>
      <param name="name">The name of the method to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="types">The parameter types that are used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the current script object.</summary>
      <returns>An array of objects that contains all methods of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetParent">
      <summary>Gets a reference to the parent object.</summary>
      <returns>A reference to the parent object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the current script object.</summary>
      <returns>An array of objects that contains all properties of the current script object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a property that has the specified name.</summary>
      <returns>A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a property that has the specified name by using the specified selection criteria.</summary>
      <returns>A property that has the specified <paramref name="name" />, or null if the script object does not contain the property.</returns>
      <param name="name">The name of the property to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="returnType">The type of the return value that the property must have.</param>
      <param name="types">The index types of the property being searched for. Used for index properties, such as the indexer for a class.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="invokeAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the args parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Double)">
      <summary>Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Double" /> index value.</summary>
      <returns>The value of the member that is at <paramref name="index" />.</returns>
      <param name="index">The index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Int32)">
      <summary>Gets or sets a member of the script object that is designated by the specified <see cref="T:System.Int32" /> index value.</summary>
      <returns>The value of the member that is at <paramref name="index" />.</returns>
      <param name="index">The index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.Object[])">
      <summary>Gets or sets a member of the script object that is designated by the specified name, <see cref="T:System.Double" /> index value, or <see cref="T:System.Int32" /> index value.</summary>
      <returns>The value of the member that is specified in <paramref name="pars" />.</returns>
      <param name="pars">The name or index of the member.</param>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.Item(System.String)">
      <summary>Gets or sets a member of the script object that is designated by the specified name.</summary>
      <returns>The value of the member that is named <paramref name="name" />.</returns>
      <param name="name">The name of the member.</param>
    </member>
    <member name="F:Microsoft.JScript.ScriptObject.parent">
      <summary>Stores a reference to the parent object.</summary>
    </member>
    <member name="P:Microsoft.JScript.ScriptObject.UnderlyingSystemType">
      <summary>Gets the type of the script object.</summary>
      <returns>The type of the script object.</returns>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)">
      <summary>Creates a wrapped object that contains the specified member together with the specified object.</summary>
      <returns>A one-element array that has a wrapped object that contains the member information and <paramref name="obj" />.</returns>
      <param name="member">The member to wrap.</param>
      <param name="obj">The object that <paramref name="member" /> is defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)">
      <summary>Creates an array of wrapped objects that contain the specified members together with the specified object.</summary>
      <returns>An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</returns>
      <param name="members">The members to wrap.</param>
      <param name="obj">The object that <paramref name="members" /> are defined on.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)">
      <summary>Creates an array of wrapped objects that contain the specified members together with the specified object, caching the results in the specified data storage.</summary>
      <returns>An array of wrapped objects, each of which contains member information and a copy of <paramref name="obj" />.</returns>
      <param name="members">The members to wrap.</param>
      <param name="obj">The object that <paramref name="members" /> are defined on.</param>
      <param name="cache">Temporary data storage for the wrapped objects.</param>
    </member>
    <member name="T:Microsoft.JScript.ScriptStream">
      <summary>Represents a stream of data. This class sends its data to either a <see cref="T:Microsoft.JScript.COMCharStream" /> or a <see cref="T:System.Console" /> stream. </summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.ScriptStream" /> class.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Error">
      <summary>Stores a reference to either the standard console <see cref="P:System.Console.Error" /> stream or a custom <see cref="T:Microsoft.JScript.COMCharStream" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.ScriptStream.Out">
      <summary>Stores a reference to either the standard console <see cref="P:System.Console.Out" /> stream or a custom <see cref="T:Microsoft.JScript.COMCharStream" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace">
      <summary>Writes a string that describes the current contents of the call stack. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.PrintStackTrace(System.Exception)">
      <summary>Writes a string that describes the contents of the call stack at the time the specified exception was thrown. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="e">The exception that was thrown.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.Write(System.String)">
      <summary>Writes the specified string to the stream. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="str">The string to write to the stream.</param>
    </member>
    <member name="M:Microsoft.JScript.ScriptStream.WriteLine(System.String)">
      <summary>Writes the specified string to the stream, followed by the line terminator. The string is written to the <see cref="F:Microsoft.JScript.ScriptStream.Out" /> stream.</summary>
      <param name="str">The string to write to the stream.</param>
    </member>
    <member name="T:Microsoft.JScript.SimpleHashtable">
      <summary>A hash table for the internal storage of items.</summary>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.SimpleHashtable" /> class, using the specified threshold.</summary>
      <param name="threshold">The number of items at which the hash table must be resized.</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.GetEnumerator">
      <summary>Gets an enumerator for the hash table.</summary>
      <returns>An enumerator for the hash table.</returns>
    </member>
    <member name="P:Microsoft.JScript.SimpleHashtable.Item(System.Object)">
      <summary>Gets or sets the item that has the specified key.</summary>
      <returns>The value of the item that has the specified <paramref name="key" />.</returns>
      <param name="key">The key of the item to get or set.</param>
    </member>
    <member name="M:Microsoft.JScript.SimpleHashtable.Remove(System.Object)">
      <summary>Removes the item with the specified key from the hash table.</summary>
      <param name="key">The key of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.SourceState">
      <summary>Specifies the state of source code text. This class is used together with other classes that provide information to color JScript code in an editor.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_NORMAL">
      <summary>Normal text.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_COMMENT">
      <summary>Comment text.</summary>
    </member>
    <member name="F:Microsoft.JScript.SourceState.STATE_COLOR_STRING">
      <summary>String literal text.</summary>
    </member>
    <member name="T:Microsoft.JScript.StackFrame">
      <summary>Represents a stack frame for executing code. This class contains methods for resolving scope. It belongs to the compilation and run-time state category.</summary>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.closureInstance">
      <summary>Stores a reference to the caller of the current stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetDefaultThisObject">
      <summary>Gets the current default scope, which will be either the contained object of a with statement scope, or the global scope.</summary>
      <returns>The current default scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetField(System.String,System.Int32)">
      <summary>Gets a field that has the specified name by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>null in all cases.</returns>
      <param name="name">The name of the field to search for.</param>
      <param name="lexLevel">The lexical level to search.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetGlobalScope">
      <summary>Gets the global scope by searching the scope hierarchy until it finds a scope that includes static variables, for example, a module scope.</summary>
      <returns>The global scope.</returns>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The member name to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMembers(System.Reflection.BindingFlags)">
      <summary>Retrieves an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the current object.</summary>
      <returns>An array of objects that contains all members of the current object.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.GetMemberValue(System.String,System.Int32)">
      <summary>Gets the value of the specified member by searching the scope hierarchy. This method searches only the scope that is specified by the lexical level.</summary>
      <returns>The value of the member <paramref name="name" />.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="lexlevel">The lexical level to search.</param>
    </member>
    <member name="F:Microsoft.JScript.StackFrame.localVars">
      <summary>Stores the local variables for this stack frame.</summary>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.Microsoft#JScript#IActivationObject#GetLocalField(System.String)">
      <summary>Gets the local declaration of a field that has the specified name. This method is used at compile time for error checking.</summary>
      <returns>The local declaration of the field.</returns>
      <param name="name">The name of the field.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForMethod(System.Object,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.StackFrame" /> object for a method and pushes it onto the global scope stack.</summary>
      <param name="thisob">The object that contains the method.</param>
      <param name="fields">The local variables for the stack frame.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.StackFrame.PushStackFrameForStaticMethod(System.RuntimeTypeHandle,Microsoft.JScript.JSLocalField[],Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.StackFrame" /> object for a static method and pushes it onto the global scope stack.</summary>
      <param name="thisclass">The class that contains the static method.</param>
      <param name="fields">The local variables for the stack frame.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.StrictEquality">
      <summary>Performs comparison operations. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StrictEquality.JScriptStrictEquals(System.Object,System.Object)">
      <summary>Performs a comparison operation.</summary>
      <returns>The result of the operation.</returns>
      <param name="v1">The first operand.</param>
      <param name="v2">The second operand.</param>
    </member>
    <member name="T:Microsoft.JScript.StringConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])">
      <summary>Converts each element of the specified array to a character and concatenates them.</summary>
      <returns>A string representation of <paramref name="arg" />.</returns>
      <param name="args">The elements to convert to a string.</param>
    </member>
    <member name="M:Microsoft.JScript.StringConstructor.Invoke(System.Object)">
      <summary>Converts the specified object to a string.</summary>
      <returns>A string representation of <paramref name="arg" />.</returns>
      <param name="arg">The object to convert to a string.</param>
    </member>
    <member name="T:Microsoft.JScript.StringObject">
      <summary>Represents a string object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringObject.#ctor(Microsoft.JScript.ScriptObject,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.StringObject" /> class. </summary>
      <param name="prototype">The parent of the object.</param>
      <param name="value">The underlying value that the class represents.</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.Equals(System.Object)">
      <summary>Determines whether this string and the specified string have the same value.</summary>
      <returns>true if this string and <paramref name="ob" /> have the same value; otherwise, false.</returns>
      <param name="ob">The string to compare.</param>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetHashCode">
      <summary>Returns the hash code for this string.</summary>
      <returns>A hash code for this string.</returns>
    </member>
    <member name="M:Microsoft.JScript.StringObject.GetType">
      <summary>Returns <see cref="T:System.String" /> or <see cref="T:Microsoft.JScript.StringObject" />.</summary>
      <returns>
        <see cref="T:System.String" /> or <see cref="T:Microsoft.JScript.StringObject" />.</returns>
    </member>
    <member name="P:Microsoft.JScript.StringObject.length">
      <summary>Gets the number of characters in the string.</summary>
      <returns>The number of characters in the string.</returns>
    </member>
    <member name="T:Microsoft.JScript.StringPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.StringObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in anchor tags, and gives the anchor element the specified name attribute.</summary>
      <returns>A string in the form "&lt;A NAME=\""+ <paramref name="anchorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="anchorName">The name attribute of the anchor element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.big(System.Object)">
      <summary>Converts the specified object to text enclosed in bigger text markup tags.</summary>
      <returns>A string in the form "&lt;BIG&gt;"+ <paramref name="thisob" /> +"&lt;/BIG&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.blink(System.Object)">
      <summary>Converts the specified object to text enclosed in blink markup tags.</summary>
      <returns>A string in the form "&lt;BLINK&gt;"+ <paramref name="thisob" /> +"&lt;/BLINK&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.bold(System.Object)">
      <summary>Converts the specified object to text enclosed in bold text markup tags.</summary>
      <returns>A string in the form "&lt;B&gt;"+ <paramref name="thisob" /> +"&lt;/B&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)">
      <summary>Returns the character at the specified position in the specified object.</summary>
      <returns>The character at <paramref name="pos" />, if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="pos">The position of the character to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)">
      <summary>Returns the ASCII code of the character at the specified position in the specified object.</summary>
      <returns>The code of the character at <paramref name="pos" />, if there is one.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="pos">The position of the character whose code you want to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])">
      <summary>Appends the specified arguments to the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />, with <paramref name="args" /> appended.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">The arguments to append to <paramref name="thisob" />.</param>
    </member>
    <member name="P:Microsoft.JScript.StringPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fixed(System.Object)">
      <summary>Converts the specified object to text enclosed in fixed-width text markup tags.</summary>
      <returns>A string in the form "&lt;TT&gt;"+ <paramref name="thisob" /> +"&lt;/TT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in font tags, and gives the element the specified color attribute.</summary>
      <returns>A string in the form "&lt;FONT COLOR=\""+ <paramref name="colorName" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="colorName">The color attribute of the font element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in font tags, and gives the element the specified size attribute.</summary>
      <returns>A string in the form "&lt;FONT SIZE=\""+ <paramref name="fontSize" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/FONT&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="fontSize">The size attribute of the font element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)">
      <summary>Searches for the first occurrence of the specified string in the specified object, starting from the specified character position.</summary>
      <returns>The position of the first occurrence of <paramref name="searchString" />, if it is found.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="searchString">The string to search for.</param>
      <param name="position">The position at which to start the search.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.italics(System.Object)">
      <summary>Converts the specified object to text enclosed in italic text markup tags.</summary>
      <returns>A string in the form "&lt;I&gt;"+ <paramref name="thisob" /> +"&lt;/I&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)">
      <summary>Searches for the last occurrence of the specified string in the specified object, starting from the specified character position.</summary>
      <returns>The position of the last occurrence of <paramref name="searchString" />, if it is found.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="searchString">The string to search for.</param>
      <param name="position">The position at which to start the search.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)">
      <summary>Converts the specified object to text enclosed in anchor tags, and gives the anchor element the link target attribute that is specified.</summary>
      <returns>A string in the form "&lt;A HREF=\""+ <paramref name="linkRef" /> +"\"&gt;"+ <paramref name="thisob" /> +"&lt;/A&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="linkRef">The target attribute of the anchor element.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)">
      <summary>Compares the two specified strings and returns an integer that indicates the lexical relationship between them.</summary>
      <returns>A negative value when <paramref name="thisob" /> is less than <paramref name="thatob" />; zero when <paramref name="thisob" /> equals <paramref name="thatob" />; a positive value when <paramref name="thisob" /> is greater than <paramref name="thatob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="thatob">The string to compare to <paramref name="thisob" />.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>The result of the search for the regular expression pattern.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the first specified object, and replaces any matches with the third specified object.</summary>
      <returns>The new string, after the replacement is made.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
      <param name="replacement">The replacement for any matches.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)">
      <summary>Runs a search for the specified regular expression pattern on the specified object.</summary>
      <returns>If the search is successful, the index of the match; otherwise, -1.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="regExp">The regular expression pattern to search for.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified consecutive characters from the specified string.</summary>
      <returns>A new string that contains the consecutive characters between <paramref name="start" /> and <paramref name="end" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="end">The last consecutive character to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.small(System.Object)">
      <summary>Converts the specified object to text enclosed in smaller text markup tags.</summary>
      <returns>A string in the form "&lt;SMALL&gt;"+ <paramref name="thisob" /> +"&lt;/SMALL&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)">
      <summary>Returns an array that contains the substrings in the specified object that are delimited by the specified characters. The number of substrings in the array is constrained by the specified limit.</summary>
      <returns>An array that contains the substrings in <paramref name="thisob" /> that are delimited by <paramref name="separator" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="separator">The characters that delimit the substrings in <paramref name="thisob" />.</param>
      <param name="limit">The maximum number of substrings to return.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.strike(System.Object)">
      <summary>Converts the specified object to text enclosed in strikethrough markup tags.</summary>
      <returns>A string in the form "&lt;STRIKE&gt;"+ <paramref name="thisob" /> +"&lt;/STRIKE&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sub(System.Object)">
      <summary>Converts the specified object to text enclosed in subscript markup tags.</summary>
      <returns>A string in the form "&lt;SUB&gt;"+ <paramref name="thisob" /> +"&lt;/SUB&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified number of consecutive characters from the specified string, starting from the specified character position. Use <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" /> instead, if you can.</summary>
      <returns>A new string that contains <paramref name="count" /> consecutive characters, starting at <paramref name="start" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="count">The number of characters to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)">
      <summary>Creates a new string that contains the specified consecutive characters from the specified string.</summary>
      <returns>A new string that contains the consecutive characters between <paramref name="start" /> and <paramref name="end" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="start">The first consecutive character to get.</param>
      <param name="end">The last consecutive character to get.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.sup(System.Object)">
      <summary>Converts the specified object to text enclosed in superscript markup tags.</summary>
      <returns>A string in the form "&lt;SUP&gt;"+ <paramref name="thisob" /> +"&lt;/SUP&gt;".</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)">
      <summary>Returns a copy of the specified string converted to lowercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</summary>
      <returns>A lowercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)">
      <summary>Returns a copy of the specified string converted to uppercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</summary>
      <returns>An uppercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)">
      <summary>Returns a copy of the specified string converted to lowercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
      <returns>A lowercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toString(System.Object)">
      <summary>Creates a string representation of the specified object.</summary>
      <returns>A string representation of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)">
      <summary>Returns a copy of the specified string converted to uppercase, based on the casing rules of <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
      <returns>An uppercase string.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)">
      <summary>Returns the value of the specified object.</summary>
      <returns>The value of <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="T:Microsoft.JScript.SuperTypeMembersSorter">
      <summary>Stores members from base classes and interfaces.</summary>
    </member>
    <member name="T:Microsoft.JScript.SyntaxErrorObject">
      <summary>Represents a syntax error. For example, a syntax error can occur when you omit a semicolon.</summary>
    </member>
    <member name="T:Microsoft.JScript.Throw">
      <summary>Throws an exception. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Throw.JScriptThrow(System.Object)">
      <summary>Returns the specified object as an exception, converting if it has to.</summary>
      <returns>An exception that represents <paramref name="value" />.</returns>
      <param name="value">The exception to throw. </param>
    </member>
    <member name="T:Microsoft.JScript.TokenColor">
      <summary>Specifies the colors that individual units of code should have when text is being colorized in an editor. The members of this enumeration are used by the <see cref="P:Microsoft.JScript.ITokenColorInfo.Color" /> property of <see cref="T:Microsoft.JScript.ITokenColorInfo" /> objects.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_TEXT">
      <summary>The color for a unit of code that represents text. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_IDENTIFIER">
      <summary>The color for a unit of code that represents an identifier.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_KEYWORD">
      <summary>The color for a unit of code that represents a keyword.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_COMMENT">
      <summary>The color for a unit of code that represents a comment.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_OPERATOR">
      <summary>The color for a unit of code that represents an operator.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_NUMBER">
      <summary>The color for a unit of code that represents a numeric literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_STRING">
      <summary>The color for a unit of code that represents a string literal.</summary>
    </member>
    <member name="F:Microsoft.JScript.TokenColor.COLOR_CONDITIONAL_COMP">
      <summary>Not used.</summary>
    </member>
    <member name="T:Microsoft.JScript.Try">
      <summary>Identifies blocks of code to run in error handling scopes. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Returns the specified object as an exception, converting it to a specific <see cref="T:Microsoft.JScript.JScriptException" /> if it can.</summary>
      <returns>The exception <paramref name="e" />, converted to a specific <see cref="T:Microsoft.JScript.JScriptException" /> if that is possible.</returns>
      <param name="e">The object that represents the exception.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)">
      <summary>Creates a new <see cref="T:Microsoft.JScript.BlockScope" /> object for the try block and pushes it onto the global scope stack.</summary>
      <param name="engine">A reference to the scripting engine.</param>
      <param name="id">The name of the scope of the try block.</param>
      <param name="scopeId">The ID of the scope of the try block.</param>
    </member>
    <member name="T:Microsoft.JScript.TypedArray">
      <summary>Represents a reflectable reference to the <see cref="T:System.Array" /> class. This class stores the element type of a typed array, but this class does not store data. </summary>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.#ctor(System.Reflection.IReflect,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.TypedArray" /> class.</summary>
      <param name="elementType">The element type of a typed array.</param>
      <param name="rank">The rank (number of dimensions) of the array.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.Equals(System.Object)">
      <summary>Determines whether the specified typed array has the same element type and rank as the current typed array.</summary>
      <returns>true if <paramref name="obj" /> has the same element type and rank as the current typed array; otherwise, false.</returns>
      <param name="obj">The typed array to compare with the current typed array.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a field of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A field that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the field to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetFields(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.FieldInfo" /> objects that correspond to all fields of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all fields of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetHashCode">
      <summary>Serves as a hash function for the element type of the typed array.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the <see cref="T:System.Array" /> class type that match a specified name.</summary>
      <returns>An array of objects that match the <paramref name="name" /> argument.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMembers(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MemberInfo" /> objects that correspond to all members of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all members of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a method of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A method that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a method of the <see cref="T:System.Array" /> class type that has the specified name by using the specified selection criteria.</summary>
      <returns>A method that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the method to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="types">The parameter types that are used to locate a matching method.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetMethods(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.MethodInfo" /> objects that correspond to all methods of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all methods of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperties(System.Reflection.BindingFlags)">
      <summary>Gets an array of <see cref="T:System.Reflection.PropertyInfo" /> objects that correspond to all properties of the <see cref="T:System.Array" /> class type.</summary>
      <returns>An array of objects that contains all properties of the <see cref="T:System.Array" /> class type.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>Gets a property of the <see cref="T:System.Array" /> class type that has the specified name.</summary>
      <returns>A property that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>Gets a property of the <see cref="T:System.Array" /> class type that has the specified name by using the specified selection criteria.</summary>
      <returns>A property that has the specified name, if one is found; otherwise, null.</returns>
      <param name="name">The name of the property to get.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="returnType">The type of the return value that the property must have.</param>
      <param name="types">The index types of the property being searched for. Used for index properties, such as the indexer for a class.</param>
      <param name="modifiers">An array of parameter modifiers that enable binding to work with parameter signatures in which the types have been modified.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Invokes the specified member of the element type or the <see cref="T:System.Array" /> class type.</summary>
      <returns>The return value of the call to the member.</returns>
      <param name="name">The name of the member to invoke.</param>
      <param name="flags">A bitwise combination of the enumeration values that specifies how the search for members is conducted by reflection.</param>
      <param name="binder">An object that performs type conversion from actual argument type to formal argument type.</param>
      <param name="target">The object on which to invoke the member. This must be the current script object.</param>
      <param name="args">An array of objects that contains the number, order, and type of the parameters of the member to be invoked. This is an empty array if there are no parameters.</param>
      <param name="modifiers">An array that has the same length as the <paramref name="args" /> parameter. It represents the invoked member's argument attributes in the metadata.</param>
      <param name="locale">Provides information about a specific culture or locale. Used to format numbers, dates, and strings correctly.</param>
      <param name="namedParameters">An array of parameters.</param>
    </member>
    <member name="M:Microsoft.JScript.TypedArray.ToString">
      <summary>Returns a string that contains the element type of the typed array and the rank information.</summary>
      <returns>A string that contains the element type of the typed array and the rank information.</returns>
    </member>
    <member name="P:Microsoft.JScript.TypedArray.UnderlyingSystemType">
      <summary>Gets the type of the <see cref="T:Microsoft.JScript.TypedArray" /> object.</summary>
      <returns>The type of the <see cref="T:Microsoft.JScript.TypedArray" /> object.</returns>
    </member>
    <member name="T:Microsoft.JScript.TypeErrorObject">
      <summary>Represents a type error. For example, a type error can occur when you pass an object of one type to a method that expects an object of another type.</summary>
    </member>
    <member name="T:Microsoft.JScript.Typeof">
      <summary>Determines the data types of objects. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.Typeof.JScriptTypeof(System.Object)">
      <summary>Determines the data type of the specified object.</summary>
      <returns>The type of <paramref name="value" />.</returns>
      <param name="value">The object to determine the type of.</param>
    </member>
    <member name="T:Microsoft.JScript.TypeReflector">
      <summary>Provides an implementation of <see cref="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)" /> that is faster than <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>Searches for the specified member, using the specified binding constraints.</summary>
      <returns>An array of <see cref="T:System.Reflection.MemberInfo" /> objects that represents the public members that have the specified name, if found; otherwise, an empty array.</returns>
      <param name="name">The name of the member to search for.</param>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify the way in which the search for members and types is conducted by the reflection operation.</param>
    </member>
    <member name="M:Microsoft.JScript.TypeReflector.GetMembers(System.Reflection.BindingFlags)">
      <summary>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</summary>
      <returns>Throws a <see cref="T:Microsoft.JScript.JScriptException" /> exception in all cases.</returns>
      <param name="bindingAttr">A bitwise combination of the enumeration values that specify the way in which the search for members and types is conducted by the reflection operation.</param>
    </member>
    <member name="T:Microsoft.JScript.UnaryOp">
      <summary>Represents the base class for classes that perform operations on single operands, such as <see cref="T:Microsoft.JScript.Typeof" /> and <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="F:Microsoft.JScript.UnaryOp.operand">
      <summary>Represents the operand.</summary>
    </member>
    <member name="T:Microsoft.JScript.URIErrorObject">
      <summary>Represents a Uniform Resource Identifier (URI) error. For example, a URI error can occur when you try to encode or decode a URI.</summary>
    </member>
    <member name="T:Microsoft.JScript.VBArrayConstructor">
      <summary>Represents a prototype-based object that is defined by a constructor function. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayConstructor.CreateInstance(System.Object[])">
      <summary>Creates an instance of the prototype-based object, passing in the specified arguments.</summary>
      <returns>An instance of the object.</returns>
      <param name="args">The arguments to pass to the constructor.</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayObject">
      <summary>Represents a VBArray object. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="M:Microsoft.JScript.VBArrayObject.#ctor(Microsoft.JScript.VBArrayPrototype,System.Array)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.VBArrayObject" /> class.</summary>
      <param name="parent">The parent of the object.</param>
      <param name="array">The underlying array that the class represents.</param>
    </member>
    <member name="T:Microsoft.JScript.VBArrayPrototype">
      <summary>Provides static methods and properties for <see cref="T:Microsoft.JScript.VBArrayObject" /> objects. All methods of this class are called by passing in a reference to the object that is requesting access to the method. This class belongs to the built-in object model category.</summary>
    </member>
    <member name="P:Microsoft.JScript.VBArrayPrototype.constructor">
      <summary>Gets a reference to a prototype-based object that is using this prototype.</summary>
      <returns>A reference to a prototype-based object.</returns>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)">
      <summary>Determines the number of dimensions in the specified array.</summary>
      <returns>The number of dimensions in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])">
      <summary>Gets the value at the specified position in the specified array.</summary>
      <returns>The value at the specified position in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="args">An array that represents the indexes of each dimension that specifies the position of the element to get.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)">
      <summary>Gets the lower bound of the specified dimension in the specified array.</summary>
      <returns>The lower bound of <paramref name="dimension" /> in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dimension">The dimension whose lower bound is determined.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Converts a <see cref="T:Microsoft.JScript.VBArrayObject" /> object to an <see cref="T:Microsoft.JScript.ArrayObject" /> object.</summary>
      <returns>
        <paramref name="thisob" /> expressed as an <see cref="T:Microsoft.JScript.ArrayObject" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)">
      <summary>Gets the upper bound of the specified dimension in the specified array.</summary>
      <returns>The upper bound of <paramref name="dimension" /> in <paramref name="thisob" />.</returns>
      <param name="thisob">The object that this method is acting upon.</param>
      <param name="dimension">The dimension whose upper bound is determined.</param>
    </member>
    <member name="T:Microsoft.JScript.VsaItem">
      <summary>Represents items added to the .NET script engine. This includes code items, reference items, and global items.</summary>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.flag">
      <summary>Specifies the type of the item as <see cref="F:Microsoft.Vsa.VsaItemFlag.Class" />, <see cref="F:Microsoft.Vsa.VsaItemFlag.Module" />, or <see cref="F:Microsoft.Vsa.VsaItemFlag.None" />.</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.GetOption(System.String)">
      <summary>Gets the codebase option.</summary>
      <returns>The value of the codebase option.</returns>
      <param name="name">The string literal "codebase".</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.isDirty">
      <summary>Specifies whether the current in-memory representation of the item differs from the persisted representation.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.IsDirty">
      <summary>Gets or sets a value that indicates whether the current in-memory representation of the item differs from the persisted representation.</summary>
      <returns>true if the in-memory representation differs from the persisted representation; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.ItemType">
      <summary>Gets the type of the item.</summary>
      <returns>One of the enumeration values. The value indicates the type of the item.</returns>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.name">
      <summary>Specifies the name of the item.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItem.Name">
      <summary>Gets or sets the name of the item.</summary>
      <returns>The string literal name of the item.</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItem.SetOption(System.String,System.Object)">
      <summary>Sets the codebase option.</summary>
      <param name="name">The string literal "codebase".</param>
      <param name="value">The new value for the option.</param>
    </member>
    <member name="F:Microsoft.JScript.VsaItem.type">
      <summary>Specifies the type of the item as <see cref="F:Microsoft.Vsa.VsaItemType.Code" />, <see cref="F:Microsoft.Vsa.VsaItemType.Reference" />, or <see cref="F:Microsoft.Vsa.VsaItemType.AppGlobal" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.VsaItems">
      <summary>Represents a collection of <see cref="T:Microsoft.Vsa.IVsaItem" /> objects that can be addressed either by name or by index.</summary>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.#ctor(Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.JScript.VsaItems" /> class.</summary>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Close">
      <summary>Disconnects each item in the collection from the scripting engine.</summary>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)">
      <summary>Creates a new item and adds it to the collection.</summary>
      <returns>The newly created item.</returns>
      <param name="name">The name of the new item.</param>
      <param name="itemType">One of the enumeration values. The value specifies the type of the new item as <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />, <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference" />, or <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal" />.</param>
      <param name="itemFlag">One of the enumeration values. The value specifies the initial content of a <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" /> item as <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class" />, <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module" />, or <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None" />.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.GetEnumerator">
      <summary>Gets an enumerator that iterates over the collection.</summary>
      <returns>An enumerator that iterates over the collection.</returns>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.Int32)">
      <summary>Gets the item from the collection that is designated by the specified index value.</summary>
      <returns>The item at <paramref name="index" />.</returns>
      <param name="index">The index of the item to get.</param>
    </member>
    <member name="P:Microsoft.JScript.VsaItems.Item(System.String)">
      <summary>Gets the item from the collection that is designated by the specified name.</summary>
      <returns>The item that is named <paramref name="itemName" />.</returns>
      <param name="itemName">The name of the item to get.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.Int32)">
      <summary>Removes the item that is designated by the specified index value from the collection.</summary>
      <param name="itemIndex">The index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.JScript.VsaItems.Remove(System.String)">
      <summary>Removes the item that is designated by the specified name from the collection.</summary>
      <param name="itemName">The name of the item to remove.</param>
    </member>
    <member name="T:Microsoft.JScript.VSAITEMTYPE2">
      <summary>Extends the <see cref="T:Microsoft.Vsa.VsaItemType" /> enumeration. Provides extra functionality that is needed by an IActiveScript host. </summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.None">
      <summary>Specifies none. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTOBJECT">
      <summary>Specifies a host object.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPE">
      <summary>Specifies the scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.HOSTSCOPEANDOBJECT">
      <summary>Specifies both the scope and the object.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTSCOPE">
      <summary>Specifies the script scope.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.SCRIPTBLOCK">
      <summary>Specifies a script block. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.STATEMENT">
      <summary>Specifies a single statement. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="F:Microsoft.JScript.VSAITEMTYPE2.EXPRESSION">
      <summary>Specifies an expression. This applies to an <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />.</summary>
    </member>
    <member name="T:Microsoft.JScript.With">
      <summary>Represents the with statement. This class belongs to the abstract syntax tree category.</summary>
    </member>
    <member name="M:Microsoft.JScript.With.JScriptWith(System.Object,Microsoft.JScript.Vsa.VsaEngine)">
      <summary>Establishes the default object for a with statement block by adding it to the scope stack.</summary>
      <returns>
        <paramref name="withOb" /> converted to an object.</returns>
      <param name="withOb">The default object.</param>
      <param name="engine">A reference to the scripting engine.</param>
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.AppDomain"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.ApplicationBase"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.applicationPath"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Assembly"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.assemblyVersion"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Close"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Compile"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.compiledRootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoClose"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoCompile"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoLoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.DoSaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineMoniker"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineName"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.engineSite"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Error(Microsoft.JScript.Vsa.JSVsaError)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.errorLocale"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Evidence"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.executionEvidence"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.failedCompilation"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.genDebugInfo"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.GenerateDebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetCustomOption(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.GetOption(System.String)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.haveCompiledState"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.InitNew"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isClosed"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsCompiled"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isDebugInfoSupported"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsDirty"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineCompiled"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineDirty"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineInitialized"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.isEngineRunning"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.IsRunning"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidIdentifier(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.IsValidNamespaceName(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Items"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Language"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.LCID"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadCompiledState"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.loadedAssembly"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Name"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.nameTable"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Preconditions(Microsoft.JScript.Vsa.BaseVsaEngine.Pre)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ResetCompiledState"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.RevokeCache"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootMoniker"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.rootNamespace"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.RootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.Run"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.scriptLanguage"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetCustomOption(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.SetOption(System.String,System.Object)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Site"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupClass"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.startupInstance"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaEngine.ValidateRootMoniker(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaEngine.Version"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.vsaItems"></member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaEngine.Pre"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.None">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotClosed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SupportForDebug">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineCompiled">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootMonikerNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.RootNamespaceSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.SiteNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineInitialised">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaEngine.Pre.EngineNotInitialised">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaSite"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.#ctor"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.Assembly"></member>
    <member name="P:Microsoft.JScript.Vsa.BaseVsaSite.DebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetEventSourceInstance(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.GetGlobalInstance(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.Notify(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)"></member>
    <member name="T:Microsoft.JScript.Vsa.BaseVsaStartup"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.SetSite(Microsoft.JScript.Vsa.IJSVsaSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Shutdown"></member>
    <member name="F:Microsoft.JScript.Vsa.BaseVsaStartup.site"></member>
    <member name="M:Microsoft.JScript.Vsa.BaseVsaStartup.Startup"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaCodeItem"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AppendSourceText(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.CodeDOM"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.RemoveEventSource(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaCodeItem.SourceText"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaEngine"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Assembly"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Close"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Compile"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Evidence"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.GenerateDebugInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.GetOption(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.InitNew"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsCompiled"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsDirty"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.IsRunning"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.IsValidIdentifier(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Items"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Language"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.LCID"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.LoadSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Name"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.RevokeCache"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootMoniker"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.RootNamespace"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.Run"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SaveSourceState(Microsoft.JScript.Vsa.IJSVsaPersistSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaEngine.SetOption(System.String,System.Object)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Site"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaEngine.Version"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaError"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Description"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.EndColumn"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Line"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.LineText"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Number"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.Severity"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.SourceMoniker"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaError.StartColumn"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaGlobalItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.ExposeMembers"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaGlobalItem.TypeString"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItem"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.GetOption(System.String)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.IsDirty"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.ItemType"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItem.Name"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItem.SetOption(System.String,System.Object)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaItems"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Count"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.Int32)"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaItems.Item(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.Int32)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaItems.Remove(System.String)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaPersistSite"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaReferenceItem"></member>
    <member name="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName"></member>
    <member name="T:Microsoft.JScript.Vsa.IJSVsaSite"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetEventSourceInstance(System.String,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.GetGlobalInstance(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.Notify(System.String,System.Object)"></member>
    <member name="M:Microsoft.JScript.Vsa.IJSVsaSite.OnCompilerError(Microsoft.JScript.Vsa.IJSVsaError)"></member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaError"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainCannotBeSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AppDomainInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseCannotBeSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ApplicationBaseInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyExpected">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.AssemblyNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BadAssembly">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CachedAssemblyInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CallbackUnexpected">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CodeDOMNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CompiledStateNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebugInfoNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ElementNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineBusy">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotClose">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineCannotReset">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineClosed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineEmpty">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineInitialized">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotCompiled">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotInitialized">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineRunning">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EventSourceTypeInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GetCompiledStateFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.GlobalInstanceTypeInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.InternalCompilerError">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRemoved">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemFlagNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemNotFound">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemTypeNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LCIDNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.LoadElementFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotificationInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.OptionNotSupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RevokeFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerAlreadySet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootMonikerProtocolInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.RootNamespaceNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveCompiledStateFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SaveElementFailed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteAlreadySet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SiteNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceItemNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.SourceMonikerNotAvailable">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.URLInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.BrowserNotExist">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.DebuggeeNotStarted">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNotExist">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileFormatUnsupported">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.FileTypeUnknown">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ItemCannotBeRenamed">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingSource">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotInitCompleted">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NameTooLong">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInUse">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.ProcNameInvalid">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.VsaServerDown">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.MissingPdb">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.NotClientSideAndNoUrl">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.CannotAttachToWebServer">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.EngineNameNotSet">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaError.UnknownError">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaException"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(Microsoft.JScript.Vsa.JSVsaError,System.String,System.Exception)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.#ctor(System.String,System.Exception)"></member>
    <member name="P:Microsoft.JScript.Vsa.JSVsaException.ErrorCode"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Microsoft.JScript.Vsa.JSVsaException.ToString"></member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemFlag"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.JSVsaItemType"></member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal">
      <summary />
    </member>
    <member name="F:Microsoft.JScript.Vsa.JSVsaItemType.Code">
      <summary />
    </member>
    <member name="T:Microsoft.JScript.Vsa.ResInfo"></member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.Boolean)">
      <param name="resinfo"></param>
      <param name="isLinked"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.ResInfo.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
      <param name="filename"></param>
      <param name="name"></param>
      <param name="isPublic"></param>
      <param name="isLinked"></param>
    </member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.filename"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.fullpath"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isLinked"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.isPublic"></member>
    <member name="F:Microsoft.JScript.Vsa.ResInfo.name"></member>
    <member name="T:Microsoft.JScript.Vsa.VsaEngine">
      <summary>Implements <see cref="T:Microsoft.Vsa.IVsaEngine" /> interface. </summary>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.#ctor(System.Boolean)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Clone(System.AppDomain)">
      <param name="domain"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CompileEmpty"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ConnectEvents"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngine"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScope(System.Boolean,System.String[])">
      <param name="fast"></param>
      <param name="assemblyNames"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithType(System.Boolean,System.String[],System.RuntimeTypeHandle)">
      <param name="fast"></param>
      <param name="assemblyNames"></param>
      <param name="callingTypeHandle"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(System.Boolean,System.String[],System.RuntimeTypeHandle,System.String)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.CreateEngineWithType(System.RuntimeTypeHandle)">
      <param name="callingTypeHandle"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.DisconnectEvents"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetAssembly"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetGlobalScope"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItem(System.String)">
      <param name="itemName"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemAtIndex(System.Int32)">
      <param name="index"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetItemCount"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetMainScope"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetModule"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalArrayConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalObjectConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.GetOriginalRegExpConstructor"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.InitVsaEngine(System.String,Microsoft.JScript.Vsa.IJSVsaSite)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Interrupt"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.IsValidIdentifier(System.String)">
      <param name="ident"></param>
    </member>
    <member name="P:Microsoft.JScript.Vsa.VsaEngine.LenientGlobalObject"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PopScriptObject"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.PushScriptObject(Microsoft.JScript.ScriptObject)">
      <param name="obj"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RegisterEventSource(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Reset"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Restart"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.Run(System.AppDomain)"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.RunEmpty"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.ScriptObjectStackTop"></member>
    <member name="M:Microsoft.JScript.Vsa.VsaEngine.SetOutputStream(Microsoft.JScript.IMessageReceiver)">
      <param name="output"></param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Data.OracleClient.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.OracleClient</name>
  </assembly>
  <members>
    <member name="T:System.Data.OracleClient.OracleBFile">
      <summary>Represents a managed <see cref="T:System.Data.OracleClient.OracleBFile" /> object designed to work with the Oracle BFILE data type. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanRead">
      <summary>Gets a value indicating whether the BFILE stream can be read.</summary>
      <returns>false if a BFILE is closed or disposed; otherwise true. Always true for <see cref="F:System.Data.OracleClient.OracleBFile.Null" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanSeek">
      <summary>Gets a value indicating whether forward-seek and backward-seek operations can be performed.</summary>
      <returns>false if a BFILE is closed or disposed; otherwise true. Always true for <see cref="F:System.Data.OracleClient.OracleBFile.Null" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanWrite">
      <summary>Gets a value indicating whether the object supports writing.</summary>
      <returns>Always returns false because the Oracle BFILE data type is read-only.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Clone">
      <summary>Creates a copy of this <see cref="T:System.Data.OracleClient.OracleBFile" /> object associated with the same physical file as the original.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBFile" /> object associated with the same physical file as the original OracleBFile object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Connection">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleConnection" /> used by this instance of the <see cref="T:System.Data.OracleClient.OracleBFile" />.</summary>
      <returns>The connection to a data source. The default is a null value.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)">
      <summary>Copies the entire contents of this <see cref="T:System.Data.OracleClient.OracleBFile" /> to the beginning of a destination <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" /></param>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)">
      <summary>Copies the entire contents of this <see cref="T:System.Data.OracleClient.OracleBFile" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> at the specified offset.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" />. </param>
      <param name="destinationOffset">The offset to which to copy. </param>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)">
      <summary>Copies from this <see cref="T:System.Data.OracleClient.OracleBFile" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> with the specified amount of data, the source offset, and the destination offset.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="sourceOffset">The offset from which to copy. </param>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" />. </param>
      <param name="destinationOffset">The offset to which to copy. </param>
      <param name="amount">The quantity of data, in bytes, to copy. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the amount parameter is less than zero or greater than 4 gigabytes. </exception>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.DirectoryName">
      <summary>Gets the name of the DIRECTORY object, with which an <see cref="T:System.Data.OracleClient.OracleBFile" /> object is associated.</summary>
      <returns>The name of the DIRECTORY object.</returns>
      <exception cref="T:System.ObjectDisposedException">Attempted to call DirectoryName on a closed or disposed OracleBFile object. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.FileExists">
      <summary>Gets a value indicating whether a physical file containing BFILE data exists in the operating system.</summary>
      <returns>true if a physical file containing BFILE data exists; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Data.OracleClient.OracleBFile" /> object is closed or disposed. </exception>
      <exception cref="T:System.InvalidOperationException">The connection with which a BFILE is associated is closed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.FileName">
      <summary>Gets the name of the BFILE without the path.</summary>
      <returns>The name of the BFILE.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Data.OracleClient.OracleBFile" /> object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Flush">
      <summary>Not currently supported.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.IsNull">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleBFile" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBFile" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream; otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Length">
      <summary>Gets a value that returns the length in bytes of the physical file with which the <see cref="T:System.Data.OracleClient.OracleBFile" /> object is associated.</summary>
      <returns>A long value representing the length of the physical file in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="F:System.Data.OracleClient.OracleBFile.Null">
      <summary>Represents a null <see cref="T:System.Data.OracleClient.OracleBFile" /> object that is not bound to a physical file.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Position">
      <summary>Gets the current read position in the <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</summary>
      <returns>The current position within the <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current <see cref="T:System.Data.OracleClient.OracleBFile" /> stream and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the file has been reached.</returns>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" />) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.InvalidOperationException">The connection with which a BFILE is associated is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position on the current <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</summary>
      <returns>The new position within the current stream.</returns>
      <param name="offset">A byte offset relative to origin. If <paramref name="offset" /> is negative, the new position will precede the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. If <paramref name="offset" /> is zero, the new position will be the position specified by <paramref name="origin" />. If <paramref name="offset" /> is positive, the new position will follow the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. </param>
      <param name="origin">A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)">
      <summary>Binds the <see cref="T:System.Data.OracleClient.OracleBFile" /> object to a different file in the operating system.</summary>
      <param name="directory">The alias of the directory object that contains a physical file. </param>
      <param name="file">The name of the file in the operating system. </param>
      <exception cref="T:System.InvalidOperationException">The operation must be within a transaction. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.SetLength(System.Int64)">
      <summary>Not currently supported.</summary>
      <param name="value">Not currently supported.</param>
      <exception cref="T:System.NotSupportedException">The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Value">
      <summary>Gets an <see cref="T:System.Array" /> of type <see cref="T:System.Byte" /> that contains the <see cref="T:System.Data.OracleClient.OracleBFile" /> data.</summary>
      <returns>An <see cref="T:System.Array" /> of type <see cref="T:System.Byte" /> that contains the <see cref="T:System.Data.OracleClient.OracleBFile" /> data.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Not currently supported.</summary>
      <param name="buffer">Not currently supported.</param>
      <param name="offset">Not currently supported.</param>
      <param name="count">Not currently supported.</param>
      <exception cref="T:System.NotSupportedException">The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</exception>
    </member>
    <member name="T:System.Data.OracleClient.OracleBinary">
      <summary>Represents a variable-length stream of binary data to be stored in or retrieved from a database.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the OracleBinary structure, setting the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property to the contents of the supplied byte array.</summary>
      <param name="b">The byte array to be stored in the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleBinary" /> object to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this OracleBinary structure and the object.Return Value Condition Less than zero The value of this OracleBinary object is less than the object. Zero This OracleBinary object is the same as the object. Greater than zero This OracleBinary object is greater than the object.-or- The object is a null reference. </returns>
      <param name="obj">The object to be compared to this OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Concat(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Concatenates two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to create a new OracleBinary structure.</summary>
      <returns>An OracleBinary structure with the concatenated values of the <paramref name="x" /> and <paramref name="y" /> parameters.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Equals(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleBinary" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GreaterThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GreaterThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.IsNull">
      <summary>Gets a value indicating whether the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> structure is null.</summary>
      <returns>true if Value is null, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Item(System.Int32)">
      <summary>Gets the single byte from the Value property located at the position indicated by the integer parameter, <paramref name="index" />. If <paramref name="index" /> indicates a position beyond the end of the byte array, an exception is raised.</summary>
      <returns>The byte located at the position indicated by the integer parameter.</returns>
      <param name="index">The position of the byte to be retrieved. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Length">
      <summary>Gets the length in bytes of the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property. This property is read-only.</summary>
      <returns>The length of the binary data in the Value property.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.LessThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.LessThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.NotEquals(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBinary.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of an <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Addition(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Concatenates the two <see cref="T:System.Data.OracleClient.OracleBinary" /> parameters to create a new OracleBinary structure.</summary>
      <returns>The concatenated values of the <paramref name="x" /> and <paramref name="y" /> parameters.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Equality(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Explicit(System.Data.OracleClient.OracleBinary)~System.Byte[]">
      <summary>Gets the contents of the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> parameter as an array of bytes.</summary>
      <returns>An array of bytes.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBinary" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_GreaterThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_GreaterThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Implicit(System.Byte[])~System.Data.OracleClient.OracleBinary">
      <summary>Converts an array of bytes to an <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
      <returns>An OracleBinary structure that represents the converted array of bytes.</returns>
      <param name="b">The array of bytes to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Inequality(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_LessThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_LessThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleBinary" /> structure. This property is read-only.</summary>
      <returns>The value of the OracleBinary structure.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleBoolean">
      <summary>Represents the value returned from a database comparison operation between Oracle data types, and exposes methods used to perform data type conversions.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure using the specified Boolean.</summary>
      <param name="value">The Boolean to be used as the initial value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure using the specified integer.</summary>
      <param name="value">The integer to be used as the initial value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.And(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise AND of two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the logical AND operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsefalsefalsefalsefalsetrueunknownunknownfalseunknownfalseunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and value.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is a null reference (Nothing in Visual Basic). </returns>
      <param name="obj">An object to compare, or a null reference (Nothing in Visual Basic). </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Equals(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.False">
      <summary>Represents a false value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsFalse">
      <summary>Indicates whether the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.False" />.</summary>
      <returns>true if Value is False, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsNull">
      <summary>Indicates whether or not the value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure is null.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBoolean" /> value of the structure is Null, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsTrue">
      <summary>Indicates whether the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.True" />.</summary>
      <returns>true if Value is True, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.NotEquals(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.One">
      <summary>Represents a value of one that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.OnesComplement(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a ones complement operation on the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The one's complement of the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" />. If the Boolean contains a null value the result also is a null value.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_BitwiseAnd(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise AND of two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the logical AND operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsefalsefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_BitwiseOr(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise OR of its two <see cref="T:System.Data.OracleClient.OracleBoolean" /> operands.</summary>
      <returns>The result of the bitwise OR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsetruefalsefalsefalsetrueunknowntruefalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Equality(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of an <see cref="T:System.Data.OracleClient.OracleBoolean" /> for equality.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_ExclusiveOr(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise exclusive-OR operation on the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" /> parameters.</summary>
      <returns>The results of the bitwise XOR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruefalsetruefalsetruefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.Data.OracleClient.OracleBoolean)~System.Boolean">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleBoolean" /> to a Boolean.</summary>
      <returns>A Boolean set to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> to convert. </param>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> contains a null value. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> to be converted to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.String)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts a string to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</returns>
      <param name="x">A string to be converted to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_False(System.Data.OracleClient.OracleBoolean)">
      <summary>Used to test the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine whether it is false.</summary>
      <returns>true if the supplied parameter <see cref="T:System.Data.OracleClient.OracleBoolean" /> is false; otherwise false.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to be tested. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Implicit(System.Boolean)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts a Boolean value to an <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> value containing 0 or 1.</returns>
      <param name="x">A Boolean value to be converted to <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Inequality(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleBoolean" /> for inequality.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_LogicalNot(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a NOT operation on an <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> with the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /><see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if argument was true, <see cref="F:System.Data.OracleClient.OracleBoolean.Null" /> if argument was null, and <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> otherwise.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> on which the NOT operation is performed. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_OnesComplement(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a one's complement operation on the specified <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>The one's complement of the specified <see cref="T:System.Data.OracleClient.OracleBoolean" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_True(System.Data.OracleClient.OracleBoolean)">
      <summary>Used to test the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine whether it is true.</summary>
      <returns>true if the supplied parameter <see cref="T:System.Data.OracleClient.OracleBoolean" /> is true; otherwise false.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to be tested. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Or(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise OR operation on the two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the bitwise OR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsetruefalsefalsefalsetrueunknowntruefalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Parse(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its <see cref="T:System.Data.OracleClient.OracleBoolean" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure containing the parsed value.</returns>
      <param name="s">The <see cref="T:System.String" /> to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.ToString">
      <summary>Converts the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> to a string.</summary>
      <returns>A string containing the value of the <see cref="T:System.Data.OracleClient.OracleBoolean" />. If the value is null, the string contains a null value.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.True">
      <summary>Represents a true value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.Value">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure's value. This property is read-only.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.True" />; otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Xor(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise exclusive-OR operation on the supplied parameters.</summary>
      <returns>The results of the logical XOR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruefalsetruefalsetruefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.Zero">
      <summary>Represents a value of zero that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleClientFactory">
      <summary>Represents a set of methods for creating instances of the Oracle provider's implementation of the data source classes. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateCommand">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommand" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommand" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateCommandBuilder">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommandBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateConnection">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnection" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnection" />. </returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateConnectionStringBuilder">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateDataAdapter">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbDataAdapter" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateParameter">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbParameter" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbParameter" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Returns a strongly typed <see cref="T:System.Security.CodeAccessPermission" /> instance.</summary>
      <returns>A strongly typed instance of <see cref="T:System.Security.CodeAccessPermission" />.</returns>
      <param name="state">A member of the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</param>
    </member>
    <member name="F:System.Data.OracleClient.OracleClientFactory.Instance">
      <summary>Gets an instance of the <see cref="T:System.Data.OracleClient.OracleClientFactory" />, which can be used to retrieve strongly typed data objects.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleCommand">
      <summary>Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query.</summary>
      <param name="commandText">The text of the query. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query and an <see cref="T:System.Data.OracleClient.OracleConnection" /> object.</summary>
      <param name="commandText">The text of the query. </param>
      <param name="connection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> object that represents the connection to a database. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query, an <see cref="T:System.Data.OracleClient.OracleConnection" /> object, and an <see cref="T:System.Data.OracleClient.OracleTransaction" />.</summary>
      <param name="commandText">The text of the query. </param>
      <param name="connection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> object that represents the connection to a database. </param>
      <param name="tx">The <see cref="T:System.Data.OracleClient.OracleTransaction" /> in which the <see cref="T:System.Data.OracleClient.OracleCommand" /> executes. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Cancel">
      <summary>Attempts to cancel the execution of an <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Clone">
      <summary>Creates a copy of this <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleCommand" /> object in which all property values are the same as the original.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandText">
      <summary>Gets or sets the SQL statement or stored procedure to execute against the database.</summary>
      <returns>The SQL statement or stored procedure to execute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandTimeout">
      <summary>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</summary>
      <returns>The time (in seconds) to wait for the command to execute. The default value is 30 seconds.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandType">
      <summary>Gets or sets a value indicating how the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> property is interpreted.</summary>
      <returns>One of the <see cref="T:System.Data.CommandType" /> values. The default is Text.</returns>
      <exception cref="T:System.ArgumentException">The value was not a valid <see cref="T:System.Data.CommandType" />. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Connection">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleConnection" /> used by this instance of the <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
      <returns>The connection to a data source. The default is a null value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> property was changed while a transaction was in progress. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.CreateParameter">
      <summary>Creates a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.DesignTimeVisible">
      <summary>Gets or sets a value indicating whether the command object should be visible in a customized interface control.</summary>
      <returns>true, if the command object should be visible in a control; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteNonQuery">
      <summary>Executes an SQL statement against the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and returns the number of rows affected.</summary>
      <returns>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.</returns>
      <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)">
      <summary>Executes an SQL statement against the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and returns the number of rows affected.</summary>
      <returns>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.</returns>
      <param name="rowid">A base64 string representation of the actual row ID in the server. </param>
      <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar">
      <summary>Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.</summary>
      <returns>The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a REF CURSOR.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteReader">
      <summary>Sends the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> to the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and builds an <see cref="T:System.Data.OracleClient.OracleDataReader" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Sends the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> to the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" />, and builds an <see cref="T:System.Data.OracleClient.OracleDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</returns>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteScalar">
      <summary>Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.</summary>
      <returns>The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a REF CURSOR.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Parameters">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>The parameters of the SQL statement or stored procedure. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Prepare">
      <summary>Creates a prepared (or compiled) version of the command at the data source.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> is not set.-or- The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> is not <see cref="M:System.Data.OracleClient.OracleConnection.Open" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ResetCommandTimeout">
      <summary>Resets the <see cref="P:System.Data.OracleClient.OracleCommand.CommandTimeout" /> property to the default value.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Transaction">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleTransaction" /> within which the <see cref="T:System.Data.OracleClient.OracleCommand" /> executes.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleTransaction" />. The default is a null value.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.UpdatedRowSource">
      <summary>Gets or sets a value that specifies how the Update method should apply command results to the <see cref="T:System.Data.DataRow" />.</summary>
      <returns>One of the <see cref="T:System.Data.UpdateRowSource" /> values.</returns>
      <exception cref="T:System.ArgumentException">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource" /> values.</exception>
    </member>
    <member name="T:System.Data.OracleClient.OracleCommandBuilder">
      <summary>Automatically generates single-table commands used to reconcile changes made to a <see cref="T:System.Data.DataSet" /> with the associated database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.#ctor(System.Data.OracleClient.OracleDataAdapter)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommandBuilder" /> class with the associated <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object.</summary>
      <param name="adapter">An <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object to associate with this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.CatalogLocation">
      <summary>Sets or gets the <see cref="T:System.Data.Common.CatalogLocation" /> for an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</summary>
      <returns>A <see cref="T:System.Data.Common.CatalogLocation" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.CatalogSeparator">
      <summary>Sets or gets a string used as the catalog separator for an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</summary>
      <returns>A string indicating the catalog separator for use with an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.DataAdapter">
      <summary>Gets or sets an <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object for which this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" /> object will generate SQL statements.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object that is associated with this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters(System.Data.OracleClient.OracleCommand)">
      <summary>Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.OracleClient.OracleCommand" /> and populates the <see cref="P:System.Data.OracleClient.OracleCommand.Parameters" /> collection of the specified <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</summary>
      <param name="command">The <see cref="T:System.Data.OracleClient.OracleCommand" /> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="P:System.Data.OracleClient.OracleCommand.Parameters" /> collection of the <see cref="T:System.Data.OracleClient.OracleCommand" />. </param>
      <exception cref="T:System.InvalidOperationException">The command text is not a valid stored procedure name, or the <see cref="T:System.Data.CommandType" /> specified was not <see cref="F:System.Data.CommandType.StoredProcedure" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.QuoteIdentifier(System.String)">
      <summary>Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.</summary>
      <returns>The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.</returns>
      <param name="unquotedIdentifier">The original unquoted identifier.</param>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.SchemaSeparator">
      <summary>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</summary>
      <returns>The character to be used as the schema separator.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.</summary>
      <returns>The unquoted identifier, with embedded quotes properly un-escaped.</returns>
      <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
    </member>
    <member name="T:System.Data.OracleClient.OracleConnection">
      <summary>Represents an open connection to a database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnection" /> class with the specified connection string.</summary>
      <param name="connectionString">The connection used to open the database. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.BeginTransaction">
      <summary>Begins a transaction at the database.</summary>
      <returns>An object representing the new transaction.</returns>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Begins a transaction at the database with the specified <see cref="T:System.Data.IsolationLevel" /> value.</summary>
      <returns>An object representing the new transaction.</returns>
      <param name="il">The transaction isolation level for this connection. </param>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)">
      <summary>Changes the current database for an open <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <param name="value">The name of the database to use instead of the current database. </param>
      <exception cref="T:System.ArgumentException">The database name is not valid. </exception>
      <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">Cannot change the database. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ClearAllPools">
      <summary>Empties the connection pool.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)">
      <summary>Empties the connection pool associated with the specified connection.</summary>
      <param name="connection">The <see cref="T:System.Data.OracleClient.OracleConnection" /> to be cleared from the pool.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.Close">
      <summary>Closes the connection to the database. </summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ConnectionString">
      <summary>Gets or sets the string used to open an Oracle database.</summary>
      <returns>The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ConnectionTimeout">
      <summary>Gets the time to wait to establish a connection before terminating the attempt and generating an error.</summary>
      <returns>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</returns>
      <exception cref="T:System.ArgumentException">The value specified is less than 0. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.CreateCommand">
      <summary>Creates and returns an <see cref="T:System.Data.OracleClient.OracleCommand" /> object associated with the <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.Database">
      <summary>Gets the name of the current database or the database to be used after a connection is opened.</summary>
      <returns>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.DataSource">
      <summary>Gets the name of the Oracle server to which to connect.</summary>
      <returns>The name of the Oracle server to which to connect. The default value is an empty string ("").</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>Enlists in the specified transaction as a distributed transaction.</summary>
      <param name="distributedTransaction">A reference to an existing <see cref="T:System.EnterpriseServices.ITransaction" /> in which to enlist.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Enlists in the specified transaction as a distributed transaction.</summary>
      <param name="transaction">A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String)">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" /> using the specified string for the schema name.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" /> using the specified string for the schema name and the specified string array for the restriction values.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <param name="restrictionValues">A set of restriction values for the requested schema.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.</exception>
    </member>
    <member name="E:System.Data.OracleClient.OracleConnection.InfoMessage">
      <summary>Occurs when Oracle sends a warning or an informational message.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.Open">
      <summary>Opens a connection to a database with the property settings specified by the <see cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" />.</summary>
      <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">Cannot change the database. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ServerVersion">
      <summary>Gets a string containing the version of the server to which the client is connected.</summary>
      <returns>The version of the connected server.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.State">
      <summary>Gets the current state of the connection.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Data.ConnectionState" /> values. The default is Closed.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance..</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleConnectionStringBuilder">
      <summary>Provides a simple way to create and manage the contents of connection strings used by the <see cref="T:System.Data.OracleClient.OracleConnection" /> class. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> class. The provided connection string provides the data for the instance's internal connection information.</summary>
      <param name="connectionString">The basis for the object's internal connection information. Parsed into name/value pairs. Invalid key names raise a <see cref="T:System.Collections.Generic.KeyNotFoundException" />.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Invalid key name within the connection string.</exception>
      <exception cref="T:System.FormatException">Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.Clear">
      <summary>Clears the contents of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains a specific key.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="keyword">The key to locate in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic)</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.DataSource">
      <summary>Gets or sets the name of the Oracle data source to connect to.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.DataSource" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Enlist">
      <summary>Gets or sets a value that indicates whether the pooler automatically enlists the connection in the creation thread's current transaction context.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Enlist" /> property, or true if the property has not been previously set.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.IntegratedSecurity">
      <summary>Gets or sets a value that indicates whether "User ID" and "Password" are specified in the connection (when false) or whether the current Windows account credentials are used for authentication (when true).</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.IntegratedSecurity" /> property, or a false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> has a fixed size.</summary>
      <returns>true in every case, because the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> supplies a fixed-size collection of key/value pairs.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</summary>
      <returns>The value associated with the specified key. </returns>
      <param name="keyword">The key of the item to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Tried to add a key which does not exist within the available keys.</exception>
      <exception cref="T:System.FormatException">Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.LoadBalanceTimeout">
      <summary>Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before it is removed.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.LoadBalanceTimeout" /> property, or 0 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.MaxPoolSize">
      <summary>Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.MaxPoolSize" /> property, or 100 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.MinPoolSize">
      <summary>Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.MinPoolSize" /> property, or 0 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.OmitOracleConnectionName">
      <summary>Gets or sets the flag that enables transaction rollbacks on earlier versions of Oracle (prior to 8.1.7.4.1). </summary>
      <returns>true if transaction rollbacks are enabled; otherwise false. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Password">
      <summary>Gets or sets the password for the Oracle account.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Password" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.PersistSecurityInfo">
      <summary>Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.PersistSecurityInfo" /> property, or false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Pooling">
      <summary>Gets or sets a Boolean value that indicates whether the connection will be pooled, or whether each connection will be explicitly opened every time that the connection is requested.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Pooling" /> property, or true if none has been supplied.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.Remove(System.String)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
      <returns>true if the key existed within the connection string and was removed, false if the key did not exist.</returns>
      <param name="keyword">The key of the key/value pair to be removed from the connection string in this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>Indicates whether the specified key exists in this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains an entry with the specified key; otherwise, false.</returns>
      <param name="keyword">The key to locate in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves a value corresponding to the supplied key from this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>true if <paramref name="keyword" /> was found within the connection string; otherwise, false.</returns>
      <param name="keyword">The key of the item to retrieve.</param>
      <param name="value">The value corresponding to <paramref name="keyword." /></param>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Unicode">
      <summary>Gets or sets a Boolean value that indicates if the client supports the Unicode functionality available in later Oracle clients, or if it is non-Unicode aware.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Unicode" /> property, or false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.UserID">
      <summary>Gets or sets the user ID to be used when connecting to Oracle.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.UserID" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDataAdapter">
      <summary>Represents a set of data commands and a connection to a database that are used to fill the <see cref="T:System.Data.DataSet" /> and update the database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.Data.OracleClient.OracleCommand)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with the specified SQL SELECT statement.</summary>
      <param name="selectCommand">An <see cref="T:System.Data.OracleClient.OracleCommand" /> that is an SQL SELECT statement or stored procedure, and is set as the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.Data.OracleClient.OracleConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with an SQL SELECT statement and an <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
      <param name="selectConnection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> that represents the connection. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with an SQL SELECT statement and a connection string.</summary>
      <param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
      <param name="selectConnectionString">The connection string. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.DeleteCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to delete records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to delete records in the database that correspond to deleted rows in the DataSet.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.InsertCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to insert new records into the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to insert records in the database that correspond to new rows in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="E:System.Data.OracleClient.OracleDataAdapter.RowUpdated">
      <summary>Occurs during an update operation after a command is executed against the database.</summary>
    </member>
    <member name="E:System.Data.OracleClient.OracleDataAdapter.RowUpdating">
      <summary>Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> before a command is executed against the data source.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to select records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> that is used during a fill operation to select records from database for placement in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize">
      <summary>Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</summary>
      <returns>The number of rows to process per batch. Value:Effect:0There is no limit on the batch size.1Disables batch updating.&gt; 1Changes are sent using batches of <see cref="P:System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize" /> operations at a time.When setting this to a value other than 1 all the commands associated with the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> have to have their <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> property set to None or OutputParameters. An exception is thrown otherwise. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.UpdateCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to update records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to update records in the database that correspond to modified rows in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDataReader">
      <summary>Provides a way of reading a forward-only stream of data rows from a data source. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.Close">
      <summary>Closes the <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Depth">
      <summary>Gets a value indicating the depth of nesting for the current row.</summary>
      <returns>The depth of nesting for the current row.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.FieldCount">
      <summary>Gets the number of columns in the current row.</summary>
      <returns>When not positioned in a valid record set, 0; otherwise the number of columns in the current record. The default is -1.</returns>
      <exception cref="T:System.NotSupportedException">There is no current connection to a data source. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetBoolean(System.Int32)">
      <summary>Gets the value of the specified column as a Boolean.</summary>
      <returns>A Boolean that is the value of the column.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetByte(System.Int32)">
      <summary>Gets the value of the specified column as a byte.</summary>
      <returns>The value of the specified column as a byte.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
      <returns>The actual number of bytes read.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <param name="fieldOffset">The index within the field where the read operation is to begin. </param>
      <param name="buffer2">The buffer into which to read the stream of bytes. </param>
      <param name="bufferoffset">The index where <paramref name="buffer" /> is to begin the write operation. </param>
      <param name="length">The number of bytes to read. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetChar(System.Int32)">
      <summary>Gets the value of the specified column as a character.</summary>
      <returns>The value of the specified column as a character.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
      <returns>The actual number of characters read.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <param name="fieldOffset">The index within the row where the read operation is to begin. </param>
      <param name="buffer2">The buffer into which to copy data. </param>
      <param name="bufferoffset">The index where <paramref name="buffer" /> is to begin the write operation. </param>
      <param name="length">The number of characters to read. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDataTypeName(System.Int32)">
      <summary>Gets the name of the source data type.</summary>
      <returns>The name of the source data type.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDateTime(System.Int32)">
      <summary>Gets the value of the specified column as a DateTime object.</summary>
      <returns>The value of the specified column as a DateTime object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDecimal(System.Int32)">
      <summary>Gets the value of the specified column as a Decimal object.</summary>
      <returns>The value of the specified column as a Decimal object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDouble(System.Int32)">
      <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
      <returns>The value of the specified column as a double-precision floating point number.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetFieldType(System.Int32)">
      <summary>Gets the <see cref="T:System.Type" /> that is the data type of the object.</summary>
      <returns>The <see cref="T:System.Type" /> that is the data type of the object.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetFloat(System.Int32)">
      <summary>Gets the value of the specified column as a single-precision floating-point number.</summary>
      <returns>The value of the specified column as a single-precision floating-point number.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetGuid(System.Int32)">
      <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
      <returns>The value of the specified column as a GUID.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt16(System.Int32)">
      <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
      <returns>The value of the specified column as a 16-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt32(System.Int32)">
      <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
      <returns>The value of the specified column as a 32-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt64(System.Int32)">
      <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
      <returns>The value of the specified column as a 64-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetName(System.Int32)">
      <summary>Gets the name of the specified column.</summary>
      <returns>A string that is the name of the specified column.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleBFile(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBFile" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBFile" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleBinary(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleDateTime(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleLob(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleLob" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleLob" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleMonthSpan(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleNumber(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleNumber" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleNumber" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleString(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleString" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleString" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleTimeSpan(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleValue(System.Int32)">
      <summary>Gets the value of the column at the specified ordinal in its Oracle format.</summary>
      <returns>The Oracle value to return.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleValues(System.Object[])">
      <summary>Gets all the attribute columns in the current row in Oracle format.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of type <see cref="T:System.Object" /> into which to copy the attribute columns. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOrdinal(System.String)">
      <summary>Gets the column ordinal, given the name of the column.</summary>
      <returns>The zero-based column ordinal.</returns>
      <param name="name">The name of the column.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Gets an Object that is a representation of the underlying provider specific field type.</summary>
      <returns>Gets an <see cref="T:System.Object" /> that is a representation of the underlying provider specific field type.</returns>
      <param name="i">An <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Gets an Object that is a representation of the underlying provider specific field type.</summary>
      <returns>Gets an <see cref="T:System.Object" /> that is a representation of the underlying provider specific field type.</returns>
      <param name="i">An <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Gets an array of objects that are a representation of the underlying provider specific values.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetSchemaTable">
      <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the OracleDataReader.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetString(System.Int32)">
      <summary>Gets the value of the specified column as a string.</summary>
      <returns>The value of the specified column as a string.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetTimeSpan(System.Int32)">
      <summary>Gets the value of the specified column as a System.TimeSpan.</summary>
      <returns>The value of the specified column as a <see cref="T:System.TimeSpan" />.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetValue(System.Int32)">
      <summary>Gets the value of the column at the specified ordinal in its native format.</summary>
      <returns>The value to return.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.Data.OracleClient.OracleException">The value is too large to be stored in the .NET Decimal.</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetValues(System.Object[])">
      <summary>Populates an array of objects with the column values of the current row.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of type <see cref="T:System.Object" /> into which to copy the attribute columns. </param>
      <exception cref="T:System.Data.OracleClient.OracleException">The value is too large to be stored in the .NET Decimal.</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.HasRows">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.OracleClient.OracleDataReader" /> contains one or more rows.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleDataReader" /> contains one or more rows; otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.IsClosed">
      <summary>Indicates whether the <see cref="T:System.Data.OracleClient.OracleDataReader" /> is closed.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleDataReader" /> is closed; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.IsDBNull(System.Int32)">
      <summary>Gets a value indicating whether the column contains non-existent or missing values.</summary>
      <returns>true if the specified column value is equivalent to <see cref="T:System.DBNull" />; otherwise, false.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Item(System.Int32)">
      <summary>Gets the value of the specified column in its native format given the column ordinal.</summary>
      <returns>The value of the specified column in its native format.</returns>
      <param name="i">The column ordinal. </param>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Item(System.String)">
      <summary>Gets the value of the specified column in its native format given the column name.</summary>
      <returns>The value of the specified column in its native format.</returns>
      <param name="name">The column name.</param>
      <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.NextResult">
      <summary>Advances the <see cref="T:System.Data.OracleClient.OracleDataReader" /> to the next result </summary>
      <returns>true if there are more result sets; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.Read">
      <summary>Advances the <see cref="T:System.Data.OracleClient.OracleDataReader" /> to the next record.</summary>
      <returns>true if there are more rows; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.RecordsAffected">
      <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
      <returns>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected, or the statement failed.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDateTime">
      <summary>Represents date and time data ranging in value from January 1, 4712 BC to December 31, 4712 AD.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Data.OracleClient.OracleDateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure from an existing <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</summary>
      <param name="from">An existing <see cref="T:System.Data.OracleClient.OracleDateTime" /> object from which to copy. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure with the specified <see cref="T:System.DateTime" />.</summary>
      <param name="dt">The specified <see cref="T:System.DateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, and day of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, and calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, and second of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, and second for the specified calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and millisecond of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="millisecond">An integer value representing the millisecond of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and millisecond for the specified calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="millisecond">An integer value representing the millisecond of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and the object.Return value Condition Less than zero This structure is less than the object. Zero This structure is the same as the object. Greater than zero This structure is greater than the object, object is a null reference (Nothing in Visual Basic) </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Day">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient