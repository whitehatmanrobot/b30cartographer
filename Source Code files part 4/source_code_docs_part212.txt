s will point to after fixup is completed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.ObjectManager.RaiseDeserializationEvent">
      <summary>
        <para> Raises the deserialization event to any registered object that implements
   <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />.
      </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationBinder">
      <summary>
        <para> Allows users to control class loading and mandate what class to load.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)">
      <summary>
        <para>When overridden in a derived class, controls the binding of a serialized
 object to a type.</para>
      </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
        <para>The type of the object the formatter creates a new instance of.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfo">
      <summary>
        <para> Holds all the data needed to serialize or
      deserialize an object. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
      <param name="converter">The <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> used during deserialization.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)">
      <summary>
        <para>Sets the <see cref="T:System.Type" /> of the object to serialize. </para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
      <summary>
        <para>Returns a <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> 
used to iterate through the name-value pairs in the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
. </para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> for
   parsing the
   name-value pairs in this <see cref="T:System.Runtime.Serialization.SerializationInfo" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)">
      <summary>
        <para>Adds a value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ,
   where <paramref name="value" /> is associated with <paramref name="name" /> and is serialized as being of <see cref="T:System.Type" /><paramref name="type" />. </para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
      <param name="type">The <see cref="T:System.Type" /> to associate with the current object. This parameter must always be the type of the object itself or of one of its base classes.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)">
      <summary>
        <para>Adds the specified object into
      the <see cref="T:System.Runtime.Serialization.SerializationInfo" />, where
      it is associated with a specified name.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The value to be serialized. Any children of this object will automatically be serialized.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)">
      <summary>
        <para>Adds a Boolean value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Boolean value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)">
      <summary>
        <para>Adds a Unicode character value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The character value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)">
      <summary>
        <para>Adds an 8-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Sbyte value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)">
      <summary>
        <para>Adds an 8-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The byte value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)">
      <summary>
        <para>Adds a 16-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Int16 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)">
      <summary>
        <para>Adds a 16-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The UInt16 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)">
      <summary>
        <para>Adds a 32-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Int32 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)">
      <summary>
        <para>Adds a 32-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The UInt32 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)">
      <summary>
        <para>Adds a 64-bit signed integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Int64 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)">
      <summary>
        <para>Adds a 64-bit unsigned integer value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The UInt64 value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)">
      <summary>
        <para> Adds a single-precision floating-point value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> .</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Single value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)">
      <summary>
        <para> Adds a double-precision floating-point value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Double value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)">
      <summary>
        <para>Adds a Decimal value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The Decimal value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)">
      <summary>
        <para>Adds a <see cref="T:System.DateTime" /> value into the <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="name">The name to associate with the value, so it can be deserialized later.</param>
      <param name="value">The <see cref="T:System.DateTime" /> value to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)">
      <summary>
        <para>Retrieves a value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <param name="type">The type of the value to retrieve. If the stored value cannot be converted to this type, the system will throw an <see cref="T:System.InvalidCastException" />.</param>
      <returns>
        <para>The object of the specified <see cref="T:System.Type" />associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)">
      <summary>
        <para>Retrieves a Boolean value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
.</para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The Boolean value associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)">
      <summary>
        <para>Retrieves a Unicode character value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
.</para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The Unicode character associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)">
      <summary>
        <para>Retrieves an 8-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 8-bit signed integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)">
      <summary>
        <para>Retrieves an 8-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 8-bit unsigned integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)">
      <summary>
        <para>Retrieves a 16-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> .</para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 16-bit signed integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)">
      <summary>
        <para>Retrieves a 16-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
.</para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 16-bit unsigned integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)">
      <summary>
        <para>Retrieves a 32-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 32-bit signed integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)">
      <summary>
        <para>Retrieves a 32-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 32-bit unsigned integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)">
      <summary>
        <para>Retrieves a 64-bit signed integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 64-bit signed integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)">
      <summary>
        <para>Retrieves a 64-bit unsigned integer value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The 64-bit unsigned integer associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)">
      <summary>
        <para> Retrieves a single-precision floating-point value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The single-precision floating-point value associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)">
      <summary>
        <para> Retrieves a double-precision floating-point value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para> The double-precision floating-point value associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)">
      <summary>
        <para>Retrieves a Decimal value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>A Decimal value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)">
      <summary>
        <para>Retrieves a <see cref="T:System.DateTime" /> value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> .</para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" />
value associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)">
      <summary>
        <para>Retrieves a <see cref="T:System.String" /> value from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> . </para>
      </summary>
      <param name="name">The name of the value to retrieve.</param>
      <returns>
        <para>The <see cref="T:System.String" />
associated with <paramref name="name" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
      <summary>
        <para>Gets or sets the full name of the <see cref="T:System.Type" /> to serialize.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.AssemblyName">
      <summary>
        <para> Gets or
      sets the assembly name of the type to
      serialize.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.MemberCount">
      <summary>
        <para>Gets the number of members that have been added to 
       the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
       .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationEntry">
      <summary>
        <para>Holds the value, <see cref="T:System.Type" />, and name of a serialized object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Value">
      <summary>
   Gets the value contained in the object.
</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Name">
      <summary>
        <para>Gets the name of the object. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.ObjectType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of
   the object.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfoEnumerator">
      <summary>
        <para> Provides a formatter-friendly mechanism for parsing the
      data in <see cref="T:System.Runtime.Serialization.SerializationInfo" />. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.MoveNext">
      <summary>
        <para>Updates the enumerator
      to the next item.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if a new element is found;
   otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.Reset">
      <summary>
        <para> Resets the enumerator to
      the first item.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Current">
      <summary>
        <para> Gets the item currently being examined.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Name">
      <summary>
        <para>Gets the name for the item currently being examined. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Value">
      <summary>
        <para> Gets the value of the item currently being examined. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.ObjectType">
      <summary>
        <para>Gets the type of the item currently being examined. </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>
        <para> The exception thrown when an error occurs during
      serialization or deserialization.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" />
class
with a specified message.</para>
      </summary>
      <param name="message"> Indicates the reason why the exception occurred.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SerializationException" /> class from serialized data. </para>
      </summary>
      <param name="info">The serialization info object holding the serialized object data in the name-value form.</param>
      <param name=" context">The contextual information about the source or destination of the exception.</param>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>
        <para> Describes
      the source and destination of a given serialized stream, as well as
      a means for serialization to retain that context and an additional
      caller-defined context.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class
   with
   a given context
   state.</para>
      </summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specify the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" /> .</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext" /> class
   with
   a given context state, and some additional information.</para>
      </summary>
      <param name="state">A bitwise combination of the <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> values that specify the source or destination context for this <see cref="T:System.Runtime.Serialization.StreamingContext" /> .</param>
      <param name="additional">Any additional information to be associated with the <see cref="T:System.Runtime.Serialization.StreamingContext" /> . This information will be available to any object implementing <see cref="T:System.Runtime.Serialization.ISerializable" /> or any Serialization Surrogate. Most users will not need to set this parameter.</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>
        <para>Determines whether two <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances contain the same values.</para>
      </summary>
      <param name="obj">An object to compare with the current instance.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
   specified object is an instance of <see cref="T:System.Runtime.Serialization.StreamingContext" /> and equals the value of the current
   instance; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>
        <para>Returns a hash code of this object.</para>
      </summary>
      <returns>
        <para>The <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> value 
   that contains the source or destination of the serialization for this <see cref="T:System.Runtime.Serialization.StreamingContext" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
      <summary>
        <para> Gets context specified as part of the additional context.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
      <summary>
        <para> Gets the source or destination
      of the transmitted data.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
      <summary>
        <para> Defines a set of flags that specifies the source or destination context for the stream during serialization.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
      <summary>
        <para> Specifies that the source or destination context is a different process on the same computer.
   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
      <summary>
        <para> Specifies that the source or destination context is a different computer.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
      <summary>
        <para> Specifies that the source or destination context is a file. Users can assume that
      files will last longer than the process that created them and not serialize objects in such a way
      that deserialization will require accessing any data from the current process.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
      <summary>
        <para> Specifies that the source or destination context is a persisted
      store, which could include databases, files, or other backing stores. Users can assume
      that persisted data will last longer than the process that created the data and not serialize objects so
      that deserialization will require accessing any data from the current process.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
      <summary>
        <para> Specifies that the data is remoted to a context in an unknown location.
      Users cannot make any assumptions whether this is on the same computer.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
      <summary>
        <para>
 Specifies that the serialization context is unknown.
 </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
      <summary>
        <para> Specifies that the object graph is being cloned. Users can assume that the cloned
      graph will continue to exist within the same process and be safe to access handles or other references to
      unmanaged resources.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
      <summary>
        <para>Specifies that the source or destination context is a 
      different AppDomain. (For a description of AppDomains see <see topic="cpconapplicationdomains" />
      ).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
      <summary>
        <para> Specifies that the serialized data can be transmitted to or received from any of the other contexts.
   </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SurrogateSelector">
      <summary>
        <para>Assists formatters in selection of the serialization surrogate to delegate the serialization or deserialization process
      to.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.SurrogateSelector" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.AddSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISerializationSurrogate)">
      <summary>
        <para> Adds a surrogate to the list of checked surrogates.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> for which the surrogate is required</param>
      <param name="context">The context-specific data.</param>
      <param name="surrogate">The surrogate to call for this type.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
      <summary>
        <para>Adds the specified <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that can handle a particular object type to
   the list of surrogates.</para>
      </summary>
      <param name="selector">The surrogate selector to add.</param>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.GetNextSelector">
      <summary>
        <para>Returns the next selector on the chain of selectors.</para>
      </summary>
      <returns>
        <para>The next <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> on the chain of selectors.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>
        <para>Returns the surrogate for a particular type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> for which the surrogate is requested.</param>
      <param name="context">The streaming context.</param>
      <param name="selector">The surrogate to use.</param>
      <returns>
        <para>The surrogate for a particular type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.SurrogateSelector.RemoveSurrogate(System.Type,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Removes the surrogate associated with a given type.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> for which to remove the surrogate.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> for the current surrogate.</param>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>
        <para>Defines different rules for determining the first week of the year.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>
        <para>Indicates that the first week of the year starts on the first day of the year and ends before the following designated first day of the week.
        The value is 0.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>
        <para> Indicates that the first week of the year begins on the first occurrence of the designated first day of the week on or after the first day of the year.
        The value is 1.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>
        <para>Indicates that the first week of the year is the first week with four or more days before the designated first day of the week.
        The value is 2.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>
        <para>Represents time in divisions, such as weeks, months, and years.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>
        <para> Represents the current era for the current calendar. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.Calendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of days away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add days.</param>
      <param name="days">The number of days to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of days to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of hours away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add hours.</param>
      <param name="hours">The number of hours to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of hours to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of milliseconds away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add milliseconds.</param>
      <param name="milliseconds">The number of milliseconds to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of milliseconds to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of minutes away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add minutes.</param>
      <param name="minutes">The number of minutes to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of minutes to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of seconds away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add seconds.</param>
      <param name="seconds">The number of seconds to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of seconds to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of weeks away from the
   specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add weeks.</param>
      <param name="weeks">The number of weeks to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para> An integer that represents the day of the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the day of the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the current era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <returns>
        <para> The number of days in the specified month in the specified year in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para> The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the current era.</para>
      </summary>
      <param name="year">An integer that represents the year. </param>
      <returns>
        <para>The number of days in the specified year in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year. </param>
      <param name="era">An integer that represents the era. </param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para> An integer that represents the era in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>
        <para>Returns the hours value in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 0 to 23 that represents the hour in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>
        <para>Returns the milliseconds value in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the milliseconds in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>
        <para>Returns the minutes value in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the minutes in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the current era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <returns>
        <para>The number of months in the specified year in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>
        <para>Returns the seconds value in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para> An integer that represents the seconds in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>
        <para>Returns the week of the year that includes the date in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <param name="rule">A <see cref="T:System.Globalization.CalendarWeekRule" /> value that defines a calendar week.</param>
      <param name="firstDayOfWeek">A <see cref="T:System.DayOfWeek" /> value that represents the first day of the week.</param>
      <returns>
        <para>An integer that represents the week of the year that includes the date in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>
        <para>When overridden in a derived class, returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para> An integer that represents the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Determines whether the specified date in the current era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the current era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>
        <para>Determines whether the specified year in the current era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns a <see cref="T:System.DateTime" /> that is set to the
   specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by using the <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> property
 to determine the appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>
        <para>When overridden in a derived class, gets the list of eras in the current calendar.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>
        <para>Defines the string comparison options to use with <see cref="T:System.Globalization.CompareInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>
        <para>Indicates the default option settings for string comparisons.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>
        <para>Indicates that the string comparison must ignore case.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>
        <para>Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics.
      The Unicode Standard defines combining characters as characters that are combined with base characters to produce a new character.
      Nonspacing combining characters do not occupy a spacing position by themselves when rendered.
      For more information on nonspacing combining characters, see The Unicode Standard at http://www.unicode.org.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>
        <para>Indicates that the string comparison must ignore symbols, 
 such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>
        <para>Indicates that the string comparison must ignore the Kana type.
      Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language.
      Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as "computer" or "Internet".
      A phonetic sound can be expressed in both hiragana and katakana.
      If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>
        <para>Indicates that the string comparison must ignore the character width.
 For example, Japanese katakana characters can be written as full-width or half-width and,
 if this value is selected, the katakana characters written as full-width are considered equal to the same characters written in half-width.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>
        <para>Indicates that the string comparison must use the string sort algorithm,
      where the hyphen and the apostrophe, as well as other nonalphanumeric characters, come before alphanumeric symbols.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>
        <para>Indicates that the string comparison must be done using the Unicode values of each character, 
   which is a fast comparison but is culture-insensitive. A string starting with "U+xxxx" comes before a string starting with "U+yyyy", if xxxx is less than yyyy.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>
        <para>Implements a set of methods for culture-sensitive string comparisons.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CompareInfo" /> class that is associated
   with the culture having the specified identifier
   and uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="culture">An integer representing the culture identifier.</param>
      <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
      <returns>
        <para>A new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
   that is associated with the specified culture
   and uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
   that is associated with the culture having the specified name
   and uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </summary>
      <param name="name">A string representing the culture name.</param>
      <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
      <returns>
        <para>A new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
   that is associated with the culture having the specified name
   and uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified identifier.</para>
      </summary>
      <param name="culture">An integer representing the culture identifier.</param>
      <returns>
        <para>A new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified identifier
 and uses string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified name.</para>
      </summary>
      <param name="name">A string representing the culture name.</param>
      <returns>
        <para>A new instance of the <see cref="T:System.Globalization.CompareInfo" /> class
 that is associated with the culture having the specified name
 and uses string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>
        <para>Compares two strings using the default <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="string2">The second string to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term>zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term>less than zero</term>
            <description>
              <paramref name="string1" /> is less than <paramref name="string2" />.</description>
          </item>
          <item>
            <term>greater than zero</term>
            <description>
              <paramref name="string1" /> is greater than <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term> less than zero</term>
            <description>
              <paramref name="string1" /> is less than <paramref name="string2" />.</description>
          </item>
          <item>
            <term> greater than zero</term>
            <description>
              <paramref name="string1" /> is greater than <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Compares a section of one string with a section of another string.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term> less than zero</term>
            <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
          </item>
          <item>
            <term> greater than zero</term>
            <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para> Compares the end section of a string with the end section of another string
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term> less than zero</term>
            <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
          </item>
          <item>
            <term> greater than zero</term>
            <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>
        <para>Compares the end section of a string with the end section of another string.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term> less than zero</term>
            <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
          </item>
          <item>
            <term> greater than zero</term>
            <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Compares a section of one string with a section of another string
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="string1">The first string to compare.</param>
      <param name="offset1">The zero-based index of the character in <paramref name="string1" /> at which to start comparing.</param>
      <param name="length1">The number of consecutive characters in <paramref name="string1" /> to compare.</param>
      <param name="string2">The second string to compare.</param>
      <param name="offset2">The zero-based index of the character in <paramref name="string2" /> at which to start comparing.</param>
      <param name="length2">The number of consecutive characters in <paramref name="string2" /> to compare.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> zero</term>
            <description>The two strings are equal.</description>
          </item>
          <item>
            <term> less than zero</term>
            <description>The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.</description>
          </item>
          <item>
            <term> greater than zero</term>
            <description>The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Determines whether the specified source string starts with the specified prefix
   using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search in.</param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>
        <para>Determines whether the specified source
      string starts with the specified prefix.</para>
      </summary>
      <param name="source">The string to search in.</param>
      <param name="prefix">The string to compare with the beginning of <paramref name="source" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Determines whether the specified source string ends with the specified suffix
   using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search in.</param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>
        <para>Determines whether the specified source string ends with the specified suffix.</para>
      </summary>
      <param name="source">The string to search in.</param>
      <param name="suffix">The string to compare with the end of <paramref name="source" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" />
and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the entire source string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the entire source string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the entire <paramref name="source" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that extends from the specified index to the end of the string
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the first occurrence
      within the section of the source string that starts at the specified index and contains the specified number of elements
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the first occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />,
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the entire source string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the entire source string.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the entire <paramref name="source" /> using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that extends from the beginning of the string to the specified index
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified character and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The character to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>
        <para>Searches for the specified substring and returns the zero-based index of the last occurrence
      within the section of the source string that contains the specified number of elements and ends at the specified index
      using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string to search.</param>
      <param name="value">The string to locate within <paramref name="source" />.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The zero-based index of the last occurrence of <paramref name="value" />
within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and ends at <paramref name="startIndex" />
using the specified <see cref="T:System.Globalization.CompareOptions" /> value,
if found; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.SortKey" /> of the specified string
   using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </summary>
      <param name="source">The string for which to get the <see cref="T:System.Globalization.SortKey" />.</param>
      <param name="options">The <see cref="T:System.Globalization.CompareOptions" /> value that defines how the strings should be compared.</param>
      <returns>
        <para>The <see cref="T:System.Globalization.SortKey" /> of  the specified string
 using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.SortKey" /> of the specified string.</para>
      </summary>
      <param name="source">The string for which to get the <see cref="T:System.Globalization.SortKey" />.</param>
      <returns>
        <para>The <see cref="T:System.Globalization.SortKey" /> of the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is the same instance as the current <see cref="T:System.Globalization.CompareInfo" />.</para>
      </summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object is the same instance as the current <see cref="T:System.Globalization.CompareInfo" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>
        <para>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" />
   for use in hashing algorithms and data structures, such as a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>
        <para>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" />.</para>
      </summary>
      <returns>
        <para>A string that represents the current <see cref="T:System.Globalization.CompareInfo" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.LCID">
      <summary>
        <para>Gets the properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>
        <para>Represents information about a specific culture
      including the names of the culture, the writing system, and the calendar used,
      as well as access to culture-specific objects that provide methods for common operations,
      such as formatting dates and sorting strings.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by name.</para>
      </summary>
      <param name="name">
        <para>A predefined <see cref="T:System.Globalization.CultureInfo" /> name or the <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class
   based on the culture specified by name and on the Boolean that specifies whether to use the user-selected culture settings from the system.</para>
      </summary>
      <param name="name">
        <para>A predefined <see cref="T:System.Globalization.CultureInfo" /> name or the <see cref="P:System.Globalization.CultureInfo.Name" /> of an existing <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (<see langword="true" />) or the default culture settings (<see langword="false" /> ).</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier.</para>
      </summary>
      <param name="culture">
        <para>A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier or the <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.CultureInfo" /> class based on the culture specified by the culture identifier
   and on the Boolean that specifies whether to use the user-selected culture settings from the system.</para>
      </summary>
      <param name="culture">A predefined <see cref="T:System.Globalization.CultureInfo" /> identifier or the <see cref="P:System.Globalization.CultureInfo.LCID" /> property of an existing <see cref="T:System.Globalization.CultureInfo" />.</param>
      <param name="useUserOverride">A Boolean that denotes whether to use the user-selected culture settings (<see langword="true" />) or the default culture settings (<see langword="false" />).</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)">
      <summary>
        <para>Creates a <see cref="T:System.Globalization.CultureInfo" /> that represents the specific culture that is associated with the specified name.</para>
      </summary>
      <param name="name">
        <para>A predefined <see cref="T:System.Globalization.CultureInfo" /> name or the name of an existing <see cref="T:System.Globalization.CultureInfo" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Globalization.CultureInfo" /> that represents the invariant culture, if <paramref name="name" /> is "" (invariant culture).</para>
        <para>-or-</para>
        <para>A <see cref="T:System.Globalization.CultureInfo" /> that represents the default specific culture associated with <paramref name="name" />, if <paramref name="name" /> is a neutral culture.</para>
        <para>-or-</para>
        <para>A <see cref="T:System.Globalization.CultureInfo" /> that represents <paramref name="name" />, if <paramref name="name" /> is already a specific culture.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)">
      <summary>
        <para>Gets the list of supported cultures filtered by the specified <see cref="T:System.Globalization.CultureTypes" />.</para>
      </summary>
      <param name="types">A combination of <see cref="T:System.Globalization.CultureTypes" /> values that filter the cultures to retrieve.</param>
      <returns>
        <para>An array of type <see cref="T:System.Globalization.CultureInfo" /> that represents the supported cultures filtered by the specified <see cref="T:System.Globalization.CultureTypes" /> values.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.CultureInfo" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is the same culture as the current <see cref="T:System.Globalization.CultureInfo" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>
        <para>Serves as a hash function for the current <see cref="T:System.Globalization.CultureInfo" />,
   suitable for use in hashing algorithms and data structures, such as a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>
        <para>Returns a string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".</para>
      </summary>
      <returns>
        <para>A string containing the name of the current <see cref="T:System.Globalization.CultureInfo" /> in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;",
   where &lt;languagecode2&gt; is a lowercase two-letter code derived from ISO 639-1 and &lt;country/regioncode2&gt; is an uppercase two-letter code derived from ISO 3166.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>
        <para>Gets an object that defines how to format the specified type.</para>
      </summary>
      <param name="formatType">The <see cref="T:System.Type" /> for which to get a formatting object. This method only supports the <see cref="T:System.Globalization.NumberFormatInfo" /> and <see cref="T:System.Globalization.DateTimeFormatInfo" /> types.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.NumberFormatInfo" /> object containing the default number format information for the current <see cref="T:System.Globalization.CultureInfo" />,
   if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.NumberFormatInfo" /> class.</para>
        <para>-or-</para>
        <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> object containing the default date and time format information for the current <see cref="T:System.Globalization.CultureInfo" />,
if <paramref name="formatType" /> is the <see cref="T:System.Type" /> object for the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class.</para>
        <para>-or-</para>
        <para>
          <see langword="null" />, if <paramref name="formatType" /> is any other object.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ClearCachedData">
      <summary>
        <para>Refreshes cached culture-related information.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>
        <para> Creates a copy of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
      <returns>
        <para> A copy of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>
        <para>Returns a read-only wrapper around the specified <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Globalization.CultureInfo" /> wrapper around <paramref name="ci" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the culture used by the current thread.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the current culture used by the Resource Manager to look up culture-specific resources at run time.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.InstalledUICulture">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the culture installed with the operating system.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that is culture-independent (invariant).</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CultureInfo" /> that represents the parent culture of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.LCID">
      <summary>
        <para>Gets the culture identifier for the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>
        <para> Gets the culture name in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>
        <para> Gets the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in the language of the localized version of .NET Framework.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>
        <para>Gets the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in the language that the culture is set to display.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>
        <para>Gets the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;)" in English. </para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>
        <para>Gets the ISO 639-1 two-letter code for the language of the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName">
      <summary>
        <para>Gets the ISO 639-2 three-letter code for the language of
      the current <see cref="T:System.Globalization.CultureInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName">
      <summary>
        <para> Gets the three-letter code for the language as defined in the Windows API.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.CompareInfo" /> that defines how to compare strings for the culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.TextInfo" /> that defines the writing system associated with the culture. </para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> represents a neutral culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>
        <para>Gets or sets a <see cref="T:System.Globalization.NumberFormatInfo" />
   that defines the culturally appropriate format of displaying numbers, currency, and percentage.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>
        <para>Gets or sets a <see cref="T:System.Globalization.DateTimeFormatInfo" /> that defines the culturally appropriate format of displaying dates and times.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>
        <para>Gets the default calendar used by the culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>
        <para>Gets the list of optional calendars that can be used by the culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.UseUserOverride">
      <summary>
        <para> Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> uses the user-selected culture settings.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Globalization.CultureInfo" /> is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.CultureTypes">
      <summary>
        <para>Defines the types of culture lists that can be retrieved using <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.NeutralCultures">
      <summary>
        <para>Refers to cultures that are associated with a language but are not specific to a country/region.
 The names of these cultures consist of the lowercase two-letter code derived from ISO 639-1.
 For example: "en" (English) is a neutral culture.
 The invariant culture is included in the array of cultures returned by <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" qualify="true" /> with this value.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.SpecificCultures">
      <summary>
        <para>Refers to cultures that are specific to a country/region.
 The names of these cultures follow the RFC 1766 standard in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;",
 where &lt;languagecode2&gt; is a lowercase two-letter code derived from ISO 639-1 and
 &lt;country/regioncode2&gt; is an uppercase two-letter code derived from ISO 3166.
 For example, "en-US" (English - United States) is a specific culture.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.InstalledWin32Cultures">
      <summary>
        <para>Refers to all cultures that are installed in the system.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.AllCultures">
      <summary>
        <para>Refers to all cultures.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>
        <para>Defines the formatting options that customize how the <see cref="M:System.DateTime.Parse(System.String)" qualify="true" /> and <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" qualify="true" /> methods parse a string.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>
        <para>Indicates that the default formatting options must be used.
 This is the default style for <see cref="M:System.DateTime.Parse(System.String)" qualify="true" /> and <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>
        <para>Indicates that leading white space characters must be ignored during parsing,
 except if those white space characters occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>
        <para>Indicates that trailing white space characters must be ignored during parsing,
 except if those white space characters occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>
        <para>Indicates that extra white space characters in the middle of the string must be ignored during parsing,
 except if those white space characters occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>
        <para>Indicates that extra white space characters anywhere in the string must be ignored during parsing,
 except if those white space characters occur in the <see cref="T:System.Globalization.DateTimeFormatInfo" /> format patterns.
 This value is a combination of the <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />, <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />, and <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> values.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>
        <para>Indicates that, if the parsed string contains only the time and not the date,
      the <see cref="M:System.DateTime.Parse(System.String)" qualify="true" /> and <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" qualify="true" /> methods
 assume the Gregorian date with year = 1, month = 1, and day = 1.
 If this value is not used, the current date is assumed.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>
        <para>Indicates that the date and time must be converted to Universal Time or Greenwich mean time (GMT).</para>
      </summary>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>
        <para>Defines how <see cref="T:System.DateTime" /> values are formatted and displayed, depending on the culture.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>
        <para>Initializes a new writable instance of the <see cref="T:System.Globalization.DateTimeFormatInfo" /> class that is culture-independent (invariant).</para>
      </summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
        <para>Returns the <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</para>
      </summary>
      <param name="provider">
        <para>The <see cref="T:System.IFormatProvider" /> that gets the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to get <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>
        <para>Returns an object of the specified type that provides a <see cref="T:System.DateTime" /> formatting service.</para>
      </summary>
      <param name="formatType">The <see cref="T:System.Type" /> of the required formatting service.</param>
      <returns>
        <para>The current <see cref="T:System.Globalization.DateTimeFormatInfo" />,
   if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.DateTimeFormatInfo" />;
   otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Globalization.DateTimeFormatInfo" /> copied from the original
<see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>
        <para>Returns the integer representing the specified era.</para>
      </summary>
      <param name="eraName">The string containing the name of the era. </param>
      <returns>
        <para>The integer representing the era, if <paramref name="eraName" /> is valid; otherwise, -1.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>
        <para>Returns the string containing the name of the specified era.</para>
      </summary>
      <param name="era">The integer representing the era.</param>
      <returns>
        <para>A string containing the name of the era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>
        <para>Returns the string containing the abbreviated name of the specified era, if an abbreviation exists.</para>
      </summary>
      <param name="era">The integer representing the era.</param>
      <returns>
        <para>A string containing the abbreviated name of the specified era, if an abbreviation exists.</para>
        <para>-or-</para>
        <para>A string containing the full name of the era, if an abbreviation does not exist.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>
        <para>Returns the culture-specific abbreviated name of the specified day of the week based on the <see cref="T:System.Globalization.CultureInfo" /> of the current thread.</para>
      </summary>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" qualify="true" /> value.</param>
      <returns>
        <para>The culture-specific abbreviated name of the day of the week represented by <paramref name="dayofweek" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns">
      <summary>
        <para>Returns all the standard patterns in which <see cref="T:System.DateTime" /> values can be formatted.</para>
      </summary>
      <returns>
        <para>An array containing the standard patterns in which <see cref="T:System.DateTime" /> values can be formatted.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)">
      <summary>
        <para>Returns all the standard patterns in which <see cref="T:System.DateTime" /> values can
   be formatted using the specified format character.</para>
      </summary>
      <param name="format">A standard format character.</param>
      <returns>
        <para>An array containing the standard patterns in which <see cref="T:System.DateTime" />
values can be formatted using the specified format character.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>
        <para>Returns the culture-specific full name of the specified day of the week based
      on the <see cref="T:System.Globalization.CultureInfo" /> of the current thread.</para>
      </summary>
      <param name="dayofweek">A <see cref="T:System.DayOfWeek" qualify="true" /> value.</param>
      <returns>
        <para>The culture-specific full name of the day of the week represented by <paramref name="dayofweek" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>
        <para>Returns the culture-specific abbreviated name of the specified month based on the <see cref="T:System.Globalization.CultureInfo" /> of the current thread.</para>
      </summary>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
      <returns>
        <para>The culture-specific abbreviated name of the month represented by <paramref name="month" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>
        <para>Returns the culture-specific full name of the specified month based on the <see cref="T:System.Globalization.CultureInfo" /> of the current thread.</para>
      </summary>
      <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
      <returns>
        <para>The culture-specific full name of the month represented by <paramref name="month" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper.</para>
      </summary>
      <param name="dtfi">The <see cref="T:System.Globalization.DateTimeFormatInfo" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> wrapper around <paramref name="dtfi" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>
        <para>Gets the default read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> that is culture-independent (invariant).</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>
        <para>Gets a read-only <see cref="T:System.Globalization.DateTimeFormatInfo" /> that formats values based on the current culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>
        <para>Gets or sets the string designator for hours that are "ante meridiem" (before noon).</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>
        <para>Gets or sets the calendar to use for the current culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
      <summary>
        <para>Gets or sets the string that separates the components of a date; that is, the year, month, and day.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>
        <para>Gets or sets the first day of the week.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>
        <para>Gets or sets a value that specifies which rule is used to determine the first calendar week of the year.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>
        <para>Gets or sets the format pattern for a long date and long time value, which is associated with the 'F' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>
        <para>Gets or sets the format pattern for a long date value, which is associated with the 'D' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>
        <para>Gets or sets the format pattern for a long time value, which is associated with the 'T' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>
        <para>Gets or sets the format pattern for a month and day value, which is associated with the 'm' and 'M' format characters.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>
        <para>Gets or sets the string designator for hours that are "post meridiem" (after noon).</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>
        <para>Gets the format pattern for a time value, which is based on the Internet Engineering Task Force (IETF)
 Request for Comments (RFC) 1123 specification and is associated with the 'r' and 'R' format characters.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>
        <para>Gets or sets the format pattern for a short date value, which is associated with the 'd' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>
        <para>Gets or sets the format pattern for a short time value, which is associated with the 't' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>
        <para>Gets the format pattern for a sortable date and time value, which is associated with the 's' format character.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
      <summary>
        <para>Gets or sets the string that separates the components of time; that is, the hour, minutes, and seconds.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>
        <para>Gets the format pattern for a universal sortable date and time value, which is associated with the 'u' and 'U' format characters.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>
        <para>Gets or sets the format pattern for a year and month value, which is associated with the 'y' and 'Y' format characters.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>
        <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the days of the week.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>
        <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the days of the week.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>
        <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific abbreviated names of the months.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>
        <para>Gets or sets a one-dimensional array of type <see cref="T:System.String" /> containing the culture-specific full names of the months.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Globalization.DateTimeFormatInfo" /> is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.DaylightTime">
      <summary>
        <para>Defines the period of daylight-saving time.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.DaylightTime.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.DaylightTime" /> class.</para>
      </summary>
      <param name="start">The <see cref="T:System.DateTime" /> that represents the date and time when the daylight-saving period begins. The value must be in local time.</param>
      <param name="end">The <see cref="T:System.DateTime" /> that represents the date and time when the daylight-saving period ends. The value must be in local time.</param>
      <param name="delta">The <see cref="T:System.TimeSpan" /> that represents the difference between the standard time and the daylight-saving time in ticks.</param>
    </member>
    <member name="P:System.Globalization.DaylightTime.Start">
      <summary>
        <para> Gets the <see cref="T:System.DateTime" /> that represents the date and time when the daylight-saving period begins.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DaylightTime.End">
      <summary>
        <para>Gets the <see cref="T:System.DateTime" /> that represents the date and time when the daylight-saving period ends.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.DaylightTime.Delta">
      <summary>
        <para>Gets the <see cref="T:System.TimeSpan" /> that represents the difference between the standard time and the daylight-saving time.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>
        <para>Defines the different language versions of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>
        <para>Refers to the localized version of the Gregorian calendar,
 based on the language of the <see cref="T:System.Globalization.CultureInfo" />
 that uses the <see cref="T:System.Globalization.DateTimeFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>
        <para>Refers to the U.S. English version of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>
        <para>Refers to the Middle East French version of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>
        <para>Refers to the Arabic version of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>
        <para>Refers to the transliterated English version of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>
        <para>Refers to the transliterated French version of the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>
        <para>Represents the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>
        <para>Represents the current era. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class
 using the default <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.GregorianCalendar" /> class
 using the specified <see cref="T:System.Globalization.GregorianCalendarTypes" /> value.</para>
      </summary>
      <param name="type">The <see cref="T:System.Globalization.GregorianCalendarTypes" /> value that denotes which version of the calendar to create.</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of weeks away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add weeks.</param>
      <param name="weeks">The number of weeks to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of weeks to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years
   away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>
        <para>Gets or sets the <see cref="T:System.Globalization.GregorianCalendarTypes" /> value
 that denotes the version of the current <see cref="T:System.Globalization.GregorianCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.GregorianCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>
        <para>Represents the Hebrew calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.HebrewCalendar.HebrewEra">
      <summary>
        <para>Represents the current era.  This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.HebrewCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 385 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 13 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified month is a leap month; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year
 by using the <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.HebrewCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>
        <para>Represents the Hijri calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.HijriCalendar.HijriEra">
      <summary>
        <para>Represents the current era. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.HijriCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 30 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 355 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year
 by using the <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.HijriCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>
        <para>Represents the Japanese calendar.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.JapaneseCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" />, if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" />, if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para> This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by
 using the <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> property to determine the
 appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.JapaneseCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.JulianCalendar">
      <summary>
        <para>Represents the Julian calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.JulianCalendar.JulianEra">
      <summary>
        <para>Represents the current era. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.JulianCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months
   away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in <paramref name="time" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>This method always returns <see langword="false" />,
   unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and
   time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="P:System.Globalization.JulianCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.JulianCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.JulianCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>
        <para>Represents the Korean calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>
        <para>Represents the current era. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.KoreanCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para> This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.KoreanCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>
        <para>Contains information about the country/region.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class based on the country/region specified by name.</para>
      </summary>
      <param name="name">A string containing one of the two-letter codes defined in ISO 3166 for country/region.</param>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo" /> class based on the country/region associated with the specified culture identifier.</para>
      </summary>
      <param name="culture">A culture identifier.</param>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is the same instance as the current <see cref="T:System.Globalization.RegionInfo" />.</para>
      </summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.RegionInfo" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is the same instance as the current <see cref="T:System.Globalization.RegionInfo" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>
        <para>Serves as a hash function for the current <see cref="T:System.Globalization.RegionInfo" />,
   suitable for use in hashing algorithms and data structures, such as a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Globalization.RegionInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>
        <para>Returns a string containing the two-letter country/region codes defined in ISO 3166 for the current <see cref="T:System.Globalization.RegionInfo" />.</para>
      </summary>
      <returns>
        <para>A string containing the two-letter country/region codes defined in ISO 3166 for the current <see cref="T:System.Globalization.RegionInfo" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>
        <para>Gets the <see cref="T:System.Globalization.RegionInfo" /> that represents the country/region used by the current thread.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>
        <para> Gets the two-letter code defined in ISO 3166 for the country/region.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>
        <para>Gets the full name of the country/region in English.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>
        <para>Gets the full name of the country/region in the language of the localized version of .NET Framework.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>
        <para>Gets the two-letter code defined in ISO 3166 for the country/region.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterISORegionName">
      <summary>
        <para>Gets the three-letter code defined in ISO 3166 for the country/region.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>
        <para>Gets a value indicating whether the country/region uses the metric system for measurements.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName">
      <summary>
        <para>Gets the three-letter code assigned by Windows to the country/region represented by this <see cref="T:System.Globalization.RegionInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>
        <para>Gets the currency symbol associated with the country/region.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>
        <para>Gets the three-character ISO 4217 currency symbol associated with the country/region.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.SortKey">
      <summary>
        <para>Maps strings to their sort keys.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)">
      <summary>
        <para>Compares two sort keys.</para>
      </summary>
      <param name="sortkey1">The first sort key to compare.</param>
      <param name="sortkey2">The second sort key to compare.</param>
      <returns>
        <list type="table">
          <listheader>
            <term> Value</term>
            <description> Condition</description>
          </listheader>
          <item>
            <term> Zero</term>
            <description> The two sort keys are equal.</description>
          </item>
          <item>
            <term> Less than zero</term>
            <description>
              <paramref name="sortkey1" /> is less than <paramref name="sortkey2" />.</description>
          </item>
          <item>
            <term> Greater than zero</term>
            <description>
              <paramref name="sortkey1" /> is greater than <paramref name="sortkey2" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Globalization.SortKey.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object is the same instance as the current <see cref="T:System.Globalization.SortKey" />.</para>
      </summary>
      <param name="value">The object to compare with the current <see cref="T:System.Globalization.SortKey" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified object is the same instance as the current <see cref="T:System.Globalization.SortKey" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.SortKey.GetHashCode">
      <summary>
        <para>Serves as a hash function for the current <see cref="T:System.Globalization.SortKey" />,
   suitable for use in hashing algorithms and data structures, such as a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Globalization.SortKey" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.SortKey.ToString">
      <summary>
        <para>Returns a string that represents the current <see cref="T:System.Globalization.SortKey" />.</para>
      </summary>
      <returns>
        <para>A string that represents the current <see cref="T:System.Globalization.SortKey" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.SortKey.OriginalString">
      <summary>
        <para>Gets the original string used to create the current <see cref="T:System.Globalization.SortKey" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.SortKey.KeyData">
      <summary>
        <para>Gets the byte array representing the current <see cref="T:System.Globalization.SortKey" />.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>
        <para>Provides functionality to split a string into text elements and to iterate through those text elements.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>
        <para> Gets the first text element in a specified string.</para>
      </summary>
      <param name="str">The string from which to get the text element.</param>
      <returns>
        <para>A string containing the first text element in the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>
        <para>Gets the text element at the specified index of the specified string.</para>
      </summary>
      <param name="str">The string from which to get the text element.</param>
      <param name="index">The zero-based index at which the text element starts.</param>
      <returns>
        <para>A string containing the text element at the specified index of the specified string.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>
        <para>Returns an enumerator that can iterate through the text elements of the entire string.</para>
      </summary>
      <param name="str">The string to iterate through.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the entire string.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>
        <para> Returns an enumerator that can iterate through the text elements of the string, starting at the specified index.</para>
      </summary>
      <param name="str">The string to iterate through.</param>
      <param name="index">The zero-based index at which to start iterating.</param>
      <returns>
        <para>A <see cref="T:System.Globalization.TextElementEnumerator" /> for the string starting at <paramref name="index" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>
        <para> Returns the indexes of each base character, high-surrogate, or control character within the specified string.</para>
      </summary>
      <param name="str">The string to search.</param>
      <returns>
        <para> An array of integers that contains the zero-based indexes of each base character, high-surrogate, or control character within the specified string.</para>
      </returns>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>
        <para>Represents the Taiwan Calendar.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.TaiwanCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para> This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year
 by using the <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> property to determine the appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.TaiwanCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>
        <para>Enumerates the text elements of a string.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>
        <para>Advances the enumerator to the next text element of the string.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the enumerator was successfully advanced to the next text element;
 <see langword="false" /> if the enumerator has passed the end of the string.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>
        <para>Gets the current text element in the string.</para>
      </summary>
      <returns>
        <para>A new string containing the current text element in the string being read.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>
        <para>Sets the enumerator to its initial position, which is before the first text element in the string.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>
        <para>Gets the current text element in the string.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>
        <para>Gets the index of the text element that the enumerator is currently positioned over.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>
        <para>Defines properties and behaviors, such as casing, that are specific to a writing system.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>
        <para> Converts the specified character to lowercase.</para>
      </summary>
      <param name="c">The character to convert to lowercase.</param>
      <returns>
        <para> The specified character converted to lowercase.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>
        <para>Converts the specified string to lowercase.</para>
      </summary>
      <param name="str">The string to convert to lowercase.</param>
      <returns>
        <para>The specified string converted to lowercase.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>
        <para>Converts the specified character to uppercase.</para>
      </summary>
      <param name="c">The character to convert to uppercase.</param>
      <returns>
        <para>The specified character converted to uppercase.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>
        <para>Converts the specified string to uppercase.</para>
      </summary>
      <param name="str">The string to convert to uppercase.</param>
      <returns>
        <para>The specified string converted to uppercase.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified object represents the same writing system
      as the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
      <param name="obj">The object to compare with the current <see cref="T:System.Globalization.TextInfo" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> represents the same writing system
as the current <see cref="T:System.Globalization.TextInfo" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>
        <para>Serves as a hash function for the current <see cref="T:System.Globalization.TextInfo" />, suitable for use in hashing algorithms and data structures, such as a hash table.</para>
      </summary>
      <returns>
        <para>A hash code for the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>
        <para>Returns a string that represents the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
      <returns>
        <para>A string that represents the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToTitleCase(System.String)">
      <summary>
        <para>Converts the specified string to titlecase.</para>
      </summary>
      <param name="str">The string to convert to titlecase.</param>
      <returns>
        <para>The specified string converted to titlecase.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ANSICodePage">
      <summary>
        <para>Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.OEMCodePage">
      <summary>
        <para>Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.MacCodePage">
      <summary>
        <para>Gets the Macintosh code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.EBCDICCodePage">
      <summary>
        <para>Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>
        <para>Gets the string that separates items in a list.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>
        <para>Represents the Thai Buddhist calendar.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>
        <para>Represents the current era. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of months away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add months.</param>
      <param name="months">The number of months to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of months to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is the specified number of years away from the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to which to add years.</param>
      <param name="years">The number of years to add.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that results from adding the specified number of years to the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified month in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified month in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of days in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of days in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>
        <para>Returns the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 31 that represents the day of the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>
        <para>Returns the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>A <see cref="T:System.DayOfWeek" /> value that represents the day of the week in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>
        <para>Returns the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer from 1 to 366 that represents the day of the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>
        <para>Returns the number of months in the specified year in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The number of months in the specified year in the specified era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>
        <para>Returns the era in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer that represents the era in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>
        <para>Returns the month in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 12 that represents the month in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>
        <para>Returns the year in the specified <see cref="T:System.DateTime" />.</para>
      </summary>
      <param name="time">The <see cref="T:System.DateTime" /> to read.</param>
      <returns>
        <para>An integer between 1 and 9999 that represents the year in the specified <see cref="T:System.DateTime" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified date in the specified era is a leap day.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified day is a leap day; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified year in the specified era is a leap year.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified year is a leap year; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Determines whether the specified month in the specified year in the specified era is a leap month.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para> This method always returns <see langword="false" />, unless overridden by a derived class.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns a <see cref="T:System.DateTime" /> that is set to the specified date and time in the specified era.</para>
      </summary>
      <param name="year">An integer that represents the year.</param>
      <param name="month">An integer that represents the month.</param>
      <param name="day">An integer that represents the day.</param>
      <param name="hour">An integer that represents the hour.</param>
      <param name="minute">An integer that represents the minute.</param>
      <param name="second">An integer that represents the second.</param>
      <param name="millisecond">An integer that represents the millisecond.</param>
      <param name="era">An integer that represents the era.</param>
      <returns>
        <para>The <see cref="T:System.DateTime" /> that is set to the specified date and time in the current era.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>
        <para>Converts the specified two-digit year to a four-digit year by
      using the <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> property to determine the
      appropriate century.</para>
      </summary>
      <param name="year">A two-digit integer that represents the year to convert.</param>
      <returns>
        <para>An integer that contains the four-digit representation of <paramref name="year" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>
        <para>Gets the list of eras in the <see cref="T:System.Globalization.ThaiBuddhistCalendar" />.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>
        <para>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>
        <para>Defines how numeric values are formatted and displayed, depending on the culture.</para>
      </summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>
        <para>Initializes a new writable instance of the <see cref="T:System.Globalization.NumberFormatInfo" /> class that is culture-independent (invariant).</para>
      </summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>
        <para> Gets the <see cref="T:System.Globalization.NumberFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</para>
      </summary>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> used to get the <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to get <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:System.Globalization.NumberFormatInfo" /> associated with the specified <see cref="T:System.IFormatProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>
        <para>Creates a shallow copy of the <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Globalization.NumberFormatInfo" /> copied from the original <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>
        <para>Gets an object of the specified type that provides a number formatting service.</para>
      </summary>
      <param name="formatType">The <see cref="T:System.Type" /> of the required formatting service.</param>
      <returns>
        <para>The current <see cref="T:System.Globalization.NumberFormatInfo" />,
 if <paramref name="formatType" /> is the same as the type of the current <see cref="T:System.Globalization.NumberFormatInfo" />;
 otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>
        <para>Returns a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper.</para>
      </summary>
      <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo" /> to wrap.</param>
      <returns>
        <para>A read-only <see cref="T:System.Globalization.NumberFormatInfo" /> wrapper around <paramref name="nfi" />.</para>
      </returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>
        <para>Gets the default read-only <see cref="T:System.Globalization.NumberFormatInfo" /> that is culture-independent (invariant).</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>
        <para> Indicates the number of decimal places to use in currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>
        <para>Gets or sets the string to use as the decimal separator in currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Globalization.NumberFormatInfo" /> is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>
        <para>Gets or sets the number of digits in each group to the left of the decimal in currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>
        <para>Gets or sets the number of digits in each group to the left of the decimal in numeric values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>
        <para>Gets or sets the number of digits in each group to the left of the decimal in percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>
        <para>Gets or sets the string that separates groups of digits to the left of the decimal in currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>
        <para>Gets or sets the string to use as the currency symbol.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>
        <para>Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo" /> that formats values based on the current culture.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>
        <para>Gets or sets the string that represents the IEEE NaN (not a number) value.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>
        <para>Gets or sets the format pattern for negative currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>
        <para>Gets or sets the format pattern for negative numeric values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>
        <para>Gets or sets the format pattern for positive percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>
        <para>Gets or sets the format pattern for negative percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>
        <para>Gets or sets the string that represents negative infinity.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>
        <para>Gets or sets the string that denotes that the associated number is negative.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>
        <para>Gets or sets the number of decimal places to use in numeric values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>
        <para>Gets or sets the string to use as the decimal separator in numeric values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>
        <para>Gets or sets the string that separates groups of digits to the left of the decimal in numeric values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>
        <para>Gets or sets the format pattern for positive currency values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>
        <para>Gets or sets the string that represents positive infinity.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>
        <para>Gets or sets the string that denotes that the associated number is positive.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>
        <para>Gets or sets the number of decimal places to use in percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>
        <para>Gets or sets the string to use as the decimal separator in percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>
        <para>Gets or sets the string that separates groups of digits to the left of the decimal in percent values.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>
        <para>Gets or sets the string to use as the percent symbol.</para>
      </summary>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>
        <para>Gets or sets the string to use as the per mille symbol.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>
        <para> Determines the styles permitted in numeric string arguments that are passed to the <see langword="Parse" /> methods of the numeric base type classes.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>
        <para>Indicates that none of the bit styles are allowed.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>
        <para>Indicates that a leading white-space character must be ignored during parsing.
      Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>
        <para>Indicates that trailing white-space character must be ignored during parsing.
      Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>
        <para> Indicates that the numeric string can have a leading sign.
      Valid leading sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>
        <para> Indicates that the numeric string can have a trailing sign.
      Valid trailing sign characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      and <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> properties of <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>
        <para>Indicates that the numeric string can have one pair of parentheses enclosing the number.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>
        <para>Indicates that the numeric string can have a decimal point.
      Valid decimal point characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> properties of <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>
        <para> Indicates that the numeric string can have group separators; for example, separating the hundreds from the thousands.
      Valid group separator characters are determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> properties of <see cref="T:System.Globalization.NumberFormatInfo" />
      and the number of digits in each group is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      and <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> properties of <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>
        <para>Indicates that the numeric string can be in exponential notation.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>
        <para>Indicates that the numeric string is parsed as currency if it contains a currency symbol; otherwise, it is parsed as a number.
      Valid currency symbols are determined by the <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> property of <see cref="T:System.Globalization.NumberFormatInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>
        <para>Indicates that the numeric string can have notation that signifies that the number is hexadecimal.
 Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f.
 Hexadecimal values can be left-padded with zeros.
 Strings parsed using this style are not permitted to be prefixed with "0x".</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>
        <para>Indicates that the AllowLeadingWhite, AllowTrailingWhite, and AllowLeadingSign styles are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>
        <para>Indicates that the AllowLeadingWhite, AllowTrailingWhite, and AllowHexSpecifier styles are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>
        <para>Indicates that the AllowLeadingWhite, AllowTrailingWhite, AllowLeadingSign, AllowTrailingSign, AllowDecimalPoint, and AllowThousands styles are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>
        <para>Indicates that the AllowLeadingWhite, AllowTrailingWhite, AllowLeadingSign, AllowDecimalPoint, and AllowExponent styles are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>
        <para>Indicates that all styles except AllowExponent are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>
        <para>Indicates that all the AllowXXX bit styles are used.
 This is a composite number style.</para>
      </summary>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>
        <para>Defines the Unicode category of a character.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>
        <para>Indicates that the character is an uppercase letter.
      Signified by the Unicode designation "Lu" (letter, uppercase).
      The value is 0.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>
        <para>Indicates that the character is a lowercase letter.
      Signified by the Unicode designation "Ll" (letter, lowercase).
      The value is 1.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>
        <para>Indicates that the character is a titlecase letter.
      Signified by the Unicode designation "Lt" (letter, titlecase).
      The value is 2.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>
        <para> Indicates that the character is a modifier letter, which is free-standing spacing character that indicates modifications of a preceding letter.
      Signified by the Unicode designation "Lm" (letter, modifier).
      The value is 3.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>
        <para>Indicates that the character is a letter that is not an uppercase letter, a lowercase letter, a titlecase letter, or a modifier letter.
      Signified by the Unicode designation "Lo" (letter, other).
      The value is 4.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>
        <para> Indicates that the character is a nonspacing character, which indicates modifications of a base character.
      Signified by the Unicode designation "Mn" (mark, non-spacing).
      The value is 5.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>
        <para>Indicates that the character is a spacing character, which indicates modifications of a base character and affects the width of the glyph for that base character.
      Signified by the Unicode designation "Mc" (mark, spacing combining).
      The value is 6.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>
        <para>Indicates that the character is an enclosing mark, which is a nonspacing combining character that surrounds all previous characters up to and including a base character.
      Signified by the Unicode designation "Me" (mark, enclosing).
      The value is 7.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>
        <para> Indicates that the character is a decimal digit; that is, in the range 0 through 9.
      Signified by the Unicode designation "Nd" (number, decimal digit).
      The value is 8.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>
        <para> Indicates that the character is a number represented by a letter, instead of a decimal digit; for example, the Roman numeral for five, which is 'V'.
      Signified by the Unicode designation "Nl" (number, letter).
      The value is 9.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>
        <para> Indicates that the character is a number that is neither a decimal digit nor a letter number; for example, the fraction 1/2.
      Signified by the Unicode designation "No" (number, other).
      The value is 10.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>
        <para>Indicates that the character is a space character, which has no glyph but is not a control or format character.
      Signified by the Unicode designation "Zs" (separator, space).
      The value is 11.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>
        <para> Indicates that the character is used to separate lines of text.
      Signified by the Unicode designation "Zl" (separator, line).
      The value is 12.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>
        <para>Indicates that the character is used to separate paragraphs.
      Signified by the Unicode designation "Zp" (separator, paragraph).
      The value is 13.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>
        <para>Indicates that the character is a control code, whose Unicode value is U+007F or in the range U+0000 through U+001F or U+0080 through U+009F.
      Signified by the Unicode designation "Cc" (other, control).
      The value is 14.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>
        <para>Indicates that the character is a format character, which is not normally rendered but affects the layout of text or the operation of text processes.
      Signified by the Unicode designation "Cf" (other, format).
      The value is 15.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>
        <para>Indicates that the character is a high-surrogate or a low-surrogate. Surrogate code values are in the range U+D800 through U+DFFF.
      Signified by the Unicode designation "Cs" (other, surrogate).
      The value is 16.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>
        <para>Indicates that the character is a private-use character, whose Unicode value is in the range U+E000 through U+F8FF.
      Signified by the Unicode designation "Co" (other, private use).
      The value is 17.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>
        <para>Indicates that the character is a connector punctuation, which connects two characters.
      Signified by the Unicode designation "Pc" (punctuation, connector).
      The value is 18.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>
        <para>Indicates that the character is a dash or a hyphen. 
      Signified by the Unicode designation "Pd" (punctuation, dash).
      The value is 19.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>
        <para>Indicates that the character is the opening character of one of the paired punctuation marks, such as parentheses, square brackets, and braces.
      Signified by the Unicode designation "Ps" (punctuation, open).
      The value is 20.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>
        <para> Indicates that the character is the closing character of one of the paired punctuation marks, such as parentheses, square brackets, and braces.
      Signified by the Unicode designation "Pe" (punctuation, close).
      The value is 21.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>
        <para> Indicates that the character is an opening or initial quotation mark.
      Signified by the Unicode designation "Pi" (punctuation, initial quote).
      The value is 22.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>
        <para> Indicates that the character is a closing or final quotation mark.
      Signified by the Unicode designation "Pf" (punctuation, final quote).
      The value is 23.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>
        <para>Indicates that the character is a punctuation that is not a connector punctuation, a dash punctuation,
      an open punctuation, a close punctuation, an initial quote punctuation, or a final quote punctuation.
      Signified by the Unicode designation "Po" (punctuation, other).
      The value is 24.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>
        <para>Indicates that the character is a mathematical symbol, such as '+' or '= '.
      Signified by the Unicode designation "Sm" (symbol, math).
      The value is 25.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>
        <para>Indicates that the character is a currency symbol. 
      Signified by the Unicode designation "Sc" (symbol, currency).
      The value is 26.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>
        <para>Indicates that the character is a modifier symbol, which indicates modifications of surrounding characters;
      for example, the fraction slash indicates that the number to the left is the numerator and the number to the right is the denominator.
      Signified by the Unicode designation "Sk" (symbol, modifier).
      The value is 27.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>
        <para>Indicates that the character is a symbol that is not a mathematical symbol, a currency symbol or a modifier symbol.
      Signified by the Unicode designation "So" (symbol, other).
      The value is 28.</para>
      </summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>
        <para>Indicates that the character is not assigned to any Unicode category.
      Signified by the Unicode designation "Cn" (other, not assigned).
      The value is 29.</para>
      </summary>
    </member>
    <member name="T:System.Text.ASCIIEncoding">
      <summary>
        <para>Represents an ASCII character encoding of Unicode
      characters.</para>
      </summary>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>
        <para> Represents a character
      encoding.</para>
      </summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.Encoding" /> class.
   </para>
      </summary>
      <param name="codePage">A code page value that corresponds to the preferred encoding.</param>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>
        <para> Converts a byte array from one encoding to another.
      </para>
      </summary>
      <param name="srcEncoding">The encoding that <paramref name="bytes" /> is in. </param>
      <param name="dstEncoding">The encoding desired for the returned byte array. </param>
      <param name="bytes">The bytes to convert. </param>
      <returns>
        <para> An array of type <see cref="T:System.Byte" /> containing the result
   of the conversion.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Converts a range of bytes in a byte array from one encoding to
      another.
      </para>
      </summary>
      <param name="srcEncoding">The source of encoding. </param>
      <param name="dstEncoding">The destination of encoding. </param>
      <param name="bytes">The byte array to convert. </param>
      <param name="index">The starting index of the byte array to convert. </param>
      <param name="count">The number of bytes to convert. </param>
      <returns>
        <para> An array of type <see cref="T:System.Byte" />
containing the result of the conversion.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>
        <para>Returns an <see cref="T:System.Text.Encoding" /> that corresponds to the specified code page value.</para>
      </summary>
      <param name="codepage">A code page value that corresponds to the preferred encoding. </param>
      <returns>
        <para>The requested encoding.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>
        <para>Returns an <see cref="T:System.Text.Encoding" /> for the specified name.</para>
      </summary>
      <param name="name">The name of an <see cref="T:System.Text.Encoding" />. </param>
      <returns>
        <para>The requested encoding.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>
        <para>Returns a set of bytes used at the beginning of a stream to determine
      which encoding a file was created with. This can include the
      Unicode byte order mark.</para>
      </summary>
      <returns>
        <para>The bytes at the beginning of a stream, which typically comprise the byte 
      order mark.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>
        <para> Calculates the number of bytes required to encode a specified
      character array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <returns>
        <para> The number of bytes needed to encode
   <paramref name="chars" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>
        <para>Calculates the number of bytes required to encode the
      specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="s">The <see cref="T:System.String" /> to encode.</param>
      <returns>
        <para>The number of bytes required to encode <paramref name="s" />. </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class,
      returns the number of bytes required to encode a range of
      characters in the specified character array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="index">The starting index of the character array to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para> The number of bytes required to encode the specified
      range of characters.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>
        <para> Encodes a specified character array into a byte
      array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <returns>
        <para> A byte array containing the encoded representation of 
   <paramref name="chars" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Encodes a range of characters from a character array into
      a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="index">The starting index of the character array to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para>A byte array containing the encoded representation of the specified range of 
      characters in <paramref name="chars" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> When overridden in a derived class, encodes a
      range of characters from a character array into a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The starting index of the character array to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the resulting encoding is stored. </param>
      <param name="byteIndex">The starting index of the resulting encoding in the byte array. </param>
      <returns>
        <para> The number of bytes stored in array <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>
        <para> Encodes a specified <see cref="T:System.String" /> into an array of bytes.
   </para>
      </summary>
      <param name="s">The <see cref="T:System.String" /> to encode. </param>
      <returns>
        <para> A byte array 
      containing the encoded representation of the
      specified string.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes the specified range of a <see cref="T:System.String" /> into the specified range of a byte array.</para>
      </summary>
      <param name="s">A <see cref="T:System.String" /> to encode.</param>
      <param name=" charIndex">The first index of <paramref name="s" /> from which to encode. </param>
      <param name=" charCount">The number of characters of <paramref name="s" /> to encode. </param>
      <param name=" bytes">The byte array to encode into. </param>
      <param name=" byteIndex">The first index of <paramref name="bytes" /> to encode into. </param>
      <returns>
        <para>The number of encoded bytes in array <paramref name="bytes" />. </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>
        <para> Calculates the number of characters produced by decoding an array of
      bytes.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <returns>
        <para> The number of characters produced by decoding the
      specified byte array.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, calculates the number of characters produced by
      decoding a specified range of elements in an array of bytes.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The starting index where decoding begins. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters produced by decoding a range of
      bytes in the specified byte array.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>
        <para> Decodes a byte array into an array of characters.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <returns>
        <para> A character array containing the decoded character representation from 
      array <paramref name="bytes" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Decodes a range of bytes from a byte array into a character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The starting index of the byte array to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> A character array containing the decoded character 
      representation from a range of array <paramref name="bytes" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> When overridden in a derived class,
      decodes a range of bytes in a byte array into a range of
      characters in a character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="byteIndex">The starting index of the byte array to decode. </param>
      <param name="byteCount">The number of bytes to decode. </param>
      <param name="chars">The character array where the resulting decoding is stored. </param>
      <param name="charIndex">The starting index of the resulting decoding in the character array. </param>
      <returns>
        <para> The number of characters stored in the character array.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>
        <para> Returns a <see cref="T:System.Text.Decoder" /> for this encoding.
   </para>
      </summary>
      <returns>
        <para> Returns a <see cref="T:System.Text.Decoder" /> for this encoding. The <see cref="T:System.Text.Decoder" />
can be used to decode a sequence of bytes into
characters.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>
        <para> An <see cref="T:System.Text.Encoder" />
for this encoding.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Text.Encoder" /> for this
   encoding. The <see cref="T:System.Text.Encoder" />
   can be used to encode a sequence of
   characters into
   bytes.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para>
       When overridden in a derived class,
       returns the maximum number of bytes required to encode a given
       number of characters.
    </para>
      </summary>
      <param name="charCount">
    The number of characters to encode.
 </param>
      <returns>
        <para>
       The maximum number of bytes required for encoding a given
       number of characters.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para>
       When overridden in a derived class,
       returns the maximum number of characters produced by decoding a
       given number of bytes.
    </para>
      </summary>
      <param name="byteCount">
    The number of bytes to encode.
 </param>
      <returns>
        <para>
       The maximum number of characters produced by decoding a
       specified number of bytes.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>
        <para> Returns a string containing the decoded representation of the
      specified byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <returns>
        <para> A string containing the decoded representation of the specified
      byte array.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Returns a string containing the decoded representation of a range
      of bytes in a byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The starting index of the byte array to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> A string containing the decoded representation of a range
      of bytes in the specified byte array.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>
        <para>Determines whether the current instance and the 
      specified <see cref="T:System.Object" /> represent the same type and value.</para>
      </summary>
      <param name="value">The <see cref="T:System.Object" /> to compare to the current instance.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> represents the same type and value as 
   the current instance; otherwise,
<see langword="false" />. <see langword="false" /> if <paramref name="value" /> is 
<see langword="null" /> or is not an instance of <see cref="T:System.Text.Encoding" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="P:System.Text.Encoding.BodyName">
      <summary>
        <para> Gets the name
      for this encoding that can be used with mail agent body tags.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>
        <para> Gets the human-readable description of the
      encoding.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.HeaderName">
      <summary>
        <para> Gets the name
      for this encoding that can be used with mail agent header tags.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>
        <para> Gets the name registered with the Internet Assigned Numbers Authority (IANA) for this encoding.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.WindowsCodePage">
      <summary>
        <para> Gets the Windows operating system code page that most closely corresponds to
      this encoding.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserDisplay">
      <summary>
        <para>Gets an indication whether this encoding can be used for 
      display by browser clients.</para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserSave">
      <summary>
        <para>Gets an indication whether this encoding can be used for 
      saving by browser clients.</para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsDisplay">
      <summary>
        <para>Gets and indication whether this encoding can be used 
      for display by mail and news clients.</para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsSave">
      <summary>
        <para>Gets an indication whether this encoding can be used for 
      saving by mail and news clients.</para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>
        <para> Gets an encoding for the ASCII (7 bit) character set.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>
        <para> When overridden in a derived class, gets the code
      page identifier of this encoding.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.Default">
      <summary>
        <para> Gets an encoding for the system's current ANSI code page.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>
        <para> Gets an encoding for the Unicode format in little-endian
      byte order.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>
        <para> Gets an encoding for the Unicode format in the big-endian
      byte order.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>
        <para> Gets an encoding for the UTF-7 format.
      </para>
      </summary>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>
        <para> Gets an encoding for the UTF-8 format.
      </para>
      </summary>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>
        <para> Converts encoded blocks
      of bytes into blocks of Unicode characters.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.Decoder" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, calculates the
      number of characters <see cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" /> would
      produce from
      decoding the specified range of bytes.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The index of the first byte in <paramref name="bytes" /> to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters the next call to <see cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" /> would produce from decoding
   the specified range of elements in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> When overridden in a derived class, decodes a specified range of elements from a byte array and stores them in a specified range of a Unicode character array.
      </para>
      </summary>
      <param name="bytes">A byte array to decode. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> to decode. </param>
      <param name="byteCount">The number of elements to decode. </param>
      <param name="chars"> The character array where the decoded results are stored. </param>
      <param name="charIndex">The index of the first element in <paramref name="chars" /> to store the decoded results. </param>
      <returns>
        <para> The number of characters decoded into <paramref name="chars" />.
   </para>
      </returns>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>
        <para>Converts blocks of Unicode characters into encoded blocks of bytes. </para>
      </summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.Encoder" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para> When overridden in
      a derived class, calculates the number of bytes <see cref="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)" /> would produce from encoding the specified range
      of characters.
      </para>
      </summary>
      <param name="chars">The Unicode character array to encode. </param>
      <param name="index">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <param name="flush">
        <see langword="true" /> if this instance can flush its internal state after the calculation; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The number of bytes the next call to <see cref="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)" /> would produce from encoding the specified range of
   characters and honoring <paramref name="flush" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>
        <para> When overridden in a derived class, encodes a specified range of characters in
      a character array and stores them in a specified range of a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoding is stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoding is stored. </param>
      <param name="flush">
        <see langword="true" /> if this encoder can flush its state at the end of the conversion; otherwise, <see langword="false" />. To ensure correct termination of a sequence of blocks of encoded bytes, the last call to <see langword="GetBytes" /> can specify a value of <see langword="true" /> for <paramref name="flush" />. </param>
      <returns>
        <para> The number of bytes encoded into <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.ASCIIEncoding" /> 
class.
</para>
      </summary>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Calculates the number of bytes required to store the results of encoding a
      set of characters from a specified Unicode character array.</para>
      </summary>
      <param name="chars">The Unicode character array to encode. </param>
      <param name="index">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para> The number of bytes necessary to encode the range in 
   <paramref name="chars" /> from <paramref name="index" /> to <paramref name="index" /> + <paramref name="count" /> as an 
   <see cref="T:System.Text.ASCIIEncoding" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.String)">
      <summary>
        <para> Calculates the number of bytes required to store the results of
      encoding the characters from a specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="chars">The <see cref="T:System.String" /> to encode. </param>
      <returns>
        <para> The number of bytes required to encode the characters in
   <paramref name="chars" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of elements from a Unicode character
      array, and stores the results in a specified range of elements in a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of characters from a <see cref="T:System.String" />
and stores the results in a specified range of elements in a byte array.</para>
      </summary>
      <param name="chars">The string of characters to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The index of the first byte in <paramref name="bytes" /> to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Decodes a specified range of elements from a byte array, and stores the result into a specified range of elements in a Unicode character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> to decode. </param>
      <param name="byteCount">The number of elements to decode. </param>
      <param name="chars">The character array where the decoded results are stored. </param>
      <param name="charIndex">The index of the first element in <paramref name="chars" /> to store decoded results. </param>
      <returns>
        <para> The number of characters stored in <paramref name="chars" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetString(System.Byte[])">
      <summary>
        <para>Converts a specified array of bytes to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="bytes">A byte array.</param>
      <returns>
        <para>A <see cref="T:System.String" /> whose characters are equivalent to the specified elements in <paramref name="bytes" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Converts a specified range of elements in an array of bytes to a <see cref="T:System.String" />.</para>
      </summary>
      <param name="bytes">A byte array.</param>
      <param name=" byteIndex">The index of the first position in <paramref name="bytes" /> to convert.</param>
      <param name=" byteCount">The number of bytes to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> containing the values of the range in <paramref name="bytes" />
from <paramref name="byteIndex" /> to <paramref name="byteIndex" /> + <paramref name="byteCount" /> decoded as an
<see cref="T:System.Text.ASCIIEncoding" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
      </summary>
      <param name="charCount">The number of characters to encode. </param>
      <returns>
        <para> The maximum number of bytes required to encode
   <paramref name="charCount" /> number of
      characters.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
      </summary>
      <param name="byteCount">The number of bytes to decode. </param>
      <returns>
        <para> The maximum number of characters that can result from decoding
   <paramref name="byteCount" />
   number of bytes.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.#ctor(System.Int32)">
      <summary>
        <para>
       Initializes a new instance of the CodePageEncoding
       class.
    </para>
      </summary>
      <param name="codepage">
    The NLS [RB1] code page identifier.
 </param>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>
       Returns the number of bytes required to encode a range of
       characters in the specified array.
    </para>
      </summary>
      <param name="chars">
    The character array to encode.
 </param>
      <param name="index">
    The starting index of the character array to encode.[RB2]
 </param>
      <param name="count">
    The number of characters to encode.
 </param>
      <returns>
        <para>
       The number of bytes required to encode a range of characters in
       the specified character array.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para>
       Encodes a range of an array of characters into an array of bytes
       and returns the number bytes stored in the array.
    </para>
      </summary>
      <param name="chars">
    The character array to encode.
 </param>
      <param name="charIndex">
    The starting index of the character array to encode.[RB3]
 </param>
      <param name="charCount">
    The number of characters to encode.
 </param>
      <param name="bytes">
    The byte array to encode into.
 </param>
      <param name="byteIndex">
    The starting index of the resulting encoding in the byte array.
 </param>
      <returns>
        <para>
       The number of bytes stored into the byte array.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>
       Returns the number of characters produced by decoding a specified
       range of bytes.
    </para>
      </summary>
      <param name="bytes">
    The byte array to decode.
 </param>
      <param name="index">
    The starting index of the byte array to decode.
 </param>
      <param name="count">
    The number of bytes to decode.
 </param>
      <returns>
        <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para>
       Decodes a range of an array of bytes into an array of characters
       and returns the number characters stored in the array.
    </para>
      </summary>
      <param name="bytes">
    The byte array to decode.
 </param>
      <param name="byteIndex">
    The starting index of the byte array to decode.
 </param>
      <param name="byteCount">
    The number of bytes to decode.
 </param>
      <param name="chars">
    The character array to decode into.
 </param>
      <param name="charIndex">
    The starting index of the resulting decoding in the character array.
 </param>
      <returns>
        <para>
       The number of characters stored into the character array.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetDecoder">
      <summary>
        <para>
       Gets a decoder object for the current instance of encoding.
    </para>
      </summary>
      <returns>
        <para>
       A decoder object for the current encoding.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para>
       Gets the maximum number of bytes required to encode a specified
       number of characters.
    </para>
      </summary>
      <param name="charCount">
    The number of characters to encode.
 </param>
      <returns>
        <para>
       The maximum number of bytes required for the encoding of a specified
       number of characters.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para>
       Gets the maximum number of characters produced from decoding a specified
       number of bytes.
    </para>
      </summary>
      <param name="byteCount">
    Number of bytes to decode.
 </param>
      <returns>
        <para>
       The maximum number of characters produced from decoding a
       specified number of bytes.
    </para>
      </returns>
    </member>
    <member name="M:System.Text.CodePageEncoding.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>
       Returns the number of characters produced by decoding a specified
       range of bytes.
    </para>
      </summary>
      <param name="bytes">
    The byte array to decode.
 </param>
      <param name="index">
    The starting index of the byte array to decode.
 </param>
      <param name="count">
    The number of bytes to decode.
 </param>
      <returns>
        <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
      </returns>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>
        <para>Represents a UTF-16 encoding of Unicode characters. </para>
      </summary>
    </member>
    <member name="F:System.Text.UnicodeEncoding.CharSize">
      <summary>
        <para> Represents the Unicode version 2.0 character size in bytes.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>
        <para> Initializes
      a new instance of the <see cref="T:System.Text.UnicodeEncoding" />
      class.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class, specifying whether to support little-endian
   or big-endian byte ordering and the Unicode
   byte order mark.</para>
      </summary>
      <param name="bigEndian">
        <see langword="true" /> to support big-endian byte ordering when encoding, or <see langword="false" /> to support little-endian byte ordering. </param>
      <param name="byteOrderMark">
        <see langword="true" /> to include the Unicode byte order mark when encoding, or <see langword="false" /> to not include the Unicode byte order mark. </param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Calculates the number of bytes required to store the results of encoding a
      set of characters from a specified Unicode character array.</para>
      </summary>
      <param name="chars">The Unicode character array to encode. </param>
      <param name="index">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para> The number of bytes required to encode the range in 
   <paramref name="chars" /> from <paramref name="index" /> to <paramref name="index" /> + <paramref name="count" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>
        <para> Calculates the number of bytes required to store the results of
      encoding the characters from a specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="s">The <see cref="T:System.String" /> to encode. </param>
      <returns>
        <para> The number of bytes required to encode the characters in
   <paramref name="s" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of elements from a Unicode character
      array and stores the results into a specified range of elements in a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String)">
      <summary>
        <para> Encodes the characters from a specified <see cref="T:System.String" />
and returns the results in a byte array.</para>
      </summary>
      <param name="s">The string of characters to encode. </param>
      <returns>
        <para>A byte array that contains the encoded characters from
   <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of characters from a <see cref="T:System.String" />
and stores the results into a specified range of elements in a byte array.</para>
      </summary>
      <param name="s">The string of characters to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="s" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The index of the first byte in <paramref name="bytes" /> to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Decodes a range of elements from a specified byte array and stores them as elements in a specified Unicode character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> to decode. </param>
      <param name="byteCount">The number of elements to decode. </param>
      <param name="chars">The character array in which the decoded results are stored. </param>
      <param name="charIndex">The index of the first element in <paramref name="chars" /> to store decoded results. </param>
      <returns>
        <para> The number of characters stored in <paramref name="chars" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>
        <para> Obtains a decoder that can convert a UTF-16 encoded
      sequence of bytes into a sequence of characters.
      </para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Text.Decoder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>
        <para> Returns a Unicode byte order mark
      encoded in big-endian or little-endian format, if the constructor for this instance
      requested byte order mark support.</para>
      </summary>
      <returns>
        <para> If the constructor for this instance did not request 
      byte order mark support, that is the byteOrderMark parameter of the <see cref="M:System.Text.UnicodeEncoding.#ctor" /> constructor is <see langword="false" />
      , then a byte array of length zero.</para>
        <para>Otherwise, if the constructor requested big-endian byte
      order mark support then a byte array whose elements contain hexadecimal 0xFE,
      0xFF; or if the constructor requested little-endian byte order mark support then
      a byte array whose elements contain hexadecimal 0xFF, 0xFE.</para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
      </summary>
      <param name="charCount">The number of characters to encode. </param>
      <returns>
        <para> The maximum number of bytes required to encode
   <paramref name="charCount" /> number of
      characters.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
      </summary>
      <param name="byteCount">The number of bytes to decode. </param>
      <returns>
        <para> The maximum number of characters that can result from decoding
   <paramref name="byteCount" />
   number of bytes.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" value">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see langword="UnicodeEncoding" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="T:System.Text.UTF7Encoding">
      <summary>
        <para> Represents a UTF-7 encoding of Unicode characters.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.UTF7Encoding.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Text.UTF7Encoding.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class, and specifies whether optional characters are
   allowed in an encoding.</para>
      </summary>
      <param name="allowOptionals">If <see langword="true" />, optional characters are allowed in an encoding; otherwise, optional characters are not allowed.</param>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Calculates the number of bytes required to store the results of encoding a
      range of characters from a specified Unicode character array.</para>
      </summary>
      <param name="chars">The Unicode character array to encode. </param>
      <param name="index">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para> The number of bytes required to encode a range of
      characters in <paramref name="chars" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of elements from a Unicode character
      array, and stores the results in a specified range of elements in a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first character in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The index of the first byte in <paramref name="bytes" /> to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Decodes a range of elements from a specified byte array, and stores them in a specified range of elements in a Unicode character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> to decode. </param>
      <param name="byteCount">The number of elements to decode. </param>
      <param name="chars">The character array where the decoded results are stored. </param>
      <param name="charIndex">The index of the first element in <paramref name="chars" /> to store decoded results. </param>
      <returns>
        <para> The number of characters stored in <paramref name="chars" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetDecoder">
      <summary>
        <para> Obtains a decoder that can convert a UTF-7 encoded
      sequence of bytes into a sequence of characters.
      </para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Text.Decoder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetEncoder">
      <summary>
        <para> Obtains an encoder that can convert a sequence of
      characters into a UTF-7 encoded sequence of bytes.
      </para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Text.Encoder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
      </summary>
      <param name="charCount">The number of characters to encode. </param>
      <returns>
        <para> The maximum number of bytes required to encode
   <paramref name="charCount" /> number of
      characters.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
      </summary>
      <param name="byteCount">The number of bytes to decode. </param>
      <returns>
        <para> The maximum number of characters that can result from decoding
      <paramref name="byteCount" />
   number of bytes.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF7Encoding.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>
       Returns the number of characters produced by decoding a specified
       range of bytes in an array.
    </para>
      </summary>
      <param name="bytes">
    The byte array to decode.
 </param>
      <param name="index">
    The starting index of the byte array to decode.
 </param>
      <param name="count">
    The number of bytes to decode.
 </param>
      <returns>
        <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
      </returns>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>
        <para> Represents a UTF-8 encoding of Unicode characters.
      </para>
      </summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. A parameter specifies whether to prefix an encoding with a Unicode byte order mark.</para>
      </summary>
      <param name="encoderShouldEmitUTF8Identifier">
        <see langword="true" /> to specify that a Unicode byte order mark prefix be emitted when encoding; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Text.UTF8Encoding" /> class. Parameters specify whether to prefix an encoding with
   a Unicode byte order mark, and whether to throw an exception when an
   invalid encoding is detected.</para>
      </summary>
      <param name="encoderShouldEmitUTF8Identifier">
        <see langword="true" /> to specify that a Unicode byte order mark prefix be emitted when encoding; otherwise, <see langword="false" />.</param>
      <param name=" throwOnInvalidBytes">
        <see langword="true" /> to specify that an exception be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Calculates the number of bytes required to store the results of encoding a
      set of characters from a specified Unicode character array.</para>
      </summary>
      <param name="chars">The Unicode character array to encode. </param>
      <param name="index">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="count">The number of characters to encode. </param>
      <returns>
        <para> The number of bytes required to encode the range in
      <paramref name="chars" /> from <paramref name="index" /> to <paramref name="index" /> + <paramref name="count" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>
        <para> Calculates the number of bytes required to store the results of
      encoding the characters from a specified <see cref="T:System.String" />.</para>
      </summary>
      <param name="chars">The <see cref="T:System.String" /> to encode. </param>
      <returns>
        <para> The number of bytes required to encode the characters in
   <paramref name="chars" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of elements from a Unicode character
      array and stores the results in a specified range of elements in a byte array.
      </para>
      </summary>
      <param name="chars">The character array to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="chars" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String)">
      <summary>
        <para> Encodes the characters from a specified <see cref="T:System.String" />
and returns the results in a byte array.</para>
      </summary>
      <param name="s">The string of characters to encode. </param>
      <returns>
        <para>A byte array that contains the encoded characters from
      <paramref name="s" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Encodes a specified range of characters from a <see cref="T:System.String" />
and stores the results in a specified range of elements in a byte array.</para>
      </summary>
      <param name="s">The string of characters to encode. </param>
      <param name="charIndex">The index of the first character in <paramref name="s" /> to encode. </param>
      <param name="charCount">The number of characters to encode. </param>
      <param name="bytes">The byte array where the encoded results are stored. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> where the encoded results are stored. </param>
      <returns>
        <para> The number of bytes stored in <paramref name="bytes" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Calculates the number of characters that would result from decoding a specified range
      of elements in a byte array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="index">The index of the first byte in <paramref name="bytes" /> to decode. </param>
      <param name="count">The number of bytes to decode. </param>
      <returns>
        <para> The number of characters that would result from decoding
      the specified range of elements in <paramref name="bytes" />.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>
        <para> Decodes a range of elements from a specified byte array and stores the result into a specified range of elements in a Unicode character array.
      </para>
      </summary>
      <param name="bytes">The byte array to decode. </param>
      <param name="byteIndex">The index of the first element in <paramref name="bytes" /> to decode. </param>
      <param name="byteCount">The number of elements to decode. </param>
      <param name="chars"> The character array where the decoded results are stored. </param>
      <param name="charIndex">The index of the first element in <paramref name="chars" /> to store decoded results. </param>
      <returns>
        <para> The number of characters stored in <paramref name="chars" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>
        <para> Obtains a decoder that can convert a UTF-8 encoded sequence
      of bytes into a sequence of Unicode characters.
      </para>
      </summary>
      <returns>
        <para> A <see cref="T:System.Text.Decoder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>
        <para> Obtains an encoder that can convert a sequence of Unicode
      characters into a UTF-8 encoded sequence of bytes.
      </para>
      </summary>
      <returns>
        <para> An <see cref="T:System.Text.Encoder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of bytes required to encode a specified
      number of characters.
      </para>
      </summary>
      <param name="charCount">The number of characters to encode. </param>
      <returns>
        <para> The maximum number of bytes required to encode
   <paramref name="charCount" /> number of
      characters.
      </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>
        <para> Calculates the maximum number of characters that can result from decoding a specified
      number of bytes.
      </para>
      </summary>
      <param name="byteCount">The number of bytes to decode. </param>
      <returns>
        <para> The maximum number of characters that can result from decoding
   <paramref name="byteCount" />
   number of bytes.
   </para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>
        <para> Returns a Unicode byte order mark encoded in UTF-8 format, if the constructor for this instance
      requested byte order mark support.</para>
      </summary>
      <returns>
        <para>A byte array containing the Unicode byte order mark (U+FEFF), encoded as hexadecimal 0xEF, 0xBB, 0xBF, if the
      constructor for this instance requested a UTF-8 identifier be emitted; otherwise, a
      byte array of length zero.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>
        <para>Returns a value indicating whether this instance is equal to a specified
      object.</para>
      </summary>
      <param name=" value">An object to compare with this instance or <see langword="null" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UTF8Encoding" />
and equals the value of this instance; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>
        <para>Returns the hash code for this instance.</para>
      </summary>
      <returns>
        <para>A 32-bit signed integer hash code.</para>
      </returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.UTF8Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>
       Returns the number of characters produced by decoding a specified
       range of bytes in an array.
    </para>
      </summary>
      <param name="bytes">
    The byte array to decode.
 </param>
      <param name="index">
    The starting index of the byte array to decode.
 </param>
      <param name="count">
    The number of bytes to decode.
 </param>
      <returns>
        <para>
       The number of characters produced by decoding a range of bytes in
       the specified byte array.
    </para>
      </returns>
    </member>
    <member name="T:System.Resources.IResourceReader">
      <summary>
        <para> Provides the
      base functionality to read data from resource files.</para>
      </summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
      <summary>
        <para>Closes the resource reader after releasing any resources associated with it. </para>
      </summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> of the resources for
    this reader.</para>
      </summary>
      <returns>
        <para> A dictionary enumerator for the resources for this reader.</para>
      </returns>
    </member>
    <member name="T:System.Resources.IResourceWriter">
      <summary>
        <para> Provides functionality to write resources to an output file or
      stream.</para>
      </summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)">
      <summary>
        <para>Adds a named resource of type <see cref="T:System.String" />
to the list of resources to be written.</para>
      </summary>
      <param name="name">The name of the resource.</param>
      <param name="value">The value of the resource.</param>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Object)">
      <summary>
        <para>Adds a named resource of type <see cref="T:System.Object" /> to the list of resources to be written.</para>
      </summary>
      <param name="name">The name of the resource.</param>
      <param name="value">The value of the resource. </param>
    </member>
    <member name="M:System.Resources.IResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>
        <para>Adds an 8-bit unsigned integer array as a named resource to the list of
      resources to be written. </para>
      </summary>
      <param name="name">Name of a resource.</param>
      <param name="value">Value of a resource as an 8-bit unsigned integer array.</param>
    </member>
    <member name="M:System.Resources.IResourceWriter.Close">
      <summary>
        <para>Closes the underlying resource file or stream, ensuring 
      all the data has been written to the file.</para>
      </summary>
    </member>
    <member name="M:System.Resources.IResourceWriter.Generate">
      <summary>
        <para>Writes all the resources added by the <see cref="M:System.Resources.IResourceWriter.AddResource(System.String,System.String)" /> method to the output file or stream. </para>
      </summary>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>
        <para> The exception thrown if the main assembly does not contain the resources
      for the neutral culture, and they
      are required because of a missing appropriate satellite assembly.</para>
      </summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>
        <para>Constructs an instance of <see cref="T:System.Resources.MissingManifestResourceException" /> with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>
        <para>Constructs an instance of <see cref="T:System.Resources.MissingManifestResourceException" /> with the specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.MissingManifestResourceException" /> class from serialized data. </para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination of the exception.</param>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>
        <para>Informs the <see cref="T:System.Resources.ResourceManager" /> of
   the neutral culture of an assembly. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> class.</para>
      </summary>
      <param name="cultureName">The name of the culture that the current assembly's neutral resources were written in.</param>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>
        <para>Gets the culture name.</para>
      </summary>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>
        <para>Provides convenient access to culture-specific resources at runtime.</para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
      <summary>
        <para>Indicates the root name of the resource files that the
   <see cref="T:System.Resources.ResourceManager" /> searches for resources.</para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceManager.ResourceSets">
      <summary>
        <para> Contains a <see cref="T:System.Collections.Hashtable" /> that returns a mapping from cultures
   to <see cref="T:System.Resources.ResourceSet" /> objects.
   </para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
      <summary>
        <para>Indicates the main <see cref="T:System.Reflection.Assembly" />
 that contains the
 resources.</para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
      <summary>
        <para>Holds the number used to identify resource files. </para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
      <summary>
        <para>A constant <see langword="readonly " />value indicating the
   version of resource file headers that the current implementation of <see cref="T:System.Resources.ResourceManager" /> can interpret and
   produce.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks
 up resources contained in files derived from the specified
 root name using the given
<see cref="T:System.Reflection.Assembly" /> .</para>
      </summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources.</param>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files
   derived from the specified root name using the given <see cref="T:System.Reflection.Assembly" /> .</para>
      </summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</param>
      <param name="assembly">The main <see cref="T:System.Reflection.Assembly" /> for the resources.</param>
      <param name="usingResourceSet">The <see cref="T:System.Type" /> of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If <see langword="null" />, the default runtime <see cref="T:System.Resources.ResourceSet" /> is used.</param>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>
        <para>Creates a <see cref="T:System.Resources.ResourceManager" /> that looks up resources in satellite assemblies based
   on information from the specified <see cref="T:System.Type" />
   .</para>
      </summary>
      <param name="resourceSource">A <see cref="T:System.Type" /> from which the <see cref="T:System.Resources.ResourceManager" /> derives all information for finding .resources files.</param>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
      <summary>
        <para>Tells the <see cref="T:System.Resources.ResourceManager" /> to call <see cref="M:System.Resources.ResourceSet.Close" /> on all <see cref="T:System.Resources.ResourceSet" />
objects and release all
resources.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)">
      <summary>
        <para>Returns a <see cref="T:System.Resources.ResourceManager" /> that searches a specific directory for
   resources instead of in the assembly manifest.</para>
      </summary>
      <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</param>
      <param name="resourceDir">The name of the directory to search for the resources.</param>
      <param name="usingResourceSet">The <see cref="T:System.Type" /> of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If <see langword="null" />, the default runtime <see cref="T:System.Resources.ResourceSet" /> is used.</param>
      <returns>
        <para>The newly created <see cref="T:System.Resources.ResourceManager" /> that searches a specific directory for
   resources instead of in the assembly manifest.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
      <summary>
        <para>Generates the name for the resource file for the given
   <see cref="T:System.Globalization.CultureInfo" /> .</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> for which a resource file name is constructed.</param>
      <returns>
        <para>The name that can be used for a resource file for the
      given <see cref="T:System.Globalization.CultureInfo" /> .</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets the <see cref="T:System.Resources.ResourceSet" /> for a
   particular culture.</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for.</param>
      <param name="createIfNotExists">If <see langword="true" /> and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it.</param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist.</param>
      <returns>
        <para>The specified <see cref="T:System.Resources.ResourceSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>
        <para>Provides the implementation for finding a <see cref="T:System.Resources.ResourceSet" /> .</para>
      </summary>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to look for.</param>
      <param name="createIfNotExists">If <see langword="true" /> and if the <see cref="T:System.Resources.ResourceSet" /> has not been loaded yet, load it.</param>
      <param name="tryParents">If the <see cref="T:System.Resources.ResourceSet" /> cannot be loaded, try parent <see cref="T:System.Globalization.CultureInfo" /> objects to see if they exist.</param>
      <returns>
        <para>The specified <see cref="T:System.Resources.ResourceSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
      <summary>
        <para>Returns the <see cref="T:System.Version" /> specified by the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> in the given assembly.</para>
      </summary>
      <param name="a">The <see cref="T:System.Reflection.Assembly" /> for which to look up the <see cref="T:System.Resources.SatelliteContractVersionAttribute" />.</param>
      <returns>
        <para>The satellite contract <see cref="T:System.Version" /> of the given assembly, or
<see langword="null" /> if no version was found.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
      <summary>
        <para>Returns the <see cref="T:System.Globalization.CultureInfo" /> for the main assembly's
   neutral resources by reading the value of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> on a specified
<see cref="T:System.Reflection.Assembly" /> . </para>
      </summary>
      <param name="a">The assembly for which to return a <see cref="T:System.Globalization.CultureInfo" />.</param>
      <returns>
        <para>The culture from the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />, if found;
   otherwise, <see cref="P:System.Globalization.CultureInfo.InvariantCulture" qualify="true" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>
        <para>Returns the value of the specified <see cref="T:System.String" />
resource.</para>
      </summary>
      <param name="name">The name of the resource to get.</param>
      <returns>
        <para>The value of the resource localized for the caller's
      current culture settings. If a match is not possible, <see langword="null" /> is returned.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Gets the value of the <see cref="T:System.String" /> resource localized for
   the specified culture.</para>
      </summary>
      <param name="name">The name of the resource to get.</param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after looking in the neutral culture.</para>
        <para>If this value is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</para>
      </param>
      <returns>
        <para>The value of the resource localized for the specified
      culture. If a best match is not possible, <see langword="null" />
      is returned.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
      <summary>
        <para>Returns the value of the specified <see cref="T:System.Object" /> resource. </para>
      </summary>
      <param name="name">The name of the resource to get.</param>
      <returns>
        <para>The value of the resource localized for the caller's
      current culture settings. If a match is not possible, <see langword="null" /> is returned. The resource value can be
   <see langword="null" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>
        <para>Gets the value of the <see cref="T:System.Object" /> resource localized for
 the specified culture.</para>
      </summary>
      <param name="name">The name of the resource to get.</param>
      <param name="culture">
        <para>The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's<see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after checking in the neutral culture.</para>
        <para>If this value is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</para>
      </param>
      <returns>
        <para>The value of the resource, localized for the specified
 culture. If a "best match" is not possible, <see langword="null" />
 is returned.</para>
      </returns>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
      <summary>
        <para> Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</para>
      </summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
      <summary>
        <para>Gets or sets a Boolean value indicating whether the
      current instance of ResourceManager allows case-insensitive resource lookups in
      the <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />and <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> methods.</para>
      </summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
      <summary>
        <para> Gets the <see cref="T:System.Type" />
 of the <see cref="T:System.Resources.ResourceSet" /> the <see cref="T:System.Resources.ResourceManager" /> uses to construct a <see cref="T:System.Resources.ResourceSet" />
 object.</para>
      </summary>
    </member>
    <member name="T:System.Resources.ResourceReader">
      <summary>
        <para> Enumerates .resources files and streams, reading sequential resource name
      and value pairs.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class
    for the specified resource file.</para>
      </summary>
      <param name="fileName">The path of the resource file to be read.</param>
    </member>
    <member name="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class
    for the specified stream.</para>
      </summary>
      <param name="stream">The input stream for reading resources.</param>
    </member>
    <member name="M:System.Resources.ResourceReader.Close">
      <summary>
        <para> Releases all operating system resources associated with
      this <see cref="T:System.Resources.ResourceReader" />.
      </para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceReader.GetEnumerator">
      <summary>
        <para>Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for this <see cref="T:System.Resources.ResourceReader" />.</para>
      </returns>
    </member>
    <member name="T:System.Resources.ResourceSet">
      <summary>
        <para>Stores all the resources localized for one particular culture, ignoring all other cultures, including any fallback rules.</para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
      <summary>
        <para>Indicates the <see cref="T:System.Resources.IResourceReader" /> used to read the resources.</para>
      </summary>
    </member>
    <member name="F:System.Resources.ResourceSet.Table">
      <summary>
        <para>The <see cref="T:System.Collections.Hashtable" />
 in which the resources are stored.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceSet" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the system default <see cref="T:System.Resources.ResourceReader" />
that opens and reads resources from the given file.</para>
      </summary>
      <param name="fileName">Resource file to read.</param>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" /> class using the system default <see cref="T:System.Resources.ResourceReader" />
that reads resources from the given stream.</para>
      </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> of resources to be read. The stream should refer to an existing resources file.</param>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Resources.ResourceSet" />
class using the specified resource reader.</para>
      </summary>
      <param name="reader">The reader that will be used.</param>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
      <summary>
        <para>Closes and releases any resources used by this <see cref="T:System.Resources.ResourceSet" />.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
      <summary>
        <para>Releases resources (other than memory) associated with the current instance,
      closing internal managed objects if requested.</para>
      </summary>
      <param name="disposing">Indicates whether the objects contained in the current instance should be explicitly closed.</param>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
      <summary>
        <para>Disposes of the resources (other than memory) used by the current instance of
   <see cref="T:System.Resources.ResourceSet" />.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
      <summary>
        <para>Returns the preferred resource reader class for this kind
      of <see cref="T:System.Resources.ResourceSet" />. </para>
      </summary>
      <returns>
        <para>Returns the <see cref="T:System.Type" /> for the preferred resource reader for this kind of <see cref="T:System.Resources.ResourceSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultWriter">
      <summary>
        <para>Returns the preferred resource writer class for this
      kind of <see cref="T:System.Resources.ResourceSet" />.</para>
      </summary>
      <returns>
        <para>Returns the <see cref="T:System.Type" /> for the preferred resource writer for this kind of <see cref="T:System.Resources.ResourceSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
      <summary>
        <para> Searches for a <see cref="T:System.String" /> resource with
   the specified name.</para>
      </summary>
      <param name="name">Name of the resource to search for.</param>
      <returns>
        <para>The value of a resource, if the value is a <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
      <summary>
        <para> Searches for a <see cref="T:System.String" /> resource with the specified name in a case-insensitive
   manner, if requested.</para>
      </summary>
      <param name="name">Name of the resource to search for.</param>
      <param name=" ignoreCase">Indicates whether the case of the case of the specified name should be ignored.</param>
      <returns>
        <para>The value of a resource, if the value is a <see cref="T:System.String" />.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
      <summary>
        <para> Searches for a resource object with the specified name.</para>
      </summary>
      <param name="name">Name of the resource to search for.</param>
      <returns>
        <para> The requested resource.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
      <summary>
        <para>Searches for a resource object with the specified name in a case-insensitive manner, if requested.</para>
      </summary>
      <param name="name">Name of the resource to search for.</param>
      <param name=" ignoreCase">Indicates whether the case of the case of the specified name should be ignored.</param>
      <returns>
        <para> The requested resource.</para>
      </returns>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
      <summary>
        <para>Reads all the resources and stores them in a <see cref="T:System.Collections.Hashtable" /> indicated in the <see cref="F:System.Resources.ResourceSet.Table" /> property.</para>
      </summary>
    </member>
    <member name="T:System.Resources.ResourceWriter">
      <summary>
        <para> Writes resources in the system-default format
      to an output file or an output stream.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceWriter" /> class that writes the resources to the
   specified file.</para>
      </summary>
      <param name="fileName">The output file name.</param>
    </member>
    <member name="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.ResourceWriter" /> class
   that writes the resources to the provided stream.</para>
      </summary>
      <param name="stream">The output stream.</param>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)">
      <summary>
        <para>Adds a <see cref="T:System.String" /> resource to the list of
   resources to be written.</para>
      </summary>
      <param name="name">The name of the resource.</param>
      <param name=" value">The value of the resource.</param>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)">
      <summary>
        <para>Adds a named resource specified as an object to the list
      of resources to be written.</para>
      </summary>
      <param name="name">The name of the resource.</param>
      <param name="value">The value of the resource.</param>
    </member>
    <member name="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])">
      <summary>
        <para>Adds a named resource specified as a byte
       array to the list of resources to be written.</para>
      </summary>
      <param name="name">The name of the resource.</param>
      <param name=" value">Value of the resource as an 8-bit unsigned integer array.</param>
    </member>
    <member name="M:System.Resources.ResourceWriter.Close">
      <summary>
        <para>Saves the resources to the output stream and then closes it.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceWriter.Dispose">
      <summary>
        <para> Allows users to close the resource file or
 stream, explicitly releasing resources.</para>
      </summary>
    </member>
    <member name="M:System.Resources.ResourceWriter.Generate">
      <summary>
        <para>Saves all resources to the output stream in the system default format. </para>
      </summary>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>
        <para>Instructs the <see cref="T:System.Resources.ResourceManager" /> to ask for a particular version of a satellite
   assembly
   to simplify
   updates of the main assembly of an application.</para>
      </summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> class.</para>
      </summary>
      <param name="version">A <see cref="T:System.String" /> with the version of the satellite assemblies to load.</param>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>
        <para>Gets the version of the satellite assemblies with the required resources.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.Registry">
      <summary>
        <para> Supplies the base <see langword="Registrykeys" /> that access
   values and subkeys in the registry.
   </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.CurrentUser">
      <summary>
        <para> Contains information about the current user preferences. This field
      reads the Windows registry base key HKEY_CURRENT_USER
      </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.LocalMachine">
      <summary>
        <para> Contains the configuration data for the local machine. This
      field reads the Windows registry base key HKEY_LOCAL_MACHINE.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.ClassesRoot">
      <summary>
        <para> Defines the types (or classes) of documents and the properties associated
      with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.
      </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.Users">
      <summary>
        <para> Contains information about the default user configuration. This field reads
      the Windows registry base key HKEY_USERS.
      </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.PerformanceData">
      <summary>
        <para> Contains performance information for software components. This field reads
      the Windows registry base key HKEY_PERFORMANCE_DATA.
      </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.CurrentConfig">
      <summary>
        <para> Contains configuration information pertaining to the
      hardware that is not specific to the user. This
      field reads the Windows registry base key HKEY_CURRENT_CONFIG.
      </para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.Registry.DynData">
      <summary>
        <para> Contains dynamic registry data. This field reads the Windows registry base key HKEY_DYN_DATA.
      </para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.RegistryHive">
      <summary>
        <para>Represents the possible values for a top-level node on a
      foreign machine.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.ClassesRoot">
      <summary>
        <para>Represents the HKEY_CLASSES_ROOT base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.CurrentUser">
      <summary>
        <para>Represents the HKEY_CURRENT_USER base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.LocalMachine">
      <summary>
        <para>Represents the HKEY_LOCAL_MACHINE base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.Users">
      <summary>
        <para>Represents the HKEY_USERS base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.PerformanceData">
      <summary>
        <para> Represents the HKEY_PERFORMANCE_DATAbase key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.CurrentConfig">
      <summary>
        <para>Represents the HKEY_CURRENT_CONFIG base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="F:Microsoft.Win32.RegistryHive.DynData">
      <summary>
        <para>Represents the HKEY_DYN_DATA base key on a foreign
      machine. This value can be passed to the <see cref="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)" /> method, to open this node
      remotely.</para>
      </summary>
    </member>
    <member name="T:Microsoft.Win32.RegistryKey">
      <summary>
        <para> Represents a key
      level node in the Windows registry. This class is a registry
      encapsulation.
      </para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.Finalize">
      <summary>
        <para>Closes the key and flushes it to disk if the contents have been modified.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.Close">
      <summary>
        <para> Closes the key and flushes it to disk if the contents have been modified.
      </para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.Flush">
      <summary>
        <para>Writes all the attributes of the specified open registry 
      key into the registry.</para>
      </summary>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)">
      <summary>
        <para> Creates a new subkey or opens an existing subkey. The
      string <paramref name="subKey" /> is
      not case-sensitive.
      </para>
      </summary>
      <param name="subkey">Name or path of subkey to create or open. </param>
      <returns>
        <para> Returns the subkey, or null if the operation failed.
      </para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)">
      <summary>
        <para> Deletes the specified subkey. The string <paramref name="subKey " /> is not
   case-sensitive.
   </para>
      </summary>
      <param name="subkey">Name of the subkey to delete. </param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)">
      <summary>
        <para>Deletes the specified subkey. The string subkey is not case-sensitive.</para>
      </summary>
      <param name="subkey">Name of the subkey to delete.</param>
      <param name=" throwOnMissingSubKey">Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is true and the specified subkey does not exist then an exception is raised. If this argument is false and the specified subkey does not exist, then no action is taken</param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)">
      <summary>
        <para> Deletes a subkey and any child subkeys recursively. The
      string <paramref name="subKey" /> is
      not case-sensitive.
      </para>
      </summary>
      <param name="subkey">Subkey to delete. </param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)">
      <summary>
        <para> Deletes the specified value from this key. The string
   <paramref name="subKey " />
   is not case
   sensitive.
   </para>
      </summary>
      <param name="name">Name of the value to delete. </param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)">
      <summary>
        <para>Deletes the specified value from this key. The string 
      subKey<paramref name=" " />is not case sensitive.</para>
      </summary>
      <param name="name">Name of the value to delete.</param>
      <param name=" throwOnMissingValue">Indicates whether an exception should be raised if the specified value cannot be found. If this argument is true and the specified value does not exist then an exception is raised. If this argument is false and the specified value does not exist, then no action is taken</param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)">
      <summary>
        <para> Opens a new <see langword="RegistryKey" /> that represents the requested key on a foreign
   machine.
   </para>
      </summary>
      <param name="hKey">HKEY to open. Provided by Win32.RegistryHive class. </param>
      <param name=" machineName">The machine to connect to. </param>
      <returns>
        <para> The requested <see langword="RegistryKey" /> .
   </para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)">
      <summary>
        <para> Retrieves a specified subkey.
      </para>
      </summary>
      <param name="name">Name or path of subkey to open. </param>
      <param name=" writable">Set to true if you need write access to the key. </param>
      <returns>
        <para> The subkey requested, or null if the operation failed.
      </para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String)">
      <summary>
        <para> Retrieves a subkey as read-only.
      </para>
      </summary>
      <param name="name">Name or path of subkey to open. </param>
      <returns>
        <para> The subkey requested, or null if the operation failed.
      </para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.GetSubKeyNames">
      <summary>
        <para> Retrieves an array of strings that contains all the subkey names.
      </para>
      </summary>
      <returns>
        <para> An array of strings that contains the names of the subkeys for the current key.
      </para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.GetValueNames">
      <summary>
        <para> Retrieves an array of strings that contains all the value names associated with this key.
      </para>
      </summary>
      <returns>
        <para>An array of strings that contains the value names for the current key.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)">
      <summary>
        <para>Retrieves the specified value, or the default value
      you provide if the specified value is not found.</para>
      </summary>
      <param name="name">Name of value to retrieve.</param>
      <param name=" defaultValue">Value to return if <paramref name="name" /> does not exist.</param>
      <returns>
        <para> The data associated with <paramref name="name" />, or
<paramref name="defaultValue" /> if
<paramref name="name" /> is not found.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.GetValue(System.String)">
      <summary>
        <para> Retrieves the data associated with the specified value, or null if the value
      does not exist.</para>
      </summary>
      <param name="name">Name of the value to retrieve.</param>
      <returns>
        <para>The data associated with <paramref name="name" />
, or null if the value
does not exist.</para>
      </returns>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)">
      <summary>
        <para> Sets the specified value. The string subKey is not case sensitive.
      </para>
      </summary>
      <param name="name">Name of value to store data in. </param>
      <param name=" value">Data to store. </param>
    </member>
    <member name="M:Microsoft.Win32.RegistryKey.ToString">
      <summary>
        <para> Retrieves a string representation of this key.
      </para>
      </summary>
      <returns>
        <para> A string representing the key. If the
      specified key is invalid (cannot be found) then a null value is returned.
      </para>
      </returns>
    </member>
    <member name="P:Microsoft.Win32.RegistryKey.SubKeyCount">
      <summary>
        <para> Retrieves the count of subkeys at the base level, for the current key.
      </para>
      </summary>
    </member>
    <member name="P:Microsoft.Win32.RegistryKey.ValueCount">
      <summary>
        <para> Retrieves the count of values in the key.
      </para>
      </summary>
    </member>
    <member name="P:Microsoft.Win32.RegistryKey.Name">
      <summary>
        <para> Retrieves the name of the key.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
      <summary>
        <para> Defines the common language runtime implementation of an X.509
      v.3 certificate.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class defined
   from a sequence of
   bytes representing an X.509v3 certificate. </para>
      </summary>
      <param name="data">The byte array from which to initialize the state of the new instance. </param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class from
 a handle.</para>
      </summary>
      <param name="handle">The handle from which to initialize the state of the new instance.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> class from an existing instance.</para>
      </summary>
      <param name="cert">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object with which to initialize the state of the new instance.</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)">
      <summary>
        <para>Creates an X.509v3 certificate from the specified
      certification file.</para>
      </summary>
      <param name="filename">The path of the certification file from which to create the X.509 certificate.</param>
      <returns>
        <para>The newly created X.509 certificate.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)">
      <summary>
        <para>Creates an  X.509v3 certificate from the specified
      signed file.</para>
      </summary>
      <param name="filename"> The path of the signed file from which to create the X.509 certificate.</param>
      <returns>
        <para>The newly created X.509 certificate.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetName">
      <summary>
        <para> Returns the
      name of the current principal.
      </para>
      </summary>
      <returns>
        <para> The name of the
      current principal.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString">
      <summary>
        <para>Returns a string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object. </para>
      </summary>
      <returns>
        <para>A string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 
object. </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat">
      <summary>
        <para> Returns the name of
      the format of this  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The format of this
      X.509 certificate.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName">
      <summary>
        <para> Returns the name of
      the certification authority that issued the  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The name of the certification authority that issued
      the X.509 certificate.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber">
      <summary>
        <para> Returns the serial
      number of the
       X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The serial number of the X.509 certificate as an array of bytes.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString">
      <summary>
        <para> Returns the serial
      number of the X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The serial number of the X.509
      certificate as a hexadecimal string.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm">
      <summary>
        <para>
      Returns the key algorithm information for this  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The key algorithm information for this X.509 certificate as a
      string.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters">
      <summary>
        <para> Returns the key algorithm parameters for
      the  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The key algorithm parameters for the X.509 certificate as an array of bytes.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString">
      <summary>
        <para>Returns the key algorithm parameters for the  X.509v3
      certificate.</para>
      </summary>
      <returns>
        <para> The key algorithm parameters
      for the X.509 certificate as a hexadecimal string.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey">
      <summary>
        <para> Returns the public key for the
       X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The public key for the X.509 certificate as an array of bytes.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString">
      <summary>
        <para> Returns the public key for the
       X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The public key for the X.509 certificate
      as a hexadecimal string.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData">
      <summary>
        <para> Returns the raw data
      for the entire  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> A byte array containing the X.509 certificate data.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString">
      <summary>
        <para> Returns the raw
      data for the entire  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The X.509 certificate data as a hexadecimal string.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash">
      <summary>
        <para> Returns the hash value
      for the  X.509v3 certificate as an array of bytes.
      </para>
      </summary>
      <returns>
        <para> The hash value for the X.509 certificate.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString">
      <summary>
        <para> Returns the hash value
      for the  X.509v3 certificate as a hexadecimal string.
      </para>
      </summary>
      <returns>
        <para> The hexadecimal
      string representation of the X.509 certificate hash value.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString">
      <summary>
        <para> Returns the effective date
      of this  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The effective
      date for this X.509 certificate.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString">
      <summary>
        <para> Returns the expiration date
      of this  X.509v3 certificate.
      </para>
      </summary>
      <returns>
        <para> The expiration
      date for this X.509 certificate.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Compares two <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
objects for equality.</para>
      </summary>
      <param name="other">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to compare to the current object.</param>
      <returns>
        <para>
          <see langword="true" /> if the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object is
   equal to the object specified by the <paramref name="other" /> parameter; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode">
      <summary>
        <para>Returns the hash code for the  X.509v3 certificate as an integer.</para>
      </summary>
      <returns>
        <para>The hash code for the X.509 certificate as an integer.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)">
      <summary>
        <para> Returns a string representation of the 
      current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />
      object, with extra information, if specified.
      </para>
      </summary>
      <param name="fVerbose">
        <see langword="true" /> to produce the verbose form of the string representation; otherwise, <see langword="false" />.</param>
      <returns>
        <para> A string representation of the current <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 
object.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>
        <para> Represents the abstract base class from which all implementations of asymmetric algorithms must
 inherit.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue">
      <summary>
        <para> Represents the size of the key modulus used by the asymmetric algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
      <summary>
        <para> Specifies the key sizes that are supported by the asymmetric algorithm.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.
 </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Clear">
      <summary>
        <para> Releases all resources used by 
      the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create">
      <summary>
        <para> Creates an instance of the default
      cryptographic object used to perform the asymmetric algorithm.
      </para>
      </summary>
      <returns>
        <para> The instance of a cryptographic object used to perform the asymmetric algorithm.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)">
      <summary>
        <para> Creates an instance of the
      specified cryptographic object used to perform the asymmetric algorithm.
      </para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> to use.</param>
      <returns>
        <para> The instance of a cryptographic object used to perform the asymmetric algorithm.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)">
      <summary>
        <para>When overridden in a derived class, reconstructs 
      an <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object from an XML string.</para>
      </summary>
      <param name="xmlString">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)">
      <summary>
        <para>When overridden in a derived class, creates and returns 
      an XML string representation of the current <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />
      object.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An XML string encoding of the current 
   <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> object.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>
        <para> Gets or sets the size of the key modulus used by the asymmetric algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>
        <para> Gets the key sizes that are supported by the asymmetric
      algorithm.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
      <summary>
        <para> Gets the name of the signature algorithm.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
      <summary>
        <para> When overridden in a derived class, gets the name of the key exchange algorithm.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>
        <para>Represents the base class from which all asymmetric key
      exchange deformatters derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>When overridden in a derived class, sets the private key 
      to use for decrypting the secret information.</para>
      </summary>
      <param name="key">The instance of the implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that holds the private key.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, extracts secret 
      information from the encrypted key exchange data.</para>
      </summary>
      <param name="rgb">The key exchange data within which the secret information is hidden.</param>
      <returns>
        <para>The secret information derived from the key exchange data.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>
        <para>When overridden in a derived class, gets or sets the parameters for the asymmetric key exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>
        <para>Represents the base class from which all asymmetric key
      exchange formatters derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>When overridden in a derived class, sets the public key 
      to use for encrypting the secret information.</para>
      </summary>
      <param name="key">The instance of the implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, creates the
      encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="data">The secret information to be passed in the key exchange.</param>
      <returns>
        <para>The encrypted key exchange data to be sent to the
      intended recipient.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
        <para>When overridden in a derived class, creates the
      encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="data">The secret information to be passed in the key exchange.</param>
      <param name=" symAlgType">This parameter is not used in the current version.</param>
      <returns>
        <para>The encrypted key exchange data to be sent to the
      intended recipient.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>
        <para>When overridden in a derived class, gets the parameters for the asymmetric key exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>
        <para>Represents the abstract base class from which all
      implementations of asymmetric signature deformatters derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para> When overridden in a derived class, sets the public key to use for verifying the signature.
      </para>
      </summary>
      <param name="key">The instance of an implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> that holds the public key. </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> When overridden in a derived class, sets the hash algorithm to use for verifying the signature.
      </para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for verifying the signature. </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>
        <para> Verifies the signature from the specified hash value.
 </para>
      </summary>
      <param name="hash">The hash algorithm to use to verify the signature. </param>
      <param name=" rgbSignature">The signature to be verified.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature is valid for the
 hash; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
        <para> When overridden in a derived class, verifies the signature for the specified data.
      </para>
      </summary>
      <param name="rgbHash">The data signed with <paramref name="rgbSignature" />. </param>
      <param name=" rgbSignature">The signature to be verified for <paramref name="rgbHash" />. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="rgbSignature" /> matches the
   signature computed using the specified hash algorithm and key on <paramref name="rgbHash" />;
   otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>
        <para>Represents the base class from which all implementations
      of asymmetric signature formatters derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para> When overridden in a derived class, sets the asymmetric algorithm to use to create the signature.
      </para>
      </summary>
      <param name="key">The instance of the implementation of <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> to use to create the signature. </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> When overridden in a derived class, sets the hash algorithm to use for creating the signature.
      </para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for creating the signature. </param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>
        <para> Creates the signature from the specified hash value.
 </para>
      </summary>
      <param name="hash">The hash algorithm to use to create the signature. </param>
      <returns>
        <para> The signature for the specified hash value.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
        <para> When overridden in a derived class, creates the signature for the specified data.
      </para>
      </summary>
      <param name="rgbHash">The data to be signed. </param>
      <returns>
        <para> The digital signature for the <paramref name="rgbHash" /> parameter.
   </para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.FromBase64TransformMode">
      <summary>
        <para>Specifies whether white space should be ignored in the
      base 64 transformation.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.FromBase64TransformMode.IgnoreWhiteSpaces">
      <summary>
        <para>White space should be ignored.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.FromBase64TransformMode.DoNotIgnoreWhiteSpaces">
      <summary>
        <para>White space should not be ignored.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.ToBase64Transform">
      <summary>
        <para>Converts a <see cref="T:System.Security.Cryptography.CryptoStream" /> to base 64.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>
        <para>Defines the basic operations of cryptographic transformations.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Transforms the specified region of
      the input byte array and copies the resulting transform to the specified region of
      the output byte array.</para>
      </summary>
      <param name="inputBuffer"> The input for which to compute the transform.</param>
      <param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name=" outputBuffer"> The output to which to write the transform.</param>
      <param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Transforms the specified region of the
      specified byte array.</para>
      </summary>
      <param name="inputBuffer">The input for which to compute the transform.</param>
      <param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the byte array to use as data.</param>
      <returns>
        <para> The computed transform.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>
        <para>Gets the input block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>
        <para>Gets the output block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>
        <para>Gets a value indicating whether multiple blocks can be transformed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>
        <para>Gets a value indicating whether the current transform
      can be reused.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Converts the specified region of the input
      byte array to base 64 and copies the result to the specified region of
      the output byte array.</para>
      </summary>
      <param name="inputBuffer">The input to compute to base 64.</param>
      <param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name=" outputBuffer">The output to which to write the result.</param>
      <param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Converts the specified region of the specified byte array
      to base 64.</para>
      </summary>
      <param name="inputBuffer">The input to convert to base 64.</param>
      <param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the byte array to use as data.</param>
      <returns>
        <para>The computed base 64 conversion.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.ToBase64Transform.Clear">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Security.Cryptography.ToBase64Transform" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by 
      the <see cref="T:System.Security.Cryptography.ToBase64Transform" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.ToBase64Transform.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ToBase64Transform" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ToBase64Transform.InputBlockSize">
      <summary>
        <para>Gets the input block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize">
      <summary>
        <para>Gets the output block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks">
      <summary>
        <para>Gets a value that indicates whether multiple blocks can be transformed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform">
      <summary>
        <para>Gets a value indicating whether the current transform 
      can be reused.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.FromBase64Transform">
      <summary>
        <para>Converts a <see cref="T:System.Security.Cryptography.CryptoStream" /> from base 64.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.FromBase64Transform" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.#ctor(System.Security.Cryptography.FromBase64TransformMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.FromBase64Transform" /> class 
   with the specified transformation mode.</para>
      </summary>
      <param name="whitespaces">One of the <see cref="T:System.Security.Cryptography.FromBase64Transform" /> values.</param>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Converts the specified region of the
      input byte array from base 64 and copies the result to the specified region of
      the output byte array.</para>
      </summary>
      <param name="inputBuffer">The input to compute from base 64.</param>
      <param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name=" outputBuffer">The output to which to write the result.</param>
      <param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Converts the specified region of the specified byte
      array from base 64.</para>
      </summary>
      <param name="inputBuffer">The input to convert from base 64.</param>
      <param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the byte array to use as data.</param>
      <returns>
        <para> The computed conversion.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.Clear">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Security.Cryptography.FromBase64Transform" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by 
      the <see cref="T:System.Security.Cryptography.FromBase64Transform" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.FromBase64Transform.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.FromBase64Transform" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.FromBase64Transform.InputBlockSize">
      <summary>
        <para>Gets the input block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.FromBase64Transform.OutputBlockSize">
      <summary>
        <para>Gets the output block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.FromBase64Transform.CanTransformMultipleBlocks">
      <summary>
        <para>Gets a value that indicates whether multiple blocks can be transformed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.FromBase64Transform.CanReuseTransform">
      <summary>
        <para>Gets a value indicating whether the current transform 
      can be reused.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CipherMode">
      <summary>
        <para> Specifies the block cipher mode to use for encryption.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CBC">
      <summary>
        <para>The Cipher Block Chaining (<see langword="CBC" />) mode introduces feedback. Before each plain text block
   is encrypted, it is combined with the cipher text of the previous
   block by a bitwise exclusive OR operation. This ensures that even if the
   plain text contains many identical blocks, they will each encrypt to a different cipher
   text block. The initialization vector is combined with the first plain
   text block by a bitwise exclusive OR operation before the block is
   encrypted.</para>
        <para>If a single bit of the cipher text block is mangled, the corresponding plain
   text block will also be mangled. In addition, a bit in the subsequent
   block, in the same position as the original mangled bit, will be mangled.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.ECB">
      <summary>
        <para>The Electronic Codebook (<see langword="ECB" />) mode encrypts each block individually. This means
   that any blocks of plain text that are identical and are in the same message,
   or in a different message encrypted with the same key, will be transformed
   into identical cipher text blocks.</para>
        <para>If the plain text to be encrypted contains substantial repetition, it is feasible
   for the cipher text to be broken one block at a time. Also, it is
   possible for an active adversary to substitute and exchange individual blocks
   without detection.</para>
        <para>If a single bit of the cipher text block is mangled, the entire corresponding plain
   text block will also be mangled.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.OFB">
      <summary>
        <para> The Output Feedback (<see langword="OFB" />) mode processes small increments of plain text into cipher
   text instead of processing an entire block at a time. This mode is
   similar to <see langword="CFB" />; the only difference between the two modes is
   the way that the shift register is filled. </para>
        <para>If a bit in the cipher text is mangled, the corresponding bit of plain text will be
   mangled. However, if there are extra or missing bits from the cipher text,
   the plain text will be mangled from that point on.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CFB">
      <summary>
        <para>The Cipher Feedback (<see langword="CFB" />) mode processes small increments
   of plain text into cipher text, instead of processing an entire block at
   a time. This mode uses a shift register that is one block in length and is
   divided into sections. For example, if the block size is eight bytes, with one byte
   processed at a time, the shift register is divided into eight sections.</para>
        <para>If a bit in the cipher text is mangled, one plain text bit is mangled and the shift
   register is corrupted. This results in the next several plain text
   increments being mangled until the bad bit is shifted out of the shift
   register.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CTS">
      <summary>
        <para>The Cipher Text Stealing (<see langword="CTS" />) mode handles any length of plain text and
   produces cipher text whose length matches the plain text length.
   This mode behaves like the <see langword="CBC" /> mode for all but the last two blocks
   of the plain text.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.PaddingMode">
      <summary>
        <para> Specifies the type of padding to apply when the message data block is shorter than
      the full number of bytes needed for a cryptographic operation.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.None">
      <summary>
        <para>
       No padding is done.
    </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
      <summary>
        <para>The PKCS #7 padding string consists of a sequence of
      bytes, each of which is equal to the total number of padding bytes added. For example, if 24 bits (3 bytes)
      of padding need to be added, the padding string is "03 03 03".</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
      <summary>
        <para>The padding string consists of bytes set to zero.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>
        <para> Determines the set of valid key sizes
      for the symmetric cryptographic algorithms.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.KeySizes" />
class with the specified key values.</para>
      </summary>
      <param name="minSize">The minimum valid key size.</param>
      <param name=" maxSize">The maximum valid key size.</param>
      <param name=" skipSize">The interval between valid key sizes.</param>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.KeySizes" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>
        <para>Specifies the minimum key size in bits.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>
        <para>Specifies the maximum key size in bits.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>
        <para>Specifies the interval between valid key sizes in bits.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>
        <para> The exception that is thrown when an error occurs during
      a cryptographic
      operation.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class 
   with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class 
   with a specified error message in the specified format.</para>
      </summary>
      <param name="format">The format used to output the error message.</param>
      <param name=" insert">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class
   with the specified error code.</para>
      </summary>
      <param name="hr">The error code.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>
        <para>The exception that is thrown when
      an unexpected operation occurs during a cryptographic operation.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> class
   with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> class 
   with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> class 
   with a specified error message in the specified format.</para>
      </summary>
      <param name="format">The format used to output the error message.</param>
      <param name=" insert">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="F:System.Security.Cryptography.CryptoAPITransformMode.Encrypt">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoAPITransformMode.Decrypt">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoAPITransform">
      <summary>
        <para>Performs a cryptographic transformation of data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoAPITransform.Clear">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Security.Cryptography.CryptoAPITransform" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoAPITransform.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.CryptoAPITransform" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Computes the transformation for the specified region of 
      the input byte array and copies the resulting transformation to the specified region of
      the output byte array.</para>
      </summary>
      <param name="inputBuffer">The input on which to perform the operation.</param>
      <param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name=" outputBuffer">The output to which to write the data.</param>
      <param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Computes the transformation for the specified region of
      the specified byte array.</para>
      </summary>
      <param name="inputBuffer">The input on which to perform the operation.</param>
      <param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the byte array to use as data.</param>
      <returns>
        <para>The computed transformation.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoAPITransform.KeyHandle">
      <summary>
        <para>Gets the key handle.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoAPITransform.InputBlockSize">
      <summary>
        <para>Gets the input block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoAPITransform.OutputBlockSize">
      <summary>
        <para>Gets the output block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks">
      <summary>
        <para>Gets a value indicating whether multiple blocks can be transformed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoAPITransform.CanReuseTransform">
      <summary>
        <para>Gets a value indicating whether the current transform
      can be reused.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CspProviderFlags">
      <summary>
        <para>Specifies flags that modify the behavior of CryptoAPI cryptographic service providers (CSPs).</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore">
      <summary>
        <para>Use key information from the computer's key store.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseDefaultKeyContainer">
      <summary>
        <para>Use key information from the default key container.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CspParameters">
      <summary>
        <para>Contains parameters that are passed to the cryptographic service provider (CSP) that performs cryptographic
 computations. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderType">
      <summary>
        <para>Represents the provider type code for <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderName">
      <summary>
        <para>Represents the provider name for <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyContainerName">
      <summary>
        <para>Represents the key container name for <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyNumber">
      <summary>
        <para>Represents the key number for <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> 
 class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type
    code.</para>
      </summary>
      <param name="dwTypeIn">The provider type code.</param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type code and
    name.</para>
      </summary>
      <param name="dwTypeIn">The provider type code.</param>
      <param name=" strProviderNameIn">The provider name.</param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CspParameters" /> class with the specified provider type code and name and the specified container
 name.</para>
      </summary>
      <param name="dwTypeIn">The provider type code.</param>
      <param name=" strProviderNameIn">The provider name.</param>
      <param name=" strContainerNameIn">The container name.</param>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.Flags">
      <summary>
        <para>Represents the flags for <see cref="T:System.Security.Cryptography.CspParameters" />.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>
        <para>Accesses the cryptography configuration information.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>
        <para>Creates a new instance of the specified cryptographic object with the
      specified arguments.</para>
      </summary>
      <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
      <param name=" args">The arguments used to create the specified cryptographic object.</param>
      <returns>
        <para>A new instance of the specified cryptographic object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>
        <para>Creates a new instance of the specified cryptographic object.</para>
      </summary>
      <param name="name">The simple name of the cryptographic object of which to create an instance.</param>
      <returns>
        <para>A new instance of the specified cryptographic object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>
        <para>Gets the object identifier (OID) of the algorithm corresponding to the
 specified simple name.</para>
      </summary>
      <param name="name">The simple name of the algorithm for which to get the OID.</param>
      <returns>
        <para>The OID of the specified algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>
        <para>Encodes the specified object identifier (OID).</para>
      </summary>
      <param name="str">The OID to encode.</param>
      <returns>
        <para>A byte array containing the encoded OID.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>
        <para>Specifies the mode of a cryptographic stream.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>
        <para>Read access to a cryptographic stream.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>
        <para>Write access to a cryptographic stream.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>
        <para>Defines a stream that links data streams to cryptographic transformations.</para>
      </summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>
        <para> Provides a generic view of a sequence of bytes.</para>
      </summary>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>
    A <see langword="Stream" /> with no backing store.
 </summary>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>
        <para>Closes the current stream and releases any resources (such as
      sockets and file handles) associated with the current stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>
        <para> When overridden in a derived class, clears all buffers for this stream and causes any
      buffered data to be written to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.IO.Stream.CreateWaitHandle">
      <summary>
        <para>Allocates
      a <see cref="T:System.Threading.WaitHandle" /> object.
      </para>
      </summary>
      <returns>
        <para>A reference to the allocated 
   <see langword="WaitHandle" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous read operation.</para>
      </summary>
      <param name="buffer">The buffer to read the data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still
   be pending.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>
        <para>Waits for the pending asynchronous read to complete.</para>
      </summary>
      <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
      <returns>
        <para> The number of bytes read from the stream, between zero (0)
      and the number of bytes you requested. Streams only return zero
      (0) at the end of the stream, otherwise, they should block until
      at least one byte is available.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous write operation.</para>
      </summary>
      <param name="buffer">The buffer to write data to. This should generally be greater than 64 kilobytes.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>
        <para>An <see langword="IAsyncResult" />
that represents the asynchronous write, which could still be pending.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>
        <para>Ends an asynchronous write operation.</para>
      </summary>
      <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para>When overridden in a derived class, sets the position within the current stream.</para>
      </summary>
      <param name="offset">A byte offset relative to origin. If <paramref name="offset " />is negative, the new position will precede the position specified by <paramref name="origin " />by the number of bytes specified by <paramref name="offset" />. If <paramref name="offset " />is zero, the new position will be the position specified by <paramref name="origin" />. If <paramref name="offset " />is positive, the new position will follow the position specified by <paramref name="origin " />by the number of bytes specified by <paramref name="offset" />.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
      <returns>
        <para>The new position within the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>
        <para>When overridden in a derived class, sets the length of the current stream.</para>
      </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position
      within the stream by the number of bytes read.</para>
      </summary>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" />) replaced by the bytes read from the current source.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer " /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>
        <para> The total number of bytes read into the buffer.
      This may be less than the number of bytes requested if that
      many bytes are not currently available, or zero (0) if the
      end of the stream has been reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>
        <para>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if
      at the end of the stream.</para>
      </summary>
      <returns>
        <para>The unsigned byte cast to an <see langword="Int32" /> , or -1 if at the end
   of the stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>When overridden in a derived class, writes
      a sequence of bytes to the current stream and advances the current position
      within this stream by the number of bytes written.</para>
      </summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count " />bytes from <paramref name="buffer " /> to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer " /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>
        <para>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</para>
      </summary>
      <param name="value">The byte to write to the stream.</param>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>
        <para>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>
        <para>When overridden in a derived class, gets the length in bytes of the stream.</para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>
        <para>When overridden in a derived class, gets or sets the position within the current stream.</para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.NullStream.CanRead">
      <summary>
        <para>
       Determines whether the current stream supports reading.
    </para>
        <para>
       The value of this property is true if the stream supports reading; otherwise, false.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.NullStream.CanWrite">
      <summary>
        <para>
       Determines whether the current stream supports writing.
    </para>
        <para>
       The value of this property is true if the stream supports writing, or false if the stream does not support writing.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.NullStream.CanSeek">
      <summary>
        <para>
       Determines whether the current stream supports seeking.
    </para>
        <para>
       The value of this property is true if the stream supports seeking; otherwise, false.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.NullStream.Length">
      <summary>
        <para>
       Returns the length in bytes of the stream.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.Stream.NullStream.Position">
      <summary>
        <para>
       Determines the position within the current stream.
    </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptoStream" /> class with a target data stream,
 the transformation to use, and the mode of the stream.</para>
      </summary>
      <param name="stream"> The stream on which to perform the cryptographic transformation.</param>
      <param name=" transform">The cryptographic transformation that is to be performed on the stream.</param>
      <param name=" mode">One of the <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> values.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.CryptoStream" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>
        <para> Updates the underlying data source or repository with
      the current state of the buffer, then clears the buffer.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Close">
      <summary>
        <para>Closes the current stream and releases any resources (such as sockets and 
      file handles) associated with the current stream.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>
        <para>Clears all buffers for this stream and causes any buffered data to be written 
      to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para>Sets the position within the current stream.</para>
      </summary>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name=" origin">A <see cref="T:System.IO.SeekOrigin" /> object indicating the reference point used to obtain the new position. </param>
      <returns>
        <para>This method is not supported.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>
        <para>Sets the length of the current stream.</para>
      </summary>
      <param name="value">The desired length of the current stream in bytes.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a sequence of bytes from the current <see cref="T:System.Security.Cryptography.CryptoStream" /> and advances the position within
   the stream by the number of bytes read.</para>
      </summary>
      <param name="buffer">An array of bytes. A maximum of <paramref name="count" /> bytes are read from the current stream and stored in <paramref name="buffer" />.</param>
      <param name="offset">The byte offset in <paramref name="buffer " /> at which to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>
        <para>The total number of bytes read into the buffer. This can
      be less than the number of bytes requested if that many bytes are not currently
      available, or zero if the end of the stream has been reached.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a sequence of bytes to the current <see cref="T:System.Security.Cryptography.CryptoStream" /> and advances the current position 
   within this stream by the number of bytes written.</para>
      </summary>
      <param name="buffer">An array of bytes. This method copies <paramref name="count " />bytes from <paramref name="buffer " /> to the current stream.</param>
      <param name="offset">The byte offset in <paramref name="buffer " /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>
        <para> Releases all resources used by
      the <see cref="T:System.Security.Cryptography.CryptoStream" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.CryptoStream" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Security.Cryptography.CryptoStream" /> is readable.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>
        <para>Gets a value indicating whether you can seek within the current <see cref="T:System.Security.Cryptography.CryptoStream" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Security.Cryptography.CryptoStream" /> is writable.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>
        <para>Gets the length in bytes of the stream.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>
        <para>Gets or sets the position within the current stream.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>
        <para> Represents the base class for the Data Encryption Standard (DES)
      algorithm from which all <see cref="T:System.Security.Cryptography.DES" />
      implementations must derive.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>
        <para> Represents the abstract base
 class from which all implementations of symmetric algorithms must inherit.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>
        <para> Represents the
      block size of the cryptographic operation in bits.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
      <summary>
        <para>Represents the feedback size of the cryptographic operation in bits.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>
        <para> Represents the initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) for the 
   symmetric algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>
        <para> Represents the secret key for the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>
        <para>Specifies the block sizes that are supported by the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>
        <para>Specifies the key sizes that are supported by the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>
        <para>Represents the size of the secret key used by the symmetric algorithm in bits.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue">
      <summary>
        <para>Represents the cipher mode used in the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue">
      <summary>
        <para>Represents the padding mode used in the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>
        <para>Determines whether the specified key size is valid for 
      the current algorithm.</para>
      </summary>
      <param name="bitLength">The key size in bits to check for validity</param>
      <returns>
        <para>
          <see langword="true" /> if the specified key size is valid for the current 
   algorithm; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create">
      <summary>
        <para>Creates an instance of the default
      cryptographic object used to perform the symmetric algorithm.</para>
      </summary>
      <returns>
        <para>The instance of a cryptographic object used to perform the symmetric algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)">
      <summary>
        <para>Creates an instance of
      the specified cryptographic object used to perform the symmetric algorithm.</para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use.</param>
      <returns>
        <para>The instance of a cryptographic object used to perform the symmetric algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>
        <para> Creates a symmetric encryptor object with the
      current <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
      initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <returns>
        <para>A symmetric encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>When overridden in a derived class, creates a symmetric encryptor object with the
      specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
      initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>
        <para>Creates a symmetric decryptor object with the current
   <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and 
      initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <returns>
        <para>A symmetric decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>When overridden in a derived class, creates a symmetric decryptor object with the specified
   <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
      initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>
        <para>When overridden in a derived class, generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>
        <para>When overridden in a derived class, generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>
        <para> Gets
      or sets the block size of the cryptographic operation in bits.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize">
      <summary>
        <para> Gets or sets the feedback size of the
      cryptographic operation in bits.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>
        <para> Gets or sets the initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) for the 
   symmetric algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>
        <para>Gets or sets the secret key for the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>
        <para> Gets the block sizes that are supported by the symmetric
       algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>
        <para> Gets the key sizes that are supported by the symmetric
       algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>
        <para>Gets or sets the size of the secret key used by the symmetric algorithm in bits.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
      <summary>
        <para>Gets or sets the mode for operation of the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
      <summary>
        <para>Gets or sets the padding mode used in the symmetric algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.DES" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>
        <para> Creates an instance of a cryptographic object to perform 
      the Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />) algorithm.
      </para>
      </summary>
      <returns>
        <para> A cryptographic object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>
        <para> Creates an instance of a cryptographic object to perform 
      the specified implementation of the Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />)
      algorithm.
      </para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.DES" /> to use.</param>
      <returns>
        <para> A cryptographic object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>
        <para>Determines whether the specified key is weak.</para>
      </summary>
      <param name="rgbKey">The secret key to be tested for weakness.</param>
      <returns>
        <para>
          <see langword="true" /> if the key is weak; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>
        <para>Determines whether the specified key is semi-weak.</para>
      </summary>
      <param name="rgbKey">The secret key to be tested for semi-weakness.</param>
      <returns>
        <para>
          <see langword="true" /> if the key is semi-weak; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>
        <para>Gets or sets the secret key for the Data Encryption
      Standard (<see cref="T:System.Security.Cryptography.DES" />) algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DESCryptoServiceProvider">
      <summary>
        <para>Defines a wrapper object to access the cryptographic service provider (CSP) version
 of the Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />) algorithm. This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DESCryptoServiceProvider" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric Data Encryption Standard
      (<see cref="T:System.Security.Cryptography.DES" />) encryptor object with the
      specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
      initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.DES" /> encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />) decryptor object with the
   specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
   initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.DES" /> decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey">
      <summary>
        <para>Generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DESCryptoServiceProvider.GenerateIV">
      <summary>
        <para>Generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>
        <para> Represents the abstract base class from which all classes
 that derive byte sequences of a specified length inherit.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>
        <para>When overridden in a derived class, returns pseudo-random key bytes.</para>
      </summary>
      <param name="cb">The number of pseudo-random key bytes to generate.</param>
      <returns>
        <para>A byte array filled with pseudo-random key bytes.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>
        <para>When overridden in a derived class, resets the state of the operation.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>
        <para>Contains the typical parameters for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>
        <para>Specifies the <see langword="P" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>
        <para>Specifies the <see langword="Q" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>
        <para>Specifies the <see langword="G" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>
        <para>Specifies the <see langword="Y" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>
        <para>Specifies the <see langword="J" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>
        <para>Specifies the <see langword="X" /> parameter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>
        <para>Specifies the seed for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>
        <para>Specifies the counter for the <see cref="T:System.Security.Cryptography.DSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>
        <para>Represents the abstract base class from which all implementations of the
      Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) must inherit.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>
        <para> Creates the default cryptographic object used to perform the asymmetric algorithm.
      </para>
      </summary>
      <returns>
        <para> A cryptographic object used to perform
      the asymmetric algorithm.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>
        <para> Creates the specified cryptographic object used to perform the asymmetric algorithm.</para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.DSA" /> to use.</param>
      <returns>
        <para> A cryptographic object used to perform the asymmetric algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, creates
      the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified data.</para>
      </summary>
      <param name="rgbHash">The data to be signed.</param>
      <returns>
        <para>The digital signature for the specified data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
        <para>When overridden in a derived class, verifies the <see cref="T:System.Security.Cryptography.DSA" /> signature for the
 specified data.</para>
      </summary>
      <param name="rgbHash">The hash of the data signed with <paramref name="rgbSignature" />.</param>
      <param name=" rgbSignature">The signature to be verified for <paramref name="rgbData" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="rgbSignature" /> matches the
 signature computed using the specified hash algorithm and key on <paramref name="rgbHash" />;
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>
        <para>Reconstructs a <see cref="T:System.Security.Cryptography.DSA" /> object from an XML string.</para>
      </summary>
      <param name="xmlString">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.DSA" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>
        <para>Creates and returns an XML string representation of the 
      current <see cref="T:System.Security.Cryptography.DSA" />
      object.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An XML string encoding of the current <see cref="T:System.Security.Cryptography.DSA" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>
        <para> When overridden in a derived class,
      exports the <see cref="T:System.Security.Cryptography.DSAParameters" />.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>
        <para> When overridden in a derived class,
      imports the specified <see cref="T:System.Security.Cryptography.DSAParameters" />.</para>
      </summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</param>
    </member>
    <member name="T:System.Security.Cryptography.DSACryptoServiceProvider">
      <summary>
        <para>Defines a wrapper object to access the
 cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.DSA" />
 algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> class with
   the specified key size.</para>
      </summary>
      <param name="dwKeySize">The size of the key for the asymmetric algorithm in bits.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> class
   with the specified parameters for
   the cryptographic service provider (CSP).</para>
      </summary>
      <param name="parameters">The parameters for the CSP.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> class
   with the specified key
   size and parameters for the cryptographic service provider (CSP).</para>
      </summary>
      <param name="dwKeySize">The size of the key for the cryptographic algorithm in bits.</param>
      <param name=" parameters">The parameters for the CSP.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>
        <para> Exports the <see cref="T:System.Security.Cryptography.DSAParameters" />.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>
        <para> Imports the specified <see cref="T:System.Security.Cryptography.DSAParameters" />.</para>
      </summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.IO.Stream)">
      <summary>
        <para> Computes the hash value of the
      specified input stream and signs the resulting hash value.</para>
      </summary>
      <param name="inputStream">The input data for which to compute the hash.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[])">
      <summary>
        <para> Computes the hash value of the
      specified byte array and signs the resulting hash value.</para>
      </summary>
      <param name="buffer">The input data for which to compute the hash.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Computes the hash value of a subset of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
      </summary>
      <param name="buffer">The input data for which to compute the hash.</param>
      <param name=" offset">The offset into the array from which to begin using data.</param>
      <param name=" count">The number of bytes in the array to use as data.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyData(System.Byte[],System.Byte[])">
      <summary>
        <para> Verifies the specified
      signature data by comparing it to the signature computed for the specified data.</para>
      </summary>
      <param name="rgbData">The data that was signed.</param>
      <param name=" rgbSignature">The signature data to be verified.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature verifies as
   valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.CreateSignature(System.Byte[])">
      <summary>
        <para>Creates
      the <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified data.</para>
      </summary>
      <param name="rgbHash">The data to be signed.</param>
      <returns>
        <para>The digital signature for the specified data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
        <para>Verifies the <see cref="T:System.Security.Cryptography.DSA" /> signature for the
   specified data.</para>
      </summary>
      <param name="rgbHash">The data signed with <paramref name="rgbSignature" />.</param>
      <param name=" rgbSignature">The signature to be verified for <paramref name="rgbData" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="rgbSignature" /> matches the
   signature computed using the specified hash algorithm and key on <paramref name="rgbHash" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>
        <para> Computes the signature for the specified hash value by encrypting it with the private key.
      </para>
      </summary>
      <param name="rgbHash">The hash value of the data to be signed. </param>
      <param name=" str">The name of the hash algorithm used to create the hash value of the data. </param>
      <returns>
        <para> The <see cref="T:System.Security.Cryptography.DSA" /> signature for the specified hash value.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>
        <para> Verifies the specified signature
      data by comparing it to the signature computed for the specified hash value.</para>
      </summary>
      <param name="rgbHash">The hash value of the data to be signed.</param>
      <param name=" str">The name of the hash algorithm used to create the hash value of the data.</param>
      <param name=" rgbSignature">The signature data to be verified.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature verifies as
   valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.KeyExchangeAlgorithm">
      <summary>
        <para> Gets the name of the key exchange algorithm.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.KeySize">
      <summary>
        <para> Gets the size of the key used by the asymmetric algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.LegalKeySizes">
      <summary>
        <para>Gets the key sizes that are supported by the asymmetric
 algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.SignatureAlgorithm">
      <summary>
        <para>Gets the name of the signature algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.DSACryptoServiceProvider.PersistKeyInCsp">
      <summary>
        <para>Gets or sets a value indicating whether the key should be
      persisted in the cryptographic service provider (CSP).</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>
        <para> Verifies a Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) PKCS#1 v1.5 signature.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> class with the specified key.</para>
      </summary>
      <param name="key">The instance of Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) that holds the key.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para> Specifies the key to be used for the Digital Signature 
      Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) signature deformatter.
      </para>
      </summary>
      <param name="key">The instance of <see cref="T:System.Security.Cryptography.DSA" /> that holds the key. </param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> Specifies the hash algorithm for the Digital Signature
 Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) signature deformatter.
 </para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for the signature deformatter. </param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
        <para>Verifies the Digital Signature Algorithm
      (<see cref="T:System.Security.Cryptography.DSA" />) signature on the data.</para>
      </summary>
      <param name="rgbHash">The data signed with <paramref name="rgbSignature" />.</param>
      <param name=" rgbSignature">The signature to be verified for <paramref name="rgbHash" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature is valid for the
   data; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>
        <para>Creates a Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) PKCS#1 v1.5 signature.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> class with the specified key.</para>
      </summary>
      <param name="key">The instance of the Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) that holds the key.</param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para> Specifies the key to be used for the Digital Signature 
      Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) signature formatter.
      </para>
      </summary>
      <param name="key">The instance of <see cref="T:System.Security.Cryptography.DSA" /> that holds the key. </param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> Specifies the hash algorithm for the Digital Signature
 Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) signature formatter.
 </para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for the signature formatter. </param>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
        <para>Creates the Digital Signature Algorithm (<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 signature for the specified data.</para>
      </summary>
      <param name="rgbHash">The data to be signed.</param>
      <returns>
        <para>The digital signature for the specified data.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>
        <para> Computes a Hash-based Message Authentication Code
 (HMAC) using the <see cref="T:System.Security.Cryptography.SHA1" /> hash
 function.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>
        <para> Represents
 the abstract class from
 which all implementations of keyed hash algorithms must derive.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>
        <para> Represents the base class
 from which all implementations of cryptographic hash algorithms must derive.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>
        <para> Represents the size of the computed hash code in bits.
      </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>
        <para> Represents the value of the computed hash code.
      </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>
        <para> Represents the state of the hash computation.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.HashAlgorithm" />.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create">
      <summary>
        <para> Creates an instance of the default implementation of
   <see cref="T:System.Security.Cryptography.HashAlgorithm" />.
      </para>
      </summary>
      <returns>
        <para> An instance of a cryptographic object to perform the hash algorithm.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)">
      <summary>
        <para> Creates an instance of the specified implementation
      of <see cref="T:System.Security.Cryptography.HashAlgorithm" />.
      </para>
      </summary>
      <param name="hashName">The implementation of <see cref="T:System.Security.Cryptography.HashAlgorithm" /> to create.</param>
      <returns>
        <para> An instance of a cryptographic object to perform the hash algorithm.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>
        <para> Computes the hash value for the specified <see cref="T:System.IO.Stream" />.</para>
      </summary>
      <param name="inputStream">The input for which to compute the hash code.</param>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>
        <para>Computes the hash value for the specified byte array.</para>
      </summary>
      <param name="buffer">The input for which to compute the hash code.</param>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Computes the hash value for the specified region of the specified byte array.</para>
      </summary>
      <param name="buffer">The input for which to compute the hash code.</param>
      <param name=" offset">The offset into the byte array from which to begin using data.</param>
      <param name=" count">The number of bytes in the array to use as data.</param>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
        <para> Computes the hash value for the specified region of the 
      input byte array and copies the resulting hash value to the specified region of
      the output byte array.</para>
      </summary>
      <param name="inputBuffer">The input for which to compute the hash code.</param>
      <param name=" inputOffset">The offset into the input byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the input byte array to use as data.</param>
      <param name=" outputBuffer">The output to which to write the hash code.</param>
      <param name=" outputOffset">The offset into the output byte array from which to begin writing data.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> Computes the hash value for the specified region of the
      specified byte array.</para>
      </summary>
      <param name="inputBuffer">The input for which to compute the hash code.</param>
      <param name=" inputOffset">The offset into the byte array from which to begin using data.</param>
      <param name=" inputCount">The number of bytes in the byte array to use as data.</param>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>
        <para> Releases all resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>
        <para>Initializes an implementation of <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para> When overridden in a derived class,
      routes data written to the object into the hash algorithm for computing the hash.</para>
      </summary>
      <param name="array">The input for which to compute the hash code.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the byte array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>
        <para> When overridden in a derived class, finalizes the hash
      computation after the last data is processed by the cryptographic stream object. </para>
      </summary>
      <returns>
        <para> The computed hash code.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>
        <para>Gets the size of the computed hash code in bits. </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>
        <para>Gets the value of the computed hash code. </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>
        <para>When overridden in a derived class, gets the input block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>
        <para>When overridden in a derived class, gets the output block size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>
        <para>When overridden in a derived class, gets a value 
      indicating whether multiple blocks can be transformed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>
        <para>Gets a value indicating whether the current transform
      can be reused.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>
        <para> The key to be used in the hash algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create">
      <summary>
        <para>Creates
 an instance of the default implementation of a keyed hash algorithm.</para>
      </summary>
      <returns>
        <para>A new instance of a keyed hash algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)">
      <summary>
        <para> Creates an instance of the specified implementation of a keyed hash algorithm.</para>
      </summary>
      <param name="algName">The name of the keyed hash algorithm implementation to use.</param>
      <returns>
        <para>A new instance of the specified keyed hash algorithm.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>
        <para> Gets or sets the key to be used in the hash algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" /> class 
   with a randomly generated key.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACSHA1" />
class with the specified key data.</para>
      </summary>
      <param name="rgbKey">The secret key for <see cref="T:System.Security.Cryptography.HMACSHA1" /> encryption.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HMACSHA1" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.HMACSHA1" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA1" /> hash algorithm for computing the 
   Hash-based Message Authentication Code
   (HMAC).</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name="ib">The offset into the byte array from which to begin using data.</param>
      <param name="cb">The number of bytes in the array to use as data</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>
        <para> Returns the computed Hash-based Message Authentication Code (HMAC) after all data has
      been written to the object.</para>
      </summary>
      <returns>
        <para> The computed HMAC.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.HMACSHA1" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>
        <para>Gets or sets the key to be used in the hash algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.HashName">
      <summary>
        <para>Gets or sets the name of the <see cref="T:System.Security.Cryptography.SHA1" /> implementation to use for the Hash-based Message Authentication Code (HMAC)
 computation.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.MACTripleDES">
      <summary>
        <para>Computes a Message Authentication Code (MAC)
 using <see cref="T:System.Security.Cryptography.TripleDES" /> for the input data <see cref="T:System.Security.Cryptography.CryptoStream" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MACTripleDES" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MACTripleDES" />
class with the specified key
data.</para>
      </summary>
      <param name="rgbKey">The secret key for <see cref="T:System.Security.Cryptography.MACTripleDES" /> encryption.</param>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MACTripleDES" /> class
 with the specified key data using the specified implementation of <see cref="T:System.Security.Cryptography.TripleDES" />.</para>
      </summary>
      <param name=" strTripleDES">The name of the <see cref="T:System.Security.Cryptography.TripleDES" /> implementation to use.</param>
      <param name="rgbKey">The secret key for <see cref="T:System.Security.Cryptography.MACTripleDES" /> encryption.</param>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.MACTripleDES" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.MACTripleDES" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.TripleDES" />
encryptor for computing the Message Authentication Code
(MAC).</para>
      </summary>
      <param name="rgbData">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.HashFinal">
      <summary>
        <para> Returns the computed Message Authentication Code (MAC) after all data
      is written to the object.</para>
      </summary>
      <returns>
        <para> The computed MAC.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MACTripleDES.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.MACTripleDES" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>
        <para>Represents the abstract class from which all
 implementations of the <see cref="T:System.Security.Cryptography.MD5" />
 hash algorithm inherit.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.MD5" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>
        <para>Creates an instance of the default implementation of
      the <see cref="T:System.Security.Cryptography.MD5" /> hash algorithm.</para>
      </summary>
      <returns>
        <para>A new instance of the <see cref="T:System.Security.Cryptography.MD5" /> hash algorithm.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>
        <para>Creates an instance of 
       the specified implementation of the <see cref="T:System.Security.Cryptography.MD5" /> hash algorithm.</para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.MD5" /> to use.</param>
      <returns>
        <para>A new instance of the specified implementation of <see cref="T:System.Security.Cryptography.MD5" />.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5CryptoServiceProvider">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.MD5" /> hash for the input data using
   the implementation provided by the cryptographic service provider (CSP).</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> 
 class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.MD5" />
hash algorithm for computing the
hash.</para>
      </summary>
      <param name="rgb">The array of data bytes.</param>
      <param name="ibStart">The offset into the byte array from which to begin using data.</param>
      <param name="cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.MD5CryptoServiceProvider.HashFinal">
      <summary>
        <para>Returns the computed <see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /> hash as an array of bytes after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para>The computed hash value.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>
        <para> Represents
      the abstract
      class from which all mask generator algorithms must derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>
        <para>When overridden in a derived class, generates a mask with the specified length using the specified random seed.</para>
      </summary>
      <param name="rgbSeed">The random seed to use to compute the mask.</param>
      <param name=" cbReturn">The length of the generated mask in bytes.</param>
      <returns>
        <para>A randomly generated mask whose length is equal to the 
   <paramref name="cbReturn" />
   parameter.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.PasswordDeriveBytes">
      <summary>
        <para>Derives a key from a password.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key 
   salt to use to derive the key.</para>
      </summary>
      <param name="strPassword">The password for which to derive the key.</param>
      <param name=" rgbSalt">The key salt to use to derive the key.</param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class 
   with the
   password, key salt, hash name, and number
   of iterations to use to derive the key.</para>
      </summary>
      <param name="strPassword">The password for which to derive the key.</param>
      <param name=" rgbSalt">The key salt to use to derive the key.</param>
      <param name=" strHashName">The name of the hash algorithm for the operation.</param>
      <param name=" iterations">The number of iterations for the operation.</param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class 
   with the password, key salt, and cryptographic service provider
   (CSP) parameters to use to derive the key.</para>
      </summary>
      <param name="strPassword">The password for which to derive the key.</param>
      <param name=" rgbSalt">The key salt to use to derive the key.</param>
      <param name=" cspParams">The CSP parameters for the operation.</param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class 
   with the password, key salt, hash name, number of iterations, and cryptographic service provider
   (CSP) parameters to use to derive the key. </para>
      </summary>
      <param name="strPassword">The password for which to derive the key.</param>
      <param name=" rgbSalt">The key salt to use to derive the key.</param>
      <param name=" strHashName">The name of the hash algorithm for the operation.</param>
      <param name=" iterations">The number of iterations for the operation.</param>
      <param name=" cspParams">The CSP parameters for the operation.</param>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.Finalize">
      <summary>
        <para>Releases any acquired cryptographic service provider
      (CSP) before the object is destroyed.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
      <summary>
        <para>Returns pseudo-random key bytes.</para>
      </summary>
      <param name="cb">The number of pseudo-random key bytes to generate.</param>
      <returns>
        <para>A byte array filled with pseudo-random key bytes.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.Reset">
      <summary>
        <para>Resets the state of the operation.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>
        <para>Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</para>
      </summary>
      <param name="algname">The algorithm name for which to derive the key.</param>
      <param name=" alghashname">The hash algorithm name to use to derive the key.</param>
      <param name=" keySize">The size of the key to derive.</param>
      <param name=" rgbIV">The initialization vector (IV) to use to derive the key.</param>
      <returns>
        <para>The derived key.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.HashName">
      <summary>
        <para>Gets or sets the name of the hash algorithm for the operation.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount">
      <summary>
        <para>Gets or sets the number of iterations for the operation.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.PasswordDeriveBytes.Salt">
      <summary>
        <para>Gets or sets the key salt value for the operation.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>
        <para> Computes masks according to PKCS #1 for use by key exchange
      algorithms.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>
        <para>Generates and returns a mask from the specified random seed of the specified
      length.</para>
      </summary>
      <param name="rgbSeed">The random seed to use for computing the mask.</param>
      <param name=" cbReturn">The length of the generated mask in bytes.</param>
      <returns>
        <para> A randomly generated mask whose length is equal to the 
   <paramref name="cbReturn" />
   parameter.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>
        <para> Gets or sets the name of the hash algorithm type to use for
 generating the mask.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>
        <para> Represents the base class from which all implementations
      of the <see cref="T:System.Security.Cryptography.RC2" />
      algorithm must derive.
      </para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>
        <para>Represents the effective size of the secret key used by the <see cref="T:System.Security.Cryptography.RC2" /> algorithm in bits.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.RC2" />.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>
        <para> Creates an instance of a cryptographic object to perform 
      the <see cref="T:System.Security.Cryptography.RC2" /> algorithm.
      </para>
      </summary>
      <returns>
        <para> An instance of a cryptographic object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>
        <para> Creates an instance of a cryptographic object to perform the specified
      implementation of the <see cref="T:System.Security.Cryptography.RC2" />
      algorithm.
      </para>
      </summary>
      <param name="AlgName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.RC2" /> to use.</param>
      <returns>
        <para> An instance of a cryptographic object.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>
        <para> Gets or sets the effective size of the secret key 
      used by the <see cref="T:System.Security.Cryptography.RC2" /> algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>
        <para> Gets or sets the size of the secret key used by 
      the <see cref="T:System.Security.Cryptography.RC2" /> algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RC2CryptoServiceProvider">
      <summary>
        <para>Defines a wrapper object to access the cryptographic
 service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.RC2" /> algorithm. This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.RC2" /> encryptor object
   with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
   initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.RC2" /> encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.RC2" /> decryptor object with the
 specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
 initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.RC2" /> decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey">
      <summary>
        <para>Generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV">
      <summary>
        <para>Generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize">
      <summary>
        <para> Gets or sets the effective size of the secret key
      used by the <see cref="T:System.Security.Cryptography.RC2" /> algorithm in bits.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
      <summary>
        <para> Implements a
      cryptographic Random Number Generator (RNG) using the implementation
      provided by the cryptographic service provider (CSP).</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>
        <para> Represents the abstract class from which all implementations
       of cryptographic random number generators derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>
        <para>Creates an instance of the default implementation of a cryptographic random number generator that can be used to
       generate random data.</para>
      </summary>
      <returns>
        <para>A new instance of a cryptographic random number generator.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>
        <para> Creates an instance of the
       specified implementation of a cryptographic random number generator.</para>
      </summary>
      <param name="rngName">The name of the random number generator implementation to use.</param>
      <returns>
        <para>A new instance of a cryptographic random number generator.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of
      values.</para>
      </summary>
      <param name="data">The array to fill with cryptographically strong random bytes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, fills
      an array of bytes with a cryptographically strong random sequence of nonzero
      values.</para>
      </summary>
      <param name="data">The array to fill with cryptographically strong random nonzero bytes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 
 class.</para>
      </summary>
      <returns>
        <para> The newly created instance of <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 
 class.</para>
      </summary>
      <param name="str">The string input.</param>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 
 class.</para>
      </summary>
      <param name="rgb">A byte array.</param>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" />
class with the specified
parameters.</para>
      </summary>
      <param name="cspParams">The parameters to be passed to the cryptographic service provider (CSP).</param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.Finalize">
      <summary>
        <para> Releases any acquired cryptographic service provider
      (CSP) before the object is destroyed.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
      <summary>
        <para>Fills an array of bytes with a cryptographically strong random sequence of
      values.</para>
      </summary>
      <param name="data">The array to fill with cryptographically strong random bytes.</param>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])">
      <summary>
        <para>Fills
      an array of bytes with a cryptographically strong random sequence of nonzero
      values.</para>
      </summary>
      <param name="data">The array to fill with cryptographically strong random nonzero bytes.</param>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>
        <para>Represents the standard parameters for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>
        <para>Represents the <see langword="Exponent" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>
        <para>Represents the <see langword="Modulus" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>
        <para>Represents the <see langword="P" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>
        <para>Represents the <see langword="Q" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>
        <para>Represents the <see langword="DP" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>
        <para>Represents the <see langword="DQ" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>
        <para>Represents the <see langword="InverseQ" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>
        <para>Represents the <see langword="D" /> parameter for the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>
        <para> Represents
 the base class from which all implementations of
 the <see cref="T:System.Security.Cryptography.RSA" />
 algorithm
 inherit.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>
        <para>Creates an instance of the default implementation of 
       the <see cref="T:System.Security.Cryptography.RSA" /> algorithm.</para>
      </summary>
      <returns>
        <para>A new instance of the default implementation of <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>
        <para>Creates an instance of 
       the specified implementation of <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
      <param name="algName">The name of the implementation of <see cref="T:System.Security.Cryptography.RSA" /> to use.</param>
      <returns>
        <para>A new instance of the specified implementation of 
    <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>
        <para>When overridden in a derived class, decrypts the input data using the private
      key.</para>
      </summary>
      <param name="rgb">The cipher text to be decrypted.</param>
      <returns>
        <para>The resulting decryption of the <paramref name="rgb" /> parameter in plain text.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>
        <para> When overridden in a derived class, encrypts the input data using the public
      key.</para>
      </summary>
      <param name="rgb">The plain text to be encrypted.</param>
      <returns>
        <para>The resulting encryption of the <paramref name="rgb" /> parameter as cipher text.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>
        <para>Reconstructs an <see cref="T:System.Security.Cryptography.RSA" /> object from an XML string.</para>
      </summary>
      <param name="xmlString">The XML string to use to reconstruct the <see cref="T:System.Security.Cryptography.RSA" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>
        <para>Creates and returns an XML string representation of the 
      current <see cref="T:System.Security.Cryptography.RSA" />
      object.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An XML string encoding of the current <see cref="T:System.Security.Cryptography.RSA" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>
        <para> When overridden in a derived class,
      exports the <see cref="T:System.Security.Cryptography.RSAParameters" />.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The parameters for <see cref="T:System.Security.Cryptography.DSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>
        <para> When overridden in a derived class,
      imports the specified <see cref="T:System.Security.Cryptography.RSAParameters" />.</para>
      </summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.RSA" />.</param>
    </member>
    <member name="T:System.Security.Cryptography.RSACryptoServiceProvider">
      <summary>
        <para>Performs asymmetric encryption and decryption using the
 implementation of the <see cref="T:System.Security.Cryptography.RSA" />
 algorithm provided by the cryptographic service
 provider (CSP). This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class
   using the default key.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class with the specified key size.</para>
      </summary>
      <param name="dwKeySize">The size of the key to use in bits.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class with the specified parameters.</para>
      </summary>
      <param name="parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> class
   with the specified key size and parameters.</para>
      </summary>
      <param name="dwKeySize">The size of the key to use in bits.</param>
      <param name=" parameters">The parameters to be passed to the cryptographic service provider (CSP).</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>
        <para> Exports the <see cref="T:System.Security.Cryptography.RSAParameters" />.</para>
      </summary>
      <param name="includePrivateParameters">
        <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</param>
      <returns>
        <para>The parameters for <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>
        <para> Imports the specified <see cref="T:System.Security.Cryptography.RSAParameters" />.</para>
      </summary>
      <param name="parameters">The parameters for <see cref="T:System.Security.Cryptography.RSA" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)">
      <summary>
        <para>Computes the hash value of the specified input stream using the
      specified hash algorithm, and signs the resulting hash value.</para>
      </summary>
      <param name="inputStream">The input data for which to compute the hash.</param>
      <param name=" halg">The hash algorithm to use to create the hash value.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
      <summary>
        <para>Computes the hash value of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
      </summary>
      <param name="buffer">The input data for which to compute the hash.</param>
      <param name=" halg">The hash algorithm to use to create the hash value.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>
        <para>Computes the hash value of a subset of the specified byte array using the
      specified hash algorithm, and signs the resulting hash value.</para>
      </summary>
      <param name="buffer">The input data for which to compute the hash.</param>
      <param name=" offset">The offset into the array from which to begin using data.</param>
      <param name=" count">The number of bytes in the array to use as data.</param>
      <param name=" halg">The hash algorithm to use to create the hash value.</param>
      <returns>
        <para>The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified
   data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
      <summary>
        <para> Verifies the specified
 signature data by comparing it to the signature computed for the specified data.</para>
      </summary>
      <param name="buffer">The data that was signed.</param>
      <param name=" halg">The name of the hash algorithm used to create the hash value of the data.</param>
      <param name=" signature">The signature data to be verified.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature verifies as
 valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>
        <para> Computes the signature for the specified hash value by encrypting it with the private key.
      </para>
      </summary>
      <param name="rgbHash">The hash value of the data to be signed. </param>
      <param name=" str">The name of the hash algorithm used to create the hash value of the data. </param>
      <returns>
        <para> The <see cref="T:System.Security.Cryptography.RSA" /> signature for the specified hash value.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>
        <para> Verifies the specified signature
 data by comparing it to the signature computed for the specified hash value.</para>
      </summary>
      <param name="rgbHash">The hash value of the data to be signed.</param>
      <param name=" str">The name of the hash algorithm used to create the hash value of the data.</param>
      <param name=" rgbSignature">The signature data to be verified.</param>
      <returns>
        <para>
          <see langword="true" /> if the signature verifies as
 valid; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
      <summary>
        <para>Encrypts data with the <see cref="T:System.Security.Cryptography.RSA" />
algorithm.</para>
      </summary>
      <param name="rgb">The data to be encrypted.</param>
      <param name=" fOAEP">
        <see langword="true" /> to perform direct <see cref="T:System.Security.Cryptography.RSA" /> encryption using OAEP padding (only available on a computer running Microsoft Windows 2000 with the high encryption pack installed); otherwise, <see langword="false" /> to use PKCS#1 v1.5 padding.</param>
      <returns>
        <para>The encrypted data; the encrypted data will be OAEP-padded
      if the <paramref name="fOAEP" /> parameter is <see langword="true" /> and the encryption is performed
      on a computer running Windows 2000 with the high encryption pack installed.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
      <summary>
        <para> Decrypts data with the <see cref="T:System.Security.Cryptography.RSA" />
algorithm.</para>
      </summary>
      <param name="rgb">The data to be decrypted.</param>
      <param name=" fOAEP">
        <see langword="true" /> to perform direct <see cref="T:System.Security.Cryptography.RSA" /> decryption using OAEP padding (only available on a computer running Microsoft Windows 2000 with the high encryption pack installed); otherwise, <see langword="false" /> to use PKCS#1 v1.5 padding.</param>
      <returns>
        <para>The decrypted data, which is the original plain text before encryption.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
      <summary>
        <para>This method is not supported in the current version.</para>
      </summary>
      <param name="rgb">The data to be decrypted.</param>
      <returns>
        <para>The decrypted data, which is the original plain text before encryption.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
      <summary>
        <para>This method is not supported in the current version.</para>
      </summary>
      <param name="rgb">The data to be encrypted.</param>
      <returns>
        <para>The encrypted data.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize">
      <summary>
        <para> Gets the size of the current key.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm">
      <summary>
        <para> Gets the name of the key exchange algorithm
      available with this implementation of <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm">
      <summary>
        <para>Gets the name of the signature algorithm available
 with this implementation of <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp">
      <summary>
        <para>Gets or sets a value indicating whether the key should be
      persisted in the cryptographic service provider (CSP).</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>
        <para> Decrypts
      Optimal Asymmetric Encryption Padding (OAEP) key exchange data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 
 class with the specified key.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the private key.</param>
      <returns>
        <para> The newly created instance of <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
        <para>Extracts
       secret information from the encrypted key exchange data.</para>
      </summary>
      <param name="rgbData">The key exchange data within which the secret information is hidden.</param>
      <returns>
        <para>The secret information derived from the key exchange data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the private key to use for decrypting the secret information.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the private key.</param>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>
        <para> Gets the parameters for the Optimal Asymmetric Encryption Padding (OAEP) key exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>
        <para> Creates Optimal Asymmetric Encryption Padding (OAEP)
      key exchange data using <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />
class with the specified key.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the public key to use for encrypting the key exchange data.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
        <para>Creates the encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="rgbData">The secret information to be passed in the key exchange.</param>
      <returns>
        <para> The encrypted
      key exchange data to be sent to the intended recipient.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
        <para>Creates the encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="rgbData">The secret information to be passed in the key exchange.</param>
      <param name=" symAlgType">This parameter is not used in the current version.</param>
      <returns>
        <para> The encrypted
      key exchange data to be sent to the intended recipient.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>
        <para>Gets or sets the random number generator algorithm to use in the creation of the key
      exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>
        <para> Decrypts
      the PKCS #1 key exchange data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 
 class with the specified key.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the private key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>
        <para>Extracts
       secret information from the encrypted key exchange data.</para>
      </summary>
      <param name="rgbIn">The key exchange data within which the secret information is hidden.</param>
      <returns>
        <para>The secret information derived from the key exchange data.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the private key to use for decrypting the secret information.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" />algorithm that holds the private key.</param>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>
        <para>Gets or sets the random number generator algorithm to use in the creation of the key exchange.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>
        <para> Gets the parameters for
      the PKCS #1 key exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>
        <para>Creates the PKCS#1 key exchange data using <see cref="T:System.Security.Cryptography.RSA" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 
 class with the specified key.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" />algorithm that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the public key to use for encrypting the key exchange data.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" />algorithm that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>
        <para>Creates the encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="rgbData">The secret information to be passed in the key exchange.</param>
      <returns>
        <para> The encrypted
      key exchange data to be sent to the intended recipient.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>
        <para>Creates the encrypted key exchange data from the specified input data.</para>
      </summary>
      <param name="rgbData">The secret information to be passed in the key exchange.</param>
      <param name=" symAlgType">This parameter is not used in the current version.</param>
      <returns>
        <para> The encrypted
      key exchange data to be sent to the intended recipient.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>
        <para> Gets the parameters for the PKCS #1 key exchange.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>
        <para>Gets or sets the random number generator algorithm to use in the creation of the
       key exchange.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>
        <para> Verifies an <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 
   version 1.5 signature.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 
 class with the specified key.</para>
      </summary>
      <param name="key">The instance of <see cref="T:System.Security.Cryptography.RSA" /> that holds the public key.</param>
      <returns>
        <para> The newly created instance of <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the public key to use for verifying the signature.</para>
      </summary>
      <param name="key">The instance of <see cref="T:System.Security.Cryptography.RSA" /> that holds the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> Sets the hash algorithm to use for verifying the signature.</para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for verifying the signature.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
        <para>Verifies the <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 signature for the specified data.</para>
      </summary>
      <param name="rgbHash">The data signed with <paramref name="rgbSignature" />.</param>
      <param name=" rgbSignature">The signature to be verified for <paramref name="rgbHash" />.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="rgbSignature" /> matches the signature computed using the
   specified hash algorithm and key on <paramref name="rgbHash" />;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>
        <para>Creates an <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 
   version 1.5 signature.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 
 class with the specified key.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" /> algorithm that holds the private key.</param>
      <returns>
        <para> The newly created instance of <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Sets the private key to use for creating the signature.</para>
      </summary>
      <param name="key">The instance of the <see cref="T:System.Security.Cryptography.RSA" />algorithm that holds the private key.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>
        <para> Sets the hash algorithm to use for creating the signature.</para>
      </summary>
      <param name="strName">The name of the hash algorithm to use for creating the signature.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>
        <para>Creates the <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 signature for the specified
   data.</para>
      </summary>
      <param name="rgbHash">The data to be signed.</param>
      <returns>
        <para>The digital signature for <paramref name="rgbHash" />.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>
        <para>Represents the base class from which all implementations 
      of the <see cref="T:System.Security.Cryptography.Rijndael" /> symmetric encryption algorithm must inherit.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.Rijndael" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>
        <para> Creates a cryptographic object to perform
      the <see cref="T:System.Security.Cryptography.Rijndael" /> algorithm.</para>
      </summary>
      <returns>
        <para> A cryptographic object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>
        <para> Creates a cryptographic object to perform the specified implementation of
      the <see cref="T:System.Security.Cryptography.Rijndael" /> algorithm.</para>
      </summary>
      <param name="algName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.Rijndael" /> to create.</param>
      <returns>
        <para> A cryptographic object.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>
        <para> Accesses the managed version
 of the <see cref="T:System.Security.Cryptography.Rijndael" /> algorithm. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.RijndaelManaged" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael" /> encryptor object
 with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
 initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV"> The IV to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.Rijndael" /> encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael" /> decryptor object
 with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
 initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV"> The IV to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.Rijndael" /> decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>
        <para>Generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>
        <para>Generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.SHA1" /> hash for the input data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA1" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>
        <para>Creates an instance of the default implementation of
   <see cref="T:System.Security.Cryptography.SHA1" />.</para>
      </summary>
      <returns>
        <para>A new instance of <see cref="T:System.Security.Cryptography.SHA1" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>
        <para> Creates an instance of the specified implementation of
   <see cref="T:System.Security.Cryptography.SHA1" />.</para>
      </summary>
      <param name="hashName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.SHA1" /> to be used.</param>
      <returns>
        <para> A new instance of <see cref="T:System.Security.Cryptography.SHA1" /> using the specified
   implementation.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1CryptoServiceProvider">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.SHA1" /> hash for the input data using
 the implementation provided by the cryptographic service provider (CSP). This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.Dispose(System.Boolean)">
      <summary>
        <para> Releases the unmanaged resources used by
      the <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> and optionally releases the
      managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.Finalize">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA1" />
hash algorithm for computing the
hash.</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1CryptoServiceProvider.HashFinal">
      <summary>
        <para>Returns the computed <see cref="T:System.Security.Cryptography.SHA1" /> hash value after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para> The computed hash value.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>
        <para> Computes the <see cref="T:System.Security.Cryptography.SHA1" /> hash for the input data using
   the managed library.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA1Managed" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.SHA1Managed" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA1Managed" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA1Managed" /> 
 hash algorithm for computing the
 hash.</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>
        <para> Returns the computed <see cref="T:System.Security.Cryptography.SHA1" /> hash value after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.SHA256" /> hash for the input data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA256" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>
        <para>Creates an instance of the default implementation of
      <see cref="T:System.Security.Cryptography.SHA256" />.</para>
      </summary>
      <returns>
        <para>A new instance of <see cref="T:System.Security.Cryptography.SHA256" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>
        <para>Creates an instance of a specified implementation of
   <see cref="T:System.Security.Cryptography.SHA256" />.</para>
      </summary>
      <param name="hashName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.SHA256" /> to be used.</param>
      <returns>
        <para> A new instance of <see cref="T:System.Security.Cryptography.SHA256" /> using the specified
   implementation.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>
        <para> Computes the <see cref="T:System.Security.Cryptography.SHA256" /> hash for the input data using
   the managed library.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA256Managed" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.SHA256Managed" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA256Managed" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA256Managed" />
hash algorithm for computing the
hash.</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>
        <para> Returns the computed <see cref="T:System.Security.Cryptography.SHA256Managed" /> hash value after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.SHA384" /> hash for the input data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA384" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>
        <para>Creates an instance of the default implementation of
      <see cref="T:System.Security.Cryptography.SHA384" />.</para>
      </summary>
      <returns>
        <para>A new instance of <see cref="T:System.Security.Cryptography.SHA384" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>
        <para>Creates an instance of a specified implementation of
   <see cref="T:System.Security.Cryptography.SHA384" />.</para>
      </summary>
      <param name="hashName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.SHA384" /> to be used.</param>
      <returns>
        <para> A new instance of <see cref="T:System.Security.Cryptography.SHA384" /> using the specified
   implementation.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>
        <para> Computes the <see cref="T:System.Security.Cryptography.SHA384" /> hash for the input data using
   the managed library. </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA384Managed" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.SHA384Managed" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA384Managed" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA384Managed" />
hash algorithm for computing the
hash.</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.HashFinal">
      <summary>
        <para> Returns the computed <see cref="T:System.Security.Cryptography.SHA384Managed" /> hash value after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>
        <para>Computes the <see cref="T:System.Security.Cryptography.SHA512" /> hash for the input data.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.SHA512" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>
        <para>Creates an instance of the default implementation of
      <see cref="T:System.Security.Cryptography.SHA512" />.</para>
      </summary>
      <returns>
        <para>A new instance of <see cref="T:System.Security.Cryptography.SHA512" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>
        <para>Creates an instance of a specified implementation of
   <see cref="T:System.Security.Cryptography.SHA512" />.</para>
      </summary>
      <param name="hashName">The name of the specific implementation of <see cref="T:System.Security.Cryptography.SHA512" /> to be used.</param>
      <returns>
        <para> A new instance of <see cref="T:System.Security.Cryptography.SHA512" /> using the specified
   implementation.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>
        <para> Computes the <see cref="T:System.Security.Cryptography.SHA512" /> hash for the input data using
   the managed library. </para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SHA512Managed" /> class.</para>
      </summary>
      <returns>
        <para>The newly created instance of <see cref="T:System.Security.Cryptography.SHA512Managed" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>
        <para>Initializes an instance of <see cref="T:System.Security.Cryptography.SHA512Managed" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Routes data written to the object into the <see cref="T:System.Security.Cryptography.SHA512Managed" />
hash algorithm for computing the
hash.</para>
      </summary>
      <param name="rgb">The input data.</param>
      <param name=" ibStart">The offset into the byte array from which to begin using data.</param>
      <param name=" cbSize">The number of bytes in the array to use as data.</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.HashFinal">
      <summary>
        <para> Returns the computed <see cref="T:System.Security.Cryptography.SHA512Managed" /> hash value after all data has
   been written to the object.</para>
      </summary>
      <returns>
        <para>The computed hash code.</para>
      </returns>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>
        <para>Contains information about the properties of a digital signature.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SignatureDescription" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SignatureDescription" /> class
 from the specified <see cref="T:System.Security.SecurityElement" />.</para>
      </summary>
      <param name="el">The <see cref="T:System.Security.SecurityElement" /> from which to get the algorithms for the signature description.</param>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Creates an <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> instance with the
 specified key using the <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> property.</para>
      </summary>
      <param name="key">The key to use in the <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</param>
      <returns>
        <para>The newly created <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <para>Creates an <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> instance with the
 specified key using the <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> property.</para>
      </summary>
      <param name="key">The key to use in the <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</param>
      <returns>
        <para>The newly created <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> instance.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>
        <para> Creates a <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance using 
 the <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> property.</para>
      </summary>
      <returns>
        <para>The newly created <see cref="T:System.Security.Cryptography.HashAlgorithm" /> instance.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>
        <para> Gets or sets the key algorithm for the signature description.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>
        <para>Gets or sets the digest algorithm for the signature description.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>
        <para>Gets or sets the formatter algorithm for the signature description.</para>
      </summary>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>
        <para>Gets or sets the deformatter algorithm for the signature description.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>
        <para>Represents the base class for Triple Data Encryption
 Standard algorithms from which all <see cref="T:System.Security.Cryptography.TripleDES" />
 implementations must derive.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Cryptography.TripleDES" />.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>
        <para> Creates an instance of a cryptographic object to perform 
      the <see cref="T:System.Security.Cryptography.TripleDES" /> algorithm.
      </para>
      </summary>
      <returns>
        <para> An instance of a cryptographic object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>
        <para> Creates an instance of a cryptographic object to perform
      the specified implementation of the <see cref="T:System.Security.Cryptography.TripleDES" />
      algorithm.
      </para>
      </summary>
      <param name="str">The name of the specific implementation of <see cref="T:System.Security.Cryptography.TripleDES" /> to use.</param>
      <returns>
        <para> An instance of a cryptographic object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>
        <para>Determines whether the specified key is weak.</para>
      </summary>
      <param name="rgbKey">The secret key to be tested for weakness.</param>
      <returns>
        <para>
          <see langword="true" /> if the key is weak; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>
        <para>Gets or sets the secret key for the <see cref="T:System.Security.Cryptography.TripleDES" /> algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCryptoServiceProvider">
      <summary>
        <para>Defines a wrapper object to access the cryptographic
      service provider (CSP) version of the <see cref="T:System.Security.Cryptography.TripleDES" /> algorithm. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Cryptography.TripleDESCryptoServiceProvider" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.TripleDES" /> encryptor object
   with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
   initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.TripleDES" /> encryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
        <para>Creates a symmetric <see cref="T:System.Security.Cryptography.TripleDES" /> decryptor object
   with the specified <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> and
   initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</para>
      </summary>
      <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
      <param name=" rgbIV">The initialization vector to be used for the symmetric algorithm.</param>
      <returns>
        <para>A symmetric <see cref="T:System.Security.Cryptography.TripleDES" /> decryptor object.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateKey">
      <summary>
        <para>Generates a random <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCryptoServiceProvider.GenerateIV">
      <summary>
        <para>Generates a random initialization vector (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) to be used for the algorithm.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.AllMembershipCondition">
      <summary>
        <para>Represents a membership condition that matches all code.
 This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.IMembershipCondition">
      <summary>
        <para> 
      Defines the test to determine whether a code assembly is a member of
      a code group.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>
        <para> 
       Defines the
       methods that convert permission object state to and from
       XML element representation.</para>
      </summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>
        <para>Creates an XML encoding of the security object and its current
       state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state
       information.</para>
      </returns>
      <summary>
        <para>Creates an XML encoding of the security object and its current
       state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state
       information.</para>
      </returns>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML
       encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="T:System.Security.ISecurityPolicyEncodable">
      <summary>
        <para> Supports the methods that
       convert permission object state to and from an XML element representation.</para>
      </summary>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para>Creates an XML encoding of the security object and its current state.</para>
      </summary>
      <param name="level"> The policy-level context to resolve named permission set references.</param>
      <returns>
        <para>The root element of the XML representation of the policy object.</para>
      </returns>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name=" level">The policy-level context to resolve named permission set references.</param>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The evidence set against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence
   satisfies the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A string representation of the state of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Equals(System.Object)">
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.AllMembershipCondition" />
 class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the specified evidence satisfies the membership condition.</para>
      </summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>
        <para>Always <see langword="true" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Copy">
      <summary>
        <para>Creates an equivalent copy of the membership condition.</para>
      </summary>
      <returns>
        <para>A new, identical copy of the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToString">
      <summary>
        <para>Creates and returns a string representation of the membership condition.</para>
      </summary>
      <returns>
        <para>A representation of the membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml">
      <summary>
        <para>Creates an XML encoding of the security object and its current
       state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state
       information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its 
      current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />
      .</para>
      </summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>
        <para>An XML encoding of the security object, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
 encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context used to resolve named permission set references.</param>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified membership condition is
      an <see cref="T:System.Security.Policy.AllMembershipCondition" />.</para>
      </summary>
      <param name="o"> The object to compare to <see cref="T:System.Security.Policy.AllMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified membership condition is an <see cref="T:System.Security.Policy.AllMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectory">
      <summary>
        <para> Provides the application directory as evidence for policy evaluation. This class cannot
      be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationDirectory" />
class.</para>
      </summary>
      <param name="name">The path of the application directory.</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Equals(System.Object)">
      <summary>
        <para>Determines whether instances of the same type of an evidence object are equivalent.</para>
      </summary>
      <param name="o">An object of same type as the current evidence object.</param>
      <returns>
        <para>
          <see langword="true" /> if the two instances are
   equivalent; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.GetHashCode">
      <summary>
        <para>Gets the hash code of the current application directory.</para>
      </summary>
      <returns>
        <para>The hash code of the current application directory.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Copy">
      <summary>
        <para> Creates a new copy of the <see cref="T:System.Security.Policy.ApplicationDirectory" />.
   </para>
      </summary>
      <returns>
        <para> A new, identical copy of the <see cref="T:System.Security.Policy.ApplicationDirectory" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.ToString">
      <summary>
        <para>Gets a string representation of the state of
      the <see cref="T:System.Security.Policy.ApplicationDirectory" /> evidence
      object.</para>
      </summary>
      <returns>
        <para>A representation of the state of the <see cref="T:System.Security.Policy.ApplicationDirectory" /> evidence
   object.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationDirectory.Directory">
      <summary>
        <para> Gets the path of the application directory.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectoryMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group by testing its
      application directory. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para>Determines whether the membership condition is satisfied by the specified evidence.</para>
      </summary>
      <param name="evidence">The evidence set against which to make the test.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence
 satisfies the membership condition; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Copy">
      <summary>
        <para>Creates an equivalent copy of the membership condition.</para>
      </summary>
      <returns>
        <para>A new, identical copy of the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml">
      <summary>
        <para>Creates an XML encoding of the security object and its current
      state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML
 encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para>Creates an XML encoding of the security object and its 
       current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.</para>
      </summary>
      <param name="level">The policy level context for resolving named permission set references.</param>
      <returns>
        <para>An XML encoding of the security object, including any state
       information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML
 encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name="level">The policy level context, used to resolve named permission set references.</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified membership condition is
      an <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />.</para>
      </summary>
      <param name="o"> The object to compare to <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified membership condition is an <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToString">
      <summary>
        <para>Creates and returns a string representation of the membership condition.</para>
      </summary>
      <returns>
        <para> A string representation of the state of the membership condition.</para>
      </returns>
    </member>
    <member name="T:System.Security.Policy.CodeGroup">
      <summary>
        <para> Represents the abstract base class from which all implementations
 of code groups must derive.
 </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Security.Policy.CodeGroup" />.</para>
      </summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy.</param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)">
      <summary>
        <para>Adds a child code group to the current code group.</para>
      </summary>
      <param name="group">The code group to be added as a child. This new child code group is added to the end of the list.</param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)">
      <summary>
        <para> Removes the specified child code group.
      </para>
      </summary>
      <param name="group">The code group to be removed as a child. </param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para> When overridden in a derived class, resolves policy
      for the code group and its descendants for a set of evidence.
      </para>
      </summary>
      <param name="evidence">The evidence for the assembly. </param>
      <returns>
        <para> A policy statement that consists of the permissions granted
      by the code group with optional attributes, or <see langword="null" />
      if
      the code group does not apply (the membership condition does not match the
      specified evidence).
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para>When overridden in a derived class, resolves matching code groups.</para>
      </summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.CodeGroup" />
that is the root of the tree of matching code groups.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Copy">
      <summary>
        <para> When overridden in a derived class, makes a deep copy of the current code group.
      </para>
      </summary>
      <returns>
        <para> An equivalent copy of the current code group, including its membership
      conditions and child code groups.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current state.
 </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a given state from an XML encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object, its current state, and the policy level within which the code
 exists.
 </para>
      </summary>
      <param name="level">The policy level within which the code group exists. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para>When overridden in a derived class, serializes
 properties and internal state specific to a derived code group and adds the
 serialization to the specified <see cref="T:System.Security.SecurityElement" />.</para>
      </summary>
      <param name="element">The XML encoding to which to add the serialization.</param>
      <param name=" level">The policy level within which the code group exists.</param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a given state and policy level from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level within which the code group exists. </param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para>When overridden in a derived class, reconstructs
 properties and internal state specific to a derived code group from the
 specified <see cref="T:System.Security.SecurityElement" />.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name=" level">The policy level within which the code group exists.</param>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified code group is
 equivalent to the current code group.</para>
      </summary>
      <param name="o">The code group to compare with the current code group. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified code group is
 equivalent to the current code group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)">
      <summary>
        <para>Determines whether the specified code group is equivalent to the current
 code group, checking the child code groups as well, if specified.</para>
      </summary>
      <param name="cg">The code group to compare with the current code group.</param>
      <param name=" compareChildren">
        <see langword="true" /> to compare child code groups, as well; otherwise, <see langword="false" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified code group is equivalent to the
 current code group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.GetHashCode">
      <summary>
        <para>Gets the hash code of the current code group.</para>
      </summary>
      <returns>
        <para>The hash code of the current code group.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Children">
      <summary>
        <para>Gets or sets an ordered list of the child code groups of a code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MembershipCondition">
      <summary>
        <para> Gets or sets the code group's membership condition.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PolicyStatement">
      <summary>
        <para> Gets or sets the
      policy statement associated with the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Name">
      <summary>
        <para>Gets or sets the name of the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Description">
      <summary>
        <para>Gets or sets the description of the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PermissionSetName">
      <summary>
        <para> Gets the name of the named permission set for the code group.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.AttributeString">
      <summary>
        <para>Gets a string representation of the attributes of the policy
       statement for the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MergeLogic">
      <summary>
        <para>When overridden in a derived class, gets the merge logic for the code group.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Evidence">
      <summary>
        <para> Defines the set of information
      that constitutes input to security policy decisions. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor">
      <summary>
        <para> Initializes a new empty instance of the <see cref="T:System.Security.Policy.Evidence" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" /> class from a shallow copy of an existing one.
 </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> instance from which to create the new instance. This instance is not deep copied. </param>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.Evidence" />
class from multiple sets of host and assembly evidence.</para>
      </summary>
      <param name="hostEvidence">The host evidence from which to create the new instance.</param>
      <param name=" assemblyEvidence">The assembly evidence from which to create the new instance.</param>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddHost(System.Object)">
      <summary>
        <para> Adds the specified evidence supplied by the host to the evidence set.
 </para>
      </summary>
      <param name="id">Any evidence object. </param>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddAssembly(System.Object)">
      <summary>
        <para> Adds the specified assembly evidence to the evidence set.
      </para>
      </summary>
      <param name="id">Any evidence object. </param>
    </member>
    <member name="M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)">
      <summary>
        <para> Merges the specified evidence set into the current evidence set.
 </para>
      </summary>
      <param name="evidence">The evidence set to be merged into the current evidence set. </param>
    </member>
    <member name="M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)">
      <summary>
        <para> Copies evidence objects to an <see cref="T:System.Array" />.
   </para>
      </summary>
      <param name="array">The target array to which to copy evidence objects. </param>
      <param name="index">The zero-based position in the array to which to begin copying evidence objects. </param>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetHostEnumerator">
      <summary>
        <para> Enumerates evidence supplied by the host.
      </para>
      </summary>
      <returns>
        <para> An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetAssemblyEnumerator">
      <summary>
        <para> Enumerates evidence provided by the assembly.
 </para>
      </summary>
      <returns>
        <para> An enumerator for evidence added by the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> method.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetEnumerator">
      <summary>
        <para> Enumerates all evidence in the set, both that
 provided by the host and that provided by the
 assembly.
 </para>
      </summary>
      <returns>
        <para> An enumerator for evidence added by both
 the <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> method and the <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" />
 method.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.Locked">
      <summary>
        <para>Gets or sets a value indicating whether the evidence is locked.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.Evidence.Count">
      <summary>
        <para> Gets the number of evidence objects in the evidence set.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.Evidence.SyncRoot">
      <summary>
        <para> Gets the synchronization root.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether the evidence set is thread-safe.
 </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the evidence set is read-only.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.FileCodeGroup">
      <summary>
        <para>Grants permission to manipulate files located in the code assemblies to code assemblies that match the
      membership condition. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Permissions.FileIOPermissionAccess)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.FileCodeGroup" />
class.</para>
      </summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy. </param>
      <param name="access">One of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values. This value is used to construct the <see cref="T:System.Security.Permissions.FileIOPermission" /> that is granted. </param>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves policy for the code group and its descendants
      for a set of evidence.</para>
      </summary>
      <param name="evidence">The evidence for the assembly. </param>
      <returns>
        <para> A policy statement consisting of the permissions granted
      by the code group with optional attributes, or <see langword="null" />
      if
      the code group does not apply (the membership condition does not match the
      specified evidence).
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves matching code groups.</para>
      </summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.CodeGroup" /> that is the root of the tree of matching
   code groups.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Copy">
      <summary>
        <para> Makes a deep copy of the current code group.
      </para>
      </summary>
      <returns>
        <para> An equivalent copy of the current code group, including its membership
      conditions and child code groups.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object, its
 current state, and the policy level within which the code exists.</para>
      </summary>
      <param name="element">The XML encoding to use to create the security object.</param>
      <param name=" level">The policy level within which the code group exists.</param>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a given state and
 policy level from an XML encoding.</para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object.</param>
      <param name=" level">The policy level within which the code group exists.</param>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified code group is
      equivalent to the current code group.</para>
      </summary>
      <param name="o">The code group to compare with the current code group. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified code group is
   equivalent to the current code group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.GetHashCode">
      <summary>
        <para>Gets the hash code of the current code group.</para>
      </summary>
      <returns>
        <para>The hash code of the current code group.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.MergeLogic">
      <summary>
        <para>Gets the merge logic.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.PermissionSetName">
      <summary>
        <para>Gets the name of the named permission set for the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.AttributeString">
      <summary>
        <para>Gets a string representation of the attributes of the
 policy statement for the code group.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.FirstMatchCodeGroup">
      <summary>
        <para> Allows security policy to be defined by the union
 of the policy statement of a code group and that of the first child code
 group that matches. This class cannot be
 inherited.
 </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.FirstMatchCodeGroup" /> class.
   </para>
      </summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy. </param>
      <param name=" policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition. </param>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves policy for the code group and its descendants
      for a set of evidence.</para>
      </summary>
      <param name="evidence">The evidence for the assembly. </param>
      <returns>
        <para> A policy statement consisting of the permissions granted
      by the code group with optional attributes, or <see langword="null" />
      if the code group does not apply (the membership condition
      does not match the specified evidence).
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves matching code groups.</para>
      </summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.CodeGroup" /> that is the root of the tree of matching
   code groups.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Copy">
      <summary>
        <para> Makes a deep copy of the code group.
      </para>
      </summary>
      <returns>
        <para> An equivalent copy of the code group, including its membership conditions and
      child code groups.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.FirstMatchCodeGroup.MergeLogic">
      <summary>
        <para>Gets the merge logic.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Hash">
      <summary>
        <para> Provides
      evidence about the hash value for an assembly. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Hash.#ctor(System.Reflection.Assembly)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.Hash" /> 
class.</para>
      </summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> for which to compute hash value.</param>
    </member>
    <member name="M:System.Security.Policy.Hash.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the parameter name
 and additional exception information.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Security.Policy.Hash.GenerateHash(System.Security.Cryptography.HashAlgorithm)">
      <summary>
        <para> Computes the hash value for the assembly using the specified hash algorithm.
      </para>
      </summary>
      <param name="hashAlg">The hash algorithm to use to compute the hash value for the assembly. </param>
      <returns>
        <para> A byte array that represents the hash value for
      the assembly.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Hash.ToString">
      <summary>
        <para> Returns a string representation of the
 current <see cref="T:System.Security.Policy.Hash" />.</para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.Hash" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Hash.SHA1">
      <summary>
        <para>Gets the <see cref="T:System.Security.Cryptography.SHA1" /> hash value for the assembly.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.Hash.MD5">
      <summary>
        <para>Gets the <see cref="T:System.Security.Cryptography.MD5" /> hash value for the assembly.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.HashMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group by testing its hash value. This class cannot be
      inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.HashMembershipCondition" /> class with
 the hash algorithm and hash value that determine membership.</para>
      </summary>
      <param name="hashAlg">The hash algorithm to use to compute the hash value for the assembly.</param>
      <param name="value">The hash value for which to test.</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The evidence set against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence
   satisfies the membership condition; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
      current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
      </para>
      </summary>
      <param name="level">The policy level context for resolving named permission set references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
      encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level context, used to resolve named permission set references. </param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Equals(System.Object)">
      <summary>
        <para>Determines whether the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> and 
   the <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> from the specified object are equivalent
   to the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> and <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" />
   contained in the
   current <see cref="T:System.Security.Policy.HashMembershipCondition" />.</para>
      </summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.HashMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" />
and <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> from the
specified object is equivalent to the <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> and
<see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> contained in the 
current <see cref="T:System.Security.Policy.HashMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A string representation of the state of the
      membership condition.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm">
      <summary>
        <para>Gets or sets the hash algorithm to use for the membership condition.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashValue">
      <summary>
        <para> Gets or sets the hash value for which the membership condition tests.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.IIdentityPermissionFactory">
      <summary>
        <para>Defines the method that creates a new identity
      permission. </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.IIdentityPermissionFactory.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para>Creates a new identity permission for the specified evidence.</para>
      </summary>
      <param name="evidence">The evidence from which to create the new identity permission.</param>
      <returns>
        <para>The new identity permission.</para>
      </returns>
    </member>
    <member name="T:System.Security.Policy.NetCodeGroup">
      <summary>
        <para> Grants Web permission to the site from which the assembly was downloaded.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.#ctor(System.Security.Policy.IMembershipCondition)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.NetCodeGroup" /> class.</para>
      </summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies code access security policy.</param>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves policy for the code group and its descendants
      for a set of evidence.</para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> for the assembly. </param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.PolicyStatement" /> consisting of the
   permissions granted by the code group with optional attributes, or
<see langword="null" /> if the code group does not apply (the membership condition
   does not match the specified evidence).</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves matching code groups.</para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> for the assembly.</param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.CodeGroup" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Copy">
      <summary>
        <para> Makes a deep copy of the current code group.
 </para>
      </summary>
      <returns>
        <para> An equivalent copy of the current code group, including its membership conditions and
 child code groups.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.MergeLogic">
      <summary>
        <para>Gets the logic to use for merging groups.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.PermissionSetName">
      <summary>
        <para>Gets the name of the <see cref="T:System.Security.NamedPermissionSet" /> for the code group.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.AttributeString">
      <summary>
        <para>Gets a string representation of the attributes of the
 policy statement for the code group.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.PermissionRequestEvidence">
      <summary>
        <para> Defines evidence that represents permission requests.
      This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.#ctor(System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.PermissionRequestEvidence" />
class with
the permission request of a code
assembly.</para>
      </summary>
      <param name="request">The minimum permissions the code requires to run. </param>
      <param name="optional">The permissions the code can use if they are granted, but that are not required. </param>
      <param name="denied">The permissions the code explicitly asks not to be granted. </param>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.Copy">
      <summary>
        <para> Creates an equivalent copy of the current <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.
 </para>
      </summary>
      <returns>
        <para> An equivalent copy of the current <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.ToString">
      <summary>
        <para>Gets a string representation of the state of
 the <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</para>
      </summary>
      <returns>
        <para>A representation of the state of the <see cref="T:System.Security.Policy.PermissionRequestEvidence" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.RequestedPermissions">
      <summary>
        <para> Gets the minimum permissions the code requires to run.
 </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.OptionalPermissions">
      <summary>
        <para> Gets the permissions the code can use if they are granted, but are not
      required.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.DeniedPermissions">
      <summary>
        <para> Gets the permissions the code explicitly asks not
 to be granted.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.PolicyException">
      <summary>
        <para> The
      exception that is thrown when policy forbids code to run.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with default properties. </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with a specified error 
   message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="exception">The exception that is the cause of the current exception. If the <paramref name="exception" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Security.Policy.PolicyLevel">
      <summary>
        <para> Represents the security policy levels for the common language runtime. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.CreateAppDomainLevel">
      <summary>
        <para> Creates a new policy level for use at the application
      domain policy level.</para>
      </summary>
      <returns>
        <para>The newly created <see cref="T:System.Security.Policy.PolicyLevel" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>
        <para> Adds a <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 
corresponding to the specified <see cref="T:System.Security.Policy.StrongName" /> to the list of
<see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an 
assembly is a member of the group of assemblies
that should not be evaluated.</para>
      </summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName" /> used to create the <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>
        <para>Adds the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an 
   assembly is a member of the group of assemblies
   that should not be evaluated.</para>
      </summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> to add to the list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether an assembly is a member of the group of assemblies that should not be evaluated.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>
        <para>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongName" /> from the list of assemblies the policy
 level uses to evaluate policy.</para>
      </summary>
      <param name="sn">The <see cref="T:System.Security.Policy.StrongName" /> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>
        <para>Removes an assembly with the specified <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> from the list of assemblies the policy
 level uses to evaluate policy.</para>
      </summary>
      <param name="snMC">The <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> of the assembly to remove from the list of assemblies used to evaluate policy.</param>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Recover">
      <summary>
        <para>Replaces the configuration file for this <see cref="T:System.Security.Policy.PolicyLevel" /> with
   the last backup (reflecting the state of policy prior to the last time it was saved) and returns it to the state of the last save.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Reset">
      <summary>
        <para>Returns the current policy level to the default state.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>
        <para> Adds a <see cref="T:System.Security.NamedPermissionSet" /> to the current policy level.
 </para>
      </summary>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet" /> to add to the current policy level. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>
        <para>Removes the specified <see cref="T:System.Security.NamedPermissionSet" /> from the current policy level.</para>
      </summary>
      <param name="permSet">The <see cref="T:System.Security.NamedPermissionSet" /> to remove from the current policy level.</param>
      <returns>
        <para>The <see cref="T:System.Security.NamedPermissionSet" /> that was removed.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)">
      <summary>
        <para>Removes the <see cref="T:System.Security.NamedPermissionSet" /> with the specified name from the current policy level.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to remove.</param>
      <returns>
        <para>The <see cref="T:System.Security.NamedPermissionSet" /> that was removed.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)">
      <summary>
        <para>Replaces a <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level
 with the specified <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to replace.</param>
      <param name=" pSet">The <see cref="T:System.Security.PermissionSet" /> that replaces the <see cref="T:System.Security.NamedPermissionSet" /> specified by the <paramref name="name" /> parameter.</param>
      <returns>
        <para>A copy of the <see cref="T:System.Security.NamedPermissionSet" /> that was replaced.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)">
      <summary>
        <para> Returns the <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level with the
 specified name.
 </para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Security.NamedPermissionSet" /> to find. </param>
      <returns>
        <para> The <see cref="T:System.Security.NamedPermissionSet" /> in the current policy level 
 with the specified name, if found; otherwise, <see langword="null" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves policy based on evidence for the policy level, and
      returns the resulting <see cref="T:System.Security.Policy.PolicyStatement" />.</para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to resolve the <see cref="T:System.Security.Policy.PolicyLevel" />.</param>
      <returns>
        <para>The resulting <see cref="T:System.Security.Policy.PolicyStatement" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para> Resolves policy at the policy level and returns the root of a code group tree
      that matches the evidence.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> used to resolve policy. </param>
      <returns>
        <para> A <see cref="T:System.Security.Policy.CodeGroup" /> representing the root of a tree of code groups matching the specified evidence.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
 state.
 </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a given state from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Label">
      <summary>
        <para>Gets a descriptive label for the policy level.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.StoreLocation">
      <summary>
        <para>Gets the path where the policy file is stored.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.RootCodeGroup">
      <summary>
        <para>Gets or sets the root code group for the policy level.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.NamedPermissionSets">
      <summary>
        <para>Gets a list of named permission sets defined for the policy level.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.FullTrustAssemblies">
      <summary>
        <para>Gets a list of <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> objects used to determine whether
   an assembly is a member of the group of assemblies used to
   evaluate security policy.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.PolicyStatementAttribute">
      <summary>
        <para> 
 Defines special attribute flags for security policy on code
 groups.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Nothing">
      <summary>
        <para> No flags are set.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Exclusive">
      <summary>
        <para> The exclusive code group flag. When a
      code group has this flag set, only the permissions associated with that
      code group are granted to code belonging to the code group. At most, one code
      group matching a given piece of code can be set as exclusive.
      </para>
      </summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.LevelFinal">
      <summary>
        <para> The flag representing a policy statement that causes lower policy levels to not be
 evaluated as part of the resolve operation, effectively allowing the policy
 level to override lower levels.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.All">
      <summary>
        <para> All attribute flags are set.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.PolicyStatement">
      <summary>
        <para> Represents the statement of a <see cref="T:System.Security.Policy.CodeGroup" /> describing the permissions
   and other information that apply to code with a particular set of evidence. This class cannot
   be inherited.
   </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement" /> class with the specified <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet" /> with which to initialize the new instance. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet,System.Security.Policy.PolicyStatementAttribute)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Policy.PolicyStatement" /> class with the
 specified <see cref="T:System.Security.PermissionSet" /> and attributes.</para>
      </summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet" /> with which to initialize the new instance. </param>
      <param name="attributes">A bitwise combination of the <see cref="T:System.Security.Policy.PolicyStatementAttribute" /> values. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Copy">
      <summary>
        <para> Creates an equivalent copy of the current policy statement.
      </para>
      </summary>
      <returns>
        <para> A new copy of the <see cref="T:System.Security.Policy.PolicyStatement" /> with <see cref="P:System.Security.Policy.PolicyStatement.PermissionSet" /> and <see cref="P:System.Security.Policy.PolicyStatement.Attributes" /> identical to those of 
   the current <see cref="T:System.Security.Policy.PolicyStatement" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
 state.
 </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a given state from an XML
 encoding.
 </para>
      </summary>
      <param name="et">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its current
 state.
 </para>
      </summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context for lookup of <see cref="T:System.Security.NamedPermissionSet" /> values. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a given state from an XML
 encoding.
 </para>
      </summary>
      <param name="et">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context for lookup of <see cref="T:System.Security.NamedPermissionSet" /> values. </param>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.PermissionSet">
      <summary>
        <para> Gets or sets the <see cref="T:System.Security.PermissionSet" /> of the policy statement.
 </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.Attributes">
      <summary>
        <para>Gets or sets the attributes of the policy statement.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.AttributeString">
      <summary>
        <para> Gets a human-readable representation of the attributes of the policy statement.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Publisher">
      <summary>
        <para> Provides the Authenticode X.509v3 digital signature
      of a code assembly as evidence for policy evaluation. This class cannot
      be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Publisher.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.Publisher" /> class with the Authenticode X.509v3 certificate containing the publisher's public
   key.
   </para>
      </summary>
      <param name="cert">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> that contains the software publisher's public key. </param>
    </member>
    <member name="M:System.Security.Policy.Publisher.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para> Creates an identity permission that corresponds to the
      current instance of the <see cref="T:System.Security.Policy.Publisher" />
      class.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the identity permission.</param>
      <returns>
        <para> A <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> for the specified
<see cref="T:System.Security.Policy.Publisher" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Equals(System.Object)">
      <summary>
        <para>Compares the current <see cref="T:System.Security.Policy.Publisher" /> to the specified object for equivalence.</para>
      </summary>
      <param name="o">The <see cref="T:System.Security.Policy.Publisher" /> to test for equivalence with the current object. </param>
      <returns>
        <para>
          <see langword="true" /> if the two 
 instances of the <see cref="T:System.Security.Policy.Publisher" /> class are equal; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.GetHashCode">
      <summary>
        <para>Gets the hash code of the current <see cref="P:System.Security.Policy.Publisher.Certificate" />.</para>
      </summary>
      <returns>
        <para>The hash code of the current <see cref="P:System.Security.Policy.Publisher.Certificate" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Copy">
      <summary>
        <para> Creates an equivalent copy of the <see cref="T:System.Security.Policy.Publisher" />.
   </para>
      </summary>
      <returns>
        <para> A new, identical copy of the <see cref="T:System.Security.Policy.Publisher" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.ToString">
      <summary>
        <para> Returns a string representation of the current <see cref="T:System.Security.Policy.Publisher" />.
 </para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.Publisher" />.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Publisher.Certificate">
      <summary>
        <para> Gets the publisher's Authenticode X.509v3
      certificate.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.PublisherMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group by
      testing its software publisher's Authenticode X.509v3 certificate. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> class
   with the Authenticode X.509v3 certificate that determines
   membership.</para>
      </summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> that contains the software publisher's public key. </param>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the 
 <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.
 </para>
      </summary>
      <returns>
        <para> A representation of the 
 <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the
      specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence satisfies
   the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
      encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
      current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
      </para>
      </summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Equals(System.Object)">
      <summary>
        <para>Determines whether the publisher certificate from the specified
 object is equivalent to the publisher certificate contained in the
 current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.</para>
      </summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 publisher
 certificate from the specified object is equivalent to
 the publisher certificate contained in the current <see cref="T:System.Security.Policy.PublisherMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.PublisherMembershipCondition.Certificate">
      <summary>
        <para> Gets or sets the Authenticode X.509v3 certificate for which the membership condition tests.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Site">
      <summary>
        <para> Provides the Web site from which a code
      assembly originates as evidence for policy evaluation. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Site.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.Site" /> class with the Web site from which a
 code assembly originates.
 </para>
      </summary>
      <param name="name">The Web site of origin for the associated code assembly. </param>
    </member>
    <member name="M:System.Security.Policy.Site.CreateFromUrl(System.String)">
      <summary>
        <para>Creates a new <see cref="T:System.Security.Policy.Site" /> from the specified URL.</para>
      </summary>
      <param name="url">The URL from which to create the new <see cref="T:System.Security.Policy.Site" />.</param>
      <returns>
        <para>The new <see cref="T:System.Security.Policy.Site" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Site.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para> Creates an identity permission that
      corresponds to the current <see cref="T:System.Security.Policy.Site" />.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the identity permission.</param>
      <returns>
        <para> A <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> for the specified
<see cref="T:System.Security.Policy.Site" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Site.Equals(System.Object)">
      <summary>
        <para>Compares the current <see cref="T:System.Security.Policy.Site" /> to the specified object for equivalence.</para>
      </summary>
      <param name="o">The <see cref="T:System.Security.Policy.Site" /> to test for equivalence with the current object.</param>
      <returns>
        <para>
          <see langword="true" /> if the two 
 instances of the <see cref="T:System.Security.Policy.Site" />
 class are equal; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Site.GetHashCode">
      <summary>
        <para>Returns the hash code of the current Web site name.</para>
      </summary>
      <returns>
        <para>The hash code of the current Web site name.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Site.Copy">
      <summary>
        <para> Creates an equivalent copy of the <see cref="T:System.Security.Policy.Site" />.
   </para>
      </summary>
      <returns>
        <para> A new, identical copy of the <see cref="T:System.Security.Policy.Site" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Site.ToString">
      <summary>
        <para> Returns a string representation of the current <see cref="T:System.Security.Policy.Site" />.
 </para>
      </summary>
      <returns>
        <para> A representation the current <see cref="T:System.Security.Policy.Site" />.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Site.Name">
      <summary>
        <para> Gets the site from which the code assembly originates.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.SiteMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group
      by testing the site from which it originated. This class
      cannot be
      inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.SiteMembershipCondition" /> class with 
 name of the site that determines
 membership.
 </para>
      </summary>
      <param name="site">The site name or wildcard expression. </param>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the
      specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence
   satisfies the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
 current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
 </para>
      </summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Equals(System.Object)">
      <summary>
        <para> Determines whether the site from the specified 
 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 
 object is equivalent to the site contained in the
 current <see cref="T:System.Security.Policy.SiteMembershipCondition" />.</para>
      </summary>
      <param name="o">The <see cref="T:System.Security.Policy.SiteMembershipCondition" /> object to compare to the current <see cref="T:System.Security.Policy.SiteMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the site 
 from the specified <see cref="T:System.Security.Policy.SiteMembershipCondition" />
 object is equivalent
 to the site contained in the current <see cref="T:System.Security.Policy.SiteMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the membership condition.
 </para>
      </summary>
      <returns>
        <para> A string representation of the
 membership condition.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.SiteMembershipCondition.Site">
      <summary>
        <para> Gets or sets the site for which the membership condition tests.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.StrongName">
      <summary>
        <para>Provides the strong name of a code assembly as evidence for policy
 evaluation. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.StrongName" /> class with the strong name public key blob, name, and version.
 </para>
      </summary>
      <param name="blob">The <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the software publisher. </param>
      <param name=" name">The simple name section of the strong name. </param>
      <param name=" version">The <see cref="T:System.Version" /> of the strong name. </param>
    </member>
    <member name="M:System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para> Creates a <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> that
   corresponds to the current <see cref="T:System.Security.Policy.StrongName" />.</para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> from which to construct the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />.</param>
      <returns>
        <para> A <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> for the specified
<see cref="T:System.Security.Policy.StrongName" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.Copy">
      <summary>
        <para> Creates an equivalent copy of the current <see cref="T:System.Security.Policy.StrongName" />.
   </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current <see cref="T:System.Security.Policy.StrongName" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.ToString">
      <summary>
        <para> Creates a string representation of the current <see cref="T:System.Security.Policy.StrongName" />.
 </para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.StrongName" />.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.Equals(System.Object)">
      <summary>
        <para>Determines whether the specified strong name is equal to
      the current strong name.</para>
      </summary>
      <param name="o">The strong name to compare against the current strong name.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified strong name is equal to the current
   strong name; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.GetHashCode">
      <summary>
        <para>Gets the hash code of the current <see cref="T:System.Security.Policy.StrongName" />.</para>
      </summary>
      <returns>
        <para>The hash code of the current <see cref="T:System.Security.Policy.StrongName" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.PublicKey">
      <summary>
        <para> Gets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the current <see cref="T:System.Security.Policy.StrongName" />.</para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.StrongName.Name">
      <summary>
        <para> Gets the simple name of the current <see cref="T:System.Security.Policy.StrongName" />.
 </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.StrongName.Version">
      <summary>
        <para> Gets the <see cref="T:System.Version" /> of the current <see cref="T:System.Security.Policy.StrongName" />.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.StrongNameMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group
      by testing its strong name. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> class with the strong name public key
   blob, name, and version number that determine
   membership.
   </para>
      </summary>
      <param name="blob">The strong name public key blob of the software publisher. </param>
      <param name="name">The simple name section of the strong name. </param>
      <param name="version">The version number of the strong name. </param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The <see cref="T:System.Security.Policy.Evidence" /> against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence satisfies
   the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the
      current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current
   <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /></para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
      current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
      </para>
      </summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, which is used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> context, used to resolve <see cref="T:System.Security.NamedPermissionSet" /> references. </param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the 
 current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.
 </para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 
.
</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Equals(System.Object)">
      <summary>
        <para>Determines whether the <see cref="T:System.Security.Policy.StrongName" /> from the specified object is equivalent 
 to the <see cref="T:System.Security.Policy.StrongName" />
 contained in the
 current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</para>
      </summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
<see cref="T:System.Security.Policy.StrongName" /> 
from the specified object is equivalent to the <see cref="T:System.Security.Policy.StrongName" />
contained in the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.GetHashCode">
      <summary>
        <para>Returns the hash code for the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> .</para>
      </summary>
      <returns>
        <para>The hash code for the current <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> .</para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey">
      <summary>
        <para> Gets or sets the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership
   condition tests.
   </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Name">
      <summary>
        <para> Gets or sets the simple name of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.
 </para>
      </summary>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Version">
      <summary>
        <para> Gets or sets the <see cref="T:System.Version" /> of the <see cref="T:System.Security.Policy.StrongName" /> for which the membership condition tests.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.UnionCodeGroup">
      <summary>
        <para> Represents a code group whose policy statement is the union of the current code group's policy
      statement and the policy statement of all its matching child code groups. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.UnionCodeGroup" />
class.</para>
      </summary>
      <param name="membershipCondition">A membership condition that tests evidence to determine whether this code group applies policy. </param>
      <param name="policy">The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition. </param>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>
        <para> Resolves policy
      for the code group and its descendants for a set of evidence.
      </para>
      </summary>
      <param name="evidence">The evidence for the assembly. </param>
      <returns>
        <para> A policy statement consisting of the permissions granted
      by the code group with optional attributes, or <see langword="null" />
      if
      the code group does not apply (the membership condition does not match the
      specified evidence).
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>
        <para>Resolves matching code groups.</para>
      </summary>
      <param name="evidence">The evidence for the assembly.</param>
      <returns>
        <para>A <see cref="T:System.Security.Policy.CodeGroup" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Copy">
      <summary>
        <para> Makes a deep copy of the current code group.
      </para>
      </summary>
      <returns>
        <para> An equivalent copy of the current code group, including its membership
      conditions and child code groups.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.UnionCodeGroup.MergeLogic">
      <summary>
        <para>Gets the merge logic.</para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Url">
      <summary>
        <para> Provides the URL from
      which a code assembly originates as evidence for policy evaluation. This class cannot be
      inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Url.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.Url" /> 
class with the URL from which a code assembly
originates.</para>
      </summary>
      <param name="name">The URL of origin for the associated code assembly. </param>
    </member>
    <member name="M:System.Security.Policy.Url.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para> Creates an identity permission corresponding to the 
      current instance of the <see cref="T:System.Security.Policy.Url" />
      evidence class.
      </para>
      </summary>
      <param name="evidence">The evidence set from which to construct the identity permission.</param>
      <returns>
        <para> A <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> for the specified 
<see cref="T:System.Security.Policy.Url" /> evidence.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Url.Equals(System.Object)">
      <summary>
        <para>Compares the current <see cref="T:System.Security.Policy.Url" /> evidence object to the specified object for equivalence.</para>
      </summary>
      <param name="o">The <see cref="T:System.Security.Policy.Url" /> evidence object to test for equivalence with the current object.</param>
      <returns>
        <para>
          <see langword="true" /> if the two <see cref="T:System.Security.Policy.Url" />
objects are equal; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Url.GetHashCode">
      <summary>
        <para>Gets the hash code of the current URL.</para>
      </summary>
      <returns>
        <para>The hash code of the current URL.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Url.Copy">
      <summary>
        <para> Creates a new copy of the evidence object.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the evidence object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Url.ToString">
      <summary>
        <para> Returns a string representation of the current <see cref="T:System.Security.Policy.Url" />.
 </para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.Url" />.
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Url.Value">
      <summary>
        <para> Gets the URL from which the code assembly originates.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.UrlMembershipCondition">
      <summary>
        <para>Determines whether an assembly belongs to a code group by testing its URL. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.UrlMembershipCondition" /> class with the URL that determines membership.
   </para>
      </summary>
      <param name="url">The URL for which to test. </param>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The evidence set against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence satisfies
   the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
      current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
      </para>
      </summary>
      <param name="level">The policy level context for resolving named permission set references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
      encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level context, used to resolve named permission set references. </param>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Equals(System.Object)">
      <summary>
        <para> Determines whether the URL from 
      the specified object is equivalent to the URL contained in the
      current <see cref="T:System.Security.Policy.UrlMembershipCondition" />.</para>
      </summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.UrlMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   the URL from the specified object is equivalent
   to the URL contained in the current <see cref="T:System.Security.Policy.UrlMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A string representation of the state of the
      membership condition.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.UrlMembershipCondition.Url">
      <summary>
        <para> Gets or sets the URL for which the membership condition tests.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.Zone">
      <summary>
        <para>Provides the security zone of a code assembly as
      evidence for policy evaluation. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.Zone.#ctor(System.Security.SecurityZone)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.Zone" /> 
class with the zone from which a code assembly
originates.</para>
      </summary>
      <param name="zone">The zone of origin for the associated code assembly. </param>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateFromUrl(System.String)">
      <summary>
        <para>Creates a new zone with the specified URL.</para>
      </summary>
      <param name="url">The URL from which to create the zone.</param>
      <returns>
        <para>A new zone with the specified URL.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>
        <para> Creates an identity permission that corresponds to the
      current instance of the <see cref="T:System.Security.Policy.Zone" />
      evidence class.
      </para>
      </summary>
      <param name="evidence">The evidence set from which to construct the identity permission.</param>
      <returns>
        <para> A <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> for the specified
<see cref="T:System.Security.Policy.Zone" /> evidence.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.Equals(System.Object)">
      <summary>
        <para>Compares the current <see cref="T:System.Security.Policy.Zone" /> evidence object to the specified object for equivalence.</para>
      </summary>
      <param name="o">The <see cref="T:System.Security.Policy.Zone" /> evidence object to test for equivalence with the current object.</param>
      <returns>
        <para>
          <see langword="true" /> if the two <see cref="T:System.Security.Policy.Zone" />
objects are equal; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.GetHashCode">
      <summary>
        <para> Gets the hash code of the current zone.</para>
      </summary>
      <returns>
        <para> The hash code of the current zone.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.Copy">
      <summary>
        <para> Creates an equivalent copy of the evidence object.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the evidence object.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.Zone.ToString">
      <summary>
        <para> Returns a string representation of the current <see cref="T:System.Security.Policy.Zone" /> .
 </para>
      </summary>
      <returns>
        <para> A representation of the current <see cref="T:System.Security.Policy.Zone" /> .
 </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.Zone.SecurityZone">
      <summary>
        <para> Gets the zone from which the code assembly originates.
      </para>
      </summary>
    </member>
    <member name="T:System.Security.Policy.ZoneMembershipCondition">
      <summary>
        <para> Determines whether an assembly belongs to a code group 
      by testing its zone of origin. This class cannot be inherited.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.#ctor(System.Security.SecurityZone)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> class with the zone that determines
   membership.
   </para>
      </summary>
      <param name="zone">The <see cref="T:System.Security.SecurityZone" /> for which to test. </param>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines whether the
      specified evidence satisfies the membership condition.
      </para>
      </summary>
      <param name="evidence">The evidence set against which to make the test. </param>
      <returns>
        <para>
          <see langword="true" /> if the specified evidence
   satisfies the membership condition; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Copy">
      <summary>
        <para> Creates an equivalent copy of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A new, identical copy of the current membership condition.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml">
      <summary>
        <para> Creates an XML encoding of the security object and its current
      state.
      </para>
      </summary>
      <returns>
        <para> An XML encoding of the security object, including any state
      information.
      </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML encoding.
      </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Creates an XML encoding of the security object and its
 current state with the specified <see cref="T:System.Security.Policy.PolicyLevel" />.
 </para>
      </summary>
      <param name="level">The policy level context for resolving named permission set references. </param>
      <returns>
        <para> An XML encoding of the security object, including any state
 information.
 </para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>
        <para> Reconstructs a security object with a specified state from an XML
 encoding.
 </para>
      </summary>
      <param name="e">The XML encoding to use to reconstruct the security object. </param>
      <param name="level">The policy level context used to resolve named permission set references. </param>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Equals(System.Object)">
      <summary>
        <para> Determines whether the zone from
      the specified object is equivalent to the zone contained in the
      current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />.</para>
      </summary>
      <param name="o">The object to compare to the current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
   the zone from the specified object is equivalent
   to the zone contained in the current <see cref="T:System.Security.Policy.ZoneMembershipCondition" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.GetHashCode">
      <summary>
        <para>Gets the hash code for the current membership condition.</para>
      </summary>
      <returns>
        <para>The hash code for the current membership condition.</para>
      </returns>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToString">
      <summary>
        <para> Creates and returns a string representation of the membership condition.
      </para>
      </summary>
      <returns>
        <para> A string representation of the state of the
      membership condition.
      </para>
      </returns>
    </member>
    <member name="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone">
      <summary>
        <para> Gets or sets the zone for which the membership condition tests.
 </para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.GenericIdentity">
      <summary>
        <para> Represents
 a generic user.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
      <summary>
        <para> 
      Defines the basic functionality of an identity object.
      </para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
      <summary>
        <para> Gets the name of the current user.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
      <summary>
        <para> Gets the type of authentication used.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
      <summary>
        <para> Gets a value that indicates whether the user has been authenticated.</para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.GenericIdentity.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericIdentity" /> 
class representing the user with the specified name.</para>
      </summary>
      <param name="name">The name of the user on whose behalf the code is running.</param>
    </member>
    <member name="M:System.Security.Principal.GenericIdentity.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericIdentity" />
class representing the user with the specified name and authentication type.</para>
      </summary>
      <param name="name">The name of the user on whose behalf the code is running.</param>
      <param name=" type">The type of authentication used to identify the user.</param>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.Name">
      <summary>
        <para> Gets the user's
 name.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.AuthenticationType">
      <summary>
        <para> Gets the type of authentication used
      to identify the user.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.GenericIdentity.IsAuthenticated">
      <summary>
        <para> Gets a value indicating whether
 the user has been authenticated.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.GenericPrincipal">
      <summary>
        <para>Represents 
 a generic principal.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
      <summary>
        <para>Defines the basic functionality
      of a principal object.</para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
      <summary>
        <para> Determines whether the current principal belongs to the specified
      role.</para>
      </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <returns>
        <para>
          <see langword="true" /> if the current principal is 
   a member of the specified role; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
      <summary>
        <para> Gets the identity of the current principal.</para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.GenericPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.GenericPrincipal" /> class from a <see cref="T:System.Security.Principal.GenericIdentity" /> and an array of role names to
 which the user represented by that <see cref="T:System.Security.Principal.GenericIdentity" />
 belongs.</para>
      </summary>
      <param name="identity">A basic implementation of <see cref="T:System.Security.Principal.IIdentity" /> that represents any user.</param>
      <param name=" roles">An array of role names to which the user represented by the <paramref name="identity" /> parameter belongs.</param>
    </member>
    <member name="M:System.Security.Principal.GenericPrincipal.IsInRole(System.String)">
      <summary>
        <para>Determines whether the current <see cref="T:System.Security.Principal.GenericPrincipal" /> 
belongs to the specified role.</para>
      </summary>
      <param name="role">The name of the role for which to check membership.</param>
      <returns>
        <para>
          <see langword="true" /> if the current <see cref="T:System.Security.Principal.GenericPrincipal" /> is a member of the specified role; 
 otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Principal.GenericPrincipal.Identity">
      <summary>
        <para> Gets the <see cref="T:System.Security.Principal.GenericIdentity" /> of the user represented by the
   current <see cref="T:System.Security.Principal.GenericPrincipal" />.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.PrincipalPolicy">
      <summary>
        <para> Specifies how principal and identity objects should be
 created for an application domain. The default is
 <see langword="UnauthenticatedPrincipal" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.UnauthenticatedPrincipal">
      <summary>
        <para>Principal and identity objects for the unauthenticated 
 entity should be created. An unauthenticated entity has <see cref="P:System.Security.Principal.GenericIdentity.Name" /> set to the empty string ("")
 and <see cref="P:System.Security.Principal.GenericIdentity.IsAuthenticated" /> set to <see langword="false" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.NoPrincipal">
      <summary>
        <para>No principal or identity
      objects should be created.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.PrincipalPolicy.WindowsPrincipal">
      <summary>
        <para>Principal and identity objects that
      reflect
      the operating system token associated with the current execution thread should be created, and the
      associated operating system groups should be mapped into roles.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.WindowsAccountType">
      <summary>
        <para>Specifies the type of Windows account used.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Normal">
      <summary>
    A normal user account.
 </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Guest">
      <summary>
        <para>A Windows guest account.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.System">
      <summary>
        <para>A Windows system account.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsAccountType.Anonymous">
      <summary>
        <para>An anonymous account.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.WindowsIdentity">
      <summary>
        <para> Represents a Windows user.</para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class
 for the user represented by the specified Windows account
 token.</para>
      </summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions" />.</param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" />
class for the user represented by the specified Windows account token
and the specified authentication type.</para>
      </summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions" />.</param>
      <param name=" type">The type of authentication used to identify the user.</param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for
 the user represented by the specified Windows account token, the specified
 authentication type, and the specified Windows account type.</para>
      </summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions" />.</param>
      <param name=" type">The type of authentication used to identify the user.</param>
      <param name=" acctType">One of the <see cref="T:System.Security.Principal.WindowsAccountType" /> values.</param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsIdentity" /> class for the user represented by
 the specified Windows account token, the specified authentication type, the specified
 Windows account type, and the specified authentication status.</para>
      </summary>
      <param name="userToken">The account token for the user on whose behalf the code is running. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions" />.</param>
      <param name=" type">The type of authentication used to identify the user.</param>
      <param name=" acctType">One of the <see cref="T:System.Security.Principal.WindowsAccountType" /> values.</param>
      <param name=" isAuthenticated">
        <see langword="true" /> to indicate that the user is authenticated; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetCurrent">
      <summary>
        <para>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current Windows user.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents the current user.</para>
      </returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.GetAnonymous">
      <summary>
        <para>Returns a <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents
   an anonymous Windows user.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Principal.WindowsIdentity" /> object that represents
   an anonymous Windows user.</para>
      </returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Impersonate">
      <summary>
        <para>Impersonates the user represented by the <see cref="T:System.Security.Principal.WindowsIdentity" />
object.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> object
   that represents the Windows user prior to impersonation; this can be used to
   revert to the original user's context.</para>
      </returns>
    </member>
    <member name="M:System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)">
      <summary>
        <para>Impersonates the user represented by the specified user token.</para>
      </summary>
      <param name="userToken">The handle of a Windows account token. This token is usually retrieved through a call to unmanaged code, such as a call to the Win32 API LogonUser. For more information on calls to unmanaged code, see <see topic="cpconconsumingunmanageddllfunctions" />.</param>
      <returns>
        <para>A <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> object
   that
   represents the Windows user prior to impersonation; this object can be
   used to revert to the original user's context.</para>
      </returns>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Name">
      <summary>
        <para> Gets the user's Windows logon name.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.AuthenticationType">
      <summary>
        <para> Gets the type of authentication used to identify the user.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsAuthenticated">
      <summary>
        <para> Gets a value indicating whether the user has been authenticated by Windows.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.Token">
      <summary>
        <para> Gets the Windows account token for the user.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsGuest">
      <summary>
        <para> Gets a value indicating whether the user account is 
 identified as a <see cref="F:System.Security.Principal.WindowsAccountType.Guest" /> account by the
 system.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsSystem">
      <summary>
        <para> Gets a value indicating whether the user account is 
 identified as a <see cref="F:System.Security.Principal.WindowsAccountType.System" /> account by the
 system.</para>
      </summary>
    </member>
    <member name="P:System.Security.Principal.WindowsIdentity.IsAnonymous">
      <summary>
        <para> Gets a value indicating whether the user account is identified as an anonymous account by the
      system.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.WindowsImpersonationContext">
      <summary>
        <para> Represents the Windows
      user prior to an impersonation operation.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.WindowsImpersonationContext.Undo">
      <summary>
        <para> Reverts the user context to the Windows user represented by this
      object.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.WindowsBuiltInRole">
      <summary>
        <para>Specifies common roles to be used with <see cref="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Administrator">
      <summary>
        <para>Administrators have complete and unrestricted access to the computer 
      or domain.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.User">
      <summary>
        <para>Users are prevented from making accidental or intentional 
      system-wide changes. Thus, users can run certified applications, but not most
      legacy applications.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Guest">
      <summary>
        <para>Guests are more restricted than users.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.PowerUser">
      <summary>
        <para>Power users possess most administrative permissions with some
      restrictions. Thus, power users can run legacy applications, in addition to
      certified applications.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.AccountOperator">
      <summary>
        <para>Account operators manage the user accounts on a computer or domain.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.SystemOperator">
      <summary>
        <para>System operators manage a particular computer.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.PrintOperator">
      <summary>
        <para> Print operators can take control of a printer.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.BackupOperator">
      <summary>
        <para>Backup operators can override security restrictions for 
      the sole purpose of backing up or restoring files.</para>
      </summary>
    </member>
    <member name="F:System.Security.Principal.WindowsBuiltInRole.Replicator">
      <summary>
        <para>Replicators support file replication in a domain.</para>
      </summary>
    </member>
    <member name="T:System.Security.Principal.WindowsPrincipal">
      <summary>
        <para> Allows code to check the
      Windows group membership of
      a Windows user.
      </para>
      </summary>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Security.Principal.WindowsPrincipal" /> class from a <see cref="T:System.Security.Principal.WindowsIdentity" /> object.
   </para>
      </summary>
      <param name="ntIdentity">The <see cref="T:System.Security.Principal.WindowsIdentity" /> object from which to construct the new instance of <see cref="T:System.Security.Principal.WindowsPrincipal" />.</param>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.String)">
      <summary>
        <para> Determines whether the current principal belongs to the Windows user group with the specified
 name.</para>
      </summary>
      <param name="role">The name of the Windows user group for which to check membership.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 current principal is a member of
 the specified Windows user group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Int32)">
      <summary>
        <para>Determines whether the current principal belongs to the Windows user group with the specified role identifier (RID).</para>
      </summary>
      <param name="rid">The role identifier of the Windows user group for which to check membership.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 current principal is a member of the specified Windows user
 group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Principal.WindowsPrincipal.IsInRole(System.Security.Principal.WindowsBuiltInRole)">
      <summary>
        <para> Determines whether the current principal belongs to the 
 Windows user group with the specified <see cref="T:System.Security.Principal.WindowsBuiltInRole" />.</para>
      </summary>
      <param name="role">One of the <see cref="T:System.Security.Principal.WindowsBuiltInRole" /> values.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 current principal is a member of
 the specified Windows user group; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Principal.WindowsPrincipal.Identity">
      <summary>
        <para> Gets the identity of the current principal.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>
        <para> Encapsulates an array and
      an offset within the specified array.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 
 structure.</para>
      </summary>
      <param name="array">A managed array.</param>
      <param name="offset">The offset in bytes, of the element to be passed through platform invoke.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>
        <para> Returns the managed array referenced by this
   <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</para>
      </summary>
      <returns>
        <para> The managed array this instance references.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>
        <para> Returns the offset provided when 
       this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> was constructed.</para>
      </summary>
      <returns>
        <para>The offset for this instance.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>
        <para>
       Returns a hash code for this value type.
    </para>
      </summary>
      <returns>
        <para>
       The hash code for this instance.
    </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>
        <para>Indicates whether the specified object matches the current
   <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> .</para>
      </summary>
      <param name="obj">Object to compare with this instance.</param>
      <returns>
        <para>
          <see langword="true " />if the object
   matches this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />
   ; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>
        <para> Specifies the COM DispId of a method, field, or property.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="DispIdAttribute" /> class with the specified
      DispId.</para>
      </summary>
      <param name="dispId">The DispId for the member.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>
        <para>Gets the DispId for the member.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>
        <para>Identifies how to expose an interface to COM.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>
        <para> Indicates the interface needs to be exposed
      to COM as a dual interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>
        <para> Indicates an interface needs to be exposed to COM as
      an <see langword="IUnknown" /> derived
      interface, as opposed to a dispinterface or a dual interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>
        <para> Indicates an interface needs to be exposed to COM as a dispinterface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>
        <para>Indicates whether a managed interface is dual,
   <see langword="IDispatch" /> or <see langword="IUnknown" /> based when exposed to
      COM.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="InterfaceTypeAttribute" /> class
      with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />
      value.</para>
      </summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value.</para>
      </summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>
        <para>Identifies the type of class interface that is
      generated for a class. This enumeration is used in conjunction with the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>
        <para>Indicates that no class interface is generated for the
      class. If no interfaces are implemented explicitly, the class will only provide
      late bound access through <see langword="IDispatch" />. Users are expected to
      expose functionality through interfaces that are explicitly implemented by the
      class. This is the recommended setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
        <para>Indicates that the class only supports late binding for 
      COM clients. A dispinterface for the class is
      automatically exposed to COM clients on request. The type library produced by
      TlbExp does not contain type information for the dispinterface in order to
      prevent clients from caching the <see langword="DispId" />s of the interface. The
      dispinterface does not exhibit the versioning problems
      described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> because clients
      can only late bind to the interface. This is the default setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />
      .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>
        <para>Indicates that a dual class interface is automatically
      generated for the class and exposed to COM. Type information is produced for the
      class interface and published in the type library. The use of
   <see langword="AutoDual" /> is strongly discouraged because of the versioning
      limitations described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />
      .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>
        <para>Indicates the type of class interface that will be
      generated for a class, if at all.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="ClassInterfaceAttribute" />
   class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />
   value.</para>
      </summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ClassInterfaceAttribute" /> class with the specified
 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value.</para>
      </summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>
        <para> Controls COM visibility of an individual type, member, or all types within an assembly.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="ComVisibleAttribute" /> class.</para>
      </summary>
      <param name="visibility">Indicates whether or not the type is visible to COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>
        <para>Gets a value indicating whether the COM type is visible.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>
        <para> Indicates that a method's unmanaged
      signature expects an LCID parameter.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="LCIDConversionAttribute" />
      class with the position of the LCID in the unmanaged signature.</para>
      </summary>
      <param name="lcid">Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>
        <para> Gets the position of the LCID argument in the unmanaged
      signature. </para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>
        <para> Specifies the method to call when you register an assembly for use from COM;
      this allows for the execution of user-written code during the registration process.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>
        <para>Specifies the method to call when you unregister an assembly 
      for use from COM; this allows for the execution of user-written code during the
      unregistration process.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>
        <para> Allows the user to specify the ProgId of a class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="ProgIdAttribute" /> with the specified ProgId.</para>
      </summary>
      <param name="progId">The ProgId to be assigned to the class being attributed.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>
        <para>Gets the ProgId of the class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>
        <para> Indicates that the types defined within an assembly were originally defined in a
      type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ImportedFromTypeLibAttribute" />
 class with the name of the
 original type library
 file.</para>
      </summary>
      <param name="tlbFile">The location of the original type library file.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>
        <para> Gets the name of the original type library file.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplType">
      <summary>
        <para>Indicates which <see langword="IDispatch" /> implementation to use for a
   particular class.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.SystemDefinedImpl">
      <summary>
        <para>Specifies that the common language runtime will decide which
   <see langword="IDispatch" />
   implementation to use.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.InternalImpl">
      <summary>
        <para> Specifies that the
   <see langword="IDispatch" /> implemenation is supplied by the runtime.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDispatchImplType.CompatibleImpl">
      <summary>
        <para>Specifies that the <see langword="IDispatch" /> implementation is supplied by passing
   the type information for the object to COM's <see langword="CreateStdDispatch" />
   API.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDispatchImplAttribute">
      <summary>
        <para> Indicates which <see langword="IDispatch" />
implementation the common language runtime uses when exposing dual interfaces and
dispinterfaces to COM.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Runtime.InteropServices.IDispatchImplType)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="IDispatchImplAttribute" /> class with specified <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value.</para>
      </summary>
      <param name="implType">Indicates which <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> enumeration will be used.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.IDispatchImplAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="IDispatchImplAttribute" />
      class with specified <see cref="T:System.Runtime.InteropServices.IDispatchImplType" />
      value.</para>
      </summary>
      <param name="implType">Indicates which <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> enumeration will be used.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.IDispatchImplAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.IDispatchImplType" /> value used by the
   class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>
        <para> Identifies a list of interfaces that are exposed as COM event sources
 for the attributed class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of
      the <see langword="ComSourceInterfacesAttribute" /> class
      with the name of the event source interface.</para>
      </summary>
      <param name="sourceInterfaces">A null-delimited list of fully qualified event source interface names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComSourceInterfacesAttribute" /> class with the type to use as a source interface.</para>
      </summary>
      <param name="sourceInterface">The type of the source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComSourceInterfacesAttribute" /> class with the types to use as 
      source interfaces.</para>
      </summary>
      <param name="sourceInterface1">The type of the default source interface.</param>
      <param name=" sourceInterface2">The type of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComSourceInterfacesAttribute" /> class with the types to use as 
      source interfaces.</para>
      </summary>
      <param name="sourceInterface1">The type of the default source interface.</param>
      <param name=" sourceInterface2">The type of a source interface.</param>
      <param name=" sourceInterface3">The type of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComSourceInterfacesAttribute" /> class with the types to use as 
      source interfaces.</para>
      </summary>
      <param name="sourceInterface1">The type of the default source interface.</param>
      <param name=" sourceInterface2">The type of a source interface.</param>
      <param name=" sourceInterface3">The type of a source interface.</param>
      <param name=" sourceInterface4">The type of a source interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>
        <para>Gets the fully qualified name of the event source interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>
        <para>Indicates that information was lost about a class or interface when it was imported from
      a type library to an assembly.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="ComConversionLossAttribute" /> 
   class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>
        <para>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />
in the COM type library from which the type was imported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>
        <para>A type description that describes an Application object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>
        <para>Instances of the type can be created by 
   <see langword="ITypeInfo::CreateInstance" /> 
   .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>
        <para>The type is licensed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>
        <para>The type is predefined. The client application should 
       automatically create a single instance of the object that has this attribute.
       The name of the variable that points to the object is the same as the class name
       of the object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>
        <para>The type should not be displayed to browsers.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>
        <para>The type is a control from which other types will be 
       derived, and should not be displayed to users.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>
        <para>The interface supplies both <see langword="IDispatch" /> and VTBL 
    binding.<see langword=" " /></para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>
        <para>The interface cannot add members at run time.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>
        <para>The types used in the interface are fully compatible 
       with Automation, including VTBL binding support.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>
        <para>This flag is intended for system-level types or types 
       that type browsers should not display.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>
        <para>The class supports aggregation.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>
        <para>The object supports 
   <see langword="IConnectionPointWithDefault" />, and has default behaviors.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>
        <para>Indicates that the interface derives from 
    <see langword="IDispatch" />, either directly or indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>
   Indicates base interfaces should be checked for name
   resolution before checking children, the reverse of the default behavior.
</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>
        <para>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />
in the COM type library from where this method was imported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>
        <para>This flag is intended for system-level functions or
       functions that type browsers should not display.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>
        <para>The function returns an object that is a source of events.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>
    The function that supports data binding.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>
        <para>When set, any call to a method that sets the property 
       results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>
        <para>The function that is displayed to the user as 
       bindable. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> must also be set.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>
        <para>The function that best represents the object.<see langword=" " />Only one function in a type information can have this attribute.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>
        <para>The function should not be displayed to the user, 
       although it exists and is bindable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>
        <para>The function supports <see langword="GetLastError" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>
        <para> Permits an optimization in which the compiler
      looks for a member named "xyz" on the type "abc". If such a member is found and is
      flagged as an accessor function for an element of the default collection, then a
      call is generated to that member function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>
        <para>The type information member is the default member for 
       display in the user interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>
        <para>The property appears in an object browser, but not in a 
       properties browser.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>
        <para>Tags the interface as having default behaviors.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>
        <para>Mapped as individual bindable properties.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>
        <para>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.VARFLAGS" />
in the COM type library from which the variable was imported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>
        <para>Assignment to the variable should not be allowed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>
        <para>The variable returns an object that is a source of events.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>
    The variable supports data binding.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>
        <para>Indicates that the property supports COM's <see langword="OnRequestEdit" /> 
 notification.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>
        <para>The variable is displayed as bindable, <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> must also be set.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>
    The variable is the single property that best represents
    the object. Only one variable in a type info may have this value.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>
    The variable should not be displayed in a browser,
    though it exists and is bindable.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>
    This flag is intended for system-level functions or
    functions that type browsers should not display.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>
        <para>Permits an optimization in which the compiler looks for 
       a member named "xyz" on the type "abc". If such a member is found and is
       flagged as an accessor function for an element of the default collection, then a
       call is generated to that member function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>
        <para>The default display in the user interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>
        <para>The variable appears in an object browser, but not in a 
       properties browser.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>
        <para>Tags the interface as having default behaviors.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>
    The variable is mapped as individual bindable
    properties.
 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>
        <para>Contains the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> that were
   originally imported for this type from the COM type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="TypeLibTypeAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="TypeLibTypeAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for this type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>
        <para>Contains the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> that
   were originally imported for this method from the COM type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="TypeLibFuncAttribute" /> class
      with the specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />
      value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="TypeLibFuncAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for this method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>
        <para>Contains the <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> that
   were originally imported for this field from the COM type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="TypeLibVarAttribute" /> class
      with the specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />
      value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> class with the
   specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value.</para>
      </summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for this field.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>
        <para>Indicates how the array elements should be
      marshaled when an array is marshaled from managed to unmanaged code as a <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>
   Indicates a value was not specified.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>
        <para> Indicates <see langword="null" /> 
similar to SQL.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>
        <para>Indicates a <see langword="short" /> integer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>
        <para>Indicates a <see langword="long" /> integer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>
        <para>Indicates a <see langword="float" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>
        <para>Indicates a <see langword="double" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>
        <para>Indicates a currency value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>
        <para>Indicates a <see langword="DATE" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>
        <para>Indicates a <see langword="BSTR" /> string.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>
        <para>Indicates an <see langword="IDispatch" /> pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>
        <para>Indicates an <see langword="SCODE" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>
        <para>Indicates a Boolean value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>
        <para>Indicates a VARIANT <see langword="far" /> pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>
        <para>Indicates an <see langword="IUnknown" /> 
pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>
        <para>Indicates a <see langword="decimal" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>
        <para>Indicates a <see langword="char" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>
        <para> Indicates a <see langword="byte" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>
        <para>Indicates an <see langword="unsigned" /><see langword="short" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>
        <para>Indicates an <see langword="unsigned" /><see langword="long" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>
        <para>Indicates a 64-bit integer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>
        <para>Indicates an 64-bit unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>
        <para>Indicates an integer value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>
        <para>Indicates an <see langword="unsigned" /> integer value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>
        <para>Indicates a C style <see langword="void" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>
        <para>Indicates an HRESULT.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>
        <para>Indicates a pointer type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>
        <para>Indicates a <see langword="SAFEARRAY" />. Not valid 
   in a <see langword="VARIANT" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>
        <para>Indicates a C style array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>
        <para>Indicates a user defined type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>
        <para>Indicates <see langword="null" /> terminated string.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>
        <para>Indicates a wide string terminated by <see langword="null" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>
        <para>Indicates a user defined type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>
        <para>Indicates a <see langword="FILETIME" /> value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>
        <para>Indicates length prefixed bytes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>
        <para>Indicates that the name of a stream follows.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>
        <para> Indicates that the name of a storage follows.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>
        <para>Indicates that a stream contains an object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>
        <para>Indicates that a storage contains an object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>
        <para>Indicates that a blob contains an object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>
        <para>Indicates the clipboard format.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>
        <para>Indicates a class ID.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>
        <para>Indicates a simple counted array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>
        <para>Indicates a <see langword="SAFEARRAY" /> pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>
        <para>Indicates that a value is a reference.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>
        <para> Identifies how parameters or fields should be marshaled to unmanaged
      code.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>
        <para>
		  4-byte Boolean value (<see langword="true " />!= 0, <see langword="false " />=
		  0).
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>
        <para>
		  1-byte signed integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>
        <para>
		  1-byte unsigned integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>
        <para>
		  2-byte signed integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>
        <para>
		  2-byte unsigned integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>
        <para>
		  4-byte signed integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>
        <para>
		  4-byte unsigned integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>
        <para>
		  8-byte signed integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>
        <para>
		  8-byte unsigned integer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>
        <para>
		  4-byte floating point number.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>
        <para>
		  8-byte floating point number.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>
        <para>Used on a <see cref="T:System.Decimal" qualify="true" /> to marshal the decimal value as a COM currency type 
   instead of as a <see langword="Decimal" />
   .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>
        <para>
		  Unicode character string that is a length prefixed double
		  byte.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>
        <para>
		  A single byte ANSI character string.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>
        <para>
		  A double byte Unicode character string.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>
        <para>A platform dependent character string, ANSI on Windows
      98, Unicode on Windows NT. This value is only supported for platform invoke, and
      not COM interop, because exporting a string of type
   <see langword="LPTStr" />
   is not supported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>
        <para>Used for in-line fixed length character arrays that 
       appear within a structure. The character type used with
    <see langword="ByValTStr" /> is determined by the <see cref="T:System.Runtime.InteropServices.CharSet" /> argument of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 
    applied to the containing structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>
    A COM <see langword="IUnknown" />
    pointer.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>
    A COM <see langword="IDispatch" />
    pointer.
 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>
        <para>
		  A C-style structure, used to marshal managed formatted classes and value
		  types.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>
        <para>A COM interface pointer. The <see cref="T:System.Guid" /> of the interface is obtained from the class
    metadata.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <para>A <see langword="SafeArray" /> is a self-describing array that carries the
    type, rank, and bounds of the associated array data.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
        <para>When <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" qualify="true" /> is set to
 <see langword="ByValArray" /> the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> must be set 
    to indicate the number of elements in the array. The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> field may optionally contain
    the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> of the array elements when it is
    necessary to differentiate among string types. Also, this <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> can only be used on an array
    that appear as fields in a structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>
        <para>A platform dependent signed integer. 4-bytes on 32 bit Windows, 8-bytes on
       64 bit Windows.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>
        <para>Hardware natural sized unsigned integer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>
   Allows Visual Basic to change a string in unmanaged code, and have
   the results reflected in managed code.
   </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>
        <para>
		  ANSI character string that is a length prefixed, single byte.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>
        <para>A length prefixed platform dependent 
    <see langword="char" /> string. ANSI on Windows 98,
       Unicode on Windows NT.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>
        <para>2-byte OLE defined Boolean value (<see langword="true" /> = -1,
<see langword="false" /> = 0).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>
        <para>
		  A function pointer.
	   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>
        <para>Dynamic type that determines the <see cref="T:System.Type" /> of an object at 
    runtime and marshals the object as that <see cref="T:System.Type" />.
 </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>
 A C style array. When marshaling from
 managed to unmanaged, the length of the array is determined by the length of the
 managed array. When marshaling from unmanaged to managed, the length of the
 array is determined from the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" qualify="true" /> and the <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" qualify="true" /> fields. Optionally followed by
 the unmanaged type of the elements within the array when it is necessary to
 differentiate among string types.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>
        <para> A pointer to a C-style structure. Used to marshal
      managed formatted classes.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
        <para> Specifies the custom marshaler class when used
 with <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" qualify="true" /> or <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" qualify="true" /> .
 The <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> field
 can be used
 to
 pass additional information to the custom marshaler.
 </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
        <para>This native type associated with an <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> or a <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> will cause the parameter to
    be exported as a HRESULT in the exported type library.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>
        <para> Indicates how the data should be marshaled between managed and unmanaged code.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>
        <para>Initializes a new instance of
      the <see langword="MarshalAsAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" />
      value.</para>
      </summary>
      <param name="unmanagedType">The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of
      the <see langword="MarshalAsAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value.</para>
      </summary>
      <param name="unmanagedType">The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>
        <para>Indicates the element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>
        <para>Indicates the user defined element type of the 
 <see langword="SAFEARRAY" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>
        <para>The element type of the unmanaged array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>
        <para>Indicates which parameter contains the count of array
      elements, much like <see langword="size_is" /> in COM, and is zero-based.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>
        <para> Indicates the number of elements in the fixed length array
      to import.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>
        <para>Specifies the fully qualified name of a custom
       marshaler.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>
        <para>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> as a type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>
        <para> 
      Provides additional information to a custom marshaler.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data
   is to be marshaled as.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>
        <para>Indicates that the attributed type was previously defined in COM.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComImportAttribute" />.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>
        <para> Supplies an explicit <see cref="T:System.Guid" /> when an automatic <see cref="T:System.Guid" /> is undesirable.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="GuidAttribute" /> class with the specified <see cref="T:System.Guid" />
   .</para>
      </summary>
      <param name="guid">The <see cref="T:System.Guid" /> to be assigned.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Guid" /> of the class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>
        <para> Indicates that the HRESULT or retval signature transformation
      that takes place during COM interop calls should be suppressed.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="PreserveSigAttribute" />
   class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>
        <para> Indicates that data should be marshaled from the caller to
      the callee.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of
      the <see langword="InAttribute" />
      class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>
        <para> Indicates that data should be
      marshaled from callee back to caller.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of
      the <see langword="OutAttribute" />
      class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>
        <para> Indicates that a parameter is optional.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="OptionalAttribute" /> class with default values.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>
        <para> Indicates that the attributed method is implemented as an export from an unmanaged DLL.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of
      the <see langword="DllImportAttribute" /> class
      with the name of the DLL containing the method to import.</para>
      </summary>
      <param name="dllName">The name of the DLL containing the unmanaged method.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>
        <para>Indicates the name or ordinal of the DLL entry point to
      be
      called.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>
        <para>Controls name mangling and indicates how to marshal <see cref="T:System.String" /> arguments to the
   method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>
        <para>Indicates that the callee will call the Win32 API
   <see langword="SetLastError" /> before returning from the attributed method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>
        <para> Indicates whether the name of the entry
      point in the unmanaged DLL should be modified to correspond to the <see cref="T:System.Runtime.InteropServices.CharSet" /> value specified in
      the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>
        <para> Indicates the managed method signature should not
      be transformed into an unmanaged signature that returns an HRESULT, and may have
      an additional [out, retval] argument for the return value.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>
        <para> Indicates the <see cref="T:System.Runtime.InteropServices.CallingConvention" />
value used when passing method arguments to the
unmanaged implementation.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>
        <para>Gets the name of the DLL file with the entry point.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>
        <para>The <see langword="StructLayoutAttribute" /> class allows the user to control the physical
   layout of the data fields of a class or structure.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>
        <para>Initalizes a new instance of the 
   <see langword="StructLayoutAttribute" /> class
      with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value.</para>
      </summary>
      <param name="layoutKind">The <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifes how the class or structure should be arranged.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initalizes a new instance of the 
   <see langword="StructLayoutAttribute" /> class with the
      specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value.</para>
      </summary>
      <param name="layoutKind">The <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifes how the class or structure should be arranged.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>
        <para>Controls the alignment of data fields of a class or
      structure in memory.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>
        <para>Indicates the absolute size of the structure or class.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>
        <para>Indicates how string data fields within the class
      should be marshaled.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the
   class or structure is arranged.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>
        <para> Indicates the physical position of fields within the unmanaged representation of a class or structure.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of 
      the <see langword="FieldOffsetAttribute" />
      class with the offset in the structure to the beginning of the field.</para>
      </summary>
      <param name="offset">The offset in bytes from the beginning of the structure to the beginning of the field.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>
        <para>Gets the offset from the beginning of the structure to the beginning of the
      field.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>
        <para> Indicates the COM alias for a parameter
      or field type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="ComAliasNameAttribute" />
   class with the alias for the attributed field or parameter.</para>
      </summary>
      <param name="alias">The alias for the field or parameter as found in the type library when it was imported.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>
        <para>Gets the alias for the field or parameter as found in the type library when it
      was imported.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>
        <para>Specifies whether the type should be marshaled using the
      Automation Marshaler or a custom proxy and stub.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the
      <see langword="AutomationProxyAttribute" /> class.</para>
      </summary>
      <param name="val">
        <see langword="true" /> indicates that the class should be marshaled using the Automation Marshaler; <see langword="false" /> indicates that a proxy stub marshaler should be used.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>
        <para> Gets a value indicating the type of marshaler to use.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>
        <para> Indicates that the attributed assembly is a
      primary interop assembly.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="PrimaryInteropAssembly" /> class with the major and minor version numbers of
 the type library for which this assembly is the primary interop assembly.</para>
      </summary>
      <param name="major"> The major version of the type library for which this assembly is the primary interop assembly.</param>
      <param name=" minor"> The minor version of the type library for which this assembly is the primary interop assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>
        <para>Gets the major version number of the type library for
 which this assembly is the primary interop assembly.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>
        <para>Gets the minor version number of the type library for
 which this assembly is the primary interop assembly.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>
        <para> Identifies the class
      ID of a coclass imported from a type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> with the
   class ID of the original coclass.</para>
      </summary>
      <param name="coClass">The class ID of the original coclass.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>
        <para>Gets the class ID of the original coclass.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>
        <para>Identifies the source interface and the class that implements the methods of
      the event interface that is generated when a coclass is imported from a COM type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" />
class with the source interface and event provider class.</para>
      </summary>
      <param name="SourceInterface">The original source interface from the type library, COM uses this interface to call back to the managed class.</param>
      <param name=" EventProvider">The class that implements the methods of the event interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>
        <para>Gets the original source interface from the type library, COM
      uses this interface to call back to the managed class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>
        <para>Gets the class that implements the methods of the event
      interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>
        <para>Specifies the calling convention required to call methods implemented in unmanaged code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>
        <para>Uses the default platform calling convention. For 
      example, on Windows it's <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> and on Windows
      CE it's <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />
      .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>
        <para> The caller cleans the stack. This 
      enables calling functions with <see langword="varargs" />
      .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>
        <para>The callee cleans the stack. This is the default convention for calling
      unmanaged functions from managed code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>
        <para>The first parameter is the <see langword="this" /> pointer and is
   stored in register ECX. Other parameters are pushed on the stack. This calling
   convention is used to call methods on classes exported from an unmanaged DLL.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>
   This calling convention is not supported in this version
   of the .NET Framework.
</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>
        <para>Dictates which character set marshaled strings should use.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>
        <para>This value is obsolete and now has the same 
      behavior as <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" qualify="true" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>
        <para> Marshal strings as ANSI 1-byte characters.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>
        <para> Marshal strings as Unicode 2-byte characters.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>
        <para>Automatically marshal strings appropriately for the
      target system. The default is <see cref="F:System.Runtime.InteropServices.CharSet.Unicode" /> on Windows NT and Windows
      2000, and <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> on Windows 98.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>
        <para>The exception thrown when an unrecognized HRESULT is returned from a COM
      method call.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>
        <para> The base exception type for all COM interop exceptions
      and structured exception handling (SEH) exceptions.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ExternalException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ExternalException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ExternalException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ExternalException" />
 class with
 a
 specified error message and the HRESULT of the error.</para>
      </summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="ExternalException" />
 class from serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>
        <para> Gets the HRESULT of the error.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>
        <para>Initializes a new instance of
      the <see langword="COMException" />
      class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance
      of <see langword="COMException" />
      with a specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the 
   <see cref="T:System.Runtime.InteropServices.COMException" />
   class with a specified error message and a reference to the
   inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of
   <see langword="COMException" />
   with a specified message and error code.</para>
      </summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with this exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="COMException" /> class from serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>
        <para>Converts the contents of the exception to a string.</para>
      </summary>
      <returns>
        <para>A string containing the <see cref="P:System.Exception.HResult" /> , <see cref="P:System.Exception.Message" />,
<see cref="P:System.Exception.InnerException" />, and <see cref="P:System.Exception.StackTrace" /> properties of the
   exception.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>
        <para> Describes the type of a COM member.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>
        <para> The member is a normal method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>
        <para> The member gets properties.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>
        <para>The member sets properties.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>
        <para> Wraps objects the marshaler should marshal
      as a <see langword="VT_CY" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the
<see langword="Decimal" /> to be
   wrapped and marshaled as type <see langword="VT_CY" />
   .</para>
      </summary>
      <param name="obj">The <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" /> .</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with
   the object containing the <see langword="Decimal" />to be wrapped and
   marshaled as type <see langword="VT_CY" /> .</para>
      </summary>
      <param name="obj">The object containing the <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" /> .</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>
        <para>Gets the wrapped object to be marshaled as type
   <see langword="VT_CY" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>
        <para> Wraps objects the marshaler should marshal as a
 <see langword="VT_DISPATCH" />
 .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> class with the object being
 wrapped.</para>
      </summary>
      <param name="obj">The object to be wrapped and converted to <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>
        <para>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>
        <para>Wraps objects the marshaler should marshal as a 
 <see langword="VT_ERROR" />.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT of the 
    error.</para>
      </summary>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with an object containing the 
 HRESULT of the error.</para>
      </summary>
      <param name="errorCode">The object containing the HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT that
   corresponds to the exception supplied.</para>
      </summary>
      <param name="e">The exception to be converted to an error code.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>
    Gets the error code of the wrapper.
 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExtensibleClassFactory">
      <summary>
        <para> Enables customization of managed objects
      that extend from unmanaged objects during creation.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExtensibleClassFactory.RegisterObjectCreationCallback(System.Runtime.InteropServices.ObjectCreationDelegate)">
      <summary>
        <para> Registers a <see langword="delegate" /> that is called when an
   instance of a managed type, that extends from an unmanaged type, needs to allocate
   the aggregated unmanaged object.</para>
      </summary>
      <param name="callback">A <see langword="delegate" /> that is called in place of <see langword="CoCreateInstance" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>
        <para> Represents the types of handles the
   <see cref="T:System.Runtime.InteropServices.GCHandle" /> class can allocate.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>
        <para> This handle type is used to track an object, but allow it to be collected.
      When an object is collected, the contents of the <see cref="T:System.Runtime.InteropServices.GCHandle" />
      are zeroed.
   <see langword="Weak" /> references are zeroed before the finalizer runs, so even
      if the finalizer resurrects the object, the <see langword="Weak" />
      reference is still zeroed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>
        <para> This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" /> , but the handle is not zeroed if the
   object is resurrected during finalization.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>
        <para>This handle type represents an opaque handle, meaning you cannot resolve the address of the pinned object
      through the handle. Used to track an object and prevent its collection by the garbage collector.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>
        <para> This handle type is similar to <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />, but allows the
   address of the <see langword="Pinned" /> object to
   be taken. This prevents the garbage collector from moving the object and hence
   undermines the efficiency of the garbage collector.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>
        <para>Provides a means for accessing a managed object from
      unmanaged memory.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>
        <para>Allocates a <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />
handle for the specified object.</para>
      </summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />.</param>
      <returns>
        <para> Returns a new <see cref="T:System.Runtime.InteropServices.GCHandle" /> that protects the object from garbage collection. This
<see langword="GCHandle" /> must 
   be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when it is no longer
   needed.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>
        <para>Allocates a handle of the specified type for the specified object.</para>
      </summary>
      <param name="value">The object that uses the <see cref="T:System.Runtime.InteropServices.GCHandle" />.</param>
      <param name=" type">The type of <see cref="T:System.Runtime.InteropServices.GCHandle" /> to create.</param>
      <returns>
        <para>Returns a new <see cref="T:System.Runtime.InteropServices.GCHandle" /> of the specified type. This
<see langword="GCHandle" /> must 
   be released with <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when
   it
   is no longer needed.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>
        <para>Releases a <see cref="T:System.Runtime.InteropServices.GCHandle" />.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>
        <para>Retrieves the address of an object in a <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> handle.</para>
      </summary>
      <returns>
        <para>Returns the address of the of the
 <see langword="Pinned" /> object as an <see cref="T:System.IntPtr" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
        <para>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer
   representation. This method allows you to retrieve a <see cref="T:System.Runtime.InteropServices.GCHandle" />
   from an integer value.</para>
      </summary>
      <param name="value">The handle for which the conversion is required.</param>
      <returns>
        <para>Returns the <see cref="T:System.Runtime.InteropServices.GCHandle" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <para>A <see cref="T:System.Runtime.InteropServices.GCHandle" /> is stored using an internal integer
   representation. This method can be used to retrieve the integer value from a
<see cref="T:System.Runtime.InteropServices.GCHandle" />.</para>
      </summary>
      <param name="value">The handle for which the integer is required.</param>
      <returns>
        <para>Returns the integer value.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>
        <para> Gets and
      sets the object this handle represents.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>
        <para>Gets a value indicating whether the handle is allocated.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>
        <para>Wraps a managed object holding a handle to a resource that is passed to unmanaged
      code using platform invoke.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="HandleRef" /> class with the object to wrap and a handle
      to the resource used by unmanaged code.</para>
      </summary>
      <param name="wrapper">Managed object that should not be finalized until the platform invoke call returns.</param>
      <param name=" handle">Handle to a resource.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>
        <para>Returns the handle to a resource of the specified
   <see langword="HandleRef" /> object.</para>
      </summary>
      <param name="value">The object that needs a handle.</param>
      <returns>
        <para>The handle to a resource of the
      specified <see langword="HandleRef" /> object.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>
        <para>Gets the object holding the handle to a resource.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>
        <para>Gets the handle to a resource.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>
        <para> Provides a way for clients to access the actual object, rather than
 the adapter object handed out by a custom marshaler.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>
        <para> Provides access to the underlying object
 wrapped by a custom marshaler.</para>
      </summary>
      <returns>
        <para>The object contained by the adapter object.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>
        <para> Designed to provide custom wrappers for
      handling method calls.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>
 Converts the unmanaged data to managed data.
</summary>
      <param name="pNativeData"> A pointer to the unmanaged data to be wrapped.</param>
      <returns>
 Returns the managed view of the COM data.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>
 Converts the managed data to unmanaged data.
</summary>
      <param name="ManagedObj">The managed object to be converted.</param>
      <returns>
 Returns the COM view of the managed object.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>
        <para> Performs necessary cleanup of the unmanaged data when it is no longer
 needed.</para>
      </summary>
      <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>
 Performs necessary cleanup of the managed data when it
 is no longer needed.
</summary>
      <param name="ManagedObj">The managed object to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>
        <para>Returns the size of the native data to be marshaled.</para>
      </summary>
      <returns>
        <para>The size in bytes of the native data.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>
        <para> Enables users to write activation code for
      managed objects that extend <see cref="T:System.MarshalByRefObject" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>
        <para>Creates a new instance of the specified type.</para>
      </summary>
      <param name="serverType">The type to activate.</param>
      <returns>
        <para>A <see cref="T:System.MarshalByRefObject" />
associated with the specified type.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>
        <para> The exception thrown when an invalid COM object is
      used.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>
        <para>Initializes an instance of the
   <see langword="InvalidComObjectException" />
   with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>
        <para>Initializes an instance of the
   <see langword="InvalidComObjectException" />
   with a message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see langword="COMException" /> class from
   serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>
        <para>The exception thrown by the marshaler when it encounters an argument of a
      variant type that can not be marshaled to managed code. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="InvalidOleVariantTypeException" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of
      the <see langword="InvalidOleVariantTypeException" /> class with a specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="InvalidOleVariantTypeException" /> class from serialization
      data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.AssemblyRegistrationFlags">
      <summary>
        <para>Defines a set of flags used when registering assemblies.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.None">
      <summary>
        <para>Indicates no special settings.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.AssemblyRegistrationFlags.SetCodeBase">
      <summary>
        <para>Indicates that the code base key for the assembly 
      should be set in the registry.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IRegistrationServices">
      <summary>
        <para>Provides a set of services for registering and 
 unregistering managed assemblies for use from COM.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)">
      <summary>
        <para> Registers the classes in a managed assembly to enable creation from COM.</para>
      </summary>
      <param name="assembly">The assembly to be registered.</param>
      <param name=" flags">An <see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags" /> value indicating any special settings needed when registering <paramref name="assembly" />.</param>
      <returns>
        <para>
          <see langword="true" />
if <paramref name="assembly" /> contains types that were successfully
registered; otherwise <see langword="false" /> if the assembly contains no
eligible types.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.UnregisterAssembly(System.Reflection.Assembly)">
      <summary>
        <para>Unregisters the classes in a managed assembly.</para>
      </summary>
      <param name="assembly">The assembly to be unregistered.</param>
      <returns>
        <para>
          <see langword="" />
        </para>
        <see langword="true" /> if 
<paramref name="assembly" /> contains types that were successfully unregistered; otherwise 
<see langword="false" /> if the assembly contains no eligible types.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetRegistrableTypesInAssembly(System.Reflection.Assembly)">
      <summary>
        <para> Retrieves a list of classes in an assembly that would
      be registered by a call to <see cref="M:System.Runtime.InteropServices.IRegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)" />
      .</para>
      </summary>
      <param name="assembly">The assembly to search for classes.</param>
      <returns>
        <para>A <see cref="T:System.Type" /> array containing a 
   list of classes in <paramref name="assembly" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetProgIdForType(System.Type)">
      <summary>
        <para>Retrieves the COM ProgID for a specified type.</para>
      </summary>
      <param name="type">The type whose ProgID is being requested.</param>
      <returns>
   The ProgID for the specified type.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.RegisterTypeForComClients(System.Type,System.Guid@)">
      <summary>
        <para>Adds the appropriate registry entries for the specified
      type using the specified GUID.</para>
      </summary>
      <param name="type">The type to be registered for use from COM.</param>
      <param name=" g">GUID used to register the specified type.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.GetManagedCategoryGuid">
      <summary>
        <para>Returns the GUID of the COM category that contains the managed classes.</para>
      </summary>
      <returns>
   The GUID of the COM category that
   contains the managed classes.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRequiresRegistration(System.Type)">
      <summary>
        <para>Determines whether the specified type requires registration.</para>
      </summary>
      <param name="type">The type to check for COM registration requirements.</param>
      <returns>
        <para>
          <see langword="true" /> if the type
   must be registered for use from COM; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IRegistrationServices.TypeRepresentsComType(System.Type)">
      <summary>
        <para>Determines whether the specified type is a COM type.</para>
      </summary>
      <param name="type">The type to determine if it is a COM type.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified
 type is a COM type; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImporterFlags">
      <summary>
        <para> Indicates how an assembly
 should be produced.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibImporterFlags.PrimaryInteropAssembly">
      <summary>
        <para> Generates a primary interop assembly.
 See <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> for
 details. A keyfile must
 be specified.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibImporterFlags.UnsafeInterfaces">
      <summary>
        <para>Imports all interfaces as interfaces that suppress the
 common language runtime's stack crawl for <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" qualify="true" />
 permission. Be sure you understand the responsibilities associated with
 suppressing this security check.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibImporterFlags.SafeArrayAsSystemArray">
      <summary>
        <para>Imports all <see langword="SAFEARRAY" />s a <see cref="T:System.Array" qualify="true" /> rather than a typed,
   single dimenional, zero-based managed array. This option is useful when dealing
   with multi dimensional, non zero-based <see langword="SAFEARRAY" />s which otherwise can
   not be accessed unless you edit the resulting assembly using the ILDASM and ILASM tools.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibExporterFlags">
      <summary>
        <para> Indicates how a type library
 should be produced.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibExporterFlags.OnlyReferenceRegistered">
      <summary>
        <para>Export references to types that were imported from COM as 
 <see langword="IUnknown" /> if the type does not have a registered type 
 library.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ImporterEventKind">
      <summary>
        <para>Describes the callbacks that the type library importer makes when importing a
 type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_TYPECONVERTED">
      <summary>
        <para> Event is invoked when a type has been imported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.NOTIF_CONVERTWARNING">
      <summary>
        <para>Event is invoked when a warning occured during conversion.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ImporterEventKind.ERROR_REFTOINVALIDTYPELIB">
      <summary>
 This property is not supported in this version of the
 .NET Framework.
</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExporterEventKind">
      <summary>
        <para> Describes the callbacks that
 the type library exporter makes when exporting a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_TYPECONVERTED">
      <summary>
        <para> Event is invoked when a type has been exported.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.NOTIF_CONVERTWARNING">
      <summary>
        <para>Event is invoked when a warning occurs during conversion.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ExporterEventKind.ERROR_REFTOINVALIDASSEMBLY">
      <summary>
        <para> This value is not supported in
 this version of the .NET Framework.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink">
      <summary>
        <para> Provides a callback mechanism for
 the type library converter to inform the caller of the status of the conversion, and
 involve the caller in the conversion process itself.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ReportEvent(System.Runtime.InteropServices.ImporterEventKind,System.Int32,System.String)">
      <summary>
        <para> Notifies the caller that an event occured
 during the conversion of a type library.</para>
      </summary>
      <param name="eventKind">An <see cref="T:System.Runtime.InteropServices.ImporterEventKind" /> value indicating the type of event.</param>
      <param name=" eventCode">Indicates extra information about the event.</param>
      <param name=" eventMsg">A message generated by the event.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibImporterNotifySink.ResolveRef(System.Object)">
      <summary>
        <para>Asks the user to resolve a reference to
 another type library.</para>
      </summary>
      <param name="typeLib">The object implementing the <see langword="ITypeLib" /> interface that needs to be resolved.</param>
      <returns>
        <para> The assembly corresponding to
 <paramref name="typeLib" /> .</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink">
      <summary>
        <para> Provides a callback mechanism for the assembly converter to
 inform the caller of the status of the conversion, and involve the caller in the
 conversion process itself.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ReportEvent(System.Runtime.InteropServices.ExporterEventKind,System.Int32,System.String)">
      <summary>
        <para> Notifies the caller that an event occured during
 the conversion of an assembly.</para>
      </summary>
      <param name="eventKind">An <see cref="T:System.Runtime.InteropServices.ExporterEventKind" /> value indicating the type of event.</param>
      <param name=" eventCode">Indicates extra information about the event.</param>
      <param name=" eventMsg">A message generated by the event.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNotifySink.ResolveRef(System.Reflection.Assembly)">
      <summary>
        <para>Asks the user to resolve a reference to another assembly.</para>
      </summary>
      <param name="assembly">The assembly to resolve.</param>
      <returns>
        <para> The type library for
 <paramref name="assembly" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibConverter">
      <summary>
        <para>Provides a set of services that convert a managed 
 assembly to a COM type library and vice versa.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)">
      <summary>
        <para>Converts a COM type library to an assembly.</para>
      </summary>
      <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
      <param name=" asmFileName">The file name of the resulting assembly.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller.</param>
      <param name=" publicKey">A <see langword="byte" /> array containing the public key.</param>
      <param name=" keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
      <param name=" asmNamespace">The namespace for the resulting assembly.</param>
      <param name=" asmVersion">The version of the resulting assembly. If<see langword=" null" />, the version of the type library is used.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type
 library.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)">
      <summary>
        <para>Converts an assembly to a COM type library.</para>
      </summary>
      <param name="assembly">The assembly to convert.</param>
      <param name=" typeLibName">The file name of the resulting type library.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">The <see cref="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink" /> interface implemented by the caller.</param>
      <returns>
        <para>An object that implements the <see langword="ITypeLib" /> interface.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)">
      <summary>
        <para> Gets the name and code base of a primary
 interop assembly for a specified type library.</para>
      </summary>
      <param name="g">The GUID of the type library.</param>
      <param name=" major">The major version number of the type library.</param>
      <param name=" minor">The minor version number of the type library.</param>
      <param name=" lcid">The LCID of the type library.</param>
      <param name=" asmName">On successful return, the name of the primary interop assembly associated with <paramref name="g" />. </param>
      <param name=" asmCodeBase">On successful return, the code base of the primary interop assembly associated with <paramref name="g" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
 primary interop assembly was found in the registry; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)">
      <summary>
        <para>Converts a COM type library to an assembly.</para>
      </summary>
      <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
      <param name=" asmFileName">The file name of the resulting assembly.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller.</param>
      <param name=" publicKey">A <see langword="byte" /> array containing the public key.</param>
      <param name=" keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
      <param name=" unsafeInterfaces">If <see langword="true" /> , the interfaces require link time checks for <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permission. If <see langword="false" />, the interfaces require run time checks that require a stack walk and are more expensive, but are more secure.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type
 library.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ITypeLibExporterNameProvider">
      <summary>
        <para> Provides control over the casing of names
      when exported to a type library.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ITypeLibExporterNameProvider.GetNames">
      <summary>
        <para>Returns a list of names to control the casing of.</para>
      </summary>
      <returns>
        <para>An array of strings, where each
      element contains the name of a type to control casing for.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>
        <para> Controls the layout of an object when exported
      to unmanaged code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>
        <para> The members of the object are laid out
      sequentially, in the order in which they appear when exported to unmanaged
      memory. The members are laid out according to the packing specified in <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" qualify="true" />. </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>
        <para> The precise position of each member of an object in unmanaged memory is
      explicitly controlled. Each member must
      use the <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> to indicate the position of that
      field within the type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>
        <para> The runtime automatically chooses an
 appropriate layout for the members of an object in unmanaged memory.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>
        <para> Provides
      a collection of methods pertaining to allocating unmanaged memory, copying unmanaged memory blocks,
      and converting managed to unmanaged types.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>
        <para>Represents the default character size on the system. The default is 2 for Unicode
      systems and 1 for ANSI systems.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>
        <para>The maximum size of a DBCS character.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>
        <para>Allocates memory from the unmanaged native heap of the
      process using <see langword="GlobalAlloc" /> .</para>
      </summary>
      <param name="cb">The number of bytes in memory required.</param>
      <returns>
        <para> A pointer to the newly allocated memory. This memory
      must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>
        <para>Allocates memory from the unmanaged native heap of the process using
   <see langword="GlobalAlloc" /> .</para>
      </summary>
      <param name="cb">The number of bytes in memory required.</param>
      <returns>
        <para>A pointer to the newly allocated memory. This memory must be released using
   <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Resizes a block of memory previously allocated with
   <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> .</para>
      </summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> .</param>
      <param name=" cb">The new size of the allocated block.</param>
      <returns>
        <para>A pointer to the reallocated memory. This memory must be released using
   <see langword="FreeHGlobal" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>
        <para>Frees memory previously allocated from the unmanaged native heap
      of the process with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
      .</para>
      </summary>
      <param name="hglobal">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> .</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>
        <para> Allocates a block of memory of specified size from the
      COM task memory allocator using <see langword="CoTaskMemAlloc" />
      .
      </para>
      </summary>
      <param name="cb">The size of the block of memory to be allocated. </param>
      <returns>
        <para> An integer representing the address of the block of
      memory allocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      .
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>
        <para>Resizes a block of memory previously allocated with
   <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> .</para>
      </summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name=" cb">The new size of the allocated block.</param>
      <returns>
        <para>An integer representing the address of the block of
      memory reallocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>
        <para> Frees a block of memory allocated by the unmanaged COM
      task memory allocator with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
      .
      </para>
      </summary>
      <param name="ptr">An integer representation of the address of the memory to be freed. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>
        <para>Frees a <see langword="BSTR" /> using
<see langword="SysFreeString" /> .</para>
      </summary>
      <param name="ptr">An integer representation of the address of the <see langword="BSTR" /> to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>
        <para>Copies the contents of a managed <see cref="T:System.String" /> object into
   native heap, converting
   into ANSI format as it copies.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para>The address, in native heap, to where <paramref name="s" /> was copied, or 0 if <see langword="null" /> string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>
        <para>Copies the contents of a string to block of memory
      allocated from the unmanaged COM task allocator.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para> An integer representing a pointer to the block of
      memory allocated for the string, or 0 if <see langword="null" />
      string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>
        <para> Copies an ANSI string to a
      managed <see cref="T:System.String" /> object. Widens each ANSI character to Unicode.</para>
      </summary>
      <param name="ptr">The address in native heap of source string.</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object that holds a copy of
   the native ANSI string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>
        <para> Copies a specified number of
      characters from an ANSI string to a managed <see cref="T:System.String" />
      object. Widens
      each ANSI character to Unicode if needed.</para>
      </summary>
      <param name="ptr">The address in native heap of source string.</param>
      <param name="len">The number of ANSI characters to copy.</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object that holds a copy of
   the native ANSI string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>
        <para> Copies a specified number of characters from a
      Unicode string stored in native heap to a managed <see cref="T:System.String" />
      object.</para>
      </summary>
      <param name="ptr">The address in native heap of source string.</param>
      <param name="len">The number of Unicode characters to copy.</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object that holds a copy of
   the native string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>
        <para> Copies a specified number of characters from a
      string stored in native heap to a managed <see cref="T:System.String" />
      object.</para>
      </summary>
      <param name="ptr">The address in native heap of source string.</param>
      <param name="len">The number of characters to copy.</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object that holds a copy of
   the native string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>
        <para>Copies the contents of a managed <see cref="T:System.String" /> object into native heap.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para>Address, in native heap, to where the <paramref name="s" /> was copied, or 0 if <see langword="null" /> string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>
        <para>Copies the contents of a string to block of memory
      allocated from the unmanaged COM task allocator.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para> An integer representing a pointer to the block of
      memory allocated for the string, or 0 if <see langword="null" />
      string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>
        <para>Copies a Unicode string stored in native heap to a
      managed <see cref="T:System.String" /> object.</para>
      </summary>
      <param name="ptr">The address in native heap of source string</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object, holding a copy of
   the native string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>
        <para>Copies the contents of a managed <see cref="T:System.String" /> 
object into native heap, converting into ANSI format if required.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para> The address, in native heap, to where the string was
      copied, or 0 if <see langword="null" /> string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>
        <para>Copies the contents of a string to a block of memory
      allocated from the unmanaged COM task allocator.</para>
      </summary>
      <param name="s">A managed <see cref="T:System.String" /> object to be copied.</param>
      <returns>
        <para> The allocated memory block, or 0 if
   <see langword="null" /> string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>
        <para>Copies a string stored in native heap to a
      managed <see cref="T:System.String" /> object.</para>
      </summary>
      <param name="ptr">The address in native heap of source string.</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object, that holds a copy of
   the native string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>
        <para>Allocates a <see langword="BSTR" /> and copies the string contents into it.</para>
      </summary>
      <param name="s">The string to be copied.</param>
      <returns>
        <para> An unmanaged pointer to the <see langword="BSTR" /> , or
   0 if <see langword="null" /> string was supplied.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>
        <para>Copies a Unicode string stored in native heap to a
      managed <see cref="T:System.String" /> object.</para>
      </summary>
      <param name="ptr">The address in native heap of source string</param>
      <returns>
        <para>A managed <see cref="T:System.String" /> object that holds a copy of
   the native string.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>
        <para> Returns the unmanaged size of an object in bytes.</para>
      </summary>
      <param name="structure">The object whose size is to be returned.</param>
      <returns>
        <para>The size of <paramref name="structure" /> in unmanaged code.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>
        <para> Returns the unmanaged size of a type in bytes.</para>
      </summary>
      <param name="t">The type whose size is to be returned.</param>
      <returns>
        <para>The size of <paramref name="structure" /> in unmanaged code.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>
        <para>Returns the field offset of the unmanaged form of the
      class.</para>
      </summary>
      <param name="t">The specified class. This class must use the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> .</param>
      <param name="fieldName">The field within <paramref name="t" /> .</param>
      <returns>
        <para>The offset in bytes, for <paramref name="fieldName" /> within the
   platform invoke-declared class <paramref name="t" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>
        <para>Gets the address of the element at the specified 
      index
      inside the specified array.</para>
      </summary>
      <param name="arr">The array containing the desired element.</param>
      <param name=" index">The index in <paramref name="arr" /> of the desired element.</param>
      <returns>
   The address of <paramref name="index" /> inside
<paramref name="arr" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="int" /> array to an unmanaged
   memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="char" /> array to an unmanaged memory
   pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="short" />
array to an unmanaged memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="long" /> array to
   an unmanaged memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="float" /> array
   to an unmanaged memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="double" /> array to an unmanaged memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>
        <para>Copies data from a managed <see langword="byte" /> array to an unmanaged memory pointer.</para>
      </summary>
      <param name="source">The array to copy from.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" destination">The memory pointer to copy to.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="int" /> array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="char" />
      array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="short" /> array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="long" /> array.</para>
      </summary>
      <param name=" source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="float" /> array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="double" /> array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name=" destination">The array to copy to.</param>
      <param name=" startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name=" length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Copies data from an unmanaged memory pointer to a
      managed <see langword="byte" />
      array.</para>
      </summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The index into array where <see langword="Copy" /> should start.</param>
      <param name="length">The number of array elements to copy.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>
        <para>Reads a single byte from an unmanaged pointer.</para>
      </summary>
      <param name="ptr">The base address in native heap of source object. </param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading. </param>
      <returns>
        <para>The byte read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>
        <para>Reads a single byte from an unmanaged pointer.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to read.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The byte read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>
        <para> Reads a single byte from an unmanaged pointer.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to read. </param>
      <returns>
        <para>The byte read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>
        <para>Reads a 16-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of source object</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading</param>
      <returns>
        <para>The 16-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>
        <para>Reads a 16-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to read.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The 16-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>
        <para> Reads a 16-bit integer from native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to read. </param>
      <returns>
        <para>The 16-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>
        <para>Reads a 32-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of source object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The 32-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>
        <para>Reads a 32-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to read.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The 32-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>
        <para> Reads a 32-bit integer from native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to read. </param>
      <returns>
        <para>The 32-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>
        <para>Reads a processor native sized integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of source object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The <see langword="IntPtr" /> read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>
        <para>Reads a processor native sized integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to read.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The <see langword="IntPtr" /> read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>
        <para> Reads a processor native sized integer from native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to read. </param>
      <returns>
        <para>The <see langword="IntPtr" /> read from <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>
        <para>Reads a 64-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of source object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The 64-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>
        <para>Reads a 64-bit integer from native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to read.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before reading.</param>
      <returns>
        <para>The 64-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>
        <para> Reads a 64-bit integer from native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to read. </param>
      <returns>
        <para>The 64-bit integer read from
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>
        <para>Writes a single byte value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>
        <para>Writes a single byte value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>
        <para> Writes a single byte value into native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to write. </param>
      <param name="val">The value to be written. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>
        <para>Writes a 16-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>
        <para>Writes a 16-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>
        <para>Writes a 16-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The address in native heap from which to write.</param>
      <param name=" val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>
        <para>Writes a 16-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>
        <para>Writes a 16-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>
        <para> Writes a 16-bit integer value into native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to write. </param>
      <param name="val">The value to be written. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>
        <para>Writes a 32-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>
        <para>Writes a 32-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>
        <para> Writes a 32-bit integer value into native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
        <para>Writes a processor native sized integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>
        <para>Writes a processor native sized integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>
        <para> Writes a processor native sized integer value into native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>
        <para>Writes a 64-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap from which to write.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>
        <para>Writes a
      64-bit integer value into native heap.</para>
      </summary>
      <param name="ptr">The base address in native heap of the target object.</param>
      <param name="ofs">An additional byte offset, added to <paramref name="ptr" /> before writing.</param>
      <param name="val">The value to write.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>
        <para> Writes a 64-bit integer value into native heap.
      </para>
      </summary>
      <param name="ptr">The address in native heap from which to write. </param>
      <param name="val">The value to write. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>
        <para> Returns the error code returned by the
      last unmanaged function called using platform invoke that has
      the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</para>
      </summary>
      <returns>
        <para>The last Win32 error code.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>
        <para> Returns the HRESULT corresponding to the last
      error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal" />.</para>
      </summary>
      <returns>
        <para>The HRESULT corresponding to the last Win32 error code.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>
        <para> Executes the one-time method set up tasks
      without calling the method.</para>
      </summary>
      <param name="m">The method to be checked.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>
        <para> Performs a pre-link check for all methods
      on a class.</para>
      </summary>
      <param name="c">The class whose methods are to be checked.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)">
      <summary>
        <para> Calculates the number of bytes required to hold the parameters for
      the specified method.
      </para>
      </summary>
      <param name="m">The method to be checked. </param>
      <returns>
        <para> The number of bytes required.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>
        <para>Retrieves a machine independent description of an 
      exception, and information about the machine state that existed for the thread
      when the exception occurred.</para>
      </summary>
      <returns>
   An <see cref="T:System.IntPtr" /> to an
<see langword="EXCEPTION_POINTERS" /> structure.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>
        <para>Retrieves a code that identifies the type of the exception that occurred.</para>
      </summary>
      <returns>
        <para> 
      The type of the exception.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Retrieves the name of a type library.</para>
      </summary>
      <param name="pTLB">An <see langword="ITypeLib" /> pointer.</param>
      <returns>
        <para>The name of of the type library pointed to by <paramref name="pTLB" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Retrieves the GUID of a type library.</para>
      </summary>
      <param name="pTLB">An <see langword="ITypeLib" /> pointer.</param>
      <returns>
        <para>The GUID of the type library pointed to by 
   <paramref name="pTLB" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>
        <para>Retrieves the LCID of a type library.</para>
      </summary>
      <param name="pTLB">An <see langword="ITypeLib" /> pointer.</param>
      <returns>
        <para>The LCID of the type library pointed to by <paramref name="pTLB" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)">
      <summary>
        <para> Retrieves the GUID that is assigned to a type
      library when it was exported from the specified assembly.</para>
      </summary>
      <param name="asm">A managed assembly.</param>
      <returns>
        <para> The GUID that is assigned to a type library when it is 
      exported from <paramref name="asm" />
      .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)">
      <summary>
        <para>Retrieves the name of the type represented by an
   <see langword="ITypeInfo" /> .</para>
      </summary>
      <param name="pTI">An <see langword="ITypeInfo" /> pointer.</param>
      <returns>
        <para>The name of the type pointed to by <paramref name="pTI" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)">
      <summary>
        <para>Converts an <see langword="ITypeInfo" /> into a
   managed <see cref="T:System.Type" />
   object.</para>
      </summary>
      <param name="piTypeInfo">The <see langword="ITypeInfo" /> interface to marshal.</param>
      <returns>
        <para>A managed type that represents the unmanaged
   <see langword="ITypeInfo" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)">
      <summary>
        <para>Returns an <see langword="ITypeInfo " />interface from a managed type.</para>
      </summary>
      <param name="t">The type whose <see langword="ITypeInfo" /> interface is being requested.</param>
      <returns>
        <para>The <see langword="ITypeInfo" /> 
pointer for <paramref name="t" />
.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>
        <para>Returns an <see langword="IUnknown " />interface from a
   managed object.</para>
      </summary>
      <param name="o">The object whose <see langword="IUnknown" /> interface is requested.</param>
      <returns>
        <para>The <see langword="IUnknown" /> pointer 
   for <paramref name="o" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>
        <para>Returns an <see langword="IDispatch" /> interface from a managed object.</para>
      </summary>
      <param name="o">The object whose <see langword="IDispatch" /> interface is requested.</param>
      <returns>
        <para>The <see langword="IDispatch" /> 
pointer for <paramref name="o" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>
        <para>Returns an <see langword="IUnknown " /> pointer representing the
   specified interface for an object.</para>
      </summary>
      <param name=" o">The object providing the interface.</param>
      <param name=" T">The type of interface that is requested.</param>
      <returns>
        <para>The
   <see langword="IUnknown " />pointer representing the interface for the object. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>
        <para>Returns an instance of a type that represents an unmanaged
      COM object by a pointer to its <see langword="IUnknown" />
      interface.</para>
      </summary>
      <param name="pUnk"> A pointer to the <see langword="IUnknown" /> interface of the managed object to return.</param>
      <returns>
        <para>An object 
      representing the specified unmanaged COM object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>
        <para>Returns a managed object of a specified type that
      represents an unmanaged COM object.</para>
      </summary>
      <param name="pUnk">A pointer to the <see langword="IUnknown" /> interface of the unmanaged COM object.</param>
      <param name="t">The type of the requested managed class.</param>
      <returns>
        <para>An instance of the class corresponding to
      the <see cref="T:System.Type" /> object that represents the
      requested unmanaged COM object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>
        <para> Indicates whether a specified object represents an unmanaged COM
      object.
      </para>
      </summary>
      <param name="o"> The object to check. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="o" /> is a COM type; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>
        <para> Decrements the reference count of the supplied runtime callable
      wrapper (RCW). </para>
      </summary>
      <param name="o">The COM object to release.</param>
      <returns>
        <para>The new value of the reference count of the RCW
      associated with <paramref name="o" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>
        <para>Gets data referenced by the specified key from the specified COM
      object.</para>
      </summary>
      <param name="obj">The COM object containing the desired data.</param>
      <param name=" key">The key in the internal hash table of <paramref name="obj" /> to retrieve the data from.</param>
      <returns>
        <para>The data represented by <paramref name="key" /> 
in the internal hash table of <paramref name="obj" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>
        <para>Sets data referenced by the specified key in the
      specified COM object.</para>
      </summary>
      <param name="obj">The COM object to store the data.</param>
      <param name=" key">The key in the internal hash table of <paramref name="obj " /> to store the data.</param>
      <param name=" data">The data to set.</param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="data" />
was set successfully; <see langword="false" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>
        <para> Wraps the specified COM object in
      an object of the specified type.</para>
      </summary>
      <param name="o">The object to be wrapped.</param>
      <param name=" t">The type of wrapper to create.</param>
      <returns>
        <para>The newly wrapped object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache">
      <summary>
   Forces the aggressive release of the current thread's
   cache.
</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)">
      <summary>
        <para>Converts a fiber cookie into the 
      corresponding <see cref="T:System.Threading.Thread" qualify="true" />
      instance. </para>
      </summary>
      <param name="cookie">An integer representing a fiber cookie.</param>
      <returns>
   A <see langword="Thread" />
   corresponding to <paramref name="cookie" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>
        <para>Indicates whether a type is visible to COM clients.</para>
      </summary>
      <param name="t">The type to check for COM visibility.</param>
      <returns>
        <para>
          <see langword="true " />if the type
   is visible to COM; otherwise <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>
        <para> Requests a pointer to a specified interface from an existing
      interface.
      </para>
      </summary>
      <param name="pUnk">The interface to be queried. </param>
      <param name="iid">The IID of the requested interface </param>
      <param name="ppv">The returned interface. </param>
      <returns>
        <para>
          <paramref name="ppv" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>
        <para> Increments the reference count on the specified interface.</para>
      </summary>
      <param name="pUnk">The interface reference count to increment. </param>
      <returns>
        <para>The new value of the reference count on 
   <paramref name="pUnk" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>
        <para> Decrements the reference count on the specified
      interface.
      </para>
      </summary>
      <param name="pUnk">The interface to release. </param>
      <returns>
        <para>The new value of the reference count on 
   <paramref name="pUnk" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>
        <para>Marshals data from a managed object to an unmanaged
      block of memory.</para>
      </summary>
      <param name="structure">A managed object holding the data to be marshaled. This object must be an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">If <see langword="true" />, <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> will be called on <paramref name="ptr" /> before this method executes. Note that passing <see langword="false" /> can lead to a memory leak.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>
        <para>Marshals data from an unmanaged block of memory pointed
 to a managed object.</para>
      </summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>
        <para>Marshals data from an unmanaged block of memory to a newly
      allocated object of the specified type.</para>
      </summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structureType">The type of object to be created. This type object must represent a formatted class or a value class.</param>
      <returns>
        <para>A managed object containing the data pointed to by
   <paramref name="ptr" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>
        <para>Frees all substructures pointed to by the specified native memory block.</para>
      </summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structuretype">A formatted class. This provides the layout information necessary to delete the buffer or buffers in <paramref name="ptr" /> .</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>
        <para>Converts an object to a COM VARIANT.</para>
      </summary>
      <param name="obj">The object for which to get a COM VARAINT.</param>
      <param name=" pDstNativeVariant">An <see cref="T:System.IntPtr" /> to receive the VARAIANT corresponding to <paramref name="obj" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>
        <para>Converts a COM VARIANT to an object.</para>
      </summary>
      <param name="pSrcNativeVariant">An <see cref="T:System.IntPtr" /> containing a COM VARIANT.</param>
      <returns>
        <para>An object corresponding to
   <paramref name="pSrcNativeVaraint" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>
        <para>Converts an array of COM VARIANTs to an array of objects.</para>
      </summary>
      <param name="aSrcNativeVariant">An <see cref="T:System.IntPtr" /> containing an array of COM VARIANTs.</param>
      <param name=" cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <returns>
        <para>An object array corresponding to
   <paramref name="aSrcNativeVariant" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>
        <para>Gets the first slot in the virtual function table (VTBL) that contains user defined
      methods.</para>
      </summary>
      <param name="t">A type representing an interface.</param>
      <returns>
        <para>The first VTBL slot that contains user defined methods. The
      first slot is 3 if the interface is <see langword="IUnknown" /> based, and
      7 if the interface is <see langword="IDispatch" /> based.</para>
      </returns>
      <summary>
        <para>Returns the first valid COM slot that GetMethodInfoForSlot will work on
            This will be 3 for IUnknown based interfaces and 7 for IDispatch based interfaces. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>
        <para>Gets the last slot in the virtual function table (VTBL)
      of a type when exposed to COM.</para>
      </summary>
      <param name="t">A type representing an interface or class.</param>
      <returns>
        <para>The last VTBL slot of the
      interface when exposed to COM. If <paramref name="t" /> is a
      class, the returned VTBL slot is the last slot in the interface that is generated
      from the class.</para>
      </returns>
      <summary>
        <para>Returns the last valid COM slot that GetMethodInfoForSlot will work on. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)">
      <summary>
        <para>Retrieves <see langword="MethodInfo" /> for the specified
   virtual function table (VTBL) slot.</para>
      </summary>
      <param name="t">The type for which the <see langword="MethodInfo" /> is to be retrieved.</param>
      <param name=" slot">The VTBL slot.</param>
      <param name=" memberType">
        <para>On successful return, the type of the member. This is one of the <see cref="T:System.Runtime.InteropServices.ComMemberType" /> values.</para>
      </param>
      <returns>
        <para>The <see langword="MemberInfo" /> that
   represents the member at the specified VTBL slot.</para>
      </returns>
      <summary>
        <para>Returns the MemberInfo that COM callers calling through the exposed 
            vtable on the given slot will be calling. The slot should take into account
            if the exposed interface is IUnknown based or IDispatch based.
            For classes, the lookup is done on the default interface that will be
            exposed for the class. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)">
      <summary>
        <para>Gets the virtual function table (VTBL) slot for a specified
   <see langword="MemberInfo" /> when exposed to COM.</para>
      </summary>
      <param name="m">A <see langword="MemberInfo" /> that represents an interface method.</param>
      <returns>
        <para>The VTBL slot <paramref name="m" /> id
   in when it is exposed to COM.</para>
      </returns>
      <summary>
        <para>Returns the COM slot for a memeber info, taking into account whether 
            the exposed interface is IUnknown based or IDispatch based</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>
        <para>Returns the HInstance for the specified module.</para>
      </summary>
      <param name="m">The module whose HInstance is desired.</param>
      <returns>
        <para>The HInstance for <paramref name="m;" /> -1 if the
   module does not have an HInstance.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>
        <para>Throws an exception with a specific HRESULT value.</para>
      </summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>
        <para>Throws an exception with a specific HRESULT.</para>
      </summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <param name=" errorInfo">A pointer to the <see langword="IErrorInfo" /> interface provided by the COM object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>
        <para> Converts the specified exception to
      an HRESULT. </para>
      </summary>
      <param name="e">The exception to convert to an HRESULT.</param>
      <returns>
        <para>The HRESULT mapped to the supplied exception.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>
        <para> Returns the GUID for the specified type, or 
      generates a GUID using the algorithm used by the
      Type
      Library Exporter (TlbExp.exe).</para>
      </summary>
      <param name="type">The type to generate a GUID for.</param>
      <returns>
        <para>A GUID for the
      specified type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>
        <para> Returns a ProgID for the specified type.</para>
      </summary>
      <param name="type">The type to get a ProgID for.</param>
      <returns>
        <para>The ProgID of the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>
        <para>Gets an interface pointer identified by the specified moniker.</para>
      </summary>
      <param name="monikerName">The moniker coresponding to the desired interface pointer.</param>
      <returns>
   An object containing a reference to
   the interface pointer identified by <paramref name="monikerName" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)">
      <summary>
        <para>Obtains a running instance of the specified object from
      the Running Object Table (ROT).</para>
      </summary>
      <param name="progID">The ProgID of the object being requested.</param>
      <returns>
        <para>The object requested.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
        <para> Gets a pointer to a thunk that
      marshals a call from unmanaged to managed code.</para>
      </summary>
      <param name="pfnMethodToWrap">A pointer to the method to marshal. </param>
      <param name=" pbSignature">A pointer to the method signature.</param>
      <param name=" cbSignature">The number of bytes in <paramref name="pbSignature" />.</param>
      <returns>
        <para> A pointer to the thunk that
      will marshal a call from <paramref name="pfnMethodToWrap" />
      .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
        <para>Gets a pointer to a thunk that marshals a call from
      managed to unmanaged code.</para>
      </summary>
      <param name="pfnMethodToWrap">A pointer to the method to marshal.</param>
      <param name=" pbSignature">A pointer to the method signature.</param>
      <param name=" cbSignature">The number of bytes in <paramref name="pbSignature" />.</param>
      <returns>
        <para>A pointer to the thunk that will marshal a call from
   <paramref name="pfnMethodToWrap" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>
        <para>Changes the strength of a COM callable wrapper's (CCW)
      handle on the object it contains.</para>
      </summary>
      <param name="otp">The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise it is weak.</param>
      <param name=" fIsWeak">
        <see langword="true" /> to change the strength of the handle on <paramref name="otp " /> to weak regardless of its reference count; <see langword="false" /> to reset the handle strength on <paramref name="otp" /> to be reference counted.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>
        <para>The exception that is thrown by the marshaler when it encounters
      a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> it does not support.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="MarshalDirectiveException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see langword="MarshalDirectiveException" /> 
class with a specified error message.</para>
      </summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the 
 <see langword="MarshalDirectiveException" /> class from serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectCreationDelegate">
      <summary>
        <para>Creates a COM object.</para>
      </summary>
      <param name="aggregator">A pointer to the managed object's <see langword="IUnknown" /> interface.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.NoMangle">
      <summary>
        <para>
       Indicates the PInvoke is to use the member name as specified.
    </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CharSetMask">
      <summary>
        <para>
       Heuristic used in data type name mapping.
    </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CharSetNotSpec">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CharSetAnsi">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CharSetUnicode">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CharSetAuto">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.PinvokeOLE">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.SupportsLastError">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvMask">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvWinapi">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvCdecl">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvStdcall">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvThiscall">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PInvokeMap.CallConvFastcall">
      <summary>
        <para>[To be supplied.]</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>
        <para>Provides a collection of <see langword="static" /> methods that return information about the 
   common language runtime environment.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>
   Tests whether the specified assembly is loaded in the
   global assembly cache (GAC).
</summary>
      <param name="a">The assembly to determine if it is loaded in the GAC.</param>
      <returns>
        <see langword="true" /> if the assembly 
   is loaded in the GAC; otherwise <see langword="false" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>
        <para>Gets the version number of the common language runtime
 that is running the current process.</para>
      </summary>
      <returns>
 A string containing the version number
 of the common language runtime.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>
        <para>Gets the directory where the common language runtime is installed.</para>
      </summary>
      <returns>
        <para>A string containing the path to the
      directory where the common langauge runtime is installed.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>
        <para>Gets the path to the system configuration file.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.RegistrationServices">
      <summary>
        <para>Provides a set of services for registering and unregistering managed 
 assemblies for use from COM.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)">
      <summary>
        <para> Registers the classes in a managed assembly to enable creation from COM.</para>
      </summary>
      <param name="assembly">The assembly to be registered.</param>
      <param name="flags">An <see cref="T:System.Runtime.InteropServices.AssemblyRegistrationFlags" /> value indicating any special settings used when registering <paramref name="assembly" />.</param>
      <returns>
        <para>
          <see langword="" />
        </para>
        <see langword="true" /> if 
<paramref name="assembly" /> contains types that were successfully registered; otherwise 
<see langword="false" /> if the assembly contains no eligible types.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.UnregisterAssembly(System.Reflection.Assembly)">
      <summary>
        <para>Unregisters the classes in a managed assembly.</para>
      </summary>
      <param name="assembly">The assembly to be unregistered.</param>
      <returns>
        <para>
          <see langword="" />
        </para>
        <see langword="true" /> if 
<paramref name="assembly" /> contains types that were successfully unregistered; otherwise 
<see langword="false" /> if the assembly contains no eligible types.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetRegistrableTypesInAssembly(System.Reflection.Assembly)">
      <summary>
        <para> Retrieves a list of classes in an assembly
      that would be registered by a call to <see cref="M:System.Runtime.InteropServices.RegistrationServices.RegisterAssembly(System.Reflection.Assembly,System.Runtime.InteropServices.AssemblyRegistrationFlags)" />
      .</para>
      </summary>
      <param name="assembly">The assembly to search for classes.</param>
      <returns>
        <para>A <see cref="T:System.Type" /> aray containing a 
   list of classes in <paramref name="assembly" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)">
      <summary>
        <para>Retrieves the COM ProgID for the specified type.</para>
      </summary>
      <param name="type">The type corresponding to the ProgID that is being requested.</param>
      <returns>
        <para>The ProgID for the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.RegisterTypeForComClients(System.Type,System.Guid@)">
      <summary>
        <para>Adds the appropriate registry entries for the specified
      type using the specified GUID.</para>
      </summary>
      <param name="type">The type to be registered for use from COM.</param>
      <param name=" g">GUID used to register the specified type.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.GetManagedCategoryGuid">
      <summary>
        <para> Returns the GUID of the COM category that contains the managed classes.</para>
      </summary>
      <returns>
   The GUID of the COM category that
   contains the managed classes.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.TypeRequiresRegistration(System.Type)">
      <summary>
        <para>Determines whether the specified type requires registration.</para>
      </summary>
      <param name="type">The type to check for COM registration requirements. </param>
      <returns>
        <para>
          <see langword="true" /> if the type
   must be registered for use from COM; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)">
      <summary>
        <para>Determines whether the specified type is a COM type.</para>
      </summary>
      <param name="type">The type to check for being a COM type.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified type is a COM type; otherwise 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>
        <para>The exception thrown when the rank of an incoming <see langword="SAFEARRAY" /> does
   not match the rank specified in the managed signature.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayTypeMismatchException " />class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayRankMismatchException" /> class with the specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayTypeMismatchException" /> class from serialization
      data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>
        <para>The exception thrown when the type of the incoming
   <see langword="SAFEARRAY" /> does not match the type specified in the managed signature.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayTypeMismatchException" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayTypeMismatchException" /> class with the specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SafeArrayTypeMismatchException" /> class from
      serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>
        <para>Represents Structured Exception Handler (SEH) errors.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>
        <para>Initializes an instance of the
   <see langword="SEHException" />
   with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="SEHException" /> class with a specified
      message.</para>
      </summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see langword="SEHException" /> class from
   serialization data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>
        <para>Indicates whether the exception can be recovered from or 
      not, and if the code can continue from the point where the exception was thrown.</para>
      </summary>
      <returns>
        <para>Resumable exceptions are not yet implemented, so this
      method always returns <see langword="false" />
      .</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibConverter">
      <summary>
        <para>Provides a set of services that convert a managed assembly to a COM type 
 library and vice versa.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Int32,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.Boolean)">
      <summary>
        <para>Converts a COM type library to an assembly.</para>
      </summary>
      <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
      <param name=" asmFileName">The file name of the resulting assembly.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" />interface implemented by the caller.</param>
      <param name=" publicKey">A <see langword="byte" /> array containing the public key.</param>
      <param name=" keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
      <param name="unsafeInterfaces">If <see langword="true" />, the interfaces require link time checks for <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> permission. If <see langword="false" /> , the interfaces require run time checks that require a stack walk and are more expensive, but are more secure.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type
   library.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibConverter.ConvertTypeLibToAssembly(System.Object,System.String,System.Runtime.InteropServices.TypeLibImporterFlags,System.Runtime.InteropServices.ITypeLibImporterNotifySink,System.Byte[],System.Reflection.StrongNameKeyPair,System.String,System.Version)">
      <summary>
        <para>Converts a COM type library to an assembly.</para>
      </summary>
      <param name="typeLib">The object that implements the <see langword="ITypeLib" /> interface.</param>
      <param name=" asmFileName">The file name of the resulting assembly.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibImporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">
        <see cref="T:System.Runtime.InteropServices.ITypeLibImporterNotifySink" /> interface implemented by the caller.</param>
      <param name=" publicKey">A <see langword="byte" /> array containing the public key.</param>
      <param name=" keyPair">A <see cref="T:System.Reflection.StrongNameKeyPair" /> object containing the public and private cryptographic key pair.</param>
      <param name=" asmNamespace">The namespace for the resulting assembly.</param>
      <param name=" asmVersion">The version of the resulting assembly. If <see langword="null" />, the version of the type library is used.</param>
      <returns>
        <para>An <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object containing the converted type
   library.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibConverter.ConvertAssemblyToTypeLib(System.Reflection.Assembly,System.String,System.Runtime.InteropServices.TypeLibExporterFlags,System.Runtime.InteropServices.ITypeLibExporterNotifySink)">
      <summary>
        <para>Converts an assembly to a COM type library.</para>
      </summary>
      <param name="assembly">The assembly to convert.</param>
      <param name=" strTypeLibName">The file name of the resulting type library.</param>
      <param name=" flags">A <see cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" /> value indicating any special settings.</param>
      <param name=" notifySink">The <see cref="T:System.Runtime.InteropServices.ITypeLibExporterNotifySink" /> interface implemented by the caller.</param>
      <returns>
        <para>An object that implements the <see langword="ITypeLib" />
interface.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibConverter.GetPrimaryInteropAssembly(System.Guid,System.Int32,System.Int32,System.Int32,System.String@,System.String@)">
      <summary>
        <para> Gets the name and code base of a primary interop assembly for a specified type library.</para>
      </summary>
      <param name="g">The GUID of the type library.</param>
      <param name=" major">The major version number of the type library.</param>
      <param name=" minor">The minor version number of the type library.</param>
      <param name=" lcid">The LCID of the type library.</param>
      <param name=" asmName">On successful return, the name of the primary interop assembly associated with <paramref name="g" />. </param>
      <param name=" asmCodeBase">On successful return, the code base of the primary interop assembly associated with <paramref name="g" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the primary
 interop assembly
 was found in the registry; otherwise <see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BIND_OPTS">
      <summary>
        <para>Stores the parameters that are used during a moniker-binding operation. </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.cbStruct">
      <summary>
        <para>Specifies the size of the 
   <see langword="BIND_OPTS" /> structure in bytes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfFlags">
      <summary>
        <para> Controls aspects of moniker binding
      operations.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.grfMode">
      <summary>
   Flags that should be used when opening the file that
   contains the object identified by the moniker.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BIND_OPTS.dwTickCountDeadline">
      <summary>
        <para>Indicates the amount of time (clock time in milliseconds, as returned by the
   <see langword="GetTickCount" /> 
   function) the caller specified to complete the binding operation.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIBindCtx">
      <summary>
        <para>Managed definition of the <see langword="IBindCtx" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.RegisterObjectBound(System.Object)">
      <summary>
        <para> Register the passed object as one of the objects
 that has been bound during a moniker operation and which should be released when
 it is complete.</para>
      </summary>
      <param name="punk">The object to register for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.RevokeObjectBound(System.Object)">
      <summary>
        <para>Removes the object from the set
      of registered objects that need to be released.</para>
      </summary>
      <param name="punk">The object to unregister for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.ReleaseBoundObjects">
      <summary>
        <para> Releases all the objects currently registered with
      the bind context by <see cref="M:System.Runtime.InteropServices.UCOMIBindCtx.RegisterObjectBound(System.Object)" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.SetBindOptions(System.Runtime.InteropServices.BIND_OPTS@)">
      <summary>
        <para>Store in the bind context a block of parameters that will 
      apply to later <see langword="UCOMIMoniker" /> operations using this bind context.</para>
      </summary>
      <param name="pbindopts">The structure containing the binding options to set.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.GetBindOptions(System.Runtime.InteropServices.BIND_OPTS@)">
      <summary>
        <para>Return the current binding options stored in this bind context.</para>
      </summary>
      <param name="pbindopts">A pointer to the structure to receive the binding options.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.UCOMIRunningObjectTable@)">
      <summary>
        <para>Return access to the Running Object Table (ROT) relevant to
      this binding process.</para>
      </summary>
      <param name="pprot">On successful return, a reference to the ROT.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>
        <para> Register the given object pointer under the
      specified name in the internally-maintained table of object pointers.</para>
      </summary>
      <param name="pszKey">The name to register <paramref name="punk" /> with.</param>
      <param name=" punk">The object to register.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>
        <para>Lookup the given key in the internally-maintained table
      of contextual object parameters and return the corresponding object, if one
      exists.</para>
      </summary>
      <param name="pszKey">The name of the object to search for.</param>
      <param name=" ppunk">On successful return, the object interface pointer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.EnumObjectParam(System.Runtime.InteropServices.UCOMIEnumString@)">
      <summary>
        <para>Enumerate the strings which are the keys of the
      internally-maintained table of contextual object parameters.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the object parameter enumerator.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIBindCtx.RevokeObjectParam(System.String)">
      <summary>
        <para>Revoke the registration of the object currently found
      under this key in the internally-maintained table of contextual object
      parameters, if any such key is currently registered.</para>
      </summary>
      <param name="pszKey">The key to unregister.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIConnectionPointContainer">
      <summary>
        <para>Managed definition of the
   <see langword="IConnectionPointContainer" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.UCOMIEnumConnectionPoints@)">
      <summary>
        <para>Creates an enumerator of all the connection points
      supported in the connectable object, one connection point per IID.</para>
      </summary>
      <param name="ppEnum">On successful return, contains the interface pointer of the enumerator.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.UCOMIConnectionPoint@)">
      <summary>
        <para>Asks the connectable object if it has a connection point
      for a particular IID, and if so, returns the
   <see langword="IConnectionPoint" /><paramref name=" " />interface pointer to that connection
      point.</para>
      </summary>
      <param name="riid">A reference to the outgoing interface IID whose connection point is being requested.</param>
      <param name=" ppCP">On successful return, contains the connection point that manages the outgoing interface <paramref name="riid" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIConnectionPoint">
      <summary>
        <para>Managed definition of the
   <see langword="IConnectionPoint" />
   interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>
        <para>Returns the IID of the outgoing interface managed by this connection
      point.</para>
      </summary>
      <param name="pIID">On successful return, contains the IID of the outgoing interface managed by this connection point.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.UCOMIConnectionPointContainer@)">
      <summary>
        <para>Retrieves the
   <see langword="IConnectionPointContainer" /><paramref name=" " />interface pointer to the
      connectable object that conceptually owns this connection
      point.</para>
      </summary>
      <param name="ppCPC">On successful return, contains the connectable object's <see langword="IConnectionPointContainer" /><paramref name=" " />interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>
        <para>Establishes an advisory connection between the connection
      point and the caller's sink object.</para>
      </summary>
      <param name="pUnkSink">Reference to the sink to receive calls for the outgoing interface managed by this connection point.</param>
      <param name=" pdwCookie">On successful return, contains the connection cookie.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Unadvise(System.Int32)">
      <summary>
        <para>Terminates an advisory connection previously established
      through <see cref="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)" />
      .</para>
      </summary>
      <param name="dwCookie">The connection cookie previously returned from <see cref="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIConnectionPoint.EnumConnections(System.Runtime.InteropServices.UCOMIEnumConnections@)">
      <summary>
        <para>Creates an enumerator object for iteration through the
      connections that exist to this connection point.</para>
      </summary>
      <param name="ppEnum">On successful return, contains the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIEnumMoniker">
      <summary>
        <para>Managed definition of the <see langword="IEnumMoniker" />
interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.UCOMIMoniker[],System.Int32@)">
      <summary>
        <para>Retrieves a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name="celt">Specifies the number of monikers to return in <paramref name="rgelt" />.</param>
      <param name=" rgelt">On successful return, a reference to the enumerated monikers.</param>
      <param name=" pceltFetched">On successful return, a reference to the actual number of monikers enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if <paramref name="pceltFetched" /> equals
<paramref name="celt" />; 
<see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumMoniker.Skip(System.Int32)">
      <summary>
        <para>Skips over a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if the number of elements skipped equals <paramref name="celt" />; <see langword="S_FALSE" /> 
otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumMoniker.Reset">
      <summary>
        <para>Resets the enumeration sequence to the
      beginning.</para>
      </summary>
      <returns>
   An HRESULT with the value
<see langword="S_OK" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumMoniker.Clone(System.Runtime.InteropServices.UCOMIEnumMoniker@)">
      <summary>
        <para>Creates another enumerator that contains the same
      enumeration state as the current one.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.CONNECTDATA">
      <summary>
   Describes a connection that exists to a given connection
   point.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.pUnk">
      <summary>
        <para>Represents a pointer to the <see langword="IUnknown" /> interface on a connected
   advisory sink. The caller must call <see langword="IUnknown::Release" /> on this
   pointer when the <see langword="CONNECTDATA" /> structure is no longer needed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CONNECTDATA.dwCookie">
      <summary>
        <para>Represents a connection token that is returned from a call to
   <see cref="M:System.Runtime.InteropServices.UCOMIConnectionPoint.Advise(System.Object,System.Int32@)" qualify="true" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIEnumConnections">
      <summary>
        <para>Managed definition of the
   <see langword="IEnumConnections" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnections.Next(System.Int32,System.Runtime.InteropServices.CONNECTDATA[],System.Int32@)">
      <summary>
        <para>Retrieves a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name=" celt">Specifies the number of <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /><paramref name=" " />structures to return in <paramref name="rgelt" />.</param>
      <param name=" rgelt">On successful return, a reference to the enumerated connections.</param>
      <param name=" pceltFetched">On successful return, a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if <paramref name="pceltFetched" /> equals <paramref name="celt" />; 
<see langword="S_FALSE" />
otherwise. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnections.Skip(System.Int32)">
      <summary>
        <para>Skips over a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if the number of elements skipped equals
<paramref name="celt" />; <see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnections.Reset">
      <summary>
        <para>Resets the enumeration sequence to the beginning.</para>
      </summary>
      <returns>
   An HRESULT with the value
<see langword="S_OK" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnections.Clone(System.Runtime.InteropServices.UCOMIEnumConnections@)">
      <summary>
        <para>Creates another enumerator that contains the same enumeration state as the 
      current one.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIEnumConnectionPoints">
      <summary>
        <para>Managed definition of the <see langword="IEnumConnectionPoints" />
interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.UCOMIConnectionPoint[],System.Int32@)">
      <summary>
        <para>Retrieves a specified number of items in the enumeration sequence.</para>
      </summary>
      <param name="celt">Specifies the number of <see langword="IConnectionPoint" /><paramref name=" " />references to return in <paramref name="rgelt" />.</param>
      <param name=" rgelt">On successful return, a reference to the enumerated connections.</param>
      <param name=" pceltFetched">On successful return, a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if <paramref name="pceltFetched" /> equals
<paramref name="celt" />; 
<see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Skip(System.Int32)">
      <summary>
        <para>Skips over a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if the number of elements skipped equals <paramref name="celt" />; <see langword="S_FALSE" /> 
otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Reset">
      <summary>
        <para>Resets the enumeration sequence to the beginning.</para>
      </summary>
      <returns>
   An HRESULT with the value
<see langword="S_OK" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumConnectionPoints.Clone(System.Runtime.InteropServices.UCOMIEnumConnectionPoints@)">
      <summary>
        <para>Creates another enumerator that contains the same enumeration state as the
      current one.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIEnumString">
      <summary>
        <para>Managed definition of the <see langword="IEnumString" />
interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumString.Next(System.Int32,System.String[],System.Int32@)">
      <summary>
        <para>Retrieves a specified number of items in the enumeration
      sequence.</para>
      </summary>
      <param name="celt">Specifies the number of strings to return in <paramref name="rgelt" />.</param>
      <param name=" rgelt">On successful return, a reference to the enumerated strings.</param>
      <param name=" pceltFetched">On successful return, a reference to the actual number of strings enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if <paramref name="pceltFetched" /> equals
<paramref name="celt" />; 
<see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumString.Skip(System.Int32)">
      <summary>
        <para>Skips over a specified number of items in the enumeration sequence.</para>
      </summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if the number of elements skipped
   equals <paramref name="celt" />; <see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumString.Reset">
      <summary>
        <para>Resets the enumeration sequence to the beginning.</para>
      </summary>
      <returns>
   An HRESULT with the value
<see langword="S_OK" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumString.Clone(System.Runtime.InteropServices.UCOMIEnumString@)">
      <summary>
        <para>Creates another enumerator that contains the same enumeration state as the
      current one.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIEnumVARIANT">
      <summary>
        <para>Managed definition of the
   <see langword="IEnumVARIANT" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumVARIANT.Next(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Retrieves a specified number of items in the enumeration sequence.</para>
      </summary>
      <param name="celt">Specifies the number of elements to return in <paramref name="rgelt" />.</param>
      <param name="rgvar">On successful return, a reference to the enumerated elements.</param>
      <param name=" pceltFetched">On successful return, a reference to the actual number of elements enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if <paramref name="pceltFetched" /> equals
<paramref name="celt" />; 
<see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumVARIANT.Skip(System.Int32)">
      <summary>
        <para>Skips over a specified number of items in the enumeration sequence.</para>
      </summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <para>
          <see langword="S_OK" /> if the number of elements skipped
   equals <paramref name="celt" />; <see langword="S_FALSE" /> otherwise.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumVARIANT.Reset">
      <summary>
        <para>Resets the enumeration sequence to the beginning.</para>
      </summary>
      <returns>
   An HRESULT with the value
<see langword="S_OK" />.
</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIEnumVARIANT.Clone(System.Int32)">
      <summary>
        <para>Creates another enumerator that contains the same enumeration state as the
      current one.</para>
      </summary>
      <param name="ppenum">On successful return, a reference to the newly created enumerator.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.FILETIME">
      <summary>
        <para>This structure is a 64-bit value representing the number of 100-nanosecond
      intervals since January 1, 1601. </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwLowDateTime">
      <summary>
        <para> Specifies the low 32 bits of the 
   <see langword="FILETIME" /> . </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FILETIME.dwHighDateTime">
      <summary>
        <para>Specifies the high 32 bits of the 
   <see langword="FILETIME" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIMoniker">
      <summary>
        <para>Managed definition of the
   <see langword="IMoniker" /> interface, with functionality from
   <see langword="IPersist" /> and <see langword="IPersistStream" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.GetClassID(System.Guid@)">
      <summary>
        <para>Retrieves the class identifier (CLSID) of an object.</para>
      </summary>
      <param name="pClassID">On successful return, contains the CLSID.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.IsDirty">
      <summary>
        <para>Checks the object for changes since it was last saved.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Load(System.Runtime.InteropServices.UCOMIStream)">
      <summary>
        <para>Initializes an object from the stream where it was previously saved.</para>
      </summary>
      <param name="pStm"> Stream from which the object is loaded.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Save(System.Runtime.InteropServices.UCOMIStream,System.Boolean)">
      <summary>
        <para>Saves an object to the specified stream.</para>
      </summary>
      <param name="pStm"> The stream into which the object is saved.</param>
      <param name=" fClearDirty">Indicates whether to clear the modified flag after the save is complete.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.GetSizeMax(System.Int64@)">
      <summary>
        <para>Returns the size in bytes of the stream needed to save the object.</para>
      </summary>
      <param name="pcbSize">On successful return, contains a <see langword="long" /> value indicating the size in bytes of the stream needed to save this object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.BindToObject(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.Guid@,System.Object@)">
      <summary>
        <para>Uses the moniker to bind to the object it identifies.</para>
      </summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used in this binding operation.</param>
      <param name=" pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
      <param name=" riidResult">The interface identifier (IID) of the interface the client intends to use to communicate with the object that the moniker identifies.</param>
      <param name=" ppvResult">On successful return, reference to the interface requested by <paramref name="riidResult" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.BindToStorage(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.Guid@,System.Object@)">
      <summary>
        <para>Retrieves an interface pointer to the storage that
      contains the object identified by the moniker.</para>
      </summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used during this binding operation.</param>
      <param name=" pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
      <param name=" riid">The interface identifier (IID) of the storage interface requested.</param>
      <param name=" ppvObj">On successful return, a reference to the interface requested by <paramref name="riid" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Reduce(System.Runtime.InteropServices.UCOMIBindCtx,System.Int32,System.Runtime.InteropServices.UCOMIMoniker@,System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para>Returns a reduced moniker which is another moniker that refers to the same
      object as this moniker but can be bound with equal or greater efficiency. </para>
      </summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context to be used in this binding operation.</param>
      <param name=" dwReduceHowFar">Specifies how far this moniker should be reduced.</param>
      <param name=" ppmkToLeft">A reference to the moniker to the left of this moniker.</param>
      <param name=" ppmkReduced">On successful return, a reference to the reduced form of this moniker, which can be <see langword="null" /> if an error occurs or if this moniker is reduced to nothing.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.ComposeWith(System.Runtime.InteropServices.UCOMIMoniker,System.Boolean,System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para>Combines the current moniker with another moniker, creating a new composite
      moniker.</para>
      </summary>
      <param name="pmkRight">A reference to the <see langword="IMoniker" /> interface on the moniker to compose onto the end of this moniker.</param>
      <param name=" fOnlyIfNotGeneric">
        <para>If <see langword="true" /> , the caller requires a nongeneric composition, so the operation proceeds only if <paramref name="pmkRight" /> is a moniker class that this moniker can compose with in some way other than forming a generic composite. If <see langword="false" />, the method can create a generic composite if necessary.</para>
      </param>
      <param name=" ppmkComposite">On successful return, a reference to the resulting composite moniker.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Enum(System.Boolean,System.Runtime.InteropServices.UCOMIEnumMoniker@)">
      <summary>
        <para>Supplies a pointer to an enumerator that can enumerate
      the components of a composite moniker.</para>
      </summary>
      <param name="fForward">If <see langword="true" />, enumerates the monikers from left to right. If <see langword="false" />, enumerates from right to left.</param>
      <param name=" ppenumMoniker">On successful return, references the enumerator object for the moniker.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.IsEqual(System.Runtime.InteropServices.UCOMIMoniker)">
      <summary>
        <para>Compares this moniker with a specified moniker and
      indicates whether they are identical.</para>
      </summary>
      <param name="pmkOtherMoniker">A reference to the moniker to be used for comparison.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Hash(System.Int32@)">
      <summary>
        <para>Calculates a 32-bit integer using the internal state of the moniker.</para>
      </summary>
      <param name="pdwHash">On successful return, contains the hash value for this moniker.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.IsRunning(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.UCOMIMoniker)">
      <summary>
        <para>Determines whether the object that is identified by this moniker is currently loaded
      and running.</para>
      </summary>
      <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
      <param name=" pmkToLeft">A reference to the moniker to the left of this moniker if this moniker is part of a composite.</param>
      <param name=" pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)">
      <summary>
        <para>Provides a number representing the time the object
      identified by this moniker was last changed.</para>
      </summary>
      <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
      <param name=" pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
      <param name=" pFileTime">On successful return, contains the time of last change.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.Inverse(System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para> Provides a moniker that, when composed to the right of this moniker or
      one of similar structure, composes to nothing.</para>
      </summary>
      <param name="ppmk">On successful return, contains a moniker that is the inverse of this moniker.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.CommonPrefixWith(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para>Creates a new moniker based on the common prefix that this moniker shares
      with another moniker.</para>
      </summary>
      <param name="pmkOther">A reference to the <see langword="IMoniker" /> interface on another moniker to compare with this for a common prefix.</param>
      <param name=" ppmkPrefix">On successful return, contains the moniker that is the common prefix of this moniker and <paramref name="pmkOther" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.RelativePathTo(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para>Supplies a moniker that, when appended to this moniker (or one with
      a similar structure), yields the specified moniker.</para>
      </summary>
      <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
      <param name=" ppmkRelPath">On successful return, reference to the relative moniker.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.GetDisplayName(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.String@)">
      <summary>
        <para>Gets the display name, which is a user-readable
      representation of this moniker.</para>
      </summary>
      <param name="pbc">A reference to the bind context to use in this operation.</param>
      <param name=" pmkToLeft">A reference to the moniker to the left of this moniker, if the moniker is part of a composite moniker.</param>
      <param name=" ppszDisplayName">On successful return, contains the display name string.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.ParseDisplayName(System.Runtime.InteropServices.UCOMIBindCtx,System.Runtime.InteropServices.UCOMIMoniker,System.String,System.Int32@,System.Runtime.InteropServices.UCOMIMoniker@)">
      <summary>
        <para>Reads as many characters of the specified display name as it understands and
      builds a moniker corresponding to the portion read. </para>
      </summary>
      <param name="pbc">A reference to the bind context to be used in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker that has been built out of the display name up to this point.</param>
      <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
      <param name="pchEaten">On successful return, contains the number of characters in <paramref name="pszDisplayName" /> that were consumed in this step.</param>
      <param name=" ppmkOut">Reference to the moniker that was built from <paramref name="pszDisplayName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIMoniker.IsSystemMoniker(System.Int32@)">
      <summary>
        <para>Indicates whether this moniker is of one of the
      system-supplied moniker classes.</para>
      </summary>
      <param name="pdwMksys">A pointer to an integer that is one of the values from the <see langword="MKSYS" /> enumeration, and refers to one of the COM moniker classes.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIPersistFile">
      <summary>
        <para>Managed definition of the <see langword="IPersistFile " />interface, with functionality from <see langword="IPersist" />
.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.GetClassID(System.Guid@)">
      <summary>
        <para>Retrieves the class identifier (CLSID) of an
      object.</para>
      </summary>
      <param name="pClassID">On successful return, a reference to the CLSID.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.IsDirty">
      <summary>
        <para>Checks an object for changes since it was last saved to
      its current file.</para>
      </summary>
      <returns>
        <para>
          <see langword="S_OK" /> if the file has changed since it 
   was last saved; <see langword="S_FALSE" />
   if the file has not changed since it was last saved.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.Load(System.String,System.Int32)">
      <summary>
        <para>Opens the specified file and initializes an object from the file
      contents.</para>
      </summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to open.</param>
      <param name=" dwMode">A combination of values from the <see langword="STGM" /> enumeration to indicate the access mode in which to open <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.Save(System.String,System.Boolean)">
      <summary>
        <para>Saves a copy of the object into the specified file.</para>
      </summary>
      <param name="pszFileName"> A zero-terminated string containing the absolute path of the file to which the object is saved.</param>
      <param name=" fRemember">Indicates whether <paramref name="pszFileName" /> is to be used as the current working file.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.SaveCompleted(System.String)">
      <summary>
        <para>Notifies the object that it can write to its file.</para>
      </summary>
      <param name="pszFileName">
        <para>The absolute path of the file where the object was previously saved. </para>
      </param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIPersistFile.GetCurFile(System.String@)">
      <summary>
        <para>Retrieves either the absolute path to current working file of the object, or if there
      is no current working file, the default filename prompt of the object.</para>
      </summary>
      <param name="ppszFileName">The address of a pointer to a zero-terminated string containing the path for the current file, or the default filename prompt (such as *.txt).</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIRunningObjectTable">
      <summary>
        <para>Managed definition of the <see langword="IRunningObjectTable" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.UCOMIMoniker,System.Int32@)">
      <summary>
   Registers that the supplied object has entered the
   running state.
</summary>
      <param name="grfFlags">Specifies whether the Running Object Table's (ROT) reference to <paramref name="punkObject" /> is weak or strong, and controls access to the object through its entry in the ROT.</param>
      <param name=" punkObject">Reference to the object being registered as running.</param>
      <param name=" pmkObjectName">Reference to the moniker that identifies <paramref name="punkObject" />.</param>
      <param name=" pdwRegister">Reference to a 32-bit value that can be used to identify this ROT entry in subsequent calls to <see cref="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(System.Int32)" /><see langword="" />or <see cref="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.Revoke(System.Int32)">
      <summary>
   Unregisters the specified object from the ROT.
</summary>
      <param name="dwRegister"> The ROT entry to revoke.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.IsRunning(System.Runtime.InteropServices.UCOMIMoniker)">
      <summary>
   Determines if the specified moniker is currently
   registered in the Running Object Table.
</summary>
      <param name="pmkObjectName">Reference to the moniker to search for in the Running Object Table.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.GetObject(System.Runtime.InteropServices.UCOMIMoniker,System.Object@)">
      <summary>
        <para> Returns the registered object if the supplied object name is registered 
      as running.</para>
      </summary>
      <param name="pmkObjectName"> Reference to the moniker to search for in the ROT.</param>
      <param name=" ppunkObject">On successful return, contains the requested running object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.FILETIME@)">
      <summary>
        <para> Makes a note of the time that a particular
      object has changed so <see langword="IMoniker::GetTimeOfLastChange" /> can report
      an appropriate change time.</para>
      </summary>
      <param name="dwRegister"> The ROT entry of the changed object.</param>
      <param name=" pfiletime">Reference to the object's last change time.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.UCOMIMoniker,System.Runtime.InteropServices.FILETIME@)">
      <summary>
        <para> Searches for this moniker in the ROT and
      reports the recorded time of change, if present.</para>
      </summary>
      <param name="pmkObjectName">Reference to the moniker to search for in the ROT.</param>
      <param name=" pfiletime">On successful return, contains the objects last change time.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIRunningObjectTable.EnumRunning(System.Runtime.InteropServices.UCOMIEnumMoniker@)">
      <summary>
        <para>Enumerates the objects currently registered as running.</para>
      </summary>
      <param name="ppenumMoniker"> On successful return, the new enumerator for the ROT.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.STATSTG">
      <summary>
        <para> Contains statistical
      information about an open storage, stream, or byte-array object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.pwcsName">
      <summary>
        <para>Pointer to a null-terminated string containing the name of the object described by this structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.type">
      <summary>
        <para>Indicates the type of storage object which is one of the
      values from the <see langword="STGTY" /> enumeration.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.cbSize">
      <summary>
        <para>Specifies the size in bytes of the stream or byte array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.mtime">
      <summary>
        <para>Indicates the last modification time for this storage,
      stream, or byte array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.ctime">
      <summary>
        <para>Indicates the creation time for this storage, stream, or
      byte array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.atime">
      <summary>
        <para>Indicates the last access time for this storage, stream
      or byte array</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfMode">
      <summary>
        <para>Indicates the access mode that was specified when the object was opened.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfLocksSupported">
      <summary>
        <para>Indicates the types of region locking supported by the
      stream or byte array.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.clsid">
      <summary>
   Indicates the class identifier for the storage object.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.grfStateBits">
      <summary>
        <para> Indicates the current state bits of the
      storage object (the value most recently set by the
   <see langword="IStorage::SetStateBits" /> method).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.STATSTG.reserved">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMIStream">
      <summary>
        <para>Managed definition of the <see langword="IStream" /> interface, with
<see langword="ISequentialStream" /> 
functionality.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>
        <para>Reads a specified number of bytes from the stream object
      into memory starting at the current seek pointer.</para>
      </summary>
      <param name="pv">On successful return, contains the data read frtom the stream.</param>
      <param name=" cb">The number of bytes to read from the stream object.</param>
      <param name=" pcbRead">Pointer to a <see langword="ULONG" /> variable that receives the actual number of bytes read from the stream object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>
        <para>Writes a specified number of bytes into the stream
      object starting at the current seek pointer.</para>
      </summary>
      <param name="pv">Buffer to write this stream to.</param>
      <param name=" cb">The number of bytes to write into the stream.</param>
      <param name=" pcbWritten">On successful return, contains the actual number of bytes written to the stream object. The caller can set this pointer to <see langword="null" />, in which case this method does not provide the actual number of bytes written.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>
        <para>Changes the seek pointer to a new location relative to the beginning of the
      stream, to the end of the stream, or to the current seek pointer.</para>
      </summary>
      <param name="dlibMove">Displacement to add to <paramref name="dwOrigin" />.</param>
      <param name=" dwOrigin">Specifies the origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.</param>
      <param name=" plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.SetSize(System.Int64)">
      <summary>
        <para>Changes the size of the stream object.</para>
      </summary>
      <param name="libNewSize">Specifies the new size of the stream as a number of bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.CopyTo(System.Runtime.InteropServices.UCOMIStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>
        <para>Copies a specified number of bytes from the current seek pointer in the
      stream to the current seek pointer in another stream.</para>
      </summary>
      <param name="pstm">Reference to the destination stream.</param>
      <param name=" cb">The number of bytes to copy from the source stream.</param>
      <param name=" pcbRead">On successful return, contains the actual number of bytes read from the source.</param>
      <param name=" pcbWritten">On successful return, contains the actual number of bytes written to the destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Commit(System.Int32)">
      <summary>
        <para>Ensures that any changes made to a stream object open in
      transacted mode are reflected in the parent storage.</para>
      </summary>
      <param name="grfCommitFlags">Controls how the changes for the stream object are committed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Revert">
      <summary>
        <para>Discards all changes that have been made to a transacted
      stream since the last <see cref="M:System.Runtime.InteropServices.UCOMIStream.Commit(System.Int32)" />
      call.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>
        <para>Restricts access to a specified range of
      bytes in the stream.</para>
      </summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name=" cb">The length of the range, in bytes, to restrict.</param>
      <param name=" dwLockType">The requested restrictions on accessing the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>
        <para>Removes the access restriction on a range of bytes
      previously restricted with <see cref="M:System.Runtime.InteropServices.UCOMIStream.LockRegion(System.Int64,System.Int64,System.Int32)" />
      .</para>
      </summary>
      <param name="libOffset">
        <para>The byte offset for the beginning of the range. </para>
      </param>
      <param name=" cb">The length, in bytes, of the range to restrict.</param>
      <param name=" dwLockType">The access restrictions previously placed on the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Stat(System.Runtime.InteropServices.STATSTG@,System.Int32)">
      <summary>
        <para>Retrieves the <see cref="T:System.Runtime.InteropServices.STATSTG" /> structure for this stream.</para>
      </summary>
      <param name="pstatstg">On successful return, contains a <see langword="STATSTG" /> structure which describes this stream object.</param>
      <param name=" grfStatFlag">Specifies some of the members in the <see langword="STATSTG" /> structure that this method does not return, thus saving some memory allocation operations.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMIStream.Clone(System.Runtime.InteropServices.UCOMIStream@)">
      <summary>
        <para>Creates a new stream object with its own seek pointer
      that references the same bytes as the original stream.</para>
      </summary>
      <param name="ppstm">On successful return, contains the new stream object.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.DESCKIND">
      <summary>
        <para>Identifies the type description being bound
      to.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_NONE">
      <summary>
        <para>Indicates that no match was found.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_FUNCDESC">
      <summary>
        <para>Indicates that a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> was returned.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_VARDESC">
      <summary>
        <para>Indicates that a <see langword="VARDESC" /> was returned.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_TYPECOMP">
      <summary>
        <para>Indicates that a <see langword="TYPECOMP" /> was returned.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>
        <para>Indicates that an <see langword="IMPLICITAPPOBJ" /> was returned.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DESCKIND.DESCKIND_MAX">
      <summary>
        <para>Indicates an end of enumeration marker.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BINDPTR">
      <summary>
        <para> Contains a pointer to a bound-to <see cref="T:System.Runtime.InteropServices.FUNCDESC" />, <see cref="T:System.Runtime.InteropServices.VARDESC" /> , or
   an <see langword="ITypeComp" /> interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpfuncdesc">
      <summary>
        <para>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lpvardesc">
      <summary>
        <para>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BINDPTR.lptcomp">
      <summary>
        <para>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.UCOMITypeComp" /> interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeComp">
      <summary>
        <para>Managed definition of the <see langword="ITypeComp" />
interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.UCOMITypeInfo@,System.Runtime.InteropServices.DESCKIND@,System.Runtime.InteropServices.BINDPTR@)">
      <summary>
        <para>Maps a name to a member of a type, or binds global variables and functions
      contained in a type library.</para>
      </summary>
      <param name="szName">The name to bind.</param>
      <param name=" lHashVal">A hash value for <paramref name="szName" /> computed by <see langword="LHashValOfNameSys" />.</param>
      <param name=" wFlags">A flags word containing one or more of the invoke flags defined in the <see langword="INVOKEKIND" /> enumeration.</param>
      <param name=" ppTInfo">On successful return, a reference to the type description that contains the item to which it is bound, if a <see langword="FUNCDESC" /> or <see langword="VARDESC" /> was returned.</param>
      <param name=" pDescKind">A reference to a <see langword="DESCKIND" /> enumerator that indicates whether the name bound to is a <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="TYPECOMP" />.</param>
      <param name=" pBindPtr">A reference to the bound-to <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="ITypeComp" /> interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.UCOMITypeInfo@,System.Runtime.InteropServices.UCOMITypeComp@)">
      <summary>
        <para>Binds to the type descriptions contained within a type library.</para>
      </summary>
      <param name="szName">The name to bind.</param>
      <param name=" lHashVal">A hash value for <paramref name="szName" /> determined by <see langword="LHashValOfNameSys" />.</param>
      <param name=" ppTInfo">On successful return, a reference to an <see langword="ITypeInfo" /> of the type to which <paramref name="szName" /> was bound.</param>
      <param name=" ppTComp">On successful return, a reference to an <see langword="ITypeComp" /> variable.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPEKIND">
      <summary>
        <para> Specifies various types of data and
      functions.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ENUM">
      <summary>
        <para>A set of enumerators.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_RECORD">
      <summary>
        <para>A structure with no methods.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_MODULE">
      <summary>
        <para>A module that can only have static functions and data 
      (for example, a DLL).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_INTERFACE">
      <summary>
   A type that has virtual functions, all of which are
   pure.
		</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_DISPATCH">
      <summary>
        <para>A set of methods and properties that are accessible 
      through <see langword="IDispatch::Invoke" />. By default, dual interfaces return
   <see langword="TKIND_DISPATCH" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_COCLASS">
      <summary>
        <para> A set of implemented components interfaces.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS">
      <summary>
   A type that is an alias for another type.
		</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_UNION">
      <summary>
        <para>A union of all members that have an offset of zero.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEKIND.TKIND_MAX">
      <summary>
        <para>End of enumeration marker.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPEFLAGS">
      <summary>
        <para>Defines the properties and attributes of a type description.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>
        <para>A type description that describes an Application object.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>
        <para>Instances of the type can be created by 
   <see langword="ITypeInfo::CreateInstance" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>
        <para>The type is licensed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>
   The type is predefined. The client application should
   automatically create a single instance of the object that has this attribute.
   The name of the variable that points to the object is the same as the class name
   of the object.
		</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>
        <para>The type should not be displayed to browsers.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>
        <para>The type is a control from which other types will be 
      derived, and should not be displayed to users.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>
        <para>The interface supplies both <see langword="IDispatch" /> and VTBL 
   binding.<see langword=" " /></para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>
        <para>The interface cannot add members at run time.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>
        <para>The types used in the interface are fully compatible 
      with Automation, including VTBL binding support. Setting dual on an
      interface sets this flag in addition to <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />. Not allowed on dispinterfaces.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>
        <para>Should not be accessible from macro languages. This flag 
      is intended for system-level types or types that type browsers should not display.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>
        <para>The class supports aggregation.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>
   The object supports
<see langword="IConnectionPointWithDefault" />, and has default behaviors.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>
        <para>Indicates that the interface derives from <see langword="IDispatch" />, either 
   directly or indirectly. This flag is computed, there is no Object Description
   Language for the flag.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>
        <para>Indicates base interfaces should be checked for 
      name resolution before checking children, the reverse of the default behavior.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>
   Indicates that the interface will be using a
   proxy/stub dynamic link library. This flag specifies that the type library proxy
   should not be unregistered when the type library is unregistered.
</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IMPLTYPEFLAGS">
      <summary>
        <para>Defines the attributes of an implemented or inherited
      interface of a type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>
        <para>The interface or dispinterface represents the default 
      for the source or sink.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>
        <para>This member of a coclass is called rather than implemented.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>
        <para>The member should not be displayed or programmable by users.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>
        <para>Sinks receive events through the virtual function table (VTBL).</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPEATTR">
      <summary>
        <para>Contains attributes of a
   <see langword="UCOMITypeInfo" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL">
      <summary>
        <para>A constant used with the <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> and <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> fields.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.guid">
      <summary>
        <para>The GUID of the type information.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.lcid">
      <summary>
        <para>Locale of member names and documentation strings.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.dwReserved">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor">
      <summary>
        <para>ID of constructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor">
      <summary>
        <para>ID of destructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.lpstrSchema">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbSizeInstance">
      <summary>
        <para>The size of an instance of this type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.typekind">
      <summary>
        <para>A <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> value describing the type this information describes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cFuncs">
      <summary>
        <para>Indicates the number of functions on the interface 
      this structure describes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cVars">
      <summary>
        <para>Indicates the number of variables and data fields on the
      interface described by this structure.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cImplTypes">
      <summary>
        <para>Indicates the number of implemented interfaces on the 
      interface this structure describes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbSizeVft">
      <summary>
        <para>The size of this type's virtual method table (VTBL).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.cbAlignment">
      <summary>
        <para>Specifies the byte alignment for an instance of this type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.wTypeFlags">
      <summary>
        <para>A <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> value describing this information.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.wMajorVerNum">
      <summary>
        <para>Major version number.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.wMinorVerNum">
      <summary>
        <para>Minor version number.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.tdescAlias">
      <summary>
        <para>If <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, specifies the type for which 
   this type is an alias.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEATTR.idldescType">
      <summary>
        <para>IDL attributes of the described type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCDESC">
      <summary>
        <para> Defines a function description.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.memid">
      <summary>
        <para>Identifies the function member ID.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgscode">
      <summary>
        <para>Stores the count of errors a function can return on a 
 16-bit system.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.lprgelemdescParam">
      <summary>
        <para>Indicates the size of <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.funckind">
      <summary>
        <para>Specifies whether the function is virtual, static, or dispatch-only.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.invkind">
      <summary>
        <para> Specifies the type of a property function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.callconv">
      <summary>
        <para>Specifies the calling convention of a function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParams">
      <summary>
        <para>Counts the total number of parameters.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cParamsOpt">
      <summary>
        <para>Counts the optional parameters.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.oVft">
      <summary>
        <para>Specifies the offset in the VTBL for <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.cScodes">
      <summary>
        <para>Counts the permitted return values.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.elemdescFunc">
      <summary>
        <para>Contains the return type of the function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCDESC.wFuncFlags">
      <summary>
        <para> Indicates the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> of a function.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLFLAG">
      <summary>
        <para> Describes how to transfer a structure
      element, parameter, or function return value between processes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_NONE">
      <summary>
        <para>Whether the parameter passes or receives information is unspecified.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FIN">
      <summary>
        <para>The parameter passes information from the caller to the callee.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FOUT">
      <summary>
        <para>The parameter returns information from the callee to the caller.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FLCID">
      <summary>
        <para>The parameter is the local identifier of a client application.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>
        <para>The parameter is the return value of the member.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.IDLDESC">
      <summary>
        <para> Contains information needed for transferring a structure element,
      parameter, or function return value between processes.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.dwReserved">
      <summary>
        <para> Reserved; set to <see langword="null" /> .
 </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.IDLDESC.wIDLFlags">
      <summary>
        <para>Indicates an <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> value describing the type.
 </para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PARAMFLAG">
      <summary>
        <para> Describes how to transfer a
      structure element, parameter, or function return value between processes.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_NONE">
      <summary>
   Whether the parameter passes or receives information
   is unspecified.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FIN">
      <summary>
        <para>The parameter passes information from the caller to the callee.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>
        <para>The parameter returns information from the callee to the caller.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>
        <para>The parameter is the local identifier of a client application.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>
        <para>The parameter is the return value of the member.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>
        <para>The parameter is optional.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>
        <para>Parameter has default behaviors defined.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>
        <para>The parameter has custom data.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PARAMDESC">
      <summary>
        <para> Contains information about how to
      transfer a structure element, parameter, or function return value between
      
      processes.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMDESC.lpVarValue">
      <summary>
        <para>Represents a pointer to a value that is being passed between processes.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PARAMDESC.wParamFlags">
      <summary>
        <para>Represents bitmask values that describe the structure element,
 parameter, or return value.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPEDESC">
      <summary>
        <para> Describes the type of a variable, return type of a
      function, or the type of a function parameter.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEDESC.lpValue">
      <summary>
        <para>Indicates the variant type for the item described by this
 <see langword="TYPEDESC" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPEDESC.vt">
      <summary>
        <para>If the variable is <see langword="VT_SAFEARRAY" /> or
<see langword="VT_PTR" />, the <see cref="F:System.Runtime.InteropServices.TYPEDESC.lpValue" /> field contains a 
 pointer to a <see langword="TYPEDESC" />
 that specifies the element type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ELEMDESC">
      <summary>
        <para> Contains the type description and process transfer
      information for a variable, function, or a function parameter.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.tdesc">
      <summary>
        <para>Identifies the type of the element.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.desc">
      <summary>
        <para>Contains information about an element.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.idldesc">
      <summary>
        <para>Contains information for remoting the element.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ELEMDESC.DESCUNION.paramdesc">
      <summary>
        <para>Contains information about the parameter.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VARDESC">
      <summary>
        <para>Describes a variable, constant, or data member.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.memid">
      <summary>
        <para>Indicates the member ID of a variable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.lpstrSchema">
      <summary>
        <para>This field is reserved for future use.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.elemdescVar">
      <summary>
        <para>Contains the variable type.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.wVarFlags">
      <summary>
        <para>Defines the properties of a variable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.varkind">
      <summary>
        <para>Defines how a variable should be marshaled.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.DESCUNION.oInst">
      <summary>
        <para>Indicates the offset of this variable within the instance.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARDESC.DESCUNION.lpvarValue">
      <summary>
        <para> Describes a symbolic constant.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DISPPARAMS">
      <summary>
        <para>Contains the arguments passed to a method or property by
   <see langword="IDispatch::Invoke" />
   .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgvarg">
      <summary>
        <para>Represents a reference to the array of arguments.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.rgdispidNamedArgs">
      <summary>
        <para>Represents the dispatch IDs of named arguments.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cArgs">
      <summary>
        <para>Represents the count of arguments.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DISPPARAMS.cNamedArgs">
      <summary>
        <para>Represents the count of named arguments</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.EXCEPINFO">
      <summary>
        <para> Describes the exceptions that occur during
   <see langword="IDispatch::Invoke" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wCode">
      <summary>
        <para> Represents
      an error code identifying the error.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.wReserved">
      <summary>
        <para> This field is reserved; must be set to 0.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrSource">
      <summary>
        <para>Indicates the name of the source of the exception. Typically, this
      is an application name.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrDescription">
      <summary>
        <para> Describes the error intended for the
      customer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.bstrHelpFile">
      <summary>
        <para>Contains the fully-qualified drive, path, and file name of a Help
      file with more information about the error.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.dwHelpContext">
      <summary>
        <para>Indicates the Help context ID of the topic within the Help file.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pvReserved">
      <summary>
        <para>This field is reserved; must be set to <see langword="null" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.EXCEPINFO.pfnDeferredFillIn">
      <summary>
        <para>Represents a pointer to a function that takes an <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> structure as an argument and
   returns an HRESULT value. If deferred fill-in is not desired, this field is
   set to <see langword="null" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCKIND">
      <summary>
        <para> Defines how to access a
      function.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL">
      <summary>
        <para>The function is accessed the same as <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, except the function has an implementation.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>
        <para>The function is accessed through the virtual function 
      table (VTBL), and takes an implicit <see langword="this" />
      pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>
        <para>The function is accessed by <see langword="static" /> address and takes an implicit
<see langword="this" /> pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_STATIC">
      <summary>
        <para>The function is accessed by <see langword="static" /> address and does
   not take an implicit <see langword="this" /> pointer.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCKIND.FUNC_DISPATCH">
      <summary>
        <para>The function can be accessed only through 
   <see langword="IDispatch" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.INVOKEKIND">
      <summary>
        <para> Specifies
      how to invoke a function by <see langword="IDispatch::Invoke" /> .
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_FUNC">
      <summary>
        <para>The member is called using a normal function invocation syntax.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>
        <para>The function is invoked using a normal property-access syntax.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>
        <para>The function is invoked using a property value 
      assignment syntax.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>
        <para>The function is invoked using a property reference 
      assignment syntax.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CALLCONV">
      <summary>
        <para> Identifies the calling convention used
      by a method described in a <see langword="METHODDATA" />
      structure.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_CDECL">
      <summary>
        <para>Indicates that the Cdecl calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MSCPASCAL">
      <summary>
        <para>Indicates that the Mscpascal calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_PASCAL">
      <summary>
        <para>Indicates that the Pascal calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MACPASCAL">
      <summary>
        <para>Indicates that the Macpascal calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_STDCALL">
      <summary>
        <para>Indicates that the Stdcall calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_RESERVED">
      <summary>
   This value is reserved for future use.
</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_SYSCALL">
      <summary>
        <para>Indicates that the Syscall calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWCDECL">
      <summary>
        <para>Indicates that the Mpwcdecl calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MPWPASCAL">
      <summary>
        <para>Indicates that the Mpwpascal calling convention is used for a method.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CALLCONV.CC_MAX">
      <summary>
        <para>Indicates the end of the <see cref="T:System.Runtime.InteropServices.CALLCONV" /> 
enumeration.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.FUNCFLAGS">
      <summary>
        <para> Identifies the constants that define the properties of
      a function.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>
        <para>The function should not be accessible from macro
   languages. This flag is intended for system-level functions or functions that
   type browsers should not display.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>
        <para>The function returns an object that is a source of events.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>
        <para>The function that supports data binding.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>
        <para>When set, any call to a method that sets the property 
      results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The
      implementation of <see langword="OnRequestEdit" /> determines if the call is allowed to set the property.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>
        <para>The function that is displayed to the user as
      bindable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />
      must also be set.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>
        <para>The function that best represents the object.<see langword=" " />Only 
   one function in a type information can have this attribute.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>
        <para>The function should not be displayed to the user, 
      although it exists and is bindable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>
        <para>The function supports <see langword="GetLastError" />. If an error 
   occurs during the function, the caller can call <see langword="GetLastError" /> to retrieve
   the error code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>
        <para> Permits an optimization in which the compiler looks for
      a member named "xyz" on the type of "abc". If such a member is found, and
      is flagged as an accessor function for an element of the default collection, a
      call is generated to that member function. Permitted on members in
      dispinterfaces and interfaces; not permitted on modules.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>
        <para>The type information member is the default member for 
      display in the user interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>
        <para>The property appears in an object browser, but not in a 
      properties browser.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>
        <para>Tags the interface as having default behaviors.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>
        <para>Mapped as individual bindable properties.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VARFLAGS">
      <summary>
        <para> Identifies the constants that define the properties of
      a variable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FREADONLY">
      <summary>
        <para>Assignment to the variable should not be allowed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FSOURCE">
      <summary>
        <para>The variable returns an object that is a source of events.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>
        <para>The variable supports data binding.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>
        <para>When set, any attempt to directly change the property
   results in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The
   implementation of <see langword="OnRequestEdit" /> determines if the change is accepted.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>
        <para>The variable is displayed to the user as 
      bindable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />
      must also be set.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>
        <para>The variable is the single property that best represents 
      the object. Only one variable in type information can have this
      attribute.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>
        <para>The variable should not be displayed to the user in a 
      browser, although it exists and is bindable.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>
        <para>The variable should not be accessible from macro
   languages. This flag is intended for system-level variables or variables that
   you do not want type browsers to display.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>
        <para>Permits an optimization in which the compiler looks for a
      member named "xyz" on the type of "abc". If such a member is found and is flagged
      as an accessor function for an element of the default collection, then a call is
      generated to that member function. Permitted on members in dispinterfaces and
      interfaces; not permitted on modules.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>
        <para>The variable is the default display in the user interface.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>
        <para>The variable appears in an object browser, but not in a 
      properties browser.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>
        <para>Tags the interface as having default behaviors.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>
        <para>The variable is mapped as individual bindable properties.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeInfo">
      <summary>
        <para>Managed definition of the <see langword="ITypeInfo" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>
        <para>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the
   attributes of the type description.</para>
      </summary>
      <param name="ppTypeAttr">On successful return, a reference to the structure that contains the attributes of this type description.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeComp(System.Runtime.InteropServices.UCOMITypeComp@)">
      <summary>
        <para>Retrieves the <see langword="ITypeComp" /> interface for the type
   description, which enables a client compiler to bind to the type description's members.</para>
      </summary>
      <param name="ppTComp">On successful return, a reference to the <see langword="UCOMITypeComp" /> of the containing type library.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>
        <para>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that
   contains information about a specified function.</para>
      </summary>
      <param name="index">Index of the function description to return.</param>
      <param name=" ppFuncDesc">Reference to a <see langword="FUNCDESC" /> that describes the specified function.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>
        <para>Retrieves a <see langword="VARDESC" /> structure that
   describes the specified variable.</para>
      </summary>
      <param name="index">Index of the variable description to return.</param>
      <param name=" ppVarDesc">On successful return, a reference to the <see langword="VARDESC" /> that describes the specified variable.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>
        <para>Retrieves the variable with the specified member ID (or the name of the
      property or method and its parameters) that correspond to the specified function
      ID.</para>
      </summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name=" rgBstrNames"> On succesful return, contains the name (or names) associated with the member. </param>
      <param name=" cMaxNames">Length of the <paramref name="rgBstrNames" /> array.</param>
      <param name=" pcNames">On succesful return, the number of names in the <paramref name="rgBstrNames" /> array.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>
   If a type description describes a COM class, it
   retrieves the type description of the implemented interface types.
</summary>
      <param name="index">Index of the implemented type whose handle is returned.</param>
      <param name=" href">Reference to a handle for the implemented interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetImplTypeFlags(System.Int32,System.Int32@)">
      <summary>
        <para>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for
   one implemented interface or base interface in a type description.</para>
      </summary>
      <param name="index">Index of the implemented interface or base interface.</param>
      <param name=" pImplTypeFlags">On successful return, a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>
        <para>Maps between member names and member IDs, and parameter
      names and parameter IDs.</para>
      </summary>
      <param name="rgszNames">On succesful return, an array of names to map.</param>
      <param name=" cNames">Count of names to map.</param>
      <param name=" pMemId">
        <para>Reference to an array in which name mappings are placed.</para>
      </param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.DISPPARAMS@,System.Object@,System.Runtime.InteropServices.EXCEPINFO@,System.Int32@)">
      <summary>
        <para>Invokes a method, or accesses a property of an object,
      that implements the interface described by the type description.</para>
      </summary>
      <param name="pvInstance">Reference to the interface described by this type description.</param>
      <param name="memid">Identifies the interface member.</param>
      <param name=" wFlags">Flags describing the context of the invoke call.</param>
      <param name=" pDispParams">Reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name=" pVarResult">Reference to the location at which the result is to be stored. If <paramref name="wFlags" /> specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> is ignored. Set to <see langword="null" /> if no result is desired.</param>
      <param name=" pExcepInfo">Points to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
      <param name=" puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicates the index within <paramref name="rgvarg" /> of the argument with incorrect type. If more than one argument returns an error, <paramref name="puArgErr" /> indicates only the first argument with an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
        <para>Retrieves the documentation string, the complete Help file name and path, and
      the context ID for the Help topic for a specified type description.</para>
      </summary>
      <param name="index">ID of the member whose documentation is to be returned.</param>
      <param name=" strName">On successful return, the name of the item method.</param>
      <param name=" strDocString">On successful return, the documentation string for the specified item.</param>
      <param name=" dwHelpContext">On successful return, a reference to the Help context associated with the specified item.</param>
      <param name=" strHelpFile">On successful return, the fully qualified name of the Help file.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.INVOKEKIND,System.String@,System.String@,System.Int16@)">
      <summary>
        <para>Retrieves a description or specification of an entry
      point for a function in a DLL.</para>
      </summary>
      <param name="memid">ID of the member function whose DLL entry description is to be returned.</param>
      <param name=" invKind">Specifies the kind of member identified by <paramref name="memid" />.</param>
      <param name=" pBstrDllName">If not <see langword="null" />, the function sets <paramref name="pBstrDllName" /> to a <see langword="BSTR" /> that contains the name of the DLL.</param>
      <param name=" pBstrName">If not <see langword="null" />, the function sets <paramref name="lpbstrName" /> to a <see langword="BSTR" /> that contains the name of the entry point.</param>
      <param name=" pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then <paramref name="lpwOrdinal" /> is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.UCOMITypeInfo@)">
      <summary>
        <para>If a type description references other type
      descriptions, it retrieves the referenced type descriptions.</para>
      </summary>
      <param name="hRef">Handle to the referenced type description to return.</param>
      <param name=" ppTI">On successful return, the referenced type description.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.INVOKEKIND,System.IntPtr@)">
      <summary>
        <para>Retrieves the addresses of static functions or
      variables, such as those defined in a DLL.</para>
      </summary>
      <param name="memid">Member ID of the <see langword="static" /> member's address to retrieve.</param>
      <param name=" invKind">Specifies whether the member is a property, and if so, what kind.</param>
      <param name=" ppv">On successful return, a reference to the <see langword="static" /> member.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>
        <para> Creates a new instance of a type that describes
      a component class (coclass).</para>
      </summary>
      <param name="pUnkOuter">Object which acts as the controlling <see langword="IUnknown" />.</param>
      <param name=" riid">The IID of the interface that the caller will use to communicate with the resulting object.</param>
      <param name=" ppvObj">On successful return, a reference to the created object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>
        <para>Retrieves marshaling information.</para>
      </summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name=" pBstrMops"> A reference to the opcode string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.UCOMITypeLib@,System.Int32@)">
      <summary>
        <para>Retrieves the type library that contains this type description
      and its index within that type library.</para>
      </summary>
      <param name="ppTLB">On successful return, a reference to the containing type library.</param>
      <param name=" pIndex">On successful return, a reference to the index of the type description within the containing type library.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>
        <para>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> previously
   returned by <see cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)" /> .</para>
      </summary>
      <param name="pTypeAttr">Reference to the <see langword="TYPEATTR" /> to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>
        <para>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> previously
   returned by <see cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> .</para>
      </summary>
      <param name="pFuncDesc">Reference to the <see langword="FUNCDESC" />to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>
        <para>Releases a <see langword="VARDESC" /> previously
   returned by <see cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> .</para>
      </summary>
      <param name="pVarDesc">Reference to the <see langword="VARDESC" /> to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SYSKIND">
      <summary>
        <para>Identifies the target operating system platform.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_WIN16">
      <summary>
        <para>The target operating system for the type library is
      16-bit Windows systems. By default, data fields are packed.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_WIN32">
      <summary>
        <para>The target operating system for the type library is
      32-bit Windows systems. By default, data fields are naturally aligned (for
      example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers
      are aligned on quad-word boundaries, and so on).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SYSKIND.SYS_MAC">
      <summary>
   The target operating system for the type library is
   Apple Macintosh. By default, all data fields are aligned on even-byte
   boundaries.
</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LIBFLAGS">
      <summary>
        <para>Defines flags that apply to type libraries.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>
        <para>The type library is restricted, and should not be 
      displayed to users.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>
        <para>The type library describes controls, and should not be 
      displayed in type browsers intended for nonvisual objects.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>
        <para>The type library should not be displayed to users, 
      although its use is not restricted. Should be used by controls. Hosts should
      create a new type library that wraps the control with extended properties.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>
        <para> The type library exists
 in a persisted form on disk.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TYPELIBATTR">
      <summary>
        <para> Identifies a particular type library and provides localization support for member names.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.guid">
      <summary>
        <para>Represents a globally unique library ID of a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.lcid">
      <summary>
        <para>Represents a locale ID of a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.syskind">
      <summary>
        <para>Represents the target hardware platform of a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.wMajorVerNum">
      <summary>
        <para>Represents the major version number of a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.wMinorVerNum">
      <summary>
        <para>Represents the minor version number of a type library.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TYPELIBATTR.wLibFlags">
      <summary>
        <para> Represents library flags.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeLib">
      <summary>
        <para>Managed definition of the <see langword="ITypeLib" /> interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoCount">
      <summary>
        <para>Returns the number of type descriptions in the type library.</para>
      </summary>
      <returns>
        <para>The number of type descriptions in the
      type library.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.UCOMITypeInfo@)">
      <summary>
        <para>Retrieves the specified type description in the library.</para>
      </summary>
      <param name="index">Index of the <see langword="UCOMITypeInfo" /> interface to return.</param>
      <param name=" ppTI">On successful return, a <see langword="UCOMITypeInfo" /> describing the type referenced by <paramref name="index" /> . </param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.TYPEKIND@)">
      <summary>
        <para>Retrieves the type of a type description.</para>
      </summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name=" pTKind">Reference to the <see langword="TYPEKIND" /> enumeration for the type description.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.UCOMITypeInfo@)">
      <summary>
        <para>Retrieves the type description that corresponds to the specified GUID.</para>
      </summary>
      <param name="guid">IID of the interface of CLSID of the class whose type info is requested.</param>
      <param name=" ppTInfo">On successful return, the requested <see langword="ITypeInfo" /> interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>
        <para>Retrieves the structure that contains the library's attributes.</para>
      </summary>
      <param name="ppTLibAttr">On successful return, a structure that contains the library's attributes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeComp(System.Runtime.InteropServices.UCOMITypeComp@)">
      <summary>
        <para>Enables a client compiler to bind to a library's types,
      variables, constants, and global functions.</para>
      </summary>
      <param name="ppTComp">On successful return, an instance of a <see langword="UCOMITypeComp" /> instance for this <see langword="ITypeLib" /> .</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>
        <para>Retrieves the library's documentation string, the complete Help file name and
      path, and the context identifier for the library Help topic in the Help
      file.</para>
      </summary>
      <param name="index">Index of the type description whose documentation is to be returned.</param>
      <param name=" strName">Returns a string that contains the name of the specified item.</param>
      <param name=" strDocString">Returns a string that contains the documentation string for the specified item.</param>
      <param name=" dwHelpContext">Returns the Help context identifier associated with the specified item.</param>
      <param name=" strHelpFile">Returns a string that contains the fully qualified name of the Help file.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.IsName(System.String,System.Int32)">
      <summary>
        <para>Indicates whether a passed-in string contains the name
      of a type or member described in the library.</para>
      </summary>
      <param name="szNameBuf">The string to test.</param>
      <param name=" lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="szNameBuf" /> was found in the type library; otherwise 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.UCOMITypeInfo[],System.Int32[],System.Int16@)">
      <summary>
        <para>Finds occurrences of a type description in a type library.</para>
      </summary>
      <param name="szNameBuf">The name to search for.</param>
      <param name=" lHashVal">A hash value to speed up the search, computed by the <see langword="LHashValOfNameSys" /> function. If <paramref name="lHashVal " /> is 0, a value is computed.</param>
      <param name=" ppTInfo">On successful return, an array of pointers to the type descriptions that contain the name specified in <paramref name="szNameBuf" />.</param>
      <param name=" rgMemId">An array of the <see langword="MEMBERID" />'s of the found items; <paramref name="rgMemId" />[i] is the <see langword="MEMBERID" /> that indexes into the type description specified by <paramref name="ppTInfo" />[i]. Cannot be <see langword="null" />.</param>
      <param name=" pcFound">
        <para> On entry, indicates how many instances to look for. For example,<paramref name="pcFound" /> = 1 can be called to find the first occurrence. The search stops when one instance is found.</para>
        <para>On exit, indicates the number of instances that were found. If the <see langword="in" /> and <see langword="out" /> values of<paramref name="pcFound" /> are identical, there may be more type descriptions that contain the name. </para>
      </param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <para>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> originally
   obtained from <see cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)" /> .</para>
      </summary>
      <param name="pTLibAttr"> The <see langword="TLIBATTR" /> to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>
        <para> Wraps objects the marshaler should marshal as a
   <see langword="VT_UNKNOWN" />.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> class with the object to be
 wrapped.</para>
      </summary>
      <param name="obj">The object being wrapped.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>
        <para>Gets the object contained by this wrapper.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Expando.IExpando">
      <summary>
        <para> Enables modification of objects by adding and removing members, represented by <see cref="T:System.Reflection.MemberInfo" />
objects.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Expando.IExpando.AddField(System.String)">
      <summary>
        <para> Adds the named field to the Reflection
      object.</para>
      </summary>
      <param name="name">The name of the field. </param>
      <returns>
        <para> A <see cref="T:System.Reflection.FieldInfo" /> object representing
   the added field.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Expando.IExpando.AddProperty(System.String)">
      <summary>
        <para> Adds the named property to the Reflection
      object.
      </para>
      </summary>
      <param name="name">The name of the property. </param>
      <returns>
        <para> A <see langword="PropertyInfo" /> object representing the added property.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Expando.IExpando.AddMethod(System.String,System.Delegate)">
      <summary>
        <para> Adds the named method to the Reflection
      object.</para>
      </summary>
      <param name="name">The name of the method. </param>
      <param name=" method">The delegate to the method. </param>
      <returns>
        <para> A <see langword="MethodInfo" /> object representing the added method.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Expando.IExpando.RemoveMember(System.Reflection.MemberInfo)">
      <summary>
        <para>Removes the specified member.</para>
      </summary>
      <param name="m">The member to remove.</param>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>
        <para>Represents a
      writer that can write a sequential series of characters. This class is abstract.</para>
      </summary>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>
    Provides a <see langword="TextWriter" /> with no backing
    store that can be written to, but not read from.
 </summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>
        <para>Stores the new line characters used for this 
    <see langword="TextWriter" /> .</para>
      </summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>
    Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class.
 </summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class with
   the specified format provider.</para>
      </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>
        <para>Closes the current writer and releases any system resources
      associated with the writer.</para>
      </summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>
        <para>Clears all buffers for the current writer and causes any buffered
      data to be written to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>
        <para>Creates a thread-safe wrapper around the specified 
    <see langword="TextWriter" /> .</para>
      </summary>
      <param name="writer">The <see langword="TextWriter" /> to synchronize.</param>
      <returns>
        <para>A thread-safe wrapper.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>
        <para>Writes a character to the text stream.</para>
      </summary>
      <param name="value">The character to write to the text stream.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>
        <para>Writes a character array to the text stream.</para>
      </summary>
      <param name="buffer">The character array to write to the text stream.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a subarray of characters to the text stream.</para>
      </summary>
      <param name="buffer">The character array to write data from.</param>
      <param name="index">Starting index in the buffer.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>
        <para>Writes the text representation of a
   <see langword="Boolean" />
   value to the text stream.</para>
      </summary>
      <param name="value">The <see langword="Boolean" /> to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>
        <para>Writes the text representation of a 4-byte signed integer to the text stream.</para>
      </summary>
      <param name="value">The 4-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>
        <para>Writes the text representation of a 4-byte unsigned integer to the text stream.</para>
      </summary>
      <param name="value">The 4-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>
        <para>Writes the text representation of an 8-byte signed integer to the text
       stream.</para>
      </summary>
      <param name="value">The 8-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>
        <para>Writes the text representation of an 8-byte unsigned integer to the text
      stream.</para>
      </summary>
      <param name="value">The 8-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>
        <para>Writes the text representation of a 4-byte floating-point 
       value to the text stream.</para>
      </summary>
      <param name="value">The 4-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>
        <para>Writes the text representation of an 8-byte floating-point 
       value to the text stream.</para>
      </summary>
      <param name="value">The 8-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>
        <para>Writes the text representation of a decimal 
       value followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The decimal value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>
        <para>Writes a string to the text stream.</para>
      </summary>
      <param name="value">The string to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>
        <para>Writes the text representation of an object to the text
      stream by calling <see langword="ToString" /> on that object.</para>
      </summary>
      <param name="value">The object to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>
        <para>Writes out a formatted string, using the same semantics
      as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string, using the same semantics
      as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">An object to write into the formatted string.</param>
      <param name="arg1">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string, using the same semantics
      as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">An object to write into the formatted string.</param>
      <param name="arg1">An object to write into the formatted string.</param>
      <param name="arg2">An object to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>
        <para>Writes out a formatted string, using the same semantics
      as <see cref="M:System.String.Format(System.String,System.Object)" qualify="true" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg">The object array to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>
        <para>Writes a line terminator to the text stream.</para>
      </summary>
      <returns>
        <para>The default line terminator is a carriage return followed by a line feed
      ("\r\n"), but this value can be changed using the <see cref="P:System.IO.TextWriter.NewLine" /> property.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>
        <para>Writes a character followed by a line terminator to the text
      stream.</para>
      </summary>
      <param name="value">The character to write to the text stream.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>
        <para>Writes an array of characters followed by a line terminator to
      the text stream.</para>
      </summary>
      <param name="buffer">The character array from which data is read.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a subarray of characters followed by a line terminator to
      the text stream.</para>
      </summary>
      <param name="buffer">The character array from which data is read.</param>
      <param name="index">The index into <paramref name="buffer" /> at which to begin reading.</param>
      <param name="count">The maximum number of characters to write.</param>
      <returns>
        <para>Characters are read from <paramref name="buffer" /> beginning at
<paramref name="index" /> and ending at <paramref name="index" /> + <paramref name="count" />
.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>
        <para>Writes the text representation of a
   <see langword="Boolean" /> followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The <see langword="Boolean" /> to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>
        <para>Writes the text representation of a 4-byte signed integer followed by a line
      terminator to the text stream.</para>
      </summary>
      <param name="value">The 4-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>
        <para>Writes the text representation of a 4-byte unsigned integer followed by
      a line terminator to the text stream.</para>
      </summary>
      <param name="value">The 4-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>
        <para>Writes the text representation of an 8-byte signed integer followed by a
      line terminator to the text stream.</para>
      </summary>
      <param name="value">The 8-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>
        <para>Writes the text representation of an 8-byte unsigned integer followed by a
      line terminator to the text stream.</para>
      </summary>
      <param name="value">The 8-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>
        <para>Writes the text representation of a 4-byte floating-point 
       value followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The 4-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>
        <para>Writes the text representation of a 8-byte floating-point 
       value followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The 8-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>
        <para>Writes the text representation of a decimal 
       value followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The decimal value to write.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>
        <para>Writes a string followed by a line terminator to the text stream.</para>
      </summary>
      <param name="value">The string to write. If <paramref name="value" /> is <see langword="null" />, only the line termination characters are written.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>
        <para>Writes the text representation of an object by calling
   <see langword="ToString" /> on this object, followed by a line
      terminator to the text stream.</para>
      </summary>
      <param name="value">The object to write. If <paramref name="value" /> is <see langword="null" />, only the line termination characters are written.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>
        <para>Writes out a formatted string and a new line, using the
      same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />
      .</para>
      </summary>
      <param name="format">The formatted string.</param>
      <param name="arg0">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string and a new line, using the
      same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into format string.</param>
      <param name="arg1">The object to write into the formatted string.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <para>Writes out a formatted string and a new line, using the
      same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg0">The object to write into format string.</param>
      <param name="arg1">The object to write into format string.</param>
      <param name="arg2">The object to write into format string.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <para>Writes out a formatted string and a new line, using the
      same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</para>
      </summary>
      <param name="format">The formatting string.</param>
      <param name="arg">The object array to write into format string.</param>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>
        <para>Gets an object that controls formatting.</para>
      </summary>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>
        <para>When overridden in a derived class, returns the <see cref="T:System.Text.Encoding" /> in which the output is written.</para>
      </summary>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>
        <para>Gets or sets the line terminator string used by the
      current <see langword="TextWriter" /> .</para>
      </summary>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>
        <para> Reads primitive data types as binary values in a specific encoding.</para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based
   on the supplied stream and using <see cref="T:System.Text.UTF8Encoding" />.</para>
      </summary>
      <param name="input">A stream.</param>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BinaryReader" /> class based on the supplied stream
    and a specific character encoding.</para>
      </summary>
      <param name="input">The supplied stream.</param>
      <param name="encoding">The character encoding.</param>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>
        <para> Closes the current reader and the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader" /> and optionally releases the managed
   resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>
        <para> Returns the next available character and does not advance the byte or character
      position.</para>
      </summary>
      <returns>
        <para> The next available character, or -1 if no more characters are
      available or the stream does not support seeking.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>
        <para> Reads characters from the underlying stream and advances 
       the current position of the stream in accordance with the
    <see langword="Encoding" /> used and the specific character being read from the stream.</para>
      </summary>
      <returns>
    The next character from the input stream, or -1 if no
    characters are currently available.
 </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>
        <para>Reads a <see langword="Boolean" />
 from the current stream and advances the current position of the
 stream by one byte.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the byte is non-zero; otherwise 
 <see langword="false" />. </para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>
        <para>Reads the next byte from the current stream and advances the current position
       of the stream by 1 byte.</para>
      </summary>
      <returns>
        <para>The next byte read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>
        <para>Reads a signed byte from this stream and advances the current position of the
       stream by one byte.</para>
      </summary>
      <returns>
        <para>A signed byte read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>
        <para>Reads the next character from the current stream and 
       advances the current position of the stream in accordance with the
    <see langword="Encoding" /> 
    used and the
    specific character being read from the stream.</para>
      </summary>
      <returns>
        <para>A character read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>
        <para>Reads a 2-byte signed integer from the current stream and advances the
       current position of the stream by two bytes.</para>
      </summary>
      <returns>
        <para>A 2-byte signed integer read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>
        <para> Reads a 2-byte unsigned integer from the current stream using little
       endian encoding and advances the position of the stream by two bytes.</para>
      </summary>
      <returns>
        <para>A 2-byte unsigned integer read from this stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>
        <para>Reads a 4-byte signed integer from the current stream and advances the
       current position of the stream by four bytes.</para>
      </summary>
      <returns>
        <para>A 4-byte signed integer read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>
        <para>Reads a 4-byte unsigned integer from the current stream and advances the
       position of the stream by four bytes.</para>
      </summary>
      <returns>
        <para>A 4-byte unsigned integer read from this stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>
        <para>Reads an 8-byte signed integer from the current stream and advances the
       current position of the stream by four bytes.</para>
      </summary>
      <returns>
        <para>An 8-byte signed integer read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>
        <para>Reads an 8-byte unsigned integer from the current stream and advances the
       position of the stream by eight bytes.</para>
      </summary>
      <returns>
        <para>An 8-byte unsigned integer read from this stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>
        <para> Reads a 4-byte floating point value from the current stream
       and advances the current position of the stream by four bytes.</para>
      </summary>
      <returns>
        <para>A 4-byte floating point value read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>
        <para> Reads an 8-byte floating point value from the current stream and
       advances the current position of the stream by eight bytes.</para>
      </summary>
      <returns>
        <para>An 8-byte floating point value read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>
        <para> Reads a decimal value from the current stream and
       advances the current position of the stream by sixteen bytes.</para>
      </summary>
      <returns>
        <para>An decimal value read from the current stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>
        <para>Reads a String from the current stream. The String is
       prefixed with the length, encoded as
       an integer 7 bits
       at a time.</para>
      </summary>
      <returns>
        <para>The string being read.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads <paramref name="count" /> characters from the stream with <paramref name="index" /> 
 as the starting point in the character array.</para>
      </summary>
      <param name=" buffer">The buffer to read data into.</param>
      <param name=" index">The starting point in the buffer at which to begin reading into the buffer.</param>
      <param name=" count">The number of characters to read.</param>
      <returns>
        <para>The total number of characters read into the buffer. This
       might be less than the number of characters requested if that many characters are
       not currently available, or it might be zero if the end of the stream is reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>
        <para>Reads <paramref name="count " />characters from 
    the current stream, returns the data in a character array, and advances the
    current position in accordance with the <see langword="Encoding" />
    used and the specific character being read from the
    stream.</para>
      </summary>
      <param name="count">The number of characters to read.</param>
      <returns>
        <para>A character array containing data read from the
       underlying stream. This might be less than the number of characters requested if
       the end of the stream is reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Reads <paramref name="count" /> bytes from the stream with 
 <paramref name="index" /> as the starting point in the byte array.</para>
      </summary>
      <param name="buffer">The buffer to read data into.</param>
      <param name="index">The starting point in the buffer at which to begin reading into the buffer. </param>
      <param name="count">The number of characters to read.</param>
      <returns>
        <para>The number of characters read into <paramref name="buffer" />. This might be less than the
    number of bytes requested if that many bytes are not available, or it might be
    zero if the end of the stream is reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>
        <para>Reads <paramref name="count" /> bytes from the current stream into a byte array
    and advances the current position by <paramref name="count" /> bytes.</para>
      </summary>
      <param name="count">The number of bytes to read.</param>
      <returns>
        <para>A byte array containing data read from the underlying stream. This might be
       less than the number of bytes requested if the end of the stream is reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>
        <para>Fills the internal buffer with the specified number of bytes read
       from the stream.</para>
      </summary>
      <param name="numBytes">The number of bytes to be read.</param>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>
        <para>Reads in a 32-bit integer in a compressed format.</para>
      </summary>
      <returns>
        <para>A 32-bit integer in compressed format.</para>
      </returns>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>
        <para>Exposes access to the underlying stream of the 
    <see langword="BinaryReader" /> .</para>
      </summary>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>
        <para>Writes primitive types in binary to a stream and supports
      writing strings in a specific encoding.</para>
      </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>
        <para> A <see cref="T:System.IO.BinaryWriter" /> with no backing
    store.</para>
      </summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>
        <para>
       Holds the underlying stream.
    </para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class that writes to a stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream and using UTF-8
   as the encoding for strings.</para>
      </summary>
      <param name="output">The output stream.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BinaryWriter" /> class based on the supplied stream
   and a specific character encoding.</para>
      </summary>
      <param name="output">The supplied stream.</param>
      <param name=" encoding">The character encoding.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>
        <para>Closes the current <see langword="BinaryWriter" /> and the
   underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryWriter" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>
        <para>Clears all buffers for the current writer and causes any buffered data to be
      written to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>
        <para>
       Sets the position within the current stream.
    </para>
      </summary>
      <param name="offset">
    A byte offset relative to <paramref name="origin" />.
 </param>
      <param name=" origin">
    A field of <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which the new position is to be obtained.
 </param>
      <returns>
        <para>
       The position with the current stream.
    </para>
      </returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>
        <para>Writes a one-byte <see langword="Boolean" /> value to the current stream, with zero representing
 <see langword="false " />and one representing <see langword="true" />.</para>
      </summary>
      <param name="value">The <see langword="Boolean" /> value to write (zero or one).</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>
        <para>Writes an unsigned byte to the current stream and advances the stream position by one
       byte.</para>
      </summary>
      <param name="value">The unsigned byte to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>
        <para>Writes a signed byte to the current stream and advances the stream position
       by one byte.</para>
      </summary>
      <param name="value">The signed byte to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>
        <para>Writes a byte array to the underlying stream.</para>
      </summary>
      <param name="buffer">A byte array containing the data to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a region of a byte array to the current stream.</para>
      </summary>
      <param name="buffer">A byte array containing the data to write.</param>
      <param name=" index">The starting point in <paramref name="buffer " />from which to begin reading. </param>
      <param name=" count">The number of bytes to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>
        <para> Writes a Unicode character to the current stream and 
       advances the current position of the stream in accordance with the
    <see langword="Encoding" /> 
    used and the specific characters being
    written to the stream.</para>
      </summary>
      <param name="ch">The character to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>
        <para> Writes a character array to the current stream and
      advances the current position of the stream in accordance with the
   <see langword="Encoding" />
   used and
   the specific characters being written to the stream.</para>
      </summary>
      <param name="chars">A character array containing the data to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a section of a character array to the current
      stream, and advances the current position of the stream in accordance with the
   <see langword="Encoding" />
   used and perhaps the specific characters being written to the stream.</para>
      </summary>
      <param name="chars">A character array containing the data to write.</param>
      <param name="index">The starting point in <paramref name="buffer " />from which to begin reading.</param>
      <param name="count">The number of characters to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>
        <para>Writes an eight-byte floating-point value to the current stream and advances
       the stream position by eight bytes.</para>
      </summary>
      <param name="value">The eight-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>
        <para>Writes a decimal value to the current stream and advances
       the stream position by eight bytes.</para>
      </summary>
      <param name="value">The decimal value to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>
        <para>Writes a two-byte signed integer to the current stream and advances the
       stream position by two bytes.</para>
      </summary>
      <param name="value">The two-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>
        <para>Writes a two-byte unsigned integer to the current stream and advances the
       stream position by two bytes.</para>
      </summary>
      <param name="value">The two-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>
        <para>Writes a four-byte signed integer to the current stream and advances the
       stream position by four bytes.</para>
      </summary>
      <param name="value">The four-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>
        <para>Writes a four-byte unsigned integer to the current stream and advances the
       stream position by four bytes.</para>
      </summary>
      <param name="value">The four-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>
        <para>Writes an eight-byte signed integer to the current stream and advances the
       stream position by eight bytes.</para>
      </summary>
      <param name="value">The eight-byte signed integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>
        <para>Writes an eight-byte unsigned integer to the current stream and advances the
       stream position by eight bytes.</para>
      </summary>
      <param name="value">The eight-byte unsigned integer to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>
        <para>Writes a four-byte floating-point value to the current stream and advances
       the stream position by four bytes.</para>
      </summary>
      <param name="value">The four-byte floating-point value to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>
        <para> Writes a length-prefixed string to this stream in the 
       current <see langword="Encoding" /> of the
    <see langword="BinaryWriter" />, and advances 
       the current position of the stream in accordance with the
    <see langword="Encoding" /> 
    used and the specific characters being written to the
    stream.</para>
      </summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>
        <para>Writes a 32-bit integer in a compressed format.</para>
      </summary>
      <param name="value">The 32-bit integer to be written.</param>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>
        <para> Gets the <see langword="BinaryWriter" />'s
    underlying stream.</para>
      </summary>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>
        <para> Reads and writes to another stream. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BufferedStream" /> class with a default buffer size of 4096
   bytes.</para>
      </summary>
      <param name="stream">The current stream.</param>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.BufferedStream" /> class with the specified buffer size.</para>
      </summary>
      <param name="stream">The current stream.</param>
      <param name="bufferSize">The buffer size in bytes.</param>
    </member>
    <member name="M:System.IO.BufferedStream.Close">
      <summary>
        <para>Closes the
      stream and releases any resources (especially system resources such as sockets
      and file handles) associated with the current buffered stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>
        <para> Clears all buffers for this stream and causes any buffered data to be
      written to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Copies bytes from the current buffered stream to an array.</para>
      </summary>
      <param name="array">The buffer to which bytes are to be copied.</param>
      <param name="offset">The byte offset in the buffer at which to begin reading bytes.</param>
      <param name="count">The number of bytes to be read.</param>
      <returns>
        <para>The total number of bytes read into <paramref name="array" />.
   This may be less than the number of bytes requested if that many
   bytes aren't currently available, or zero if the end of the
   stream has been reached before any data can be read.</para>
      </returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>
        <para>Reads a byte from the underlying stream and returns the
      byte cast to an <see langword="int" /> ,
      or returns -1 if reading from the end of the stream.</para>
      </summary>
      <returns>
        <para>The byte cast to an <see langword="int" />, or -1 if reading from the end of
   the stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Copies
      bytes to the buffered stream and advances the current position within the
      buffered stream by the number of bytes written.</para>
      </summary>
      <param name="array">The byte array from which to copy <paramref name="count " /> bytes to the current buffered stream.</param>
      <param name="offset">The offset in the buffer at which to begin copying bytes to the current buffered stream.</param>
      <param name="count">The number of bytes to be written to the current buffered stream.</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>
        <para>Writes a byte to the current position in the buffered stream.</para>
      </summary>
      <param name="value">A byte to write to the stream.</param>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para>Sets the position within the current buffered stream.</para>
      </summary>
      <param name="offset">A byte offset relative to <paramref name="origin" />.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point from which to obtain the new position.</param>
      <returns>
        <para>The new position within the current buffered stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>
        <para>Sets the length of the buffered stream.</para>
      </summary>
      <param name="value">An integer indicating the desired length of the current buffered stream in bytes.</param>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>
        <para>Gets a value indicating whether the current stream supports reading.</para>
      </summary>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>
        <para>Gets a value indicating whether the current stream supports writing.</para>
      </summary>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>
        <para>Gets a value indicating whether the current stream supports seeking.</para>
      </summary>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>
        <para>Gets the stream length in bytes.</para>
      </summary>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>
        <para> Gets the position within the current stream.</para>
      </summary>
    </member>
    <member name="T:System.IO.Directory">
      <summary>
        <para> Exposes static methods for creating, moving, and enumerating through directories
      and subdirectories.</para>
      </summary>
    </member>
    <member name="M:System.IO.Directory.GetParent(System.String)">
      <summary>
        <para>Retrieves the parent directory of the specified path, including both absolute and relative
      paths.</para>
      </summary>
      <param name="path">The fully qualified path for which to retrieve the parent directory.</param>
      <returns>
        <para>The parent directory, or <see langword="null" /> if <paramref name="path" /> is the
   root directory, including the root of a UNC server or share name.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
      <summary>
        <para>Creates all directories and subdirectories as specified by <paramref name="path" />
.</para>
      </summary>
      <param name="path">The directory path to create.</param>
      <returns>
        <para>All <see cref="T:System.IO.DirectoryInfo" />
objects, including subdirectories, specified by <paramref name="path" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
      <summary>
        <para>Determines whether the given path refers to an existing
      directory
      on disk.</para>
      </summary>
      <param name="path">The path to test.</param>
      <returns>
        <para>
          <see langword="true " />
if <paramref name="path" /> refers to an existing directory; otherwise, <see langword="false " />.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the creation date and time for the specified file or directory.</para>
      </summary>
      <param name="path">The file or directory for which to set the creation date and time information.</param>
      <param name=" creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.</param>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
      <summary>
        <para>Gets the creation date and time of a directory.</para>
      </summary>
      <param name="path">The path of the directory.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the
   specified directory. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the date and time a directory was last written to.</para>
      </summary>
      <param name="path">The path of the directory.</param>
      <param name=" lastWriteTime">The date and time the directory was last written to.</param>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
      <summary>
        <para>Returns the date and time the specified file or directory was last written to.</para>
      </summary>
      <param name="path">The file or directory for which to obtain modification date and time information.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the date and time the specified file or directory was last accessed.</para>
      </summary>
      <param name="path">The file or directory for which to set the access date and time information.</param>
      <param name="lastAccessTime">A <see cref="T:System.DateTime" /> containing the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time.</param>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
      <summary>
        <para>Returns the date and time the specified file or directory was last accessed.</para>
      </summary>
      <param name="path">The file or directory for which to obtain access date and time information.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to the date and time the specified file or
   directory was last accessed. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
      <summary>
        <para> Returns the names of files in the specified directory.</para>
      </summary>
      <param name="path">The directory from which to retrieve the files.</param>
      <returns>
        <para>A <see langword="String" /> array of file names in the specified directory.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
      <summary>
        <para>Returns the names of files in the
      specified directory that match the
      specified search pattern.</para>
      </summary>
      <param name="path">The directory to search.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot contain <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> .</param>
      <returns>
        <para>A <see langword="String" /> array
   containing the names of files in the specified directory that match
   the specified search pattern.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
      <summary>
        <para>Gets the names of subdirectories in the specified directory.</para>
      </summary>
      <param name="path">The path for which an array of subdirectory names is returned.</param>
      <returns>
        <para>An array of type <see langword="String" /> containing the
   names of subdirectories in <paramref name="path" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
      <summary>
        <para>Gets an array of directories matching the
      specified search pattern from the current directory.</para>
      </summary>
      <param name="path">The path to search.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot contain <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> .</param>
      <returns>
        <para>A <see langword="String" /> array of
   directories matching the search pattern.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
      <summary>
        <para>Returns the names of all files and subdirectories in the specified directory.</para>
      </summary>
      <param name="path">The directory for which file and subdirectory names are returned.</param>
      <returns>
        <para>A <see langword="String" /> array
   containing the names of file system entries in the specified directory.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
      <summary>
        <para> Returns an array
      of file system entries matching the specified search criteria.</para>
      </summary>
      <param name="path">The path to be searched.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. The <paramref name="searchPattern" /> parameter cannot contain <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> .</param>
      <returns>
        <para>A <see langword="String" /> array of file system entries matching the search criteria.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetLogicalDrives">
      <summary>
        <para>Retrieves the names of the logical drives
      on this computer in the form "&lt;drive letter&gt;:\".</para>
      </summary>
      <returns>
        <para>The logical drives on this computer.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
      <summary>
        <para>Returns the volume information,
 root information, or both for the specified path.</para>
      </summary>
      <param name="path">The path of a file or directory.</param>
      <returns>
        <para>A string containing the volume information, root
 information, or both for the specified path.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
      <summary>
        <para> Gets the current working directory of the application.</para>
      </summary>
      <returns>
        <para>A string containing the path of the current working directory.</para>
      </returns>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
      <summary>
        <para>Sets the application's current working directory to the specified directory.</para>
      </summary>
      <param name="path">The path to which the current working directory is set.</param>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
      <summary>
        <para>Moves a file or a directory and its contents to a new location.</para>
      </summary>
      <param name="sourceDirName">The path of the file or directory to move.</param>
      <param name="destDirName">The path to the new location for <paramref name="sourceDirName" />.</param>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
      <summary>
        <para> Deletes an empty directory from a specified path.</para>
      </summary>
      <param name="path">The fully qualified name of the empty directory to remove. This directory must be writable or empty.</param>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
      <summary>
        <para> Deletes the specified directory and, if indicated, any subdirectories in the directory.</para>
      </summary>
      <param name="path">The fully qualified name of the directory to remove.</param>
      <param name="recursive">
        <see langword="true" /> to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, <see langword="false" />.</param>
    </member>
    <member name="T:System.IO.DirectoryInfo">
      <summary>
        <para> Exposes instance methods for creating, moving, and enumerating through directories
 and subdirectories.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileSystemInfo">
      <summary>
        <para>Provides the base class for both <see cref="T:System.IO.FileInfo" /> and <see cref="T:System.IO.DirectoryInfo" /> 
objects.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
      <summary>
        <para>Represents the fully qualified path of the directory or file.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
      <summary>
        <para>The path originally specified by the user, whether relative or absolute.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
      <summary>
        <para>
       Deletes a file or directory.
    </para>
      </summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
      <summary>
        <para> Refreshes the state of the object.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
      <summary>
        <para>Gets the full path of the directory or file.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
      <summary>
        <para>Gets the string representing the extension part of 
      the file.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
      <summary>
        <para>For files, gets the name of the file. For directories, gets
 the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the
 <see langword="Name " />property
 gets
 the name of the directory.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
      <summary>
        <para>Gets a value indicating whether the file or directory exists.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
      <summary>
        <para>Gets or sets the creation time of the current
   <see cref="T:System.IO.FileSystemInfo" /> object.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
      <summary>
        <para>Gets or sets the time the current file or directory was last
      accessed.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
      <summary>
        <para>Gets or sets the time when the current file or directory was last
      written to.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Attributes">
      <summary>
        <para>Gets or sets the <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" /> .</para>
      </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.DirectoryInfo" /> class on the specified path.</para>
      </summary>
      <param name="path">A string specifying the path on which to create the <see langword="DirectoryInfo" /> .</param>
    </member>
    <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
      <summary>
        <para>Creates a subdirectory or subdirectories on the specified
      path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo" /> class.</para>
      </summary>
      <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
      <returns>
        <para> The
      last directory specified in <paramref name="path" /> . </para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.Create">
      <summary>
        <para>Creates a directory.</para>
      </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
      <summary>
        <para>Returns a file list from the current directory matching
      the given <paramref name="searchPattern" />
      , such as "*.txt".</para>
      </summary>
      <param name="searchPattern">The search string, such as "*.txt".</param>
      <returns>
        <para> An array of type <see cref="T:System.IO.FileInfo" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles">
      <summary>
        <para>Returns a file list from the current directory.</para>
      </summary>
      <returns>
        <para> An array of type <see cref="T:System.IO.FileInfo" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories">
      <summary>
        <para>Returns the subdirectories of the current directory.</para>
      </summary>
      <returns>
        <para>An array of <see cref="T:System.IO.DirectoryInfo" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
      <summary>
        <para>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects matching the
   specified search criteria.</para>
      </summary>
      <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
      <returns>
        <para>An array of strongly typed
   <see langword="FileSystemInfo" />
   objects matching the search criteria.</para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
      <summary>
        <para> Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" />
entries listing all the files and directories.</para>
      </summary>
      <returns>
        <para> An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.
 </para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
      <summary>
        <para>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" />
matching the given search
criteria.</para>
      </summary>
      <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
      <returns>
        <para>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
      <summary>
        <para>Moves a <see cref="T:System.IO.DirectoryInfo" /> instance
   and its contents to a new path.</para>
      </summary>
      <param name="destDirName">The name and path to which to move this <see cref="T:System.IO.DirectoryInfo" /> instance. The <paramref name="destDirName" /> parameter cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this <see langword="DirectoryInfo" /> instance as a subdirectory.</param>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete">
      <summary>
        <para> Deletes this <see cref="T:System.IO.DirectoryInfo" /> if it is
   empty.
   </para>
      </summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
      <summary>
        <para>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />,
   specifying whether to delete subdirectories and files.</para>
      </summary>
      <param name="recursive">
        <see langword="true" /> to delete this <see langword="DirectoryInfo" /> , its subdirectories, and all files; otherwise <see langword="false" /> .</param>
    </member>
    <member name="M:System.IO.DirectoryInfo.ToString">
      <summary>
        <para>Returns the original path that was passed by the user.</para>
      </summary>
      <returns>
        <para>Returns the original path that was passed by the user.</para>
      </returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Name">
      <summary>
        <para> Gets the name of this <see cref="T:System.IO.DirectoryInfo" /> instance.</para>
      </summary>
    </member>
    <member name="P:System.IO.DirectoryInfo.Parent">
      <summary>
        <para> Gets the parent directory of a specified subdirectory.</para>
      </summary>
    </member>
    <member name="P:System.IO.DirectoryInfo.Exists">
      <summary>
        <para>Gets a value indicating whether the directory exists.</para>
      </summary>
    </member>
    <member name="P:System.IO.DirectoryInfo.Root">
      <summary>
        <para>Gets the root portion of a path.</para>
      </summary>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>
        <para> The exception that is thrown when part of a file or directory
      cannot be found.</para>
      </summary>
    </member>
    <member name="T:System.IO.IOException">
      <summary>
        <para>The exception that is thrown when an I/O error occurs.</para>
      </summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to the empty string
   (""), its HRESULT set to COR_E_IO, and its inner exception set to a null
   reference.</para>
      </summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class
   with its message string set to <paramref name="message" />, its HRESULT
   set to COR_E_IO, and its inner exception set to <see langword="null" />
   .</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class with its message string set to <paramref name="message" /> and
   its HRESULT user-defined.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name=" hresult">An integer identifying the error that has occurred.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IOException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IOException" /> class 
   with the specified serialization and context information.</para>
      </summary>
      <param name="info"> The data for serializing or deserializing the object.</param>
      <param name="context"> The source and destination for the object.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string
   set to the empty string ("") and its HRESULT set to
   COR_E_DIRECTORYNOTFOUND.</para>
      </summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with its message string set to <paramref name="message" /> and its HRESULT set to COR_E_DIRECTORYNOTFOUND.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.DirectoryNotFoundException" /> class with the specified serialization and context information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>
        <para>The exception that is thrown when reading is attempted past the
      end of a stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class
    with its message string set to the empty string ("") and its HRESULT set to COR_E_ENDOFSTREAM.</para>
      </summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with its message string set to <paramref name="message" />
and its HRESULT set to COR_E_ENDOFSTREAM.</para>
      </summary>
      <param name="message">A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">A string that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.EndOfStreamException" /> class with the specified
   serialization and context information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.IO.File">
      <summary>
        <para>Provides static methods for the creation, copying,
 deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</para>
      </summary>
    </member>
    <member name="M:System.IO.File.OpenText(System.String)">
      <summary>
        <para> Opens an existing UTF-8 encoded text file
      for reading.</para>
      </summary>
      <param name="path">The file to be opened for reading.</param>
      <returns>
        <para>A <see cref="T:System.IO.StreamReader" /> on the specified path.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.CreateText(System.String)">
      <summary>
        <para> Creates or opens a new file for writing UTF-8 encoded text.</para>
      </summary>
      <param name="path">The file to be opened for writing.</param>
      <returns>
        <para>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file
   using UTF-8 encoding.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.AppendText(System.String)">
      <summary>
        <para>Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file.</para>
      </summary>
      <param name="path">The path to the file to append to.</param>
      <returns>
        <para>A <see langword="StreamWriter" /> that
   appends UTF-8 encoded text to an existing file.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String)">
      <summary>
        <para>Copies an existing file to a new file. Overwriting a file of the same
      name is not allowed.</para>
      </summary>
      <param name="sourceFileName">The file to copy.</param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
      <summary>
        <para>Copies an existing file to a new file. Overwriting a file
      of the same name is allowed.</para>
      </summary>
      <param name="sourceFileName">The file to copy.</param>
      <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
      <param name=" overwrite">
        <see langword="true" /> if the destination file can be overwritten; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.File.Create(System.String)">
      <summary>
        <para>Creates a file in the specified fully qualified path.</para>
      </summary>
      <param name="path">The fully qualified path and name of the file to create.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> that provides read/write
   access to the specified file.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Create(System.String,System.Int32)">
      <summary>
        <para> Creates or overwrites the specified
      file.</para>
      </summary>
      <param name="path">The name of the file.</param>
      <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
      <returns>
        <para>A new file with the specified buffer size.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Delete(System.String)">
      <summary>
        <para>Deletes the file specified by the fully qualified path. An
      exception is not thrown if the specified file does not exist.</para>
      </summary>
      <param name="path">The name of the file to be deleted.</param>
    </member>
    <member name="M:System.IO.File.Exists(System.String)">
      <summary>
        <para> Determines whether the specified file exists.</para>
      </summary>
      <param name="path">The file to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the caller has the required
   permissions and <paramref name="path" /> contains the name of an existing file; otherwise,
<see langword="false" />. This method also returns <see langword="false" /> if 
<paramref name="path" /> is <see langword="null" /> or a zero-length string.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
      <summary>
        <para>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access.</para>
      </summary>
      <param name="path">The file to open.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with
   read/write access and not shared.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
        <para>Opens a <see cref="T:System.IO.FileStream" /> on the specified fully qualified path, with the specified mode and
   access.</para>
      </summary>
      <param name="path">The file to open.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name=" access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param>
      <returns>
        <para>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with
   the specified mode and access.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
        <para>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read,
   write, or read/write access and the specified sharing option.</para>
      </summary>
      <param name="path">The file to open.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param>
      <param name=" share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read,
   write, or read/write access and the specified sharing option.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.SetCreationTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the date and time the file was created.</para>
      </summary>
      <param name="path">The file for which to set the creation date and time information.</param>
      <param name=" creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.</param>
    </member>
    <member name="M:System.IO.File.GetCreationTime(System.String)">
      <summary>
        <para>Returns the creation date and time of the specified file or directory.</para>
      </summary>
      <param name="path">The file or directory for which to obtain creation date and time information.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the
   specified file or directory. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the date and time the specified file was last accessed.</para>
      </summary>
      <param name="path">The file for which to set the access date and time information.</param>
      <param name="lastAccessTime">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in local time.</param>
    </member>
    <member name="M:System.IO.File.GetLastAccessTime(System.String)">
      <summary>
        <para>Returns the date and time the specified file or directory was last accessed.</para>
      </summary>
      <param name="path">The file or directory for which to obtain access date and time information.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to
   the date and time that the specified file or directory was last accessed. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)">
      <summary>
        <para>Sets the date and time that the specified file was last written to.</para>
      </summary>
      <param name="path">The file for which to set the date and time information.</param>
      <param name="lastWriteTime">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in local time.</param>
    </member>
    <member name="M:System.IO.File.GetLastWriteTime(System.String)">
      <summary>
        <para>Returns the date and time the specified file or directory was last written to.</para>
      </summary>
      <param name="path">The file or directory for which to obtain write date and time information.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.GetAttributes(System.String)">
      <summary>
        <para>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the fully qualified path.</para>
      </summary>
      <param name="path">The path to the file.</param>
      <returns>
        <para>The <see cref="T:System.IO.FileAttributes" /> of the file on the fully qualified path, or -1 if the path or file is not found.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>
        <para>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</para>
      </summary>
      <param name="path">The fully qualified path to the file.</param>
      <param name=" fileAttributes">The desired <see cref="T:System.IO.FileAttributes" />, such as <see langword="Hidden" />, <see langword="ReadOnly" />, <see langword="Normal" />, and <see langword="Archive" /> .</param>
    </member>
    <member name="M:System.IO.File.OpenRead(System.String)">
      <summary>
        <para> Opens an
      existing file for reading.</para>
      </summary>
      <param name="path">The file to be opened for reading.</param>
      <returns>
        <para> A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.OpenWrite(System.String)">
      <summary>
        <para>Opens an existing file for writing.</para>
      </summary>
      <param name="path">The file to be opened for writing.</param>
      <returns>
        <para> A read/write, unshared <see cref="T:System.IO.FileStream" /> object on the
   specified path.</para>
      </returns>
    </member>
    <member name="M:System.IO.File.Move(System.String,System.String)">
      <summary>
        <para> Moves a specified file to a new
      location, providing the option to specify a new file name.</para>
      </summary>
      <param name="sourceFileName">The name of the file to move.</param>
      <param name="destFileName">The new path for the file.</param>
    </member>
    <member name="T:System.IO.FileInfo">
      <summary>
        <para>Provides instance methods for the creation, copying,
      deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" />
      
      objects.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileInfo.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileInfo" /> class, which
   acts as a wrapper for a file path.</para>
      </summary>
      <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
    </member>
    <member name="M:System.IO.FileInfo.OpenText">
      <summary>
        <para>Creates a <see cref="T:System.IO.StreamReader" />
with UTF8 encoding that reads from an existing text file.</para>
      </summary>
      <returns>
        <para>A new <see langword="StreamReader" />
with UTF8 encoding.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.CreateText">
      <summary>
        <para>Creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.</para>
      </summary>
      <returns>
        <para>A new <see langword="StreamWriter" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.AppendText">
      <summary>
        <para>Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by
   this instance of the <see cref="T:System.IO.FileInfo" /> .</para>
      </summary>
      <returns>
        <para>A new <see langword="StreamWriter" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String)">
      <summary>
        <para>Copies an existing file
      to a new file, disallowing the overwriting of an existing file.</para>
      </summary>
      <param name="destFileName">The name of the new file to copy to.</param>
      <returns>
        <para>A new file with a
      fully
      qualified path.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.Create">
      <summary>
        <para>Creates a file.</para>
      </summary>
      <returns>
        <para>A new file.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
      <summary>
        <para>Copies an existing file
      to a new file, allowing the overwriting of an existing file.</para>
      </summary>
      <param name="destFileName">The name of the new file to copy to.</param>
      <param name="overwrite">
        <see langword="true" /> to allow an existing file to be overwritten; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A new file, or an overwrite of an existing file if
   <paramref name="overwrite" /> is <see langword="true" />. If the file exists and
   <paramref name="overwrite" /> is <see langword="false" />, an <see cref="T:System.IO.IOException" />
   is thrown.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.Delete">
      <summary>
        <para>Permanently deletes a file.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
      <summary>
        <para>Opens a file in the specified mode.</para>
      </summary>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" /> ) in which to open the file. </param>
      <returns>
        <para>A file opened in the specified mode,
      with read/write access and unshared.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>
        <para>Opens a file in the specified mode
      with read, write, or read/write access.</para>
      </summary>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" /> ) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> object opened in the specified mode
   and access, and unshared.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
        <para>Opens a file in the specified mode with read, write, or
      read/write access and the specified sharing option.</para>
      </summary>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" /> ) in which to open the file. </param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access. </param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other <see langword="FileStream" /> objects have to this file.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> object opened with the specified
   mode, access, and sharing options.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.OpenRead">
      <summary>
        <para>Creates a read-only <see cref="T:System.IO.FileStream" /> .</para>
      </summary>
      <returns>
        <para>A new read-only <see cref="T:System.IO.FileStream" /> object.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.OpenWrite">
      <summary>
        <para>Creates a write-only <see cref="T:System.IO.FileStream" /> .</para>
      </summary>
      <returns>
        <para>A new write-only unshared <see cref="T:System.IO.FileStream" /> object.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileInfo.MoveTo(System.String)">
      <summary>
        <para>Moves a specified file to a new location, providing the option to specify a
      new file name.</para>
      </summary>
      <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
    </member>
    <member name="M:System.IO.FileInfo.ToString">
      <summary>
        <para> Returns the fully qualified path as a string.</para>
      </summary>
      <returns>
        <para>A string representing the fully qualified path.</para>
      </returns>
    </member>
    <member name="P:System.IO.FileInfo.Name">
      <summary>
        <para>Gets the name of the file.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileInfo.Length">
      <summary>
        <para>Gets the size of the current file or directory.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileInfo.DirectoryName">
      <summary>
        <para> Gets a string representing the directory's full path.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileInfo.Directory">
      <summary>
        <para>Gets an instance of the parent directory.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileInfo.Exists">
      <summary>
        <para>Gets a value indicating whether a file exists.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>
        <para>Defines constants for read, write, or read/write access to a file.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>
        <para> Read access to the file.
      Data can be read from the file. Combine with <see langword="Write" /> for
      read/write access.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>
        <para> Write access to the file.
      Data can be written to the file. Combine with <see langword="Read" /> for
      read/write access.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>
        <para>Read and write access to the file. Data can be written
       to and read from the file.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>
        <para>Specifies how the operating system should open a file.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>
        <para>Specifies that the operating system should create a new
      file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true" /> and
   <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" qualify="true" /> . If
      the file already exists, an <see cref="T:System.IO.IOException" /> is thrown.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>
        <para>Specifies that the operating system should create a new
      file. If the file already exists, it will be overwritten. This requires
   <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true" /> and
   <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" qualify="true" />. <see langword="System.IO.FileMode.Create" /> 
   is equivalent to requesting that if the file does not exist, use
<see cref="F:System.IO.FileMode.CreateNew" />; otherwise, use 
<see cref="F:System.IO.FileMode.Truncate" />.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>
        <para>Specifies that the operating system should open an
      existing file. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true" /> .
      A <see cref="T:System.IO.FileNotFoundException" qualify="true" />
      is thrown if the file does not exist.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>
        <para>Specifies that the operating system should open a file
      if it exists; otherwise, a new file should be created. If the file is opened
      with <see langword="FileAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" qualify="true" /> is required. If file access is
   <see langword="FileAccess.ReadWrite" /> and the file exists, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true" /><see langword=" " />is required. If file access is
   <see langword="FileAccess.ReadWrite" /> and the file does not exist,
   <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" qualify="true" /><see langword=" " />is required in addition to <see langword="Read" /> and
   <see langword="Write" />
   .</para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>
        <para>Specifies that the operating system should open an
      existing file. Once opened, the file should be truncated so that its size is
      zero bytes. This requires <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" qualify="true" />. Attempts
      to read from a file opened with <see langword="Truncate" /> cause an exception.
   </para>
      </summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>
        <para> Opens the file if it exists and seeks to the end of the 
       file, or creates a new file. <see langword="FileMode.Append" /> can only be used
       in conjunction with <see langword="FileAccess.Write" />
       . Any attempt to read
       fails and throws an <see cref="T:System.ArgumentException" />
       .</para>
      </summary>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>
        <para> The exception that is thrown when a file is found
      but cannot be loaded.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class, setting the
<see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied 
   message that describes the error, such as "Could not load the specified file."
   This message takes into account the current system culture.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" />
class with the specified error message.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message and the name of
   the file that could not be loaded.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" /> class with a specified error message, the name of
   the file that could not be loaded, and a reference to the inner exception
   that is the cause of this exception.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name=" fileName">A <see cref="T:System.String" /> containing the name of the file that was not loaded.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>
        <para>Returns the fully qualified name of the current exception, and
      possibly the error message, the name of the inner exception, and the stack trace.</para>
      </summary>
      <returns>
        <para>A string containing the fully qualified name of this
      exception, and possibly the error message, the name of the inner exception, and
      the stack trace, depending on which <see cref="T:System.IO.FileLoadException" />
      constructor is used.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileLoadException" />
class with serialized data.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.IO.FileLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with
   the file name and additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>
        <para> Gets the error message and
      the name of the file that caused this exception.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>
        <para>Gets the name of the file that causes this exception.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileLoadException.FusionLog">
      <summary>
        <para> Gets the log file that describes why an assembly
      load failed.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>
        <para>The exception that is thrown when an attempt to access a
      file that does not exist on disk fails.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to the
      empty string ("") and its HRESULT set to COR_E_FILENOTFOUND.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.IO.FileNotFoundException" /> class with its message string set to <paramref name="message" />
   and its HRESULT set
   to COR_E_FILENOTFOUND.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" />
class with its message string set to <paramref name="message" />, specifying the file name that cannot be found, and its HRESULT set to COR_E_FILENOTFOUND.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name=" fileName">A <see cref="T:System.String" /> containing the full name of the file with the invalid image.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the full name of the file with the invalid image.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>
        <para>Returns the fully qualified name of this exception and possibly the error
      message, the name of the inner exception, and the stack trace. </para>
      </summary>
      <returns>
        <para>A string containing the fully qualified name of this exception and possibly
      the error message, the name of the inner exception, and the stack trace. </para>
      </returns>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileNotFoundException" /> 
class with the specified serialization and context information.</para>
      </summary>
      <param name="info">The data for serializing or deserializing the file.</param>
      <param name="context">The source and destination for the file.</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with
   the file name and additional exception information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name=" context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>
        <para>Gets the error message that explains the reason for the exception.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>
        <para>Gets the name of the file that cannot be found.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileNotFoundException.FusionLog">
      <summary>
        <para>Gets the log file that describes why loading of an assembly failed.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>
        <para>Contains constants for controlling the kind of
       access other FileStreams can have to the same file.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>
        <para>
       Declines sharing of the current file. Any request to open the file (by this
       process or another process) will fail until the file is closed.
    </para>
      </summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>
        <para> Allows subsequent opening of the file for reading. If this flag is not specified, any request
      to open the file for reading (by this process or another process) will
      fail until the file is closed. However, if this flag is specified additional permissions
      might still be needed to access the file.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>
        <para> Allows subsequent opening of the file for writing. If this flag is not specified, any request
      to open the file for writing (by this process or another process) will
      fail until the file is closed. However, if this flag is specified additional permissions
      might still be needed to access the file.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>
        <para> Allows subsequent opening of the file for reading or writing. If this flag is not
      specified, any request to open the file for writing or reading (by this process or
      another process) will fail until the file is closed. However, if this flag is
      specified additional
      permissions might still be needed to access the file.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>
        <para> 
      Makes the file handle inheritable by child processes. This is not directly supported by Win32.</para>
      </summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>
        <para>Exposes a <see cref="T:System.IO.Stream" /> around a file,
   supporting both synchronous and asynchronous read and write operations.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" />
class with the specified path and creation mode.</para>
      </summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" />
class with the specified path, creation mode, and read/write
permission.</para>
      </summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file may be accessed by the <see langword="FileStream" /> object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class
   with the specified path, creation mode, read/write permission, and
   sharing permission.</para>
      </summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file may be accessed by the <see langword="FileStream" /> object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" />
class with the specified path, creation mode, read/write and
sharing permission, and buffer size.</para>
      </summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file may be accessed by the <see langword="FileStream" /> object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes.</param>
      <param name="bufferSize">The desired buffer size in bytes. For <paramref name="bufferSize" /> values between zero and eight, the actual buffer size is set to eight bytes.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, buffer size,
   and synchronous or asynchronous state.</para>
      </summary>
      <param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="mode">A <see cref="T:System.IO.FileMode" /> constant that determines how to open or create the file.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that determines how the file may be accessed by the <see langword="FileStream" /> object. This gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param>
      <param name="share">A <see cref="T:System.IO.FileShare" /> constant that determines how the file will be shared by processes.</param>
      <param name="bufferSize">The desired buffer size in bytes. For <paramref name="bufferSize" /> values between zero and eight, the actual buffer size is set to eight bytes.</param>
      <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying <see langword="true" />, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync" /> parameter to <see langword="true" /> . Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for
   the specified file handle, with the specified read/write permission.</para>
      </summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for
   the specified file handle, with the specified read/write permission and
<see langword="FileStream" />
instance
ownership.</para>
      </summary>
      <param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />. </param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for
   the specified file handle, with the specified read/write permission,
<see langword="FileStream" /> instance ownership, and
   buffer size.</para>
      </summary>
      <param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />. </param>
      <param name="bufferSize">The size of the buffer in bytes.</param>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write
   permission, <see langword="FileStream" />
   instance
   ownership, buffer size, and synchronous or asynchronous state.</para>
      </summary>
      <param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param>
      <param name="access">A <see cref="T:System.IO.FileAccess" /> constant that gets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param>
      <param name="ownsHandle">
        <see langword="true" /> if the file handle will be owned by this <see langword="FileStream" /> instance; otherwise, <see langword="false" />.</param>
      <param name="isAsync">
        <see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</param>
      <param name="bufferSize">The size of the buffer in bytes.</param>
    </member>
    <member name="M:System.IO.FileStream.Close">
      <summary>
        <para>Closes the file and releases any resources associated with
      the current file stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.FileStream" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>
        <para>Ensures that resources are freed and other cleanup operations are performed when the garbage collector
       reclaims the <see langword="FileStream" /> .</para>
      </summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>
        <para>Clears all buffers for this stream and causes any buffered data to be written
      to the underlying device.</para>
      </summary>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>
        <para>Sets the length
      of this stream to the given value.</para>
      </summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a block of bytes from the stream and writes the data in a
      given buffer.</para>
      </summary>
      <param name="array">When this method returns, contains the specified byte array with the values between <paramref name="offset " />and (<paramref name="offset + count - 1) " />replaced by the bytes read from the current source.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin writing.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>
        <para>The total number of bytes read into the buffer.
      This might be less than the number of bytes requested if that number of bytes
      are not currently available, or zero if the end of the stream is reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para>Sets the current position of this stream to the given value.</para>
      </summary>
      <param name="offset">The point relative to <paramref name="origin" /> from which to begin seeking.</param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="origin" /> , using a value of type <see cref="T:System.IO.SeekOrigin" /> .</param>
      <returns>
        <para>The new position in the stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a block of bytes to this stream using data
      from a buffer.</para>
      </summary>
      <param name="array">The array to read.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin reading.</param>
      <param name="count">The maximum number of bytes to write.</param>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous read.</para>
      </summary>
      <param name="array">The buffer to read data into.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin reading.</param>
      <param name="numBytes">The maximum number of bytes to read.</param>
      <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
      <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>
        <para> Waits for the
      pending asynchronous read to complete.</para>
      </summary>
      <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
      <returns>
        <para>The number of bytes read from the stream, between 0 and
      the number of bytes you requested. Streams only return 0 at the end of the
      stream, otherwise, they should block until at least 1 byte is available.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>
        <para> Reads a byte from the file
      and advances the read position one byte.</para>
      </summary>
      <returns>
        <para>The byte cast to an <see langword="int" />, or -1 if reading from
   the end of the stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous write.</para>
      </summary>
      <param name="array">The buffer to write data to.</param>
      <param name="offset">The zero based byte offset in <paramref name="array" /> at which to begin writing.</param>
      <param name="numBytes">The maximum number of bytes to write.</param>
      <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
      <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that references the asynchronous write.</para>
      </returns>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>
        <para> Ends an asynchronous write, blocking until the I/O operation
      has completed.</para>
      </summary>
      <param name="asyncResult">The pending asynchronous I/O request.</param>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>
        <para>Writes a byte to the current position in the file stream.</para>
      </summary>
      <param name="value">A byte to write to the stream.</param>
    </member>
    <member name="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
      <summary>
        <para>Prevents access by other processes to all or part of a file.</para>
      </summary>
      <param name="position">The beginning of the range to lock.</param>
      <param name="length">The range to be locked.</param>
    </member>
    <member name="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
      <summary>
        <para>Allows access by other processes to all or part of a file that was previously
      locked.</para>
      </summary>
      <param name="position">The beginning of the range to unlock.</param>
      <param name="length">The range to be unlocked.</param>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>
        <para>Gets a value indicating whether the current stream supports reading.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>
        <para>Gets a value indicating whether the current stream supports writing.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>
        <para>Gets a value indicating whether the current stream supports seeking.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.IsAsync">
      <summary>
        <para>Gets a value indicating whether the
   <see langword="FileStream" /> was opened asynchronously or
      synchronously.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>
        <para>Gets the length in bytes of the stream.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>
        <para>Gets the name of the <see langword="FileStream" /> that was passed to the
   constructor.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>
        <para>Gets or sets the current
      position of this stream.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.Handle">
      <summary>
        <para>Gets the operating system file handle for the file that
      the current <see langword="FileStream" />
      object encapsulates.</para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.AsyncFileStream_AsyncResult.AsyncState">
      <summary>
        <para>
       Returns the state object.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.AsyncFileStream_AsyncResult.IsCompleted">
      <summary>
        <para>
       Indicates whether the asynchronous operation has been completed.
    </para>
      </summary>
    </member>
    <member name="P:System.IO.FileStream.AsyncFileStream_AsyncResult.AsyncWaitHandle">
      <summary>
        <para>
       Returns the handle to block on for the results.
    </para>
      </summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>
        <para> Provides attributes for files
       and directories.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>
        <para> The file is read-only.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>
        <para> The file is hidden, and thus is not included in an
       ordinary directory listing.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>
        <para> The file is a system file. The file is part of the operating
       system or is used exclusively by the operating system.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>
        <para> The file is a directory.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>
        <para> The file's archive status. Applications use this attribute to mark
       files for backup or removal.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>
        <para>Reserved for future use.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>
        <para> The file is normal and has no other attributes set. This
       attribute is valid only if used alone.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>
        <para> The file is temporary. File systems attempt to keep all of the
       data in memory for quicker access rather than flushing the data back to mass
       storage. A temporary file should be deleted by the application as soon as it is
       no longer needed.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>
        <para> The file is a sparse file. Sparse files are typically large
       files whose data are mostly zeros.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>
        <para> The file contains a reparse
       point, which is a block of user-defined data associated with a file or
       a directory.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>
        <para> The file is compressed.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>
        <para> The file is offline. The data of the file is not immediately
       available.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>
        <para> The file will not be indexed by the operating system's content
       indexing service.</para>
      </summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>
        <para> The file or directory is encrypted. For a file, this 
      means that all data in the file is encrypted. For a directory, this means that
      encryption is the default for newly created files and directories.</para>
      </summary>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>
        <para> Creates a stream whose backing store is memory.</para>
      </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an
    expandable capacity initialized to zero.</para>
      </summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class with an expandable capacity initialized as specified.</para>
      </summary>
      <param name="capacity">The initial size of the internal array in bytes.</param>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified byte array.</para>
      </summary>
      <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>
        <para>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class
   based on the specified byte array with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set as specified.</para>
      </summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing.</param>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class based on the specified region
   (index) of a byte array.</para>
      </summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new non-resizable instance of the <see cref="T:System.IO.MemoryStream" /> class
   based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" />
   property set as specified.</para>
      </summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index in <paramref name="buffer" /> at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing.</param>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.MemoryStream" /> class
   based on the specified region of a byte array, with the <see cref="P:System.IO.MemoryStream.CanWrite" /> property set
   as specified, and the ability to call <see cref="M:System.IO.MemoryStream.GetBuffer" /> set as specified.</para>
      </summary>
      <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
      <param name="index">The index into <paramref name="buffer" /> at which the stream begins.</param>
      <param name="count">The length of the stream in bytes.</param>
      <param name="writable">The setting of the <see cref="P:System.IO.MemoryStream.CanWrite" /> property, which determines whether the stream supports writing.</param>
      <param name="publiclyVisible">
        <see langword="true" /> to enable <see cref="M:System.IO.MemoryStream.GetBuffer" />, which returns the unsigned byte array from which the stream was created; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.MemoryStream.Close">
      <summary>
        <para>Closes the stream for reading and writing.</para>
      </summary>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>
        <para>Overrides <see cref="M:System.IO.Stream.Flush" qualify="true" />
so that no action is performed.</para>
      </summary>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>
        <para>Returns the
      array of unsigned bytes from which this stream was created.</para>
      </summary>
      <returns>
        <para>The byte array from which this stream was created, or the 
      underlying array if a byte array was not provided to the <see cref="T:System.IO.MemoryStream" />
      constructor during
      construction of the current instance.</para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a block of bytes from the current stream and
      writes the data to <paramref name="buffer" />
      .</para>
      </summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset " />and(<paramref name="offset + count - 1)" />replaced by the characters read from the current stream.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>
        <para>The total number of bytes read into the
      buffer. This may be less than the number of bytes requested if that number of bytes
      are not currently available, or zero if the end of the stream is
      reached before any bytes are read.</para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>
        <para> Reads a byte from the current stream.
      </para>
      </summary>
      <returns>
        <para>The byte cast to a <see cref="T:System.Int32" />
, or -1 if the end of the stream has been
reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para> Sets the position within the current stream to
      the specified value.</para>
      </summary>
      <param name="offset">The new position within the stream. This is relative to the <paramref name="loc " /> parameter, and may be positive or negative.</param>
      <param name="loc">A value of type <see cref="T:System.IO.SeekOrigin" /> , which acts as the seek reference point.</param>
      <returns>
        <para>The new position within the stream, calculated by
      combining the initial reference point and the offset.</para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>
        <para>Sets the length of the current stream to the specified value.</para>
      </summary>
      <param name="value">The value at which to set the length.</param>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>
        <para>Writes the entire stream contents to a byte array,
      regardless of the <see cref="P:System.IO.MemoryStream.Position" /> property.</para>
      </summary>
      <returns>
        <para> A new byte array.
      </para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes
      a block of bytes to the current stream using data read from buffer.</para>
      </summary>
      <param name="buffer">The buffer to write data to.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <returns>
        <para>The number of bytes written.</para>
      </returns>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>
        <para>Writes a byte to the current stream at the current position.</para>
      </summary>
      <param name="value">The byte to write.</param>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>
        <para>Writes the entire contents of this memory stream to another stream.</para>
      </summary>
      <param name="stream">The stream to write this memory stream to.</param>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>
        <para>Gets a value indicating whether the current stream supports reading.</para>
      </summary>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>
        <para>Gets a value indicating whether the current stream
      supports seeking.</para>
      </summary>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>
        <para>Gets a value indicating whether the current stream
      supports writing.</para>
      </summary>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>
        <para>Gets or sets the number of bytes allocated for this
       stream.</para>
      </summary>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>
        <para>Gets the length of the stream in bytes .</para>
      </summary>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>
        <para>Gets or sets the current position within the stream.</para>
      </summary>
    </member>
    <member name="T:System.IO.Path">
      <summary>
        <para>Performs operations on <see cref="T:System.String" /> instances that contain
 file or directory path information. These operations are performed in a cross-platform manner.</para>
      </summary>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>
        <para> Provides a platform-specific character used to separate
      directory levels in a path string that reflects a hierarchical file system organization.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>
        <para> Provides a platform-specific alternate character used to
      separate directory levels in a path string that reflects a hierarchical file system
      organization.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>
        <para> Provides a platform-specific volume separator character.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>
        <para> Provides a platform-specific array of characters that
      cannot be specified in path string arguments passed to members of
      the <see cref="T:System.IO.Path" />
      class.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>
        <para> A platform-specific separator character used to
      separate path strings in environment variables.
      </para>
      </summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>
        <para>Changes the extension of a path string.</para>
      </summary>
      <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="F:System.IO.Path.InvalidPathChars" />.</param>
      <param name="extension">The new extension (with a leading period). Specify <see langword="null" /> to remove an existing extension from <paramref name="path" /> .</param>
      <returns>
        <para> A string containing the modified path information.</para>
        <para>On Windows-based desktop platforms, if
   <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path
      information is returned unmodified. If <paramref name="extension" />
      is <see langword="null" />, the returned string contains the specified path
      with its extension removed. If <paramref name="path" /> has no extension, and
   <paramref name="extension" /> is not <see langword="null" />, the returned path string
      contains <paramref name="extension" /> appended to the end of <paramref name="path" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>
        <para>Returns the directory information for the specified path string.</para>
      </summary>
      <param name="path">The path of a file or directory.</param>
      <returns>
        <para>A <see cref="T:System.String" /> containing directory
 information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a
 root directory, is the empty string (""), or is <see langword="null" />.
 Returns <see cref="F:System.String.Empty" qualify="true" /> if <paramref name="path" /> does not contain directory information.</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>
        <para>Returns the extension of the specified path string.</para>
      </summary>
      <param name="path">The path string from which to get the extension.</param>
      <returns>
        <para>A <see cref="T:System.String" /> containing the extension of
 the specified path (including the "."), <see langword="null" /> ,
 or <see cref="F:System.String.Empty" />. If
<paramref name="path" /> is <see langword="null" />, <see langword="GetExtension " />returns <see langword="null" />. If <paramref name="path" /> does not have extension 
 information, <see langword="GetExtension" />
 returns <see langword="Empty" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>
        <para>Returns the absolute path for the specified path string.</para>
      </summary>
      <param name="path">The file or directory for which to obtain absolute path information</param>
      <returns>
        <para>A string containing the fully qualified location of
 <paramref name="path" /> , such as "C:\MyFile.txt". If
 <paramref name="path" /> is <see langword="null" />, <see langword="GetFullPath" /> returns
 <see langword="null" /> .</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>
        <para>Returns the file name and extension of the specified path string.</para>
      </summary>
      <param name="path">The path string from which to obtain the file name and extension.</param>
      <returns>
        <para>A <see cref="T:System.String" />consisting of the characters after the last directory 
 character in <paramref name="path" />. If the last character of <paramref name="path" />
 is a
 directory separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is
<see langword="null" />, this method returns <see langword="null" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>
        <para>Returns the file name of the specified path string without the extension.</para>
      </summary>
      <param name="path">The path of the file.</param>
      <returns>
        <para>A <see cref="T:System.String" /> containing the string
   returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.) and all characters following it.</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>
        <para>Gets the root directory information of the specified path.</para>
      </summary>
      <param name="path">The path from which to obtain root directory information.</param>
      <returns>
        <para>A string containing the root directory of <paramref name="path" />, such as "C:\", or
<see langword="null" /> if <paramref name="path" /> is 
<see langword="null" /> or does not contain root
   directory information. </para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>
        <para>Returns the path of the current system's temporary folder.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> containing the path information of a temporary
   directory.</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>
        <para> Returns a unique temporary file name and creates a zero-byte file by
      that name on disk.
      </para>
      </summary>
      <returns>
        <para> A <see cref="T:System.String" /> containing the name of the temporary file.
   </para>
      </returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>
        <para>Determines whether a path includes a file name extension.</para>
      </summary>
      <param name="path">The path to search for an extension.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   characters that follow the last directory separator (\\ or /)
   or volume separator (:) in the path include a period (.) followed by
   one or more characters; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>
        <para>Gets a value indicating whether the specified path string contains absolute or
      relative path information.</para>
      </summary>
      <param name="path">The path to test.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="path" /> contains an absolute path; otherwise, 
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>
        <para>Combines two
      path strings.</para>
      </summary>
      <param name="path1">The first path.</param>
      <param name="path2">The second path, which cannot be a volume letter or a Universal Naming Convention (UNC) name.</param>
      <returns>
        <para> A string containing the combined paths. If one of the
      specified paths is a zero-length string, this method returns the other path. If
   <paramref name="path2" /> contains an absolute path, this method returns
   <paramref name="path2" />
   .</para>
      </returns>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>
        <para> The exception that is thrown when a pathname or filename 
      is longer
      than the system-defined maximum length
      .</para>
      </summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" />
class with its HRESULT set to
COR_E_PATHTOOLONG.</para>
      </summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see cref="T:System.IO.PathTooLongException" /> class
      with its message string set to <paramref name="message " />
      and its
      HRESULT set to COR_E_PATHTOOLONG.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.PathTooLongException" />
class with the specified serialization and context information.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>
        <para>Provides the fields that represent reference points in streams for seeking.</para>
      </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>
        <para> Specifies the beginning of a
      stream.</para>
      </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>
        <para> Specifies the current position
      within a stream.</para>
      </summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>
        <para> Specifies the end of a stream.</para>
      </summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>
        <para>Implements a <see cref="T:System.IO.TextReader" /> that reads
   characters from a byte stream in a particular encoding.</para>
      </summary>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>
    Represents a reader that can read a sequential series of
    characters.
 </summary>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>
        <para>Provides a <see langword="TextReader " /> with no data to read from.</para>
      </summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>
    Initializes a new instance of the <see cref="T:System.IO.TextReader" /> class.
 </summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>
        <para>Closes the <see cref="T:System.IO.TextReader" /> and releases any system resources associated with the
<see langword="TextReader" /> .</para>
      </summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.TextReader" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>
        <para>Reads the next character without changing the state of the reader or the character source.Returns the next available character without actually reading it
      from the input stream.</para>
      </summary>
      <returns>
        <para>The next character to be read, or -1 if no more characters are available or the stream does not support
      seeking.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>
        <para>Reads the next character from the input stream and 
      advances the character position by one character.</para>
      </summary>
      <returns>
        <para>The next character from the input stream, or -1 if no more characters are available. The default
      implementation returns -1.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a maximum of <paramref name="count " />characters from the
   current stream and writes the data to <paramref name="buffer" />, beginning at
<paramref name="index" />
.</para>
      </summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and(<paramref name="index + count - 1) " />replaced by the characters read from the current source.</param>
      <param name="index">The place in <paramref name="buffer " /> at which to begin writing.</param>
      <param name="count">The maximum number of characters to read. If the end of the stream is reached before <paramref name="count " />of characters is read into <paramref name="buffer" />, the current method returns.</param>
      <returns>
        <para>The number of characters that have been read. The number
      will be less than or equal to <paramref name="count" /> , depending on
      whether the data is available within the stream. This method returns
      zero if called when no
      more characters are left to read.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>
        <para>Reads all characters from the current position to the
      end of the <see langword="TextReader" />
      and returns them as one string.</para>
      </summary>
      <returns>
        <para>A string containing all characters from the current
      position to the end of the <see langword="TextReader" />
      .</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a maximum of count characters
      from the current stream and writes the data to buffer,
      beginning at index.</para>
      </summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and(<paramref name="index + count)" />replaced by the characters read from the current source.</param>
      <param name="index">The place in <paramref name="buffer " /> at which to begin writing.</param>
      <param name="count">The maximum number of characters to read.</param>
      <returns>
        <para>The number of characters that have been read. The number
      will be less than or equal to <paramref name="count" /> ,
      depending on whether all input
      characters have been read.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>
        <para>Reads a line of characters from the current stream and returns
      the data as a string.</para>
      </summary>
      <returns>
        <para>The next line from the input stream, or
   <see langword="null" /> if
      all characters have been read.</para>
      </returns>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>
        <para>Creates a thread-safe wrapper around the specified
   <see langword="TextReader" /> .</para>
      </summary>
      <param name="reader">The <see langword="TextReader" /> to synchronize.</param>
      <returns>
        <para> A thread-safe <see cref="T:System.IO.TextReader" /> .</para>
      </returns>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>
        <para>A <see langword="StreamReader" />
around an
empty stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream.</para>
      </summary>
      <param name="stream">The stream to be read.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class the specified stream, with the specified
   byte order mark detection option.</para>
      </summary>
      <param name="stream">The stream to be read.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" />
class for the specified stream with the specified character encoding.</para>
      </summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding and byte order mark detection option.</para>
      </summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified stream, with the specified character encoding, byte order mark
   detection option, and buffer size.</para>
      </summary>
      <param name="stream">The stream to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <param name="bufferSize">The minimum buffer size.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name.</para>
      </summary>
      <param name="path">The complete file path to be read.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class
   for the specified file name, with the specified byte order mark detection option.</para>
      </summary>
      <param name="path">The complete file path to be read.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" />
class for the specified file name and with the specified character encoding.</para>
      </summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding and byte order mark detection option.</para>
      </summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamReader" /> class for the specified file name, with the specified character encoding, byte order
   mark detection option, and buffer size.</para>
      </summary>
      <param name="path">The complete file path to be read.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
      <param name="bufferSize">The minimum buffer size, in number of 16-bit characters.</param>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>
        <para>Closes the <see cref="T:System.IO.StreamReader" />
and releases any system resources associated with the reader.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>
        <para>Allows a <see langword="StreamReader" />
to discard its current data.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>
        <para> Returns the next available character but
      does not consume it.</para>
      </summary>
      <returns>
        <para>The next character to be read, or -1 if no more characters are available or the stream does not support
      seeking.</para>
      </returns>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>
        <para> Reads the next
      character from the input stream
      and advances the character position by one character.</para>
      </summary>
      <returns>
        <para>The next character from the input stream represented as
      an <see cref="T:System.Int32" />
      , or -1 if no more
      characters are available.</para>
      </returns>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a maximum of <paramref name="count " />
characters from the current stream into <paramref name="buffer" />,
beginning at <paramref name="index" />.</para>
      </summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and(<paramref name="index + count - 1)" />replaced by the characters read from the current source.</param>
      <param name="index">The index of <paramref name="buffer" /> at which to begin writing.</param>
      <param name="count">The maximum number of characters to read.</param>
      <returns>
        <para>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number
      will be less than or equal to <paramref name="count" />
      , depending on whether the
      data is available within the stream.</para>
      </returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>
        <para>Reads the stream from the current position to the
      end of the stream.</para>
      </summary>
      <returns>
        <para>The rest of the stream as a string, from the current
      position to the end. If
      the current position is at the end of the stream, returns the empty
      string("").</para>
      </returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>
        <para>Reads a line of characters from the current stream and returns
      the data as a string.</para>
      </summary>
      <returns>
        <para>The next line from the input stream, or
   <see langword="null" /> if the end of the input
      stream is reached.</para>
      </returns>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>
        <para>Gets the current character encoding that the current
   <see langword="StreamReader" /> is
      using.</para>
      </summary>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>
        <para>Returns the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamReader.NullStreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>
       Reads a maximum of <paramref name="count" /> characters from the
       current stream and writes the data to <paramref name="buffer" />, beginning at
    <paramref name="index" />.
 </para>
      </summary>
      <param name="buffer">
    The character array to write data to.
 </param>
      <param name="index">
    The index of buffer at which to begin writing.
 </param>
      <param name="count">
    The maximum number of characters to read.
 </param>
      <returns>
        <para>
       The number of characters that have been read. The number
       will be less than or equal to <paramref name="count" />
       , depending on whether the
       data is available within the stream.
    </para>
      </returns>
    </member>
    <member name="M:System.IO.StreamReader.NullStreamReader.ReadLine">
      <summary>
        <para>
       Reads a line of characters from the current stream and returns
       the data as a string.
    </para>
      </summary>
      <returns>
        <para>
       The next line from the input stream, or null if the end of the input stream
       has been reached.
    </para>
      </returns>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>
        <para>Implements a <see cref="T:System.IO.TextWriter" /> for writing
   characters to a stream in a particular encoding.</para>
      </summary>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>
        <para>Provides a <see langword="StreamWriter" /> with no backing store that can
   be written to, but not read from.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified stream, using the default
   encoding and buffer size.</para>
      </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" />
class for the specified stream, using the specified
encoding and the default buffer size.</para>
      </summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding to use.</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" />
class for the specified stream, using the specified
encoding and buffer size.</para>
      </summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="bufferSize">Sets the buffer size.</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and
   buffer size.</para>
      </summary>
      <param name="path">The complete file path to write to. <paramref name="path" /> can be a filename</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path, using the default encoding and buffer size. If the
   file exists, it can be either overwritten or appended to. If the
   file does not exist, this constructor creates a new file.</para>
      </summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append " />is <see langword="false" /> , the file is overwritten. If the file exists and <paramref name="append " />is <see langword="true" /> , the data is appended to the file. Otherwise, a new file is created.</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path,
   using the specified encoding and default buffer size. If the file exists,
   it can be either overwritten or appended to. If
   the file does not exist, this constructor creates a new file.</para>
      </summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append " />is <see langword="false" /> , the file is overwritten. If the file exists and <paramref name="append " />is <see langword="true" /> , the data is appended to the file. Otherwise, a new file is created.</param>
      <param name="encoding">The character encoding to use.</param>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StreamWriter" /> class for the specified file on the specified path,
   using the specified encoding and buffer size. If the file exists, it
   can be either overwritten or appended to. If the
   file does not exist, this constructor creates a new file.</para>
      </summary>
      <param name="path">The complete file path to write to.</param>
      <param name="append">Determines whether data is to be appended to the file. If the file exists and <paramref name="append " />is <see langword="false" /> , the file is overwritten. If the file exists and <paramref name="append " />is <see langword="true" /> , the data is appended to the file. Otherwise, a new file is created.</param>
      <param name="encoding">The character encoding to use.</param>
      <param name="bufferSize">Sets the buffer size.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>
        <para>Closes the current <see langword="StreamWriter" />
and the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamWriter" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Finalize">
      <summary>
        <para>Frees the resources of the current <see cref="T:System.IO.StreamWriter" /> 
before it is reclaimed by the garbage collector.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>
        <para>Clears all buffers for the current writer and causes any buffered
      data to be written to the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>
        <para> Writes a character to the stream.</para>
      </summary>
      <param name="value">The character to write to the text stream.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>
        <para> Writes a character array to the stream.</para>
      </summary>
      <param name="buffer">A character array containing the data to write. If <paramref name="buffer" /> is <see langword="null" /> , nothing is written.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para> Writes a subarray of characters to the stream.</para>
      </summary>
      <param name="buffer">A character array containing the data to write.</param>
      <param name="index">The index into <paramref name="buffer " /> at which to begin writing.</param>
      <param name="count">The number of characters to read from <paramref name="buffer" /> .</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>
        <para> Writes a string to the stream.</para>
      </summary>
      <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written.</param>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>
        <para>Gets or sets a value indicating whether the <see langword="StreamWriter" /> will flush its buffer to the
   underlying stream after every call to <see cref="M:System.Console.Write(System.String,System.Object)" qualify="true" /> or <see cref="M:System.Console.WriteLine" qualify="true" />
   .</para>
      </summary>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>
        <para> Gets the underlying stream that interfaces with a backing
       store.</para>
      </summary>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>
        <para> Gets the<see cref="T:System.Text.Encoding" /> in which the output is written.</para>
      </summary>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>
        <para>
       Implements a <see langword="TextReader " />
       that reads from a string.
    </para>
      </summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StringReader" /> class
   that
   reads from the specified string.</para>
      </summary>
      <param name="s">The string to which the <see cref="T:System.IO.StringReader" /> should be initialized.</param>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>
        <para>Closes the <see cref="T:System.IO.StringReader" />
.</para>
      </summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.StringReader" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>
        <para> Returns the next available character but
      does not consume it.</para>
      </summary>
      <returns>
        <para>The next character to be read, or -1 if no more characters are available or the stream does not support
      seeking.</para>
      </returns>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>
        <para>Reads the next character from the input string and advances the character position by one character.</para>
      </summary>
      <returns>
        <para>The next character from the underlying string, or -1 if no more
      characters are available.</para>
      </returns>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Reads a block of characters from the input string
      and advances the character position by <paramref name="count" />.</para>
      </summary>
      <param name="buffer">When this method returns, contains the specified character array with the values between <paramref name="index" /> and (<paramref name="index + count - 1)" />replaced by the characters read from the current source.</param>
      <param name="index">The starting index in the buffer.</param>
      <param name="count">The number of characters to read.</param>
      <returns>
        <para>The total number of characters read into the buffer. This may be less
      than the number of characters requested if that many characters are not currently
      available, or zero if the end of the underlying string has been reached.</para>
      </returns>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>
        <para>Reads the stream as a string, either in its entirety or from the current
      position to the end of the stream.</para>
      </summary>
      <returns>
        <para> The content from the current position to the end of the underlying
      string.</para>
      </returns>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>
        <para> Reads a line from the underlying string.
      </para>
      </summary>
      <returns>
        <para> The next line from the underlying string, or
   <see langword="null " />
   if the end of
   the underlying string is reached.
   </para>
      </returns>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>
        <para>Writes information to a string. The information is stored in an 
       underlying <see cref="T:System.Text.StringBuilder" /> .</para>
      </summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class.</para>
      </summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class with the specified format 
   control.</para>
      </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that
    writes to the specified <see cref="T:System.Text.StringBuilder" />
    .</para>
      </summary>
      <param name="sb">The <see langword="StringBuilder" /> to write to.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.StringWriter" /> class that writes to the specified
<see cref="T:System.Text.StringBuilder" /> and has the specified format provider.</para>
      </summary>
      <param name="sb">The <see langword="StringBuilder" /> to write to.</param>
      <param name=" formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>
        <para>Closes the current <see cref="T:System.IO.StringWriter" /> and the underlying stream.</para>
      </summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>
        <para>Releases the unmanaged resources used by the <see cref="T:System.IO.StringWriter" /> and optionally
   releases the managed resources.</para>
      </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>
        <para>
       Returns the underlying <see cref="T:System.Text.StringBuilder" />
       .
    </para>
      </summary>
      <returns>
        <para>
       The underlying <see langword="StringBuilder" />
       .
    </para>
      </returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>
        <para>Writes a character to this instance of the <see langword="StringWriter" />
.</para>
      </summary>
      <param name="value">The character to write.</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
        <para>Writes the specified region of a character array to this
      instance of the <see langword="StringWriter" />.</para>
      </summary>
      <param name="buffer">The character array to read data from.</param>
      <param name="index">The index at which to begin reading from <paramref name="buffer" /> .</param>
      <param name="count">The maximum number of characters to write.</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>
        <para>Writes a string to this instance of the
   <see langword="StringWriter" />.</para>
      </summary>
      <param name="value">The string to write.</param>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>
        <para> Returns a string containing the characters written to
      the current <see langword="StringWriter " />
      so far.
      </para>
      </summary>
      <returns>
        <para> The string containing the characters written to the
      current <see langword="StringWriter" />.
      </para>
      </returns>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>
        <para>Gets the <see cref="T:System.Text.Encoding" /> in which the output is written.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>
        <para>Specifies the name of the property that accesses the attributed field.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="AccessedThroughPropertyAttribute" /> class with the name of the 
      property used to access the attributed field.</para>
      </summary>
      <param name="propertyName">The name of the property used to access the attributed field.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>
        <para>Gets the name of the property used to access the attributed field.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvCdecl">
      <summary>
        <para>Indicates that the <see langword="Cdecl " />calling
   convention should be used for a method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvStdcall">
      <summary>
        <para>Indicates that the <see langword="StdCall " />calling convention should be used for a method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvThiscall">
      <summary>
        <para>Indicates that the <see langword="ThisCall" /> calling
   convention should be used for a method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallConvFastcall">
      <summary>
        <para>This calling convention is not supported in this version of the .NET
      Framework.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>
        <para>Provides a set of static methods and properties that provide support
      for compilers.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>
        <para>Provides a fast way to initialize an array from data
      stored in a module.</para>
      </summary>
      <param name="array">The array to be initialized.</param>
      <param name="fldHandle">A <see cref="T:System.RuntimeFieldHandle" /> specifying the location of the data used to initialize the array.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>
        <para> Boxes a value type.</para>
      </summary>
      <param name="obj"> The value type to be boxed.</param>
      <returns>
        <para>Returns a boxed copy of <paramref name="obj " />if it is a value class; otherwise
<paramref name="obj" /> itself is returned.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>
        <para>Runs a specified class constructor method.</para>
      </summary>
      <param name="type">A <see langword="RuntimeTypeHandler" /> specifying the class constructor method to run.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>
        <para>Gets the offset in bytes to the data in the given string.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>
        <para> Defines a constant value that a compiler can persist for a field
 or method parameter.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>
        <para> Gets the constant value stored by this attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>
        <para>Persists an 8-byte <see cref="T:System.DateTime" /> constant for a field or parameter.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="DateTimeConstantAttribute" /> class with the number of
 100-nanosecond ticks that represent the date and time of this instance.</para>
      </summary>
      <param name="ticks">The number of 100-nanosecond ticks that represent the date and time of this instance.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>
        <para>Gets the number of 100-nanosecond ticks that represent
 the date and time of this instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>
        <para> Marks a type definition as discardable.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> class with default values.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>
        <para>Stores the value of a <see cref="T:System.Decimal" qualify="true" /> constant in metadata.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> class.</para>
      </summary>
      <param name="scale">The power of 10 scaling factor that indicates the number of digits to the right of the decimal point. Valid values are 0 through 28 inclusive.</param>
      <param name=" sign">A value of 0 indicates a positive value, and a value of 1 indicates a negative value.</param>
      <param name=" hi"> The high 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> .</param>
      <param name=" mid"> The middle 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> .</param>
      <param name=" low"> The low 32 bits of the 96-bit <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> .</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>
        <para>Gets the decimal constant stored in this attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>
        <para>Controls the strictness of the code generated by the common language runtime's
      just-in-time (JIT) compiler.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> class with the specified
   compilation relaxations.</para>
      </summary>
      <param name="relaxations">The specified compilation relaxations.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>
        <para> Gets the compilation relaxations specified when this instance was constructed.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>
        <para> Indicates that a class should be treated as if it has
      global scope.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the
 <see langword="CompilerGlobalScopeAttribute" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>
        <para>Indicates that the default value for the attributed
      field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, where
      the <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> is
   <see langword="null" />.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>
        <para>Gets the <see langword="IDispatch" /> constant stored in this attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>
        <para> Indicates the name by which an indexer is known in programming languages that do not support
      indexers directly.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="IndexerNameAttribute" /> class.</para>
      </summary>
      <param name="indexerName">The name of the indexer, as shown to other languages. </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>
        <para>Marks a field as volatile.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>
        <para>Indicates that the default value for the attributed
      field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, where
      the <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> is
   <see langword="null" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>
        <para>Gets the <see langword="IUnknown" /> constant stored in this attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>
        <para>Defines the details of how a method is implemented.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>
        <para>Specifies that the method is implemented in unmanaged code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>
        <para>Specifies that the method is declared, but its implementation is provided elsewhere.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>
        <para>Specifies that the method signature is exported exactly as declared.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>
        <para> Specifies an internal call. An internal call is
 a call to a method implemented within the common language runtime itself.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>
        <para>Specifies the method can be executed by only one thread at a time.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>
        <para>Specifies that the method may not be inlined.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>
        <para>Defines how a method is implemented.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>
        <para>Specifies that the method implementation is in Microsoft 
      intermediate language (MSIL).</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>
        <para>Specifies that the method is implemented in native code.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>
        <para>Specifies that the method implementation is provided by the runtime.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>
        <para>Specifies the details of how a method is implemented.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>
        <para>A <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> value indicating what kind of
   implementation is provided for this method.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>
        <para>Initializes a new instance of the
   <see langword="MethodImplAttribute" /> class with the
      specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</para>
      </summary>
      <param name="methodImplOptions">A <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value specifying properties of the attributed method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>
        <para>Initializes a new instance of the <see langword="MethodImplAttribute" /> class
 with the specified <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value.</para>
      </summary>
      <param name="value">A bitmask representing the desired <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value which specifies properties of the attributed method.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the 
   <see langword="MethodImplAttribute" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> value describing the
   attributed method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RequiredAttributeAttribute">
      <summary>
 Specifies that an importing compiler must fully
 understand the symantics of a type definition, or refuse to use it.
</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RequiredAttributeAttribute.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the
 <see langword="RequiredAttributeAttribute" /> class.</para>
      </summary>
      <param name="requiredContract">This parameter is not supported in this version of the .NET Framework.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RequiredAttributeAttribute.RequiredContract">
      <summary>
        <para>This property is not supported in this version of the .NET Framework.</para>
      </summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>
        <para> Represents a collection that can contain many different types of
      permissions.</para>
      </summary>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>
        <para> Manages the stack walk that determines whether all callers
 in the call stack have the required permissions to access a protected
 resource.</para>
      </summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>
        <para> Asserts that the calling code can access the resource identified by the current permission object, even
 if callers higher in the stack have not been granted permission to
 access the resource. </para>
      </summary>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>
        <para> Determines at run time whether all callers in the call stack have
 been granted the permission specified by the current permission object.</para>
      </summary>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>
        <para> Causes every <see cref="M:System.Security.IStackWalk.Demand" />
for the current object that passes through the calling code
to fail.</para>
      </summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>
        <para> Causes every <see cref="M:System.Security.IStackWalk.Demand" /> for all
   objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted
   permission to access other resources.</para>
      </summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.PermissionSet" /> class with the specified <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.PermissionSet" /> class with initial values taken from
   the <paramref name="permSet" /> parameter. </para>
      </summary>
      <param name="permSet">The <see cref="T:System.Security.PermissionSet" /> from which to take the value of the new <see cref="T:System.Security.PermissionSet" />, or <see langword="null" /> to create an empty <see cref="T:System.Security.PermissionSet" />.</param>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>Copies the permission objects of the set to the
      indicated location in an <see cref="T:System.Array" />.</para>
      </summary>
      <param name="array">The target array to which to copy.</param>
      <param name="index">The starting position in the array to begin copying (zero based).</param>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Security.PermissionSet" /> is
   empty.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Security.PermissionSet" /> is empty;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>
        <para>Gets a permission object of the specified type, if it exists in
 the set.</para>
      </summary>
      <param name="permClass">The <see cref="T:System.Type" /> of the desired permission object.</param>
      <returns>
        <para>A copy of the permission object of the type specified by
 the <paramref name="permClass " />parameter contained in the <see cref="T:System.Security.PermissionSet" />,
 or <see langword="null" />
 if none exists.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>
        <para>Sets a permission to the <see cref="T:System.Security.PermissionSet" />, replacing any existing permission of the same type.</para>
      </summary>
      <param name="perm">The permission to set.</param>
      <returns>
        <para> The set permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>
        <para> Adds a specified permission to the <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="perm">The permission to add.</param>
      <returns>
        <para>The union of the permission added and any permission of 
      the same type that already exists in the <see cref="T:System.Security.PermissionSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>
        <para>Removes a permission of a certain type from the set.</para>
      </summary>
      <param name="permClass"> The <see cref="T:System.Type" /> of permission to delete.</param>
      <returns>
        <para> The permission removed from the
       set.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>
        <para>Determines whether the <see cref="T:System.Security.PermissionSet" /> is <see langword="Unrestricted" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the <see cref="T:System.Security.PermissionSet" /> is
 <see langword="Unrestricted" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>
        <para> Determines whether the current <see cref="T:System.Security.PermissionSet" /> is a subset of the
 specified <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="target">A <see cref="T:System.Security.PermissionSet" /> to test for the subset relationship. This must be either a <see cref="T:System.Security.PermissionSet" /> or a <see cref="T:System.Security.NamedPermissionSet" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
 current <see cref="T:System.Security.PermissionSet" /> is a subset of the <paramref name="target " />parameter; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>
        <para>Creates and returns a permission that is the intersection
      of the current <see cref="T:System.Security.PermissionSet" /> and the specified <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="other">A <see cref="T:System.Security.PermissionSet" /> to intersect with the current <see cref="T:System.Security.PermissionSet" />.</param>
      <returns>
        <para>A new <see cref="T:System.Security.PermissionSet" /> that represents the intersection of
   the current <see cref="T:System.Security.PermissionSet" /> and the specified target. This object is
<see langword="null" /> if the intersection is
   empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>
        <para>Creates a <see cref="T:System.Security.PermissionSet" /> that is the union of the current
<see cref="T:System.Security.PermissionSet" /> and the specified <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <param name="other">A <see cref="T:System.Security.PermissionSet" /> to form the union with the current <see cref="T:System.Security.PermissionSet" />.</param>
      <returns>
        <para>A new <see cref="T:System.Security.PermissionSet" /> that represents the union of the
   current <see cref="T:System.Security.PermissionSet" /> and the specified <see cref="T:System.Security.PermissionSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>
        <para> Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not
   been granted the permissions specified by the current instance.</para>
      </summary>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>
        <para>Asserts that the calling code can access the resource contained in the set through the code
      that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</para>
      </summary>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>
        <para> Causes any <see cref="M:System.Security.PermissionSet.Demand" /> that passes through the calling
   code for a permission that has an intersection with a permission of a type
   contained in the current <see cref="T:System.Security.PermissionSet" />
   
   to fail.</para>
      </summary>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>
        <para> Causes any <see cref="M:System.Security.PermissionSet.Demand" /> that passes through the calling
   code for any <see cref="T:System.Security.PermissionSet" /> that
   is not a subset of the current <see cref="T:System.Security.PermissionSet" />
   to fail.</para>
      </summary>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>
        <para>Creates a copy of the <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <returns>
        <para>A copy of the <see cref="T:System.Security.PermissionSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>
        <para>Returns an enumerator for the permissions of the set.</para>
      </summary>
      <returns>
        <para>An enumerator object
       for the permissions of the
       set.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>
        <para> Returns a string representation
 of the <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <returns>
        <para>A representation of the <see cref="T:System.Security.PermissionSet" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a security object with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="et">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>
        <para>Creates an XML encoding of the security object and its current
       state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state information.</para>
      </returns>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>
        <para>Gets a value indicating whether the <see cref="T:System.Security.PermissionSet" /> contains permissions that
 are not derived from <see cref="T:System.Security.CodeAccessPermission" />.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the
<see cref="T:System.Security.PermissionSet" /> contains permissions that are not derived from <see cref="T:System.Security.CodeAccessPermission" />; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>
        <para> Gets the root object of the current collection.</para>
      </summary>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether the collection is guaranteed to be thread safe.</para>
      </summary>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>
        <para> Gets a value indicating whether the collection is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>
        <para>Gets the number of permission objects contained in the permission
 set.</para>
      </summary>
    </member>
    <member name="T:System.Security.NamedPermissionSet">
      <summary>
        <para> Defines a permission set that
 has a name and description associated with it. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String)">
      <summary>
        <para>Initializes a new, empty instance of the <see cref="T:System.Security.NamedPermissionSet" /> class with the specified name.</para>
      </summary>
      <param name="name">The name for the new named permission set.</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet" /> class with the
 specified name in either an
 unrestricted or a fully restricted state.</para>
      </summary>
      <param name="name">The name for the new named permission set.</param>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet" /> class with the specified name
 from a permission set.</para>
      </summary>
      <param name="name">The name for the named permission set.</param>
      <param name="permSet">The permission set from which to take the value of the new named permission set.</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.NamedPermissionSet" /> class from another
 named permission set.</para>
      </summary>
      <param name="permSet">The named permission set from which to create the new instance.</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy">
      <summary>
        <para>
       Creates a permission set copy from a named permission set.
    </para>
      </summary>
      <returns>
        <para>
       A permission set that is a copy of the permissions in the named
       permission set.
    </para>
      </returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy(System.String)">
      <summary>
        <para>Creates a copy of the named permission set with a different name but the
      same permissions.</para>
      </summary>
      <param name="name">The name for the new named permission set.</param>
      <returns>
        <para>A copy of the named permission set with the new name.</para>
      </returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.ToXml">
      <summary>
        <para>Creates an XML element description of the named permission set.</para>
      </summary>
      <returns>
        <para> The XML representation of the named permission set.</para>
      </returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a named permission set with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="et">A security element containing the XML representation of the named permission set.</param>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Name">
      <summary>
        <para> Gets or sets the name of the current named permission set.</para>
      </summary>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Description">
      <summary>
        <para> Gets
 or sets the text
 description of the current named
 permission set.</para>
      </summary>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>
        <para> Represents the XML object model
      for encoding security objects. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityElement" /> class with the specified tag.</para>
      </summary>
      <param name="tag">The tag name of an XML element.</param>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityElement" /> class with the specified tag and text.</para>
      </summary>
      <param name="tag">The tag name of the XML element.</param>
      <param name=" text">The text content within the element.</param>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>
        <para> Adds a name/value attribute to an XML element.</para>
      </summary>
      <param name="name">The name of the attribute.</param>
      <param name=" value">The value of the attribute.</param>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>
        <para>Adds a child element to the XML element.</para>
      </summary>
      <param name="child">The child element to add.</param>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>
        <para>Compares two XML element objects for equality.</para>
      </summary>
      <param name="other">An XML element object to which to compare the current XML element object.</param>
      <returns>
        <para>
          <see langword="true" /> if the tag, 
   attribute names and values, child elements, and text fields in the current XML
   element are identical to their counterparts in the <paramref name="other" />
   parameter; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>
        <para>Determines whether a string is a valid tag.</para>
      </summary>
      <param name="tag">The tag to test for validity.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   the <paramref name="tag" /> parameter is a valid XML
   tag; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>
        <para>Determines whether a string is valid as text within an XML element.</para>
      </summary>
      <param name="text">The text to test for validity.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   the <paramref name="text" /> parameter is a valid XML text element; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>
        <para>Determines whether a string is a valid attribute name.</para>
      </summary>
      <param name="name">The attribute name to test for validity.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   the <paramref name="name" /> parameter is a valid XML
   attribute name; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>
        <para>Determines whether a string is a valid attribute value.</para>
      </summary>
      <param name="value">The attribute value to test for validity.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   the <paramref name="value" /> parameter is a valid XML attribute value; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>
        <para>Replaces invalid XML characters in a string with their valid XML equivalent.</para>
      </summary>
      <param name="str">The string within which to escape invalid characters.</param>
      <returns>
        <para>The input string with invalid characters replaced.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>
        <para>Produces a string representation of an XML element and its constituent
       attributes, child elements, and text.</para>
      </summary>
      <returns>
        <para> The XML element
       and its contents.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>
        <para>Finds an attribute by name in an XML element.</para>
      </summary>
      <param name="name">The name of the attribute for which to search.</param>
      <returns>
        <para>The value associated with the named attribute,
      or <see langword="null" /> if no attribute with <paramref name="name" /> exists.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>
        <para>Finds a child by its tag name.</para>
      </summary>
      <param name="tag">The tag for which to search in child elements.</param>
      <returns>
        <para>The first child XML element with the specified tag value, or
   <see langword="null" /> if no child element with <paramref name="tag" />
   exists.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>
        <para>Finds a child by its tag name and returns the contained text.</para>
      </summary>
      <param name="tag">The tag for which to search in child elements.</param>
      <returns>
        <para>The text contents of the first child element with the specified tag value.</para>
      </returns>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>
        <para> Gets or sets the tag name of
      an XML element.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>
        <para> Gets or sets the attributes of an XML element as name/value
      pairs.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>
        <para> Gets or sets the text within an XML element.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>
        <para> Gets or sets the array of child elements of the XML element.</para>
      </summary>
    </member>
    <member name="T:System.Security.XmlSyntaxException">
      <summary>
        <para> The exception that is thrown when there is a syntax error in XML parsing. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException" /> class with
    a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException" /> class with the line number where the exception
   was
   detected.</para>
      </summary>
      <param name="lineNumber">The line number of the XML stream where the XML syntax error was detected.</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.XmlSyntaxException" /> class with a specified
   error message and the
   line number where the exception was
   detected.</para>
      </summary>
      <param name="lineNumber">The line number of the XML stream where the XML syntax error was detected.</param>
      <param name=" message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAccess">
      <summary>
        <para> Specifies access to
      environment variables.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess">
      <summary>
        <para>No access to environment variables is specified.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Read">
      <summary>
        <para>Only read access to environment variables is specified. 
      Changing, deleting and creating environment variables is not included in this access level.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Write">
      <summary>
        <para>Only write access to environment variables is specified. 
      Write access includes creating and deleting environment variables as well as
      changing existing values. Reading environment variables is not included in this access level.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess">
      <summary>
        <para>Both read and write access to environment variables is specified.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermission">
      <summary>
        <para> Controls
      access to system and user
      environment variables. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Security.CodeAccessPermission">
      <summary>
        <para>Defines
      the underlying structure of all code access permissions.</para>
      </summary>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>
        <para> Defines methods implemented by permission types. </para>
      </summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection of the current
      permission and the specified permission. </para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents
      the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of
      the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union
      of the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of the
      specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   current permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>
        <para>Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call
   stack have not been granted the permission specified by the current
   instance.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAssert">
      <summary>
        <para> Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to
    be removed and no longer in effect.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertDeny">
      <summary>
        <para> Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be
    removed and no longer in effect.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertPermitOnly">
      <summary>
        <para> Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame
    to be removed and no longer in effect.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAll">
      <summary>
        <para> Causes all previous overrides
       for the current frame to be removed and no longer in effect.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Demand">
      <summary>
        <para> Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack
   have not been granted the permission specified by the current instance.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Assert">
      <summary>
        <para> Asserts that calling code can access the resource identified by the current permission through the code that calls this method, even
      if callers higher in the stack have not been granted permission to
      access the resource. </para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Deny">
      <summary>
        <para> Prevents callers higher in the call stack from using
      the code that calls this method
      to access the
      resource specified by the
      current instance. </para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.PermitOnly">
      <summary>
        <para> Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource
      specified by the current instance.</para>
      </summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
      <summary>
        <para> When overridden in a derived class, creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union
      of the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToXml">
      <summary>
        <para>When overridden in a derived class, creates an XML 
       encoding of the security object and its current state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the security object, including any state information.</para>
      </returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> When overridden in a derived class, reconstructs 
       a security object with a specified state from an XML encoding.</para>
      </summary>
      <param name="elem">The XML encoding to use to reconstruct the security object.</param>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToString">
      <summary>
        <para> Creates and returns a
       string representation of the current permission object.</para>
      </summary>
      <returns>
        <para> A string representation of the current permission object.</para>
      </returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Copy">
      <summary>
        <para>When implemented by a derived class, creates and 
       returns an identical copy of the current permission object.</para>
      </summary>
      <returns>
        <para>A copy of the current permission object.</para>
      </returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> When implemented by a
      derived class, creates and returns a permission that is the intersection of
      the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the intersection
      of the current permission and the specified permission. This new permission is
   <see langword="null" />
   if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> When implemented by a derived class, determines
      whether the current permission is a subset of the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" />
if the current permission is a subset of the specified permission; otherwise, <see langword=" false" />.</para>
      </returns>
    </member>
    <member name="T:System.Security.Permissions.IUnrestrictedPermission">
      <summary>
        <para>Allows a permission to expose an unrestricted state.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted">
      <summary>
        <para>Returns a value indicating whether unrestricted access to the resource protected by the
      permission is allowed.</para>
      </summary>
      <returns>
        <para>
          <see langword="true " />if unrestricted use of the resource
   protected by the permission is allowed; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission" /> class with either restricted or 
    unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission" /> class with the specified access to
 the specified environment variables.</para>
      </summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> values. </param>
      <param name="pathList">A list of environment variables (semicolon-separated) to which access is granted.</param>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.SetPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>
        <para> Sets the specified access to the specified environment variables to the existing
      state of the permission.</para>
      </summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> values. </param>
      <param name="pathList">A list of environment variables (semicolon-separated).</param>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.AddPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>
        <para>Adds access for the specified environment variables to the
      existing state of the permission.</para>
      </summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> values. </param>
      <param name="pathList">A list of environment variables (semicolon-separated).</param>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)">
      <summary>
        <para>Gets all environment variables with the specified <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" />.</para>
      </summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> values. </param>
      <returns>
        <para>A list of environment variables (semicolon-separated)
      for the selected flag.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating
      whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
   the current permission is unrestricted;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword=" true" />
if the current permission is a subset of the specified
permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAccess">
      <summary>
        <para>Specifies the type of access to files allowed through the file
      dialog.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.None">
      <summary>
        <para>No access to files through the file dialog.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Open">
      <summary>
   Ability to open files through the file dialog.
</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Save">
      <summary>
        <para>Ability to save files through the file dialog.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.OpenSave">
      <summary>
        <para>Ability to open and save files through the file dialog.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermission">
      <summary>
        <para>Controls the ability to access files or folders through a file dialog. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermission" /> class
 with either restricted or unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.FileDialogPermissionAccess)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermission" /> class with the specified access.</para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileDialogPermissionAccess" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating
      whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
   the current permission is unrestricted;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.ToString">
      <summary>
        <para> Creates a string representation of the current permission.</para>
      </summary>
      <returns>
        <para> A string representation of the
      current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union of the
      current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermission.Access">
      <summary>
        <para>Gets or sets the permitted access to files.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAccess">
      <summary>
        <para> Specifies the type of file access requested.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess">
      <summary>
        <para>
       No access to a file or directory.
    </para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Read">
      <summary>
        <para>Access to read from a file or directory.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Write">
      <summary>
        <para>Access to write to or delete a file or directory. Write 
      access includes deleting and overwriting files or directories.
			</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Append">
      <summary>
        <para>Access to append material to a file or directory. Append 
      access includes the ability to create a new file or directory.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">
      <summary>
        <para>Access to the information in the path itself. This
      protects sensitive information in the path, such as user names, as
      well as information about the directory structure revealed in the path. This
      value does not grant access to files or folders represented by the path.</para>
        <note type="note">
      For performance
      reasons, <see langword="PathDiscovery" /> should only be granted to directories,
      not to files. For example, <see langword="PathDiscovery" /> permission should be granted to paths
      such as C:\test and C:\test\, not C:\test\example.txt.
      
   </note>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess">
      <summary>
        <para>
          <see langword="Append" />,
<see langword="Read" />, <see langword="Write" />, and 
<see langword="PathDiscovery" /> access to a file or directory.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermission">
      <summary>
        <para>Controls the ability
      to access files and folders. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission" /> class with fully-restricted or unrestricted permission as
   specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission" /> class with the specified access
   to the specified file or directory.</para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="path">The absolute path of the file or directory.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission" /> class with the specified
   access to the specified files and directories.</para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="pathList">An array containing the paths of the files and directories.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>
        <para> Sets the specified access to the specified file
      or directory, replacing the
      existing state of the
      permission.</para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="path">The path of the file or directory.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>
        <para>Sets the specified access to the specified files and directories, replacing the current state for the
      specified access with
      the new set of
      paths.</para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="pathList">An array containing the paths of the files and directories.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>
        <para>Adds access for the specified file or directory to
      the existing state of the permission. </para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="path">The path of a file or directory.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>
        <para>Adds access for the specified files and directories to
      the existing state of the permission. </para>
      </summary>
      <param name="access">A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <param name="pathList">An array containing the paths of the files and directories.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)">
      <summary>
        <para>Gets all files and directories with the specified
   <see cref="T:System.Security.Permissions.FileIOPermissionAccess" />.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> values.</param>
      <returns>
        <para>An array containing the paths of the files and directories to
      which access specified by the <paramref name="access" /> parameter is granted.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating whether
      the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is unrestricted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para>Determines whether the current permission is a subset of the
      specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates
      and returns a permission that is the intersection of the current
      permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission.</param>
      <returns>
        <para>A new permission that represents the intersection
      of the current permission and the specified permission. This new
      permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the current
      permission and the specified permission.</para>
      </summary>
      <param name="other">A permission to combine with the current permission. It must be the same type as the current permission.</param>
      <returns>
        <para>A new permission that represents the union of the current
      permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para>A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllLocalFiles">
      <summary>
        <para> Gets or sets the permitted access to all local files.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllFiles">
      <summary>
        <para> Gets or sets the permitted access to all files.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageContainment">
      <summary>
        <para>Specifies the permitted use of isolated storage.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.None">
      <summary>
        <para>Use of isolated storage is not 
       allowed.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByUser">
      <summary>
        <para>Storage is isolated first by user and then by domain and assembly. Storage is also isolated by
      computer. Data can only be accessed within the context of the same application and only
      when run by the same user. This is helpful when a third-party assembly wants to keep a private data store.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByUser">
      <summary>
        <para> Storage is isolated first by user and then by code assembly. Storage is also isolated
      by computer. This provides a data store for the assembly that is accessible in
      any domain context. The per-assembly data compartment requires additional trust because
      it potentially provides a "tunnel" between applications that could compromise the data isolation of applications in
      particular Web sites.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByRoamingUser">
      <summary>
        <para>Storage is isolated first by user and then by domain and assembly. Storage will roam if Windows user data roaming is 
      enabled. Data can only be accessed within the context of the same application
      and only when run by the same user. This is helpful when a third-party assembly
      wants to keep a private data store.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByRoamingUser">
      <summary>
        <para>Storage is isolated first by user and then by assembly
 evidence. Storage will roam if Windows user data roaming is
 enabled. This provides a data store for the assembly that is accessible in any
 domain context. The per-assembly data compartment requires additional trust
 because it potentially provides a "tunnel" between applications that could
 compromise the data isolation of applications in particular Web sites.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AdministerIsolatedStorageByUser">
      <summary>
        <para> Unlimited administration ability for the user store. Allows browsing and
 deletion of the entire user store, but not read access other than
 the user's own domain/assembly identity.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.UnrestrictedIsolatedStorage">
      <summary>
        <para>Use of isolated storage is allowed without restriction. Code has full access to any part of
       the user store, regardless of the identity of the domain or assembly. This use of isolated
       storage includes the ability to enumerate
       the contents of the isolated storage data store.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermission">
      <summary>
        <para> Represents access to generic isolated storage
      capabilities.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> class 
    with either restricted or unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values. </param>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is unrestricted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any
      state information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UserQuota">
      <summary>
        <para> Gets or sets the quota on the overall size of each user's total store.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UsageAllowed">
      <summary>
        <para> Gets or sets the type of isolated storage containment allowed.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermission">
      <summary>
        <para>Specifies the allowed usage of a private virtual file system. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" /> class with either fully restricted 
    or unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values. </param>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the union of the current permission and the specified
      permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that
      is the intersection of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission object. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>
        <para> Specifies whether a permission should have
      all or no access to resources at creation.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>
        <para> Full access to the resource protected by the permission.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>
        <para> No access to
      the resource protected by the permission.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>
        <para>Specifies the security actions that can be performed using declarative security.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>
        <para> All callers higher in the call stack are required to have been 
       granted the permission specified by the current permission object (see <see topic="cpconmakingsecuritydemands" />).</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>
        <para> The calling code can access the resource identified by 
       the current permission object, even if callers higher in the stack have not been
       granted permission to access the resource (see <see topic="cpconassert" />).</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>
        <para>The ability to access the resource specified by the 
       current permission object is denied to callers, even if they have been granted
       permission to access it (see <see topic="cpcondeny" />).</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>
        <para> Only the resources specified by this permission object 
       can be accessed, even if the code has been granted permission to access other
       resources (see <see topic="cpconpermitonly" />).</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>
        <para> The immediate caller is required to have
       been granted the specified permission.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>
        <para> The derived
      class inheriting the class or
      overriding a method is required to have been granted the
      specified permission.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>
        <para> The request for the minimum 
       permissions required for code to run. This action can only be used within the scope of
       the assembly.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>
        <para> The request for additional 
       permissions that are optional (not required to run). This action can only be used
       within the scope of the assembly.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>
        <para> The request that permissions that might be 
       misused will not be granted to the calling code. This action can only be used within the scope of
       the assembly.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>
        <para> Specifies the base attribute class for declarative
 security from which <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" />
 is derived.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Permissions.SecurityAttribute" /> 
 with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>
        <para>When overridden in a derived class, creates a permission
      object that can then be serialized into binary form and persistently stored
      along with the <see cref="T:System.Security.Permissions.SecurityAction" />
      in an assembly's metadata.</para>
      </summary>
      <returns>
        <para>A serializable permission object.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>
        <para> Gets or
       sets a security action.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>
        <para> Gets or sets a value indicating whether full
      (unrestricted) permission to the resource protected by the attribute is declared.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>
        <para> Specifies the base attribute class for code access
      security.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para> Initializes a new instance of <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAttribute">
      <summary>
        <para> Allows security actions for
   <see cref="T:System.Security.Permissions.EnvironmentPermission" /> to be
      applied to code using declarative security. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.CreatePermission">
      <summary>
        <para> Creates and returns a new
   <see cref="T:System.Security.Permissions.EnvironmentPermission" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.Permissions.EnvironmentPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Read">
      <summary>
        <para> Gets or sets read access for the environment variables specified by the string
      value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Write">
      <summary>
        <para> Gets or sets write access
      for the environment variables specified by the string value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.All">
      <summary>
        <para>Sets full access for the environment variables specified by the
      string value.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAttribute">
      <summary>
        <para> Allows security actions for
   <see cref="T:System.Security.Permissions.FileDialogPermission" /> to be
      applied to code using declarative security. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileDialogPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new
   <see cref="T:System.Security.Permissions.FileDialogPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.FileDialogPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Open">
      <summary>
        <para>Gets or sets a value indicating whether permission to open files through the file dialog is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Save">
      <summary>
        <para>Gets or sets a value indicating whether permission to save files through the file dialog is declared.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.FileIOPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.FileIOPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.FileIOPermission" /> that corresponds to
   this attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Read">
      <summary>
        <para> Gets or sets read access for the file or directory specified by the string
      value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Write">
      <summary>
        <para> Gets or sets write access for
      the file or directory specified by the string value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Append">
      <summary>
        <para> Gets or sets append access for the file or directory specified by the string value.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery">
      <summary>
        <para> Gets or sets the file or directory to which to
      grant path discovery.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.All">
      <summary>
        <para> Sets full access for the file or directory specified by the string
      value.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.PrincipalPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> class
   with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.PrincipalPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.PrincipalPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Name">
      <summary>
        <para> Gets or sets the name of the
      identity associated with the current principal.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Role">
      <summary>
        <para> Gets or sets membership in a specified security
      role.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated">
      <summary>
        <para> Gets or sets a value indicating whether the current principal has been
       authenticated by the underlying role-based security provider.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.ReflectionPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermissionAttribute" /> class
 with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.ReflectionPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.ReflectionPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.Flags">
      <summary>
        <para> Gets or sets the current allowed uses of reflection.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation">
      <summary>
        <para> Gets or sets a value indicating whether reflection on 
 members that are not visible is allowed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess">
      <summary>
        <para> Gets or sets a value indicating whether invocation of operations on type 
       members is allowed.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit">
      <summary>
        <para> Gets or sets a value indicating whether use 
 of <see cref="N:System.Reflection.Emit" /> is
 allowed.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.RegistryPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.RegistryPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.RegistryPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Read">
      <summary>
        <para> Gets or sets read access for the specified keys and
      values.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Write">
      <summary>
        <para>
      Gets or
      sets write access for the specified keys and values.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Create">
      <summary>
        <para> Gets or sets create access for the specified keys
      and values.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.All">
      <summary>
        <para> Sets full access for the keys and values
      specified.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.SecurityPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.SecurityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.SecurityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>
        <para>Gets or sets all permission flags comprising
      the <see cref="T:System.Security.Permissions.SecurityPermission" />
      permissions.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>
        <para> Gets or sets a value indicating whether permission to
      assert<see langword=" " />that all this code's callers have the requisite permission for
      the operation is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>
        <para> Gets or sets a value indicating whether permission to call
       unmanaged code is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>
        <para> Gets or sets a value indicating whether permission
       to execute code is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>
        <para> Gets or sets a value indicating whether
      permission to bypass code verification is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>
        <para> Gets or sets a value indicating whether permission
      to manipulate threads is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>
        <para> Gets or sets a value indicating whether permission
       to alter or manipulate evidence is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>
        <para> Gets or sets a value indicating whether permission to view and
      manipulate security policy is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>
        <para> Gets or sets a value indicating whether permission to alter or
      manipulate domain security policy is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>
        <para> Gets or sets a value indicating whether permission to
      manipulate the current principal is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>
        <para> Gets or sets a value indicating whether permission to
      manipulate <see cref="T:System.AppDomain" />
      is declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>
        <para>Gets or sets a value indicating whether code can use a 
      serialization formatter to serialize or deserialize an object.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>
        <para>Gets or sets a value indicating whether code can
 configure remoting types and channels.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>
        <para>Gets or sets a value indicating whether code can plug into the common
 language runtime infrastructure, such as adding Remoting Context Sinks, Envoy
 Sinks and Dynamic Sinks.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.UIPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.UIPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.UIPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Window">
      <summary>
        <para> Gets or sets the type of access to the window
      resources that is permitted.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Clipboard">
      <summary>
        <para> Gets or sets the type of access to the clipboard that is
      permitted.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.ZoneIdentityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone">
      <summary>
        <para> Gets or sets membership in the content zone specified by
       the property value.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> to be applied to code using
   declarative security. This class cannot be
   inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values. </param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Name">
      <summary>
        <para> Gets or sets the name of the strong name identity.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Version">
      <summary>
        <para> Gets or sets the version of the strong name identity.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.PublicKey">
      <summary>
        <para> Gets or sets the public key value of the strong name identity expressed as a hexadecimal string.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action"> One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new instance of <see cref="T:System.Security.Permissions.SiteIdentityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermissionAttribute.Site">
      <summary>
        <para> Gets or sets the site name of the calling code.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> to be applied to code using
   declarative security. This
   class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.UrlIdentityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermissionAttribute.Url">
      <summary>
        <para> Gets or sets the full URL of the calling code.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> to be applied to code using
   declarative security. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new instance of <see cref="T:System.Security.Permissions.PublisherIdentityPermission" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate">
      <summary>
        <para> Gets or sets an Authenticode X.509v3 certificate identifying the publisher of the calling code.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile">
      <summary>
        <para> Gets or sets a certification file containing an Authenticode X.509v3 certificate.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile">
      <summary>
        <para> Gets or sets a signed file from which to extract
      an Authenticode X.509v3 certificate.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> to
   be applied to code using declarative security.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStoragePermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UserQuota">
      <summary>
        <para> Gets or sets the maximum user storage quota size.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UsageAllowed">
      <summary>
        <para> Gets or sets the level of isolated storage that should be
      declared.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute">
      <summary>
        <para> Allows security actions for <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" /> to be applied to code using
   declarative security. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" />.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" /> that corresponds to this
   attribute.</para>
      </returns>
    </member>
    <member name="T:System.Security.Permissions.PermissionSetAttribute">
      <summary>
        <para>Allows security actions for a <see cref="T:System.Security.PermissionSet" />
to be applied to code
using
declarative security. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PermissionSetAttribute" /> class 
    with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</para>
      </summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermission">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.IPermission" />.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Security.IPermission" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet">
      <summary>
        <para>Creates and returns a new <see cref="T:System.Security.PermissionSet" />.</para>
      </summary>
      <returns>
        <para>A new <see cref="T:System.Security.PermissionSet" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.File">
      <summary>
        <para> Gets or sets a file containing the XML representation of a
      custom permission set to be declared.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded">
      <summary>
        <para> Gets or sets a value indicating whether the file specified
      by <see cref="P:System.Security.Permissions.PermissionSetAttribute.File" /> is
      Unicode or ASCII encoded.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.Name">
      <summary>
        <para> Gets or sets the name of the permission set.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.XML">
      <summary>
        <para> Gets or sets the XML representation of a permission set.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermission">
      <summary>
        <para>Represents the identity of a software publisher. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> class 
    with fully restricted <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">
        <see langword="None" /> is the only valid value for identity permissions.</param>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> class
   with the specified Authenticode
   X.509v3 certificate. </para>
      </summary>
      <param name="certificate">An X.509 certificate representing the software publisher's identity.</param>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermission.Certificate">
      <summary>
        <para> Gets or sets an Authenticode X.509v3 certificate that represents the identity of the software publisher.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionFlag">
      <summary>
        <para>Specifies the permitted use of <see cref="N:System.Reflection" /> on members that are not visible.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags">
      <summary>
        <para>No reflection is allowed on types that are not 
 visible.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
      <summary>
        <para>Reflection is allowed on members of a type that are not 
 visible.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess">
      <summary>
        <para>Invocation of operations on all type members is allowed. 
 If this flag is not set, only invocation of operations on visible type members is allowed.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit">
      <summary>
        <para> Use of <see cref="N:System.Reflection.Emit" /> is allowed.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags">
      <summary>
        <para>
          <see langword="TypeInformation" />, <see langword="MemberAccess" />, and <see langword="ReflectionEmit" /> 
 are set.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermission">
      <summary>
        <para> Controls access to metadata through the <see cref="N:System.Reflection" />
APIs. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermission" /> class with either fully restricted 
    or unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ReflectionPermission" /> class with the specified 
    access.</para>
      </summary>
      <param name="flag">One of the <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" /> values.</param>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating whether the current
      permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current permission is
   unrestricted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the current permission
      and the specified permission.</para>
      </summary>
      <param name="other"> A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union
      of the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermission.Flags">
      <summary>
        <para> Gets or sets the type of reflection allowed for the
      current permission.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAccess">
      <summary>
        <para> Specifies the permitted access to registry keys and
      values.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess">
      <summary>
        <para> No access to registry variables.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Read">
      <summary>
        <para> Read access to registry variables.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Write">
      <summary>
        <para> Write access to registry variables.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Create">
      <summary>
        <para> Create access to registry variables.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess">
      <summary>
        <para>Create, read, and write access to registry variables.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermission">
      <summary>
        <para>Controls the ability to access registry variables. This class
      cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermission" /> class with either fully restricted 
    or unrestricted permission as specified.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values. </param>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.RegistryPermission" /> class 
    with the specified access to the specified registry variables.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> values.</param>
      <param name="pathList">A list of registry variables (semicolon-separated) to which access is granted.</param>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>
        <para>Sets new access for the specified registry variable names to the existing
      state of the permission.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> values. </param>
      <param name="pathList">A list of registry variables (semicolon-separated).</param>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>
        <para>Adds access for the specified registry variables
 to the existing state of the permission.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> values.</param>
      <param name="pathList"> A list of registry variables (semicolon-separated).</param>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)">
      <summary>
        <para> Gets paths for all registry variables with the
      specified <see cref="T:System.Security.Permissions.RegistryPermissionAccess" />.</para>
      </summary>
      <param name="access">One of the <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> values.</param>
      <returns>
        <para>A list of the registry variables (semicolon-separated)
      with the specified <see cref="T:System.Security.Permissions.RegistryPermissionAccess" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating
      whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
   the current permission
   is unrestricted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that
      is the intersection of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is
   <see langword="null" />
   if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the union of the current permission and the specified
      permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermission">
      <summary>
        <para>Allows checks against the active principal (see
   <see cref="T:System.Security.Principal.IPrincipal" />) using
      the language constructs defined for both declarative and imperative security actions. This
      class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission" /> class
   with the specified <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" />values.</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission" /> class
   for the specified <paramref name="name" /> and <paramref name="role" />.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Security.Principal.IPrincipal" /> object's user. </param>
      <param name=" role">The role of the <see cref="T:System.Security.Principal.IPrincipal" /> object's user (for example, Administrator).</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.PrincipalPermission" /> class for the
   specified <paramref name="name" />, <paramref name="role" />, and authentication status.</para>
      </summary>
      <param name="name">The name of the <see cref="T:System.Security.Principal.IPrincipal" /> object's user.</param>
      <param name=" role">The role of the <see cref="T:System.Security.Principal.IPrincipal" /> object's user (for example, Administrator).</param>
      <param name=" isAuthenticated">
        <see langword="true" /> to signify that the user is authenticated; otherwise, <see langword="false" />.</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the 
   current permission is unrestricted;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of the
      specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
   current permission is a subset of the specified permission; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection of
      the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the intersection of
      the current permission and the specified permission. This new permission will be
   <see langword="null" /> if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the current permission
      and the specified permission.</para>
      </summary>
      <param name="other">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union
      of the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Demand">
      <summary>
        <para> Determines at run time whether the
      current principal matches that specified by the current permission.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any
      state information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML encoding.</para>
      </summary>
      <param name="elem"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToString">
      <summary>
        <para> Creates and returns a string representing the current permission. </para>
      </summary>
      <returns>
        <para> A representation of the current permission.</para>
      </returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>
        <para>Specifies access flags for the security permission object.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>
        <para> No security access.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>
        <para>
      Ability to assert<see langword=" " />
      that all this code's callers have
      the requisite permission
      for the operation.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>
        <para> Ability to call unmanaged code.</para>
        <para> Since unmanaged code potentially allows
      other permissions to be bypassed, this is a dangerous permission that should only be granted to highly trusted code. It
      is used for such applications as calling native code using PInvoke or using COM Interop.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>
        <para> Ability to skip verification of code
      in this assembly. Code that is unverifiable can be run if this permission
      is granted.</para>
        <para>This is a powerful permission that should be granted only to highly trusted
      code.</para>
        <para>This flag has no effect when used dynamically with stack modifiers such as
   <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, and <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>
        <para> Permission for the code to run. Without this permission, managed
      code will not be executed.</para>
        <para>This flag has no effect when used dynamically with stack modifiers such as
   <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, and <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>
        <para> Ability to use certain advanced operations on threads.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>
        <para> Ability to provide evidence, including the ability to
      alter the evidence provided by the
      common language runtime.</para>
        <para>This is a powerful permission that should only be granted to highly trusted
      code.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>
        <para> Ability to view and modify policy.</para>
        <para>This is a powerful permission that should only be granted to highly trusted 
      code.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>
        <para> Ability to provide serialization services. Used by
       serialization formatters.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>
        <para> Ability to specify domain policy.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>
        <para> Ability to manipulate the principal object.</para>
      </summary>
      <summary>
        <para>Denotes ability to manipulate the principal object.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>
        <para> Ability to create and manipulate an <see cref="T:System.AppDomain" />.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>
        <para>Permission to configure Remoting types and channels.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>
        <para> Permission to plug code into the common 
 language runtime infrastructure, such as adding Remoting Context Sinks, Envoy
 Sinks and Dynamic Sinks.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>
        <para> The unrestricted
       state of the permission.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermission">
      <summary>
        <para> Describes a set of security permissions applied to code.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission" /> class
 with either restricted or unrestricted permission as specified.</para>
      </summary>
      <param name="state">
        <para> One of the <see cref="T:System.Security.Permissions.PermissionState" />values. </para>
      </param>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission" /> class with the
    specified initial set state of the flags.</para>
      </summary>
      <param name="flag">The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />.</param>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of the
      specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para>A new permission object that represents the intersection
      of the current permission and the specified permission. This new permission is
   <see langword="null" />
   if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating whether the current
      permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is unrestricted; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermission.Flags">
      <summary>
        <para> Gets or sets the security permission flags.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermission">
      <summary>
        <para> Defines the identity permission for the
      Web site from which the code originates. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> class
   with fully restricted <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">
        <see langword="None" /> is the only valid value for identity permissions.</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.SiteIdentityPermission" /><see langword=" " />class to represent the specified site
   identity.</para>
      </summary>
      <param name="site">The site name or wildcard expression.</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermission.Site">
      <summary>
        <para> Gets or sets the current site.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermission">
      <summary>
        <para>Defines the identity permission for strong names. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> class
   with fully restricted <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">
        <see langword="None" /> is the only valid value for identity permissions.</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />
class for
the specified strong name identity.</para>
      </summary>
      <param name="blob">The public key defining the strong name identity namespace.</param>
      <param name="name"> The simple name part of the strong name identity. This corresponds to the name of the assembly.</param>
      <param name="version">The version number of the identity.</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target"> A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="e"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.PublicKey">
      <summary>
        <para> Gets or sets the public key blob that defines the strong name
       identity namespace.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Name">
      <summary>
        <para> Gets or sets the simple name portion of the strong name
       identity.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Version">
      <summary>
        <para> Gets or sets the version number of the identity.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.StrongNamePublicKeyBlob">
      <summary>
        <para> Represents the public key information (called a blob) for a strong name. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> class with raw bytes of the public key blob.</para>
      </summary>
      <param name="publicKey">The array of bytes representing the raw public key data.</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.Equals(System.Object)">
      <summary>
        <para>Gets or sets a value indicating whether the current 
      public key blob is equal to the specified public key blob.</para>
      </summary>
      <param name="obj">An object containing a public key blob.</param>
      <returns>
        <para>
          <see langword="true" /> if the public 
   key blob of the current object is equal to the public key blob of the
<paramref name="obj" /> parameter; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.GetHashCode">
      <summary>
        <para>Returns a hash code based on the public key.</para>
      </summary>
      <returns>
        <para>The hash code based on the public key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.ToString">
      <summary>
        <para> Creates and returns a string representation
       of the public key blob.</para>
      </summary>
      <returns>
        <para>A hexadecimal version of the public key blob.</para>
      </returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionWindow">
      <summary>
        <para>Specifies the type of windows that code is allowed to use.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.NoWindows">
      <summary>
        <para> Users cannot use any windows or user interface events. No user interface
      can be used.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows">
      <summary>
        <para>Users can only use safe subwindows for drawing, and can only
 use user input events for user interface within that subwindow. A control displayed within a browser is an example of a safe
 subwindow.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows">
      <summary>
        <para> Users can only use safe top-level windows and
 safe subwindows for drawing, and can only use user input events for the user interface within those top-level windows
 and subwindows. Special safe windows for use by partially-trusted code are guaranteed to
 be clearly labeled and have minimum and maximum size restrictions. These
 restrictions prevent potentially harmful code from spoofing attacks, such as
 imitating trusted system dialogs.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.AllWindows">
      <summary>
        <para>
       Users can use all windows and user input events without restriction.
    </para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionClipboard">
      <summary>
        <para>Specifies the type of clipboard access that is allowed to the calling code.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.NoClipboard">
      <summary>
        <para>Clipboard cannot be used.</para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.OwnClipboard">
      <summary>
        <para> The ability to put data on the clipboard 
 (<see langword="Copy" />, <see langword="Cut" />) is unrestricted. Intrinsic
 controls that accept <see langword="Paste" />, such as text box, can accept the
 clipboard data, but user controls that must programmatically read the clipboard cannot.
 </para>
      </summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.AllClipboard">
      <summary>
        <para>
       Clipboard can be used without restriction.
    </para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.UIPermission">
      <summary>
        <para> Controls the permissions related
      to user interfaces and the clipboard. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission" /> class with either fully restricted
   or unrestricted access, as specified.</para>
      </summary>
      <param name="state">
        <para>One of the <see cref="T:System.Security.Permissions.PermissionState" />values. </para>
      </param>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow,System.Security.Permissions.UIPermissionClipboard)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission" />
class with
the specified permissions for windows and the clipboard.</para>
      </summary>
      <param name="windowFlag">
        <para>One of the <see cref="T:System.Security.Permissions.UIPermissionWindow" /> values.</para>
      </param>
      <param name="clipboardFlag">
        <para>One of the <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> values.</para>
      </param>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission" /><see langword=" " /> class
 with the permissions for windows, and no
 access to the clipboard.</para>
      </summary>
      <param name="windowFlag">
        <para>One of the <see cref="T:System.Security.Permissions.UIPermissionWindow" /> values.</para>
      </param>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionClipboard)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UIPermission" /> 
class with the permissions for the
clipboard, and no access to windows.</para>
      </summary>
      <param name="clipboardFlag">
        <para>One of the <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> values.</para>
      </param>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsUnrestricted">
      <summary>
        <para> Returns a value indicating
      whether the current permission is unrestricted.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if
   the current permission is unrestricted;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target">A permission to test for the subset relationship. This permission must be the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the 
   current permission is a subset of the specified permission; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection of
      the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the intersection
      of the current permission and the specified permission. This new permission is <see langword="null" /> if
      the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of
      the permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union of the
      current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.ToXml">
      <summary>
        <para>Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para>An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para>Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd">The XML encoding used to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Window">
      <summary>
        <para> Gets or sets the window access represented by the
      permission.</para>
      </summary>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Clipboard">
      <summary>
        <para> Gets or sets the clipboard access represented by the
      permission.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermission">
      <summary>
        <para>Defines the identity permission for the URL from which the code originates. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> class 
    with a fully restricted <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">
        <see langword="None" /> is the only valid value for identity permissions.</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> class
   to represent the URL identity described by <paramref name="site" />.</para>
      </summary>
      <param name="site">A URL or wildcard expression.</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current permission
   is a subset of<paramref name=" " /> the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that is the intersection
      of the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermission.Url">
      <summary>
        <para> Gets or sets a URL representing the identity of Internet code.</para>
      </summary>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermission">
      <summary>
        <para> Defines the identity permission for
      the zone from which the code originates. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> class
   with fully restricted <see cref="T:System.Security.Permissions.PermissionState" />.</para>
      </summary>
      <param name="state">
        <see langword="None" /> is the only valid value for identity permissions.</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.SecurityZone)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.Permissions.ZoneIdentityPermission" />
 class
 to represent the specified zone identity.</para>
      </summary>
      <param name="zone">The zone identifier.</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Copy">
      <summary>
        <para> Creates and returns an identical copy of the current
      permission.</para>
      </summary>
      <returns>
        <para> A copy of the current permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>
        <para> Determines whether the current permission is a subset of
      the specified permission.</para>
      </summary>
      <param name="target"> A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <returns>
        <para>
          <see langword="true" /> if the current
   permission is a subset of the specified permission; otherwise,<see langword=" false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>
        <para> Creates and returns a permission that
      is the intersection of the current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that
      represents the intersection of the current permission and the specified permission. This
      new permission is <see langword="null" />
      if the intersection is empty.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Union(System.Security.IPermission)">
      <summary>
        <para> Creates a permission that is the union of the
      current permission and the specified permission.</para>
      </summary>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <returns>
        <para> A new permission that represents the union of
      the current permission and the specified permission.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.ToXml">
      <summary>
        <para> Creates an XML encoding of the permission and its current
      state.</para>
      </summary>
      <returns>
        <para> An XML encoding of the permission, including any state
      information.</para>
      </returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>
        <para> Reconstructs a permission with a specified state from an XML
      encoding.</para>
      </summary>
      <param name="esd"> The XML encoding to use to reconstruct the permission.</param>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermission.SecurityZone">
      <summary>
        <para> Gets or sets the zone represented by the current <see cref="T:System.Security.Permissions.ZoneIdentityPermission" />.</para>
      </summary>
    </member>
    <member name="T:System.Security.SuppressUnmanagedCodeSecurityAttribute">
      <summary>
        <para>Allows managed code to call into unmanaged code without a stack walk.
 This class cannot be
 inherited.</para>
      </summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>
        <para>Marks modules containing unverifiable code. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>
        <para> The exception that is thrown when
      a security error is detected.</para>
      </summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error message.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a 
    specified error message and the permission type that caused the exception to be
    thrown.</para>
      </summary>
      <param name="message">
        <para>The error message that explains the reason for the exception.</para>
      </param>
      <param name=" type">The type of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with a specified error
   message, the permission type that caused the exception to be thrown, and the
   state.</para>
      </summary>
      <param name="message">
        <para>The error message that explains the reason for the exception.</para>
      </param>
      <param name=" type">The type of the permission that caused the exception to be thrown.</param>
      <param name=" state">The state of the permission that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.SecurityException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>
        <para>Returns a representation of the current <see cref="T:System.Security.SecurityException" />.</para>
      </summary>
      <returns>
        <para>A string representation of the current <see cref="T:System.Security.SecurityException" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Security.SecurityException" />.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="P:System.Security.SecurityException.PermissionType">
      <summary>
        <para>Gets the type of the permission that threw the exception.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityException.PermissionState">
      <summary>
        <para>Gets the state of the permission that threw the exception.</para>
      </summary>
    </member>
    <member name="T:System.Security.PolicyLevelType">
      <summary>
        <para>Specifies the type of a managed code policy level.</para>
      </summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.User">
      <summary>
        <para> Security policy for all managed code that is run by the user.</para>
      </summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.Machine">
      <summary>
        <para> Security policy for all managed code that is run on the computer.</para>
      </summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.Enterprise">
      <summary>
        <para> Security policy for all managed code in an enterprise.</para>
      </summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.AppDomain">
      <summary>
        <para> Security policy for all managed code in an 
 application.</para>
      </summary>
    </member>
    <member name="T:System.Security.SecurityManager">
      <summary>
        <para> Provides the main access point
      for
      classes interacting with the security system. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Security.SecurityManager.IsGranted(System.Security.IPermission)">
      <summary>
        <para>Determines whether a permission is granted to the caller.</para>
      </summary>
      <param name="perm">The permission to test against the grant of the caller.</param>
      <returns>
        <para>
          <see langword="true" /> if the permissions granted to
   the caller include the permission <paramref name="perm" />; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)">
      <summary>
        <para>Loads a <see cref="T:System.Security.Policy.PolicyLevel" /> from the specified file.</para>
      </summary>
      <param name="path">The physical file path to a file containing the security policy information.</param>
      <param name=" type">One of the <see cref="T:System.Security.PolicyLevelType" /> values.</param>
      <returns>
        <para>The loaded <see cref="T:System.Security.Policy.PolicyLevel" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)">
      <summary>
        <para>Loads a <see cref="T:System.Security.Policy.PolicyLevel" /> from the specified string.</para>
      </summary>
      <param name="str">The XML representation of a security policy level in the same form in which it appears in a configuration file.</param>
      <param name=" type">One of the <see cref="T:System.Security.PolicyLevelType" /> values.</param>
      <returns>
        <para>The loaded <see cref="T:System.Security.Policy.PolicyLevel" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)">
      <summary>
        <para>Saves a modified security policy level loaded with
   <see cref="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" />.</para>
      </summary>
      <param name="level">The <see cref="T:System.Security.Policy.PolicyLevel" /> object to be saved.</param>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)">
      <summary>
        <para> Determines what permissions to grant to code based on the
 specified evidence and requests.</para>
      </summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <param name="reqdPset">The required permissions the code needs to run.</param>
      <param name="optPset">The optional permissions that will be used if granted, but aren't required for the code to run.</param>
      <param name="denyPset">The denied permissions that must never be granted to the code even if policy otherwise permits it.</param>
      <param name="denied">An output parameter that contains the set of permissions not granted.</param>
      <returns>
        <para>The set of permissions that would be granted by the security system.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)">
      <summary>
        <para> Determines what permissions to grant to code based
 on the specified evidence.</para>
      </summary>
      <param name="evidence">The evidence set used to evaluate policy.</param>
      <returns>
        <para>The set of permissions that would be granted by the security system.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)">
      <summary>
        <para> Gets a collection of code groups matching the specified
 evidence.</para>
      </summary>
      <param name="evidence">The evidence set against which the policy is evaluated.</param>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" />
enumeration of the set of
code groups matching the evidence.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.PolicyHierarchy">
      <summary>
        <para>Provides an
      enumerator to access the security policy hierarchy by levels, such as
      computer policy and user policy.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> for <see cref="T:System.Security.Policy.PolicyLevel" />
objects that comprise the security
policy hierarchy.</para>
      </returns>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicy">
      <summary>
        <para> Saves
      the modified security policy state.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityManager.CheckExecutionRights">
      <summary>
        <para> Gets or sets a value indicating whether code must
      have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> in order to execute.</para>
      </summary>
    </member>
    <member name="P:System.Security.SecurityManager.SecurityEnabled">
      <summary>
        <para> Gets or sets a
      value indicating whether security is
      enabled.</para>
      </summary>
    </member>
    <member name="T:System.Security.SecurityZone">
      <summary>
        <para>Defines the integer values corresponding to security zones used by security
      policy. </para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.MyComputer">
      <summary>
        <para> The local computer zone is an implicit zone used for content that
      exists on the user's computer.</para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.Intranet">
      <summary>
        <para>The local intranet zone is used for content located on a company's intranet.
       Because the servers and information would be within a company's firewall, a user
       or company could assign a higher trust level to the content on the intranet.</para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.Trusted">
      <summary>
        <para> The trusted sites zone is used for content located on Web
      sites considered more reputable or trustworthy than other sites on the
      Internet. Users can use this zone to assign a higher trust level to these sites
      to minimize the number of authentication requests. The URLs of these trusted
      Web sites need to be mapped into this zone by the user.</para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.Internet">
      <summary>
        <para>
       The Internet zone is used for the Web sites on the Internet that do not
       belong to another zone.
    </para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.Untrusted">
      <summary>
        <para> The restricted sites zone is used for Web sites with
      content that could cause, or could have caused, problems when downloaded. The
      URLs of these untrusted Web sites need to be mapped into this zone by the
      user.</para>
      </summary>
    </member>
    <member name="F:System.Security.SecurityZone.NoZone">
      <summary>
        <para> No zone is specified.</para>
      </summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>
        <para> The exception that is thrown when the security policy requires code to be type safe and the verification process is unable to verify that the code
      is type safe.</para>
      </summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.VerificationException" />
class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class
    with an explanatory message.</para>
      </summary>
      <param name="message">A message indicating the reason the exception occurred.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.VerificationException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Security.VerificationException" /> class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Activation.IActivator">
      <summary>
        <para>Provides the basic functionality for a Remoting activator
      class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.IActivator.Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para>Creates an instance of the object specified in the 
      provided <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" />.</para>
      </summary>
      <param name="msg">The information about the object needed to activate it, stored in an <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" />.</param>
      <returns>
        <para>Status of the object activation contained in an <see cref="T:System.Runtime.Remoting.Activation.IConstructionReturnMessage" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IActivator.NextActivator">
      <summary>
        <para>Gets or sets the next activator in the chain.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IActivator.Level">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.Remoting.Activation.ActivatorLevel" /> where
   this activator is active.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.AsyncResult">
      <summary>
        <para>Encapsulates
      the results of an asynchronous operation on an asynchronous delegate.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMessageSink">
      <summary>
        <para>Defines the interface for a message sink.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para>Synchronously processes the given message.</para>
      </summary>
      <param name="msg">The message to process. </param>
      <returns>
        <para> A reply message in response to the request.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>Asynchronously processes the given message.</para>
      </summary>
      <param name="msg">The message to process. </param>
      <param name="replySink">The reply sink for the reply message. </param>
      <returns>
        <para> Returns an <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> interface that provides a way to control asynchronous messages after they have
   been dispatched.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMessageSink.NextSink">
      <summary>
        <para>Gets the next message sink in the sink chain.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.IsCompleted">
      <summary>
        <para>Gets a value indicating whether the server has completed the call.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate">
      <summary>
        <para>Gets the delegate object on which the asynchronous call was invoked.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState">
      <summary>
        <para>Gets the object provided as the last parameter of a
   <see langword="BeginInvoke" />
   method call.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.CompletedSynchronously">
      <summary>
        <para>Gets a value indicating whether the <see langword="BeginInvoke " /> call
   completed synchronously.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.EndInvokeCalled">
      <summary>
        <para> Gets or sets a value indicating whether
   <see langword="EndInvoke" />
   has been called on the current <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle">
      <summary>
        <para>Gets a <see cref="T:System.Threading.WaitHandle" /> that encapsulates
   Win32 synchronization handles, and allows the implementation of various
   synchronization schemes.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.CallContext">
      <summary>
        <para>Provides a set of properties that are carried with the execution code path.
      This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(System.String)">
      <summary>
        <para>Empties a data slot with the specified name.</para>
      </summary>
      <param name="name"> The name of the data slot to empty.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)">
      <summary>
        <para>Retrieves an object with the specified name from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext" />
.</para>
      </summary>
      <param name="name">The name of the item in the call context.</param>
      <returns>
        <para>The object in the call context associated with the specified name.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)">
      <summary>
        <para>Stores a given object and associates it with
      the specified name.</para>
      </summary>
      <param name="name">The name with which to associate the new item in the call context.</param>
      <param name="data">The object to store in the call context.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.CallContext.GetHeaders">
      <summary>
        <para> Returns the headers that are sent along with the method call.</para>
      </summary>
      <returns>
        <para> The headers that are sent along with the method call.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.CallContext.SetHeaders(System.Runtime.Remoting.Messaging.Header[])">
      <summary>
        <para> Sets the headers that are sent along with the method call.</para>
      </summary>
      <param name="headers">An <see cref="T:System.Runtime.Remoting.Messaging.Header" /> array of the headers that are to be sent along with the method call.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
      <summary>
        <para>Marks an object that can propagate outside of an <see cref="T:System.AppDomain" /> in a <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.LogicalCallContext">
      <summary>
        <para>Provides a set of properties that are carried with the execution code path
      during remote method calls.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize
   the current <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> .</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name=" context">The contextual information about the source or destination of the serialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.LogicalCallContext.Clone">
      <summary>
        <para>Creates a new object that is a copy of the current
      instance.</para>
      </summary>
      <returns>
        <para>A new object that is a copy of this instance.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(System.String)">
      <summary>
        <para>Empties a data slot with the specified name.</para>
      </summary>
      <param name="name">The name of the data slot to empty.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(System.String)">
      <summary>
        <para>Retrieves an object associated with the specified name 
      from the current instance.</para>
      </summary>
      <param name="name">The name of the item in the call context.</param>
      <returns>
        <para>The object in the logical call context associated with the specified name.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(System.String,System.Object)">
      <summary>
        <para>Stores the specified object in the current instance, and associates it with
      the specified name.</para>
      </summary>
      <param name="name">The name with which to associate the new item in the call context.</param>
      <param name="data">The object to store in the call context.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.LogicalCallContext.HasInfo">
      <summary>
        <para>Gets a value indicating whether the current <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> contains information.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ChannelServices">
      <summary>
        <para> Provides static methods to aid with remoting channel
      registration, resolution, and URL discovery. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel(System.Runtime.Remoting.Channels.IChannel)">
      <summary>
        <para> Registers a channel with the channel services.</para>
      </summary>
      <param name="chnl">The channel to register.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.UnregisterChannel(System.Runtime.Remoting.Channels.IChannel)">
      <summary>
        <para>Unregisters
      a particular channel from the registered channels list.</para>
      </summary>
      <param name="chnl">The channel to unregister.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.GetChannel(System.String)">
      <summary>
        <para> Returns a registered channel with the specified
      name.</para>
      </summary>
      <param name="name">The channel name.</param>
      <returns>
        <para>An interface to a registered channel, or
   <see langword="null" />
   if
   the channel is not registered.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject(System.MarshalByRefObject)">
      <summary>
        <para> Returns an array of all the URLs that can be used to reach the specified object.</para>
      </summary>
      <param name="obj">The object to retrieve the URL array for.</param>
      <returns>
        <para> An array of strings containing
 the URLs that can be used to remotely identify the object, or
 <see langword="null" /> if none were
 found.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.GetChannelSinkProperties(System.Object)">
      <summary>
        <para> Returns an <see cref="T:System.Collections.IDictionary" />
of properties for a given proxy.</para>
      </summary>
      <param name="obj">The proxy to retrieve properties for.</param>
      <returns>
        <para>An interface to the dictionary of properties or
      <see langword="null" /> if
      no properties were found.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.DispatchMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessage@)">
      <summary>
        <para>Dispatches incoming remote calls.</para>
      </summary>
      <param name="sinkStack">The stack of server channel sinks that the message already traversed.</param>
      <param name=" msg">The message to dispatch.</param>
      <param name=" replyMsg">When this method returns, contains an <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that holds the reply from the server to the message contained in the <paramref name="msg " />parameter. This parameter is passed uninitialized.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> that gives the status of the
   server message processing.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para> Synchronously
      dispatches the incoming message to the server-side chain(s) based on the URI
      embedded in the message.</para>
      </summary>
      <param name="msg">The message to dispatch.</param>
      <returns>
        <para> A reply message is returned by the call to the server-side chain.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.AsyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para> Asynchronously dispatches the given message to the server-side chain(s) based on the URI
 embedded in the message.</para>
      </summary>
      <param name=" msg">The message to dispatch.</param>
      <param name="replySink"> The sink that will process the return message if it is not <see langword="null" />.</param>
      <returns>
        <para>An <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> object used to control the
 asynchronously dispatched message.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain(System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>
        <para>Creates a channel sink chain for the specified channel.</para>
      </summary>
      <param name="provider">The first provider in the chain of sink providers that will create the channel sink chain.</param>
      <param name=" channel">The <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiver" /> for which to create the channel sink chain.</param>
      <returns>
        <para>A new channel sink chain for the specified channel.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.ChannelServices.RegisteredChannels">
      <summary>
        <para>Gets or sets a list of currently registered channels.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientChannelSinkStack">
      <summary>
        <para>Provides functionality for a stack of client channel sinks that must be
 invoked during an asynchronous message response decoding.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack">
      <summary>
        <para>Provides the stack functionality for a stack of client response channel sinks that must be 
      invoked during an asynchronous message response decoding.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.AsyncProcessResponse(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>
        <para>Requests asynchronous processing of a method call on the sinks in the current
      sink stack.</para>
      </summary>
      <param name="headers">The headers retrieved from the server response stream.</param>
      <param name=" stream">The stream coming back from the transport sink.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.DispatchReplyMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para>Dispatches the specified reply message on the reply sink.</para>
      </summary>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> to dispatch.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack.DispatchException(System.Exception)">
      <summary>
        <para>Dispatches the specified exception on the reply sink.</para>
      </summary>
      <param name="e">The exception to dispatch to the server.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSinkStack.Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)">
      <summary>
        <para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
      </summary>
      <param name="sink">The sink to push onto the sink stack.</param>
      <param name=" state">Information generated on the request side that is needed on the response side.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>
        <para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
      </summary>
      <param name="sink">The sink to remove and return from the sink stack.</param>
      <returns>
        <para> Information generated on the request side and associated with the
 specified sink.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ClientChannelSinkStack">
      <summary>
        <para>Holds the stack of client channel sinks that must be 
      invoked during an asynchronous message response decoding.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.ClientChannelSinkStack" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.#ctor(System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.ClientChannelSinkStack" /> class with the specified reply sink.</para>
      </summary>
      <param name="replySink">The <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> that the current stack can use to reply to messages.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.Push(System.Runtime.Remoting.Channels.IClientChannelSink,System.Object)">
      <summary>
        <para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
      </summary>
      <param name="sink">The sink to push onto the sink stack.</param>
      <param name=" state">Information generated on the request side that is needed on the response side.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>
        <para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
      </summary>
      <param name="sink">The sink to remove and return from the sink stack.</param>
      <returns>
        <para> Information generated on the request side and associated with the
 specified sink.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.AsyncProcessResponse(System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>
        <para>Requests asynchronous processing of a method call on the sinks in the current
 sink stack.</para>
      </summary>
      <param name="headers">The headers retrieved from the server response stream.</param>
      <param name=" stream"> The stream returning from the transport sink.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.DispatchReplyMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para>Dispatches the specified reply message on the reply sink.</para>
      </summary>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> to dispatch.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ClientChannelSinkStack.DispatchException(System.Exception)">
      <summary>
        <para>Dispatches the specified exception on the reply sink.</para>
      </summary>
      <param name="e">The exception to dispatch to the server.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IServerChannelSinkStack">
      <summary>
        <para> 
 Provides the stack functionality for a stack of server channel sinks.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack">
      <summary>
        <para> 
 Provides the stack functionality for a stack of server response
 channel sinks.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack.GetResponseStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>
        <para>Returns the <see cref="T:System.IO.Stream" /> onto which the specified message is 
 to be serialized.</para>
      </summary>
      <param name="msg">The message to be serialized onto the requested stream.</param>
      <param name=" headers">The headers retrieved from the server response stream.</param>
      <returns>
        <para>The <see cref="T:System.IO.Stream" /> 
onto which the specified message is to be serialized.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)">
      <summary>
        <para>Pushes the specified sink and information associated with it onto the sink stack.</para>
      </summary>
      <param name="sink">The sink to push onto the sink stack.</param>
      <param name=" state">Information generated on the request side that is needed on the response side.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IServerChannelSink)">
      <summary>
        <para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
      </summary>
      <param name="sink">The sink to remove and return from the sink stack.</param>
      <returns>
        <para> Information generated on the request side and associated with the
 specified sink.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ServerChannelSinkStack">
      <summary>
        <para> 
 Holds the stack of server channel sinks.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)">
      <summary>
        <para>Pushes the specified sink and information associated with it onto the sink
      stack.</para>
      </summary>
      <param name="sink">The sink to push onto the sink stack.</param>
      <param name=" state">Information generated on the request side that is needed on the response side.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IServerChannelSink)">
      <summary>
        <para>Pops the information associated with all the sinks from the sink stack up to and including the specified sink.</para>
      </summary>
      <param name="sink">The sink to remove and return from the sink stack.</param>
      <returns>
        <para> Information generated on the request side and associated with the
 specified sink.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.GetResponseStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>
        <para>Returns the <see cref="T:System.IO.Stream" /> onto which the specified message is
   to be serialized.</para>
      </summary>
      <param name="msg">The message to be serialized onto the requested stream.</param>
      <param name=" headers">The headers retrieved from the server response stream.</param>
      <returns>
        <para>The <see cref="T:System.IO.Stream" />
onto which the specified message is to be serialized.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMethodCallMessage">
      <summary>
        <para>Defines the method call message interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMethodMessage">
      <summary>
        <para>Defines the method message interface.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMessage">
      <summary>
        <para>Contains communication data sent between cooperating
      message sinks.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMessage.Properties">
      <summary>
        <para> Gets an <see cref="T:System.Collections.IDictionary" />
that represents a collection of the message's properties.
</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(System.Int32)">
      <summary>
        <para>Gets the name of the argument passed to the method.</para>
      </summary>
      <param name="index"> The number of the requested argument.</param>
      <returns>
        <para>The name of the specified argument passed to the method, or
   <see langword="null" /> if the current method is not implemented.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(System.Int32)">
      <summary>
        <para>Gets a specific argument as an <see cref="T:System.Object" /> .</para>
      </summary>
      <param name="argNum">The number of the requested argument.</param>
      <returns>
        <para>The argument passed to the method.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.Uri">
      <summary>
        <para> Gets the URI of the specific object that the
      call is destined for.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.MethodName">
      <summary>
        <para> Gets the name of the invoked method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.TypeName">
      <summary>
        <para>Gets the full <see cref="T:System.Type" /> name of the specific object that the call is destined for.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature">
      <summary>
        <para> Gets an object containing the method signature.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount">
      <summary>
        <para>Gets the number of arguments passed to the method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.Args">
      <summary>
        <para> Gets an array of arguments passed to the method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs">
      <summary>
        <para> Gets a value indicating whether the message has variable arguments.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 
for the current method call.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase">
      <summary>
        <para>Gets the <see cref="T:System.Reflection.MethodBase" /> of the called method.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName(System.Int32)">
      <summary>
        <para> Returns the name of the specified argument that is not 
      marked as an<see langword=" out" /> parameter.</para>
      </summary>
      <param name="index">The number of the requested <see langword="in" /> argument.</param>
      <returns>
        <para>The name of a specific argument that is not marked as an<see langword=" out" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg(System.Int32)">
      <summary>
        <para> Returns the specified argument that is not marked as an<see langword=" out" /> parameter.</para>
      </summary>
      <param name="argNum">The number of the requested <see langword="in" /> argument.</param>
      <returns>
        <para> The requested argument that is not marked as an<see langword=" out" /> parameter.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount">
      <summary>
        <para>Gets the number of arguments in the call that are not 
      marked as <see langword="out" /> parameters.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs">
      <summary>
        <para>Gets an array of arguments that are not marked as<see langword=" out" /> parameters.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Lifetime.ClientSponsor">
      <summary>
        <para>Provides a default implementation for a lifetime sponsor class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Lifetime.ISponsor">
      <summary>
        <para>Indicates that the implementer wants to be a lifetime lease sponsor.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ISponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
      <summary>
        <para>Requests a sponsoring client to renew the lease for the specified
      object.</para>
      </summary>
      <param name="lease">The lifetime lease of the object that requires lease renewal.</param>
      <returns>
        <para>The additional lease time for the specified object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.#ctor(System.TimeSpan)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" /> class with the renewal time of 
   the sponsored object.</para>
      </summary>
      <param name="renewalTime">The <see cref="T:System.TimeSpan" /> by which to increase the lifetime of the sponsored objects when renewal is requested.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.Register(System.MarshalByRefObject)">
      <summary>
        <para>Registers the specified <see cref="T:System.MarshalByRefObject" /> for sponsorship.</para>
      </summary>
      <param name="obj">The object to register for sponsorship with the <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" />.</param>
      <returns>
        <para>
          <see langword="true" /> if 
   registration succeeded; otherwise,
<see langword="false" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.Unregister(System.MarshalByRefObject)">
      <summary>
        <para>Unregisters the specified <see cref="T:System.MarshalByRefObject" /> from 
   the list of objects sponsored by the current <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" /> .</para>
      </summary>
      <param name="obj">The object to unregister.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease)">
      <summary>
        <para>Requests a sponsoring client to renew the lease for the specified
      object.</para>
      </summary>
      <param name="lease">The lifetime lease of the object that requires lease renewal.</param>
      <returns>
        <para>The additional lease time for the specified object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.Close">
      <summary>
        <para>Empties the list objects registered with the current 
   <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.InitializeLifetimeService">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" />, providing a lease for the
   current object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> for the current object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ClientSponsor.Finalize">
      <summary>
        <para>Frees the resources of the current <see cref="T:System.Runtime.Remoting.Lifetime.ClientSponsor" /> before the garbage
   collector reclaims them.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ClientSponsor.RenewalTime">
      <summary>
        <para>Gets or sets the <see cref="T:System.TimeSpan" /> by which to increase the lifetime of the sponsored 
   objects when renewal is requested.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.WellKnownObjectMode">
      <summary>
        <para> Defines
 how well-known objects are activated.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.WellKnownObjectMode.Singleton">
      <summary>
        <para>Every 
       incoming message is serviced by the same object instance.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.WellKnownObjectMode.SingleCall">
      <summary>
        <para>Every incoming 
       message is serviced by a new object instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannel">
      <summary>
        <para> Provides conduits for messages that cross remoting
 boundaries.
 </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannel.Parse(System.String,System.String@)">
      <summary>
        <para>Returns the object URI as an out parameter, and the URI
 of the current channel as the return value.</para>
      </summary>
      <param name="url">The URL of the object.</param>
      <param name=" objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the object URI. This parameter is passed uninitialized.</param>
      <returns>
        <para>The URI of the current channel, or <see langword="null " />if the URI does not belong to this channel.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannel.ChannelPriority">
      <summary>
        <para>Gets the priority of the channel.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannel.ChannelName">
      <summary>
        <para>Gets the name of the channel.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannelSender">
      <summary>
        <para> Provides required functions and properties for the sender
      channels.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>
        <para>Returns a channel message sink that delivers messages to the specified URL
 or channel data object. </para>
      </summary>
      <param name="url">The URL to which the new sink will deliver messages. Can be <see langword="null" /> .</param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be <see langword="null" /> .</param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
      <returns>
        <para>A channel message sink that delivers messages to the
 specified URL or channel data object, or <see langword="null " /> if the
 channel cannot connect to the given endpoint.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannelReceiver">
      <summary>
        <para>Provides required functions and properties for the receiver channels. </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri(System.String)">
      <summary>
        <para> Returns an array of all the URLs for a
 URI.</para>
      </summary>
      <param name="objectURI">The URI for which URLs are required. </param>
      <returns>
        <para>An array of the URLs.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.StartListening(System.Object)">
      <summary>
        <para> Instructs the current channel to start listening for requests.</para>
      </summary>
      <param name="data">Optional initialization information.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.StopListening(System.Object)">
      <summary>
        <para> Instructs the
 current channel to stop listening for requests.</para>
      </summary>
      <param name="data">Optional state information for the channel.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData">
      <summary>
        <para> Gets the channel-specific data.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider">
      <summary>
        <para> Creates server channel sinks for the server channel through which
 remoting messages flow.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>
        <para> Returns the channel data for the channel that the
 current sink is associated with.</para>
      </summary>
      <param name="channelData">An <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> object in which the channel data is to be returned.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>
        <para>Creates a sink chain.
 </para>
      </summary>
      <param name="channel">The channel for which to create the channel sink chain.</param>
      <returns>
        <para>The first sink of the newly formed channel sink chain, or
 <see langword="null" /> , indicating that this provider will not or cannot provide
 a connection for this endpoint. </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next">
      <summary>
        <para>
      Gets or sets the
      next sink provider in the channel sink provider chain.
   
			</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IServerChannelSink">
      <summary>
        <para>Provides methods used for security and transport sinks.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannelSinkBase">
      <summary>
        <para>Provides the base interface for channel sinks.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelSinkBase.Properties">
      <summary>
        <para>Gets a dictionary through which properties on the sink
 can be accessed.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>
        <para> Requests message processing from the current sink.</para>
      </summary>
      <param name="sinkStack">A stack of channel sinks that called the current sink.</param>
      <param name="requestMsg">The message that contains the request.</param>
      <param name="requestHeaders">Headers retrieved from the incoming message from the client.</param>
      <param name="requestStream">The stream that needs to be to processed and passed on to the deserialization sink.</param>
      <param name="responseMsg">When this method returns, contains an <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that holds the response message. This parameter is passed uninitialized.</param>
      <param name="responseHeaders">When this method returns, contains an <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> that holds the headers that are to be added to return message heading to the client. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> that is heading back to the transport sink. This parameter is passed uninitialized. </param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> status value
   that provides information about how message was processed.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>
        <para>Requests processing from the current sink of the response from a method call
 sent asynchronously.</para>
      </summary>
      <param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
      <param name="state">Information generated on the request side that is associated with this sink.</param>
      <param name="msg">The response message.</param>
      <param name="headers">The headers to add to the return message heading to the client.</param>
      <param name="stream">The stream heading back to the transport sink.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>
        <para>Returns the <see cref="T:System.IO.Stream" /> onto which the provided
 response message is to be serialized.</para>
      </summary>
      <param name="sinkStack">A stack of sinks leading back to the server transport sink.</param>
      <param name=" state">The state that has been pushed to the stack by this sink.</param>
      <param name=" msg">The response message to serialize. </param>
      <param name=" headers">The headers to put in the response stream to the client.</param>
      <returns>
        <para>The <see cref="T:System.IO.Stream" /> onto which the provided
 response message is to be serialized.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink">
      <summary>
        <para>Gets the next server channel sink in the server sink chain.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Services.EnterpriseServicesHelper">
      <summary>
        <para>Provides APIs needed for communication and operation
      with unmanaged classes outside of the <see cref="T:System.AppDomain" /> . This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.EnterpriseServicesHelper.WrapIUnknownWithComObject(System.IntPtr)">
      <summary>
        <para>Wraps the specified <see langword="IUnknown" /> COM interface with a <see topic="cpconruntimecallablewrapper" />
(RCW).</para>
      </summary>
      <param name="punk">A pointer to the <see langword="IUnknown" /> COM interface to wrap.</param>
      <returns>
        <para> The RCW where the specified
   <see langword="IUnknown" />
   is wrapped. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Services.EnterpriseServicesHelper.CreateConstructionReturnMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage,System.MarshalByRefObject)">
      <summary>
        <para>Constructs a <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> from the
   specified <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> .</para>
      </summary>
      <param name="ctorMsg">A construction call to the object from which the new <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> instance is returning.</param>
      <param name=" retObj">An <see cref="T:System.Runtime.Remoting.ObjRef" /> representing the object constructed with the construction call in <paramref name="ctorMsg" /> .</param>
      <returns>
   An <see cref="T:System.Runtime.Remoting.Activation.IConstructionReturnMessage" /> returned from the
   construction call specified in the <paramref name="ctorMsg" /> parameter.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Services.EnterpriseServicesHelper.SwitchWrappers(System.Runtime.Remoting.Proxies.RealProxy,System.Runtime.Remoting.Proxies.RealProxy)">
      <summary>
        <para>Switches a <see topic="cpconcomcallablewrapper" /> (CCW) from
   one instance of a class to another instance of the same class.</para>
      </summary>
      <param name="oldcp">A proxy representing the old instance of a class referenced by a CCW.</param>
      <param name=" newcp">A proxy representing the new instance of a class referenced by a CCW.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.Header">
      <summary>
        <para> Defines the out-of-band data for a call.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.Header.#ctor(System.String,System.Object)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> class with the given name and value. 
</para>
      </summary>
      <param name="_Name">The name of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> . </param>
      <param name="_Value">The object that contains the value for the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> . </param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.Header.#ctor(System.String,System.Object,System.Boolean)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> class with the given name, value, and additional configuration information.
   </para>
      </summary>
      <param name="_Name">The name of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> . </param>
      <param name="_Value">The object that contains the value for the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> . </param>
      <param name="_MustUnderstand">Indicates whether the receiving end must understand the out-of-band data. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.Header.#ctor(System.String,System.Object,System.Boolean,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> class.</para>
      </summary>
      <param name="_Name">The name of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> .</param>
      <param name=" _Value">The object that contains the value of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> .</param>
      <param name=" _MustUnderstand">Indicates whether the receiving end must understand out-of-band data.</param>
      <param name=" _HeaderNamespace">The <see cref="T:System.Runtime.Remoting.Messaging.Header" /> XML namespace.</param>
    </member>
    <member name="F:System.Runtime.Remoting.Messaging.Header.Name">
      <summary>
        <para> Contains the name of the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> .
   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Messaging.Header.Value">
      <summary>
        <para>Contains the value for the <see cref="T:System.Runtime.Remoting.Messaging.Header" /> . </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Messaging.Header.MustUnderstand">
      <summary>
        <para> Indicates whether the receiving end must understand the out-of-band data.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Messaging.Header.HeaderNamespace">
      <summary>
        <para>Indicates the XML namespace that the current <see cref="T:System.Runtime.Remoting.Messaging.Header" /> belongs to.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.HeaderHandler">
      <summary>
        <para>Represents the method that will handle processing of headers on the stream
      during deserialization.</para>
      </summary>
      <param name="headers">The headers of the event. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Activation.ActivatorLevel">
      <summary>
        <para>Defines the appropriate position for an <see cref="T:System.Activator" /> in the chain of activators.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Activation.ActivatorLevel.Construction">
      <summary>
        <para>Constructs a blank object and runs the constructor.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Activation.ActivatorLevel.Context">
      <summary>
        <para>Finds or creates a suitable context.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Activation.ActivatorLevel.AppDomain">
      <summary>
        <para>Finds or creates an <see cref="T:System.AppDomain" /> .</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Activation.ActivatorLevel.Process">
      <summary>
        <para>Starts a process.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Activation.ActivatorLevel.Machine">
      <summary>
        <para>Finds a suitable computer.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Activation.IConstructionCallMessage">
      <summary>
        <para>Represents the construction call request of an object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.Activator">
      <summary>
        <para> Gets or sets the activator that
      activates the remote object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.CallSiteActivationAttributes">
      <summary>
        <para>Gets the call site activation attributes.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.ActivationTypeName">
      <summary>
        <para> Gets the full type name of the remote type to activate.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.ActivationType">
      <summary>
        <para>Gets the type of the remote object to activate.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.IConstructionCallMessage.ContextProperties">
      <summary>
        <para>Gets a list of context properties that define the context in which the object is
      to be created.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Activation.IConstructionReturnMessage">
      <summary>
        <para>Identifies an <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" /> 
that is returned after attempting to activate a remote object.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage">
      <summary>
        <para>Defines the method call return message interface.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodReturnMessage.GetOutArgName(System.Int32)">
      <summary>
        <para> Returns the name of the specified argument marked as a
   <see langword="ref" /> or an <see langword="out" /> parameter.</para>
      </summary>
      <param name="index">The number of the requested argument name.</param>
      <returns>
        <para> The argument name, or
   <see langword="null" /> if the current method is not implemented.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMethodReturnMessage.GetOutArg(System.Int32)">
      <summary>
        <para>Returns the specified argument marked as a
   <see langword="ref" /> or an <see langword="out" /> parameter.</para>
      </summary>
      <param name="argNum">The number of the requested argument.</param>
      <returns>
        <para>The specified argument marked as a <see langword="ref" /> or an <see langword="out" /> parameter.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodReturnMessage.OutArgCount">
      <summary>
        <para>Gets the number of arguments in the method call marked 
      as <see langword="ref" /> or <see langword="out" /> parameters.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodReturnMessage.OutArgs">
      <summary>
        <para>Returns the specified argument marked as a
   <see langword="ref" /> or an <see langword="out" /> parameter.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodReturnMessage.Exception">
      <summary>
   Gets the exception thrown during the method call.
</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.IMethodReturnMessage.ReturnValue">
      <summary>
        <para>Gets the return value of the method call.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannelReceiverHook">
      <summary>
        <para> Indicates that the implementing channel
      wants to hook into the outside listener service.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IChannelReceiverHook.AddHookChannelUri(System.String)">
      <summary>
        <para>Adds a URI on which the channel hook will listen.</para>
      </summary>
      <param name="channelUri">A URI on which the channel hook will listen.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelReceiverHook.ChannelScheme">
      <summary>
 Gets the type of listener to hook into.
</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelReceiverHook.WantsToListen">
      <summary>
        <para>Gets a Boolean value indicating whether <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> needs to be hooked into the
 outside listener service. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelReceiverHook.ChannelSinkChain">
      <summary>
        <para> Gets the channel sink chain that the current channel is using.
      </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider">
      <summary>
        <para> Creates client channel sinks for the client channel through which remoting
 messages flow.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
      <summary>
        <para>Creates
      a sink chain.</para>
      </summary>
      <param name="channel">Channel for which the current sink chain is being constructed. </param>
      <param name="url">The URL of the object to connect to. This parameter can be <see langword="null" /> if the connection is based entirely on the information contained in the <paramref name="remoteChannelData" /> parameter. </param>
      <param name="remoteChannelData">
        <para>A channel data object describing a channel on the remote server. </para>
      </param>
      <returns>
        <para> The first sink of the newly formed channel sink chain,
      or <see langword="null" /> indicating that this provider will not or cannot provide a connection for this endpoint.
      </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IClientChannelSinkProvider.Next">
      <summary>
        <para>
      Gets or sets the
      next sink provider in the channel sink provider chain.
   
			</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientFormatterSinkProvider">
      <summary>
        <para>Marks a client channel sink provider as a client
      formatter sink provider.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IServerFormatterSinkProvider">
      <summary>
        <para>Marks a server channel sink provider as a server
      formatter sink provider.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientChannelSink">
      <summary>
        <para>Provides required functions and properties for client channel sinks.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>
        <para> Requests message processing from the current sink. </para>
      </summary>
      <param name=" msg">The message to process.</param>
      <param name=" requestHeaders">The headers to add to the outgoing message heading to the server.</param>
      <param name=" requestStream">The stream headed to the transport sink.</param>
      <param name=" responseHeaders">When this method returns, contains an <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> interface that holds the headers that the server returned. This parameter is passed uninitialized.</param>
      <param name=" responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> coming back from the transport sink. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>
        <para>Requests asynchronous processing of a method call on the current sink.</para>
      </summary>
      <param name="sinkStack">A stack of channel sinks that called this sink.</param>
      <param name=" msg">The message to process.</param>
      <param name=" headers">The headers to add to the outgoing message heading to the server.</param>
      <param name=" stream">The stream headed to the transport sink.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>
        <para>Requests asynchronous processing of a response to a method call on the
 current sink.</para>
      </summary>
      <param name="sinkStack">A stack of sinks that called this sink.</param>
      <param name=" state">Information generated on the request side that is associated with this sink.</param>
      <param name=" headers">The headers retrieved from the server response stream.</param>
      <param name=" stream">The stream coming back from the transport sink.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>
        <para>Returns the <see cref="T:System.IO.Stream" /> onto which
 the provided message is to be serialized.</para>
      </summary>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> containing details about the method call.</param>
      <param name="headers">The headers to add to the outgoing message heading to the server.</param>
      <returns>
        <para>The <see cref="T:System.IO.Stream" /> onto which the provided
 message is to be serialized.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IClientChannelSink.NextChannelSink">
      <summary>
        <para>Gets the next client channel sink in the client sink chain.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ServerProcessing">
      <summary>
        <para>Indicates the status of the server message processing.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.Complete">
      <summary>
        <para>The server synchronously processed the message.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.OneWay">
      <summary>
        <para>The message was dispatched and no response can be sent.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.Async">
      <summary>
        <para>The call was dispatched asynchronously, which
 indicates that the sink must store response data on the stack for later processing.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IClientFormatterSink">
      <summary>
        <para>Marks a sink as a client formatter sink that serializes
 messages into a stream.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IChannelDataStore">
      <summary>
        <para>Stores channel data for the remoting channels.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelDataStore.ChannelUris">
      <summary>
        <para> Gets an array of channel URIs to which the current channel maps.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.IChannelDataStore.Item(System.Object)">
      <summary>
        <para>Gets or sets the data object associated with the
 specified key for the implementing channel.</para>
      </summary>
      <param name="key"> The key the data object is associated with.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ChannelDataStore">
      <summary>
        <para>Stores channel data for the remoting channels.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ChannelDataStore.#ctor(System.String[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> class
   with the URIs that the current channel maps to.</para>
      </summary>
      <param name="channelURIs"> An array of channel URIs that the current channel maps to.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.ChannelDataStore.ChannelUris">
      <summary>
        <para> Gets or sets an array of channel URIs that the
      current channel maps to.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.ChannelDataStore.Item(System.Object)">
      <summary>
        <para>Gets or sets the data object associated with the
 specified key for the implementing channel.</para>
      </summary>
      <param name="key"> The key the data object is associated with.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.ITransportHeaders">
      <summary>
        <para> Stores a collection of headers used in the channel sinks.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.ITransportHeaders.GetEnumerator">
      <summary>
        <para>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over all
   entries in the <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IEnumerator" /> that iterates over all entries in the
<see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> object.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.ITransportHeaders.Item(System.Object)">
      <summary>
        <para>Gets or sets a transport header associated with the given key.</para>
      </summary>
      <param name="key"> The key the requested transport header is associated with.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.TransportHeaders">
      <summary>
        <para> Stores a collection of headers used in the channel sinks.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.TransportHeaders.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.TransportHeaders" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.TransportHeaders.GetEnumerator">
      <summary>
        <para>Returns an enumerator of the stored transport headers.</para>
      </summary>
      <returns>
        <para>An enumerator of the stored transport headers.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.TransportHeaders.Item(System.Object)">
      <summary>
        <para>Gets or sets a transport header that is associated with
      the given key.</para>
      </summary>
      <param name="key">The <see cref="T:System.String" /> that the requested header is associated with.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SinkProviderData">
      <summary>
        <para>Stores sink provider data for sink providers.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SinkProviderData.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> class.</para>
      </summary>
      <param name="name"> The name of the sink provider that the data in the current <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> object is associated with.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SinkProviderData.Name">
      <summary>
        <para> Gets the name of the sink provider that the data
 in the current <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" />
 object is associated with.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SinkProviderData.Properties">
      <summary>
        <para>Gets a dictionary through which properties on the sink provider
 can be accessed.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SinkProviderData.Children">
      <summary>
        <para>Gets a list of the child <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> nodes.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties">
      <summary>
        <para>Provides a base implementation for channel sinks that
      want to expose a dictionary interface to their properties.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties">
      <summary>
        <para>Provides a base implementation of a channel object that wants to provide a dictionary interface to
 its properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Contains(System.Object)">
      <summary>
        <para> Returns a Boolean value indicating whether the current
      channel object contains a property associated with the specified key.</para>
      </summary>
      <param name="key">The key the requested property is associated with.</param>
      <returns>
        <para>A Boolean value indicating whether the current channel object contains a
      property associated with the specified key.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Add(System.Object,System.Object)">
      <summary>
        <para>The current method must not be implemented because it
 does not apply to the way <see cref="T:System.Collections.IDictionary" /> is being used in this case, and because
 <see cref="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize" /> returns
 <see langword="true" /> .</para>
      </summary>
      <param name="key">Indicates the key associated with the object contained in the <paramref name="value" /> parameter.</param>
      <param name=" value"> Indicates the value to add.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Clear">
      <summary>
        <para>The current method must not be implemented because it
 does not apply to the way <see cref="T:System.Collections.IDictionary" /> is being used in this case, and because
 <see cref="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize" /> returns
 <see langword="true" /> .</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Remove(System.Object)">
      <summary>
        <para>The current method must not be implemented because it
 does not apply to the way <see cref="T:System.Collections.IDictionary" /> is being used in this case, and because
 <see cref="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize" /> returns
 <see langword="true" /> .</para>
      </summary>
      <param name="key"> The key that the object being removed is associated with.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.GetEnumerator">
      <summary>
        <para> Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that enumerates over all the properties
   associated with the current channel object.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.Collections.IDictionaryEnumerator" /> that enumerates over all
   the properties associated with the current channel object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.CopyTo(System.Array,System.Int32)">
      <summary>
        <para>The current method is not supported by the <see cref="T:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties" /> .</para>
      </summary>
      <param name="array">The array to copy the properties to.</param>
      <param name=" index"> The index where to begin copying.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Properties">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IDictionary" /> of the channel properties
   associated with the current channel object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Item(System.Object)">
      <summary>
        <para>Gets or sets the property associated with the specified key.</para>
      </summary>
      <param name="key">The key the requested property is associated with.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Keys">
      <summary>
        <para>When implemented by a derived class, gets an <see cref="T:System.Collections.ICollection" /> of keys that the channel
   object properties are associated with.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Values">
      <summary>
        <para> Gets an <see cref="T:System.Collections.ICollection" />
of the values of the properties associated with the current channel object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsReadOnly">
      <summary>
        <para> Gets a Boolean value
 indicating whether the collection of properties in the current channel object is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsFixedSize">
      <summary>
        <para> Gets a Boolean value indicating
 whether the number of properties that can be entered into the current channel
 object is fixed.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.Count">
      <summary>
        <para> Gets the number of properties
      associated with the current channel object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.SyncRoot">
      <summary>
        <para> Gets an object that is used to synchronize access to
 the <see cref="T:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties.IsSynchronized">
      <summary>
        <para> Gets a value indicating whether the current dictionary of channel
 object properties is synchronized.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties" /> class.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BaseChannelWithProperties">
      <summary>
        <para>Provides a base implementation for channels that want to expose a dictionary 
      interface to their properties.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.BaseChannelWithProperties.SinksWithProperties">
      <summary>
        <para>Indicates the top channel sink in the channel sink stack.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BaseChannelWithProperties.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BaseChannelWithProperties" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BaseChannelWithProperties.Properties">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IDictionary" /> of the channel properties
   associated with the current channel object.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Lifetime.ILease">
      <summary>
        <para> Defines a lifetime lease object that is used by the remoting
      lifetime service.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)">
      <summary>
        <para> Registers a sponsor for the lease, and renews it by the 
      specified <see cref="T:System.TimeSpan" />
      .</para>
      </summary>
      <param name=" obj">The callback object of the sponsor.</param>
      <param name="renewalTime">The length of time to renew the lease by.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor)">
      <summary>
        <para>Registers a sponsor for the lease without renewing the 
      lease.</para>
      </summary>
      <param name="obj">The callback object of the sponsor. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)">
      <summary>
        <para>Removes a sponsor from the sponsor list.</para>
      </summary>
      <param name="obj">The lease sponsor to unregister.</param>
      <returns>
        <para> After this method is called, the lease state changes to expired and
      the object is collected by the garbage collector.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan)">
      <summary>
        <para>Renews a lease for the specified time.</para>
      </summary>
      <param name="renewalTime">The length of time to renew the lease by.</param>
      <returns>
        <para> The new expiration time of the lease.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ILease.RenewOnCallTime">
      <summary>
        <para>Gets or sets the amount of time by which a call to the 
      remote object increases the <see cref="P:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime" />
      .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ILease.SponsorshipTimeout">
      <summary>
        <para>Gets or sets the amount of time to wait
      for a sponsor to return with a lease renewal time.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ILease.InitialLeaseTime">
      <summary>
        <para>Gets or sets the initial time for the lease.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ILease.CurrentLeaseTime">
      <summary>
        <para> Gets the amount of time remaining on the lease.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.ILease.CurrentState">
      <summary>
        <para>Gets the current <see cref="T:System.Runtime.Remoting.Lifetime.LeaseState" /> of the lease.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IMessageCtrl">
      <summary>
        <para> Provides a way to control asynchronous messages after
      they have dispatched using the <see cref="M:System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)" qualify="true" />
      .
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IMessageCtrl.Cancel(System.Int32)">
      <summary>
        <para> Cancels an asynchronous call.
      </para>
      </summary>
      <param name="msToCancel">The number of milliseconds after which to cancel the message. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.IRemotingFormatter">
      <summary>
        <para>Provides the remote procedure call (RPC) interface for all formatters.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IRemotingFormatter.Deserialize(System.IO.Stream,System.Runtime.Remoting.Messaging.HeaderHandler)">
      <summary>
        <para>Begins the deserialization process of a remote procedure call (RPC).</para>
      </summary>
      <param name="serializationStream">The <see cref="T:System.IO.Stream" /> from which the data is deserialized. </param>
      <param name="handler">The delegate designed to handle <see cref="T:System.Runtime.Remoting.Messaging.Header" /> objects. Can be <see langword="null" /> . </param>
      <returns>
        <para> The root of the deserialized object graph.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.IRemotingFormatter.Serialize(System.IO.Stream,System.Object,System.Runtime.Remoting.Messaging.Header[])">
      <summary>
        <para> Starts the serialization process of a remote procedure call (RPC).
      </para>
      </summary>
      <param name="serializationStream">The <see cref="T:System.IO.Stream" /> onto which the specified graph is serialized. </param>
      <param name="graph">The root of the object graph to be serialized. </param>
      <param name="headers">The array of <see cref="T:System.Runtime.Remoting.Messaging.Header" /> objects to transmit with the graph specified by the <paramref name="graph " /> parameter. Can be <see langword="null" /> . </param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.Lease.InitializeLifetimeService">
      <summary>
        <para>
        This 
          method is used return a lifetime service object. This method can be overridden
          to return a LifetimeService object with properties unique to this object. For
          the default Lifetime service this will be an object of type ILease.
      </para>
      </summary>
      <returns>
        <para>
        Returns 
             an Object to control lifetime Service.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.Lease.Register(System.Runtime.Remoting.Lifetime.ISponsor)">
      <summary>
        <para>
        Register 
          a sponsor for the lease with no renewal time.
      </para>
      </summary>
      <param name="obj">
       The sponsor that should be registered
    </param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.Lease.Register(System.Runtime.Remoting.Lifetime.ISponsor,System.TimeSpan)">
      <summary>
        <para>
        Register 
          a sponsor for the lease with a renewal time.
      </para>
      </summary>
      <param name=" obj">
       The sponsor to register
    </param>
      <param name="renewalTime">
       The renewal time of the lease
    </param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.Lease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor)">
      <summary>
        <para>
        Unregister 
          a sponsor for the leae.
      </para>
      </summary>
      <param name="sponsor">
       The sponsor that should be unregistered
    </param>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.Lease.Renew(System.TimeSpan)">
      <summary>
        <para>
       Renew the lease for the specified time.
    </para>
      </summary>
      <param name="renewalTime">
    The new lease time
 </param>
      <returns>
        <para>
       The leases expiration time is returned to the caller
    </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.Lease.RenewOnCallTime">
      <summary>
      Initial 
       renew on call time span for appdomain.
    </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.Lease.SponsorshipTimeout">
      <summary>
      
       Initial sponsorshiptimeout for appdomain.
    </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.Lease.InitialLeaseTime">
      <summary>
       Initial Lease Time span for appdomain.
    </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.Lease.CurrentLeaseTime">
      <summary>
        <para>
       The amount of time remaining on the lease.
    </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.Lease.CurrentState">
      <summary>
        <para>
       The current state of the lease. See ILease for the different lease
       states.
    </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.LeaseSink.#ctor(System.Runtime.Remoting.Lifetime.Lease,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>
       ??????????????????????????????
    </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.LeaseSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para>
       ???????????????????????
    </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Lifetime.LeaseSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>
       ???????????????????????????
    </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.LeaseSink.NextSink">
      <summary>
        <para>
       ??????????????????????????????
    </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Lifetime.LeaseState">
      <summary>
        <para>Indicates the possible lease states of a lifetime lease.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Lifetime.LeaseState.Null">
      <summary>
        <para>The lease is not initialized.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Lifetime.LeaseState.Initial">
      <summary>
        <para>The lease has been created, but is not yet active.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Lifetime.LeaseState.Active">
      <summary>
        <para>The lease is active and has not expired.
   </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Lifetime.LeaseState.Renewing">
      <summary>
        <para> The lease has expired and is seeking sponsorship.
      </para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Lifetime.LeaseState.Expired">
      <summary>
        <para>The lease has expired and cannot be renewed.
   </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Lifetime.LifetimeServices">
      <summary>
        <para>Controls the .NET remoting lifetime services.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime">
      <summary>
        <para> Gets or sets the initial lease time span for an <see cref="T:System.AppDomain" />
.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime">
      <summary>
        <para> Gets or sets the amount of time by which the lease
      is extended every time a call comes in on the server object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout">
      <summary>
        <para>Gets or sets the amount of time the lease manager waits for a sponsor to
      return with a lease renewal time.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime">
      <summary>
        <para> Gets or sets the time interval between each activation of
      the lease
      manager to clean up expired leases.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.Message.GetInArgName(System.Int32)">
      <summary>
        <para>
       Return the name of a specific argument.
    </para>
      </summary>
      <param name="index">
    0-based index of argument name to get.
 </param>
      <returns>
        <para>
       Return the name of a specific argument. A string representing the
       name of the argument specified or null
       if this method is not implemented. IMessage Dictionary property key "__Args"
       via array object.
    </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.Message.InArgCount">
      <summary>
        <para>
       The number of arguments.
    </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.ReturnMessage">
      <summary>
        <para> Holds a message returned in response to a method call on
      a remote object.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.#ctor(System.Object,System.Object[],System.Int32,System.Runtime.Remoting.Messaging.LogicalCallContext,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> class with all the
   information returning to the caller after the method call.</para>
      </summary>
      <param name="ret">The object returned by the invoked method from which the current <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> instance originated.</param>
      <param name=" outArgs">The objects returned from the invoked method as <see langword="out" /> parameters.</param>
      <param name=" outArgsCount">The number of <see langword="out" /> parameters returned from the invoked method.</param>
      <param name=" callCtx">The <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> of the method call.</param>
      <param name=" mcm">The original method call to the invoked method.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.#ctor(System.Exception,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> class.</para>
      </summary>
      <param name="e">The exception that was thrown during execution of the remotely called method.</param>
      <param name=" mcm">An <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> with which to create an instance of the <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> class.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.GetArg(System.Int32)">
      <summary>
        <para>Returns a specified argument passed to the remote method
      during the method call.</para>
      </summary>
      <param name="argNum"> The zero-based index of the requested argument.</param>
      <returns>
        <para>An argument passed to the remote method during the method call.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.GetArgName(System.Int32)">
      <summary>
        <para>Returns the name of a specified method argument.</para>
      </summary>
      <param name="index"> The zero-based index of the requested argument name.</param>
      <returns>
        <para>The name of a specified method argument.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.GetOutArg(System.Int32)">
      <summary>
        <para>Returns the object passed as an
   <see langword="out" /> or <see langword="ref " />parameter during the remote method call.</para>
      </summary>
      <param name="argNum"> The zero-based index of the requested <see langword="out" />or <see langword="ref" /> parameter.</param>
      <returns>
        <para>The object passed as an <see langword="out" /> or <see langword="ref " />parameter during the remote method call.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.ReturnMessage.GetOutArgName(System.Int32)">
      <summary>
        <para> Returns the name of a specified <see langword="out " />or
<see langword="ref " /> parameter passed to the remote method.
   </para>
      </summary>
      <param name="index"> The zero-based index of the requested argument. </param>
      <returns>
        <para>A string representing the name of the
      specified <see langword="out" /> or <see langword="ref " />
      parameter, or <see langword="null" /> if the current method is not implemented.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.Uri">
      <summary>
        <para> Gets or sets the URI of the remote object on which the
      remote method was called.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.MethodName">
      <summary>
        <para>Gets the name of the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.TypeName">
      <summary>
        <para> Gets the name of the type on which the remote
      method was called.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.MethodSignature">
      <summary>
        <para>Gets an array of <see cref="T:System.Type" /> objects containing the method signature.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.MethodBase">
      <summary>
        <para>Gets the <see cref="T:System.Reflection.MethodBase" /> of the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.HasVarArgs">
      <summary>
        <para>Gets a value indicating whether the called method accepts
      a variable number of arguments.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.ArgCount">
      <summary>
        <para>Gets the number of arguments of the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.Args">
      <summary>
        <para>Gets a specified argument passed to the method called on
      the remote object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.OutArgCount">
      <summary>
        <para> Gets the number of <see langword="out" /> or 
<see langword="ref " /> arguments on the called method.
   </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.OutArgs">
      <summary>
        <para>Gets a specified object passed as an 
   <see langword="out" /> or <see langword="ref" /> parameter to 
      the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.Exception">
      <summary>
        <para> Gets the exception that was thrown during the remote method call.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.ReturnValue">
      <summary>
        <para>Gets the object returned by the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.Properties">
      <summary>
        <para>Gets an <see cref="T:System.Collections.IDictionary" /> of properties contained in
   the current <see cref="T:System.Runtime.Remoting.Messaging.ReturnMessage" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.ReturnMessage.LogicalCallContext">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> of the called method.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.StackBasedReturnMessage.GetOutArgName(System.Int32)">
      <summary>
        <para>
       Return the name of a specific out argument.
    </para>
      </summary>
      <param name="index">
    The 0-based index of the argument to get.
 </param>
      <returns>
        <para>
       Return the name of a specific out argument. A string representing
       the name of the out argument specified or null
       if this method is not implemented. IMessage Dictionary property key "__OutArgs"
       via array object.
    </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.StackBasedReturnMessage.OutArgCount">
      <summary>
        <para>
       The number of out arguments.
    </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.IFieldInfo">
      <summary>
        <para>Allows access to field names and field types of objects
      that support the <see cref="T:System.Runtime.Serialization.ISerializable" />
      interface.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.IFieldInfo.FieldNames">
      <summary>
        <para> Gets or sets the field names of serialized objects.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.IFieldInfo.FieldTypes">
      <summary>
        <para>Gets or sets the field types of the serialized objects.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.ObjectHandle">
      <summary>
        <para>Wraps marshal by value object references, allowing
      them to be returned through an indirection.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
      <summary>
        <para>Initializes an instance of the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> class, wrapping the given object
<paramref name="o" /> .</para>
      </summary>
      <param name="o">The object that is wrapped by the new <see cref="T:System.Runtime.Remoting.ObjectHandle" /> .</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
      <summary>
        <para>Returns the wrapped object.</para>
      </summary>
      <returns>
        <para>The wrapped object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService">
      <summary>
        <para>Initializes the lifetime lease of the wrapped object.</para>
      </summary>
      <returns>
        <para>An initialized <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> that allows
   you to control the lifetime of the wrapped object.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.IRemotingTypeInfo">
      <summary>
        <para> Provides type information for an object.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.IRemotingTypeInfo.CanCastTo(System.Type,System.Object)">
      <summary>
        <para> Checks whether the proxy representing the specified 
      object type can be cast to the type represented by the <see cref="T:System.Runtime.Remoting.IRemotingTypeInfo" /> interface.</para>
      </summary>
      <param name="fromType">The type to cast to. </param>
      <param name=" o">The object for which to check casting.</param>
      <returns>
        <para>
          <see langword="true " />if cast will 
   succeed; otherwise,
<see langword="false" /> .
   </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.IRemotingTypeInfo.TypeName">
      <summary>
        <para> Gets or sets the fully-qualified type name of the server
      object in an <see cref="T:System.Runtime.Remoting.ObjRef" /> .
      </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.IChannelInfo">
      <summary>
        <para> Provides custom channel information that is carried along with
 the <see cref="T:System.Runtime.Remoting.ObjRef" />.
 </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.IChannelInfo.ChannelData">
      <summary>
        <para> Gets and sets the channel data for each channel.
      </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.IEnvoyInfo">
      <summary>
        <para>Provides envoy information.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.IEnvoyInfo.EnvoySinks">
      <summary>
        <para>Gets or sets the list of envoys that were contributed by 
      the server context and object chains when the object was marshaled.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.ObjRef">
      <summary>
        <para>Stores all relevant information required to generate a proxy in order
      to communicate with a remote object.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.#ctor(System.MarshalByRefObject,System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class to reference a specified <see cref="T:System.MarshalByRefObject" /> of a
   specified <see cref="T:System.Type" />
   .</para>
      </summary>
      <param name="o">The object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> instance will reference.</param>
      <param name=" requestedType">The <see cref="T:System.Type" /> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef" /> instance will reference.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ObjRef" />
class from serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name=" context">The contextual information about the source or destination of the exception. </param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize 
   the current <see cref="T:System.Runtime.Remoting.ObjRef" /> instance.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name=" context">The contextual information about the source or destination of the serialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Returns a reference to the remote object that the
      <see cref="T:System.Runtime.Remoting.ObjRef" /> describes.</para>
      </summary>
      <param name="context">The context where the current object resides.</param>
      <returns>
        <para>A reference to the remote object that the <see cref="T:System.Runtime.Remoting.ObjRef" /> describes.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class with default 
   values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.IsFromThisProcess">
      <summary>
        <para>Returns a Boolean value indicating whether the current
   <see cref="T:System.Runtime.Remoting.ObjRef" /> instance references an object
      located in the current process.</para>
      </summary>
      <returns>
        <para>A Boolean value indicating whether the current
   <see cref="T:System.Runtime.Remoting.ObjRef" /> instance references an object
      located in the current process.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.ObjRef.IsFromThisAppDomain">
      <summary>
        <para>Returns a Boolean value indicating whether the current
 <see cref="T:System.Runtime.Remoting.ObjRef" /> instance references an object
 located in the current <see cref="T:System.AppDomain" /> .</para>
      </summary>
      <returns>
        <para>A Boolean value indicating whether the current
 <see cref="T:System.Runtime.Remoting.ObjRef" /> instance references an object
 located in the current <see cref="T:System.AppDomain" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.ObjRef.URI">
      <summary>
        <para> Gets or sets the URI of the
      specific object instance.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ObjRef.TypeInfo">
      <summary>
        <para> Gets or sets the <see cref="T:System.Runtime.Remoting.IRemotingTypeInfo" /> for the
 object that
 the <see cref="T:System.Runtime.Remoting.ObjRef" />
 describes.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ObjRef.EnvoyInfo">
      <summary>
        <para>Gets or sets the <see cref="T:System.Runtime.Remoting.IEnvoyInfo" /> for the <see cref="T:System.Runtime.Remoting.ObjRef" />.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ObjRef.ChannelInfo">
      <summary>
        <para> Gets or sets the <see cref="T:System.Runtime.Remoting.IChannelInfo" /> for the <see cref="T:System.Runtime.Remoting.ObjRef" />.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.OneWayAttribute">
      <summary>
        <para>Marks a method as one way, without a return value and <see langword="out " />or
<see langword="ref" /> parameters.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Proxies.ProxyAttribute">
      <summary>
        <para> Indicates that an object type requires a custom proxy.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.ProxyAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Proxies.ProxyAttribute" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.ProxyAttribute.CreateInstance(System.Type)">
      <summary>
        <para>Creates either an uninitialized
   <see cref="T:System.MarshalByRefObject" /> or a transparent proxy, depending on whether
      the specified type can exist in the current context.</para>
      </summary>
      <param name="serverType">The object type to create an instance of.</param>
      <returns>
        <para>An unitialized <see cref="T:System.MarshalByRefObject" /> or a transparent proxy.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.ProxyAttribute.CreateProxy(System.Runtime.Remoting.ObjRef,System.Type,System.Object,System.Runtime.Remoting.Contexts.Context)">
      <summary>
        <para>Creates an instance of a remoting proxy for a remote
      object described by the specified <see cref="T:System.Runtime.Remoting.ObjRef" /> , and located on the server.</para>
      </summary>
      <param name="objRef">The object reference to the remote object for which to create a proxy.</param>
      <param name=" serverType">The type of the server where the remote object is located.</param>
      <param name=" serverObject">The server object.</param>
      <param name=" serverContext">The context in which the server object is located.</param>
      <returns>
        <para>The new instance of remoting proxy for the remote object described in the
      specified <see cref="T:System.Runtime.Remoting.ObjRef" />.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Proxies.RealProxy">
      <summary>
        <para> Provides base functionality for proxies.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> class that represents a
   remote object of the specified
<see cref="T:System.Type" />.</para>
      </summary>
      <param name="classToProxy">The <see cref="T:System.Type" /> of the remote object for which to create a proxy.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor(System.Type,System.IntPtr,System.Object)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> class.</para>
      </summary>
      <param name="classToProxy">The <see cref="T:System.Type" /> of the remote object for which to create a proxy.</param>
      <param name=" stub">A stub to associate with the new proxy instance.</param>
      <param name=" stubData">The stub data to set for the specified stub and the new proxy instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.InitializeServerObject(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para>Initializes a new instance of the object <see cref="T:System.Type" /> of the remote
   object that the current instance of <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> represents
   with the specified <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> .</para>
      </summary>
      <param name="ctorMsg">A construction call message that contains the constructor parameters for the new instance of the remote object represented by the current <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" />. Can be <see langword="null" />.</param>
      <returns>
        <para>The result of the construction request.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetUnwrappedServer">
      <summary>
        <para>Returns the server object represented by the current proxy instance.</para>
      </summary>
      <returns>
        <para>The server object represented by the current proxy instance.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.DetachServer">
      <summary>
        <para>Detaches the current proxy instance from the remote
      server object that it represents.</para>
      </summary>
      <returns>
        <para>The detached server object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.AttachServer(System.MarshalByRefObject)">
      <summary>
        <para>Attaches the current proxy instance to the specified remote
   <see cref="T:System.MarshalByRefObject" /> .</para>
      </summary>
      <param name="s">The <see cref="T:System.MarshalByRefObject" /> that the current proxy instance represents.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.SetStubData(System.Runtime.Remoting.Proxies.RealProxy,System.Object)">
      <summary>
        <para>Sets the stub data for the specified proxy.</para>
      </summary>
      <param name="rp">The proxy for which to set stub data.</param>
      <param name=" stubData">The new stub data.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetStubData(System.Runtime.Remoting.Proxies.RealProxy)">
      <summary>
        <para>Retrieves stub data stored for the specified proxy.</para>
      </summary>
      <param name="rp">The proxy for which stub data is requested.</param>
      <returns>
        <para>Stub data for the specified proxy.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetProxiedType">
      <summary>
        <para>Returns the <see cref="T:System.Type" /> of the object that the current
   instance of <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> represents.</para>
      </summary>
      <returns>
        <para> The <see cref="T:System.Type" /> of the object that the current instance of <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> represents.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>
        <para>When overridden in a derived class, invokes the method
      specified in the provided <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> on the remote object
      represented by the current instance.</para>
      </summary>
      <param name="msg">An <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> containing an <see cref="T:System.Collections.IDictionary" /> of information about the method call. </param>
      <returns>
        <para>The message returned by the invoked method, containing the return value and any
   <see langword="out" /> or <see langword="ref" />
   parameters.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.CreateObjRef(System.Type)">
      <summary>
        <para> Creates an <see cref="T:System.Runtime.Remoting.ObjRef" /> for the specified object type,
   and registers it with the remoting infrastructure as a client-activated object.</para>
      </summary>
      <param name="requestedType"> The object type that an <see cref="T:System.Runtime.Remoting.ObjRef" /> is created for.</param>
      <returns>
        <para>A new instance of <see cref="T:System.Runtime.Remoting.ObjRef" /> created for
   the specified type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Adds the transparent proxy of the object represented by
      the current instance of <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> to the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> .</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> into which the transparent proxy is serialized.</param>
      <param name=" context">The source and destination of the serialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetCOMIUnknown(System.Boolean)">
      <summary>
        <para>Requests an unmanaged reference to the object represented by the current
      proxy instance.</para>
      </summary>
      <param name="fIsMarshalled">
        <see langword="true" /> if the object reference is requested for marshaling to a remote location; <see langword="false" /> if the object reference is requested for communication with unmanaged objects in the current process through COM.</param>
      <returns>
        <para>A pointer to a <see topic="cpconcomcallablewrapper" /> if the object reference is requested for
   communication with unmanaged objects in the current process through COM, or a
   pointer to a cached or newly generated <see langword="IUnknown" /> COM interface
   if the object reference is requested for marshaling to a remote
   location.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.SetCOMIUnknown(System.IntPtr)">
      <summary>
        <para>Stores an unmanaged proxy of the object represented by the current
      instance.</para>
      </summary>
      <param name="i">A pointer to the <see langword="IUnknown" /> interface for the object represented by the current proxy instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.SupportsInterface(System.Guid@)">
      <summary>
        <para> Requests a COM interface with
      the specified ID.</para>
      </summary>
      <param name="iid">A reference to the requested interface.</param>
      <returns>
        <para>A pointer to the requested interface.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy">
      <summary>
        <para> Returns the transparent proxy for the current instance
      of <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" />
      .
      </para>
      </summary>
      <returns>
   The transparent proxy for the current proxy instance.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Proxies.RealProxy.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Proxies.RealProxy" /> class with default values.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapOption">
      <summary>
        <para>Specifies the SOAP configuration options for use with the
   <see cref="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute" />
   class.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.SoapOption.None">
      <summary>
   The default option indicating that no extra options are
   selected.
</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.SoapOption.AlwaysIncludeTypes">
      <summary>
        <para>Indicates that type will always be included on SOAP 
      elements. This option is useful when performing SOAP interop with SOAP implementations that require types on all elements.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.SoapOption.XsdString">
      <summary>
        <para>Indicates that the output SOAP string type in a SOAP
      Envelope is using the <see langword="XSD" /> prefix, and that
      the resulting XML does not have
      an ID attribute for the string.</para>
        <para>For example, while a class by default might be remoted
      in the SOAP format as </para>
        <code>
&lt;member1&gt;10&lt;/member1&gt;
&lt;member2 id="ref-3"&gt;hello&lt;/member2&gt;
&lt;member3 href="#ref-3"/&gt;
&lt;member4 href="#ref-4"/&gt;
&lt;member4shared href="#ref-4"/&gt;
&lt;member5 href="#ref-5"/&gt;
&lt;member6 id="ref-6" xsi:type="SOAP-ENC:string"&gt;Hello World&lt;/member6&gt;
&lt;str1 id="ref-7"&gt;hello &amp;#60; world&lt;/str1&gt;
&lt;str2 id="ref-8"&gt;&amp;#60;&lt;/str2&gt;
&lt;str3 id="ref-9"&gt;&amp;#60; world&lt;/str3&gt;
&lt;str4 href="#ref-7"/&gt;
   </code>
        <para> remoting serialization with the
   <see langword="XsdString" /> option
      would produce the following XML.</para>
        <code>
&lt;member1 xsi:type="xsd:int"&gt;10&lt;/member1&gt;
&lt;member2 xsi:type="xsd:string"&gt;hello&lt;/member2&gt;
&lt;member3 xsi:type="xsd:string"&gt;hello&lt;/member3&gt;
&lt;member4 href="#ref-3"/&gt;
&lt;member4shared href="#ref-3"/&gt;
&lt;member5 href="#ref-4"/&gt;
&lt;member6 xsi:type="xsd:string"&gt;Hello World&lt;/member6&gt;
&lt;str1 xsi:type="xsd:string"&gt;hello &amp;#60; world&lt;/str1&gt;
&lt;str2 xsi:type="xsd:string"&gt;&amp;#60;&lt;/str2&gt;
&lt;str3 xsi:type="xsd:string"&gt;&amp;#60; world&lt;/str3&gt;
&lt;str4 xsi:type="xsd:string"&gt;hello &amp;#60; world&lt;/str4&gt;
   </code>
        <para> For more information about SOAP envelopes,
      see www.w3.org/tr/soap/#_Toc478383494.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.SoapOption.EmbedAll">
      <summary>
        <para> Indicates that SOAP will be generated without
      references.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.XmlFieldOrderOption.All">
      <summary>
        <para>Public reserved, will be &lt;internalonly/&gt;.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.XmlFieldOrderOption.Sequence">
      <summary>
        <para>Public reserved, will be &lt;internalonly/&gt;.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Metadata.XmlFieldOrderOption.Choice">
      <summary>
        <para>Public reserved, will be &lt;internalonly/&gt;.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute">
      <summary>
        <para>Customizes SOAP generation and processing for target types. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapAttribute">
      <summary>
        <para> Provides default functionality for all SOAP attributes.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapAttribute.XmlNamespace">
      <summary>
        <para>Gets or sets the XML namespace name.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapAttribute.UseAttribute">
      <summary>
        <para>Gets or sets a value indicating whether the target of the current attribute will be serialized as an XML attribute
      instead of an XML field.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapAttribute.Embedded">
      <summary>
        <para> Gets or sets a value indicating whether the type
      must be nested during SOAP serialization.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.SoapOptions">
      <summary>
        <para>Gets or sets a <see cref="T:System.Runtime.Remoting.Metadata.SoapOption" /> configuration
   value.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.XmlElementName">
      <summary>
        <para>Gets or sets the XML element name.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.XmlNamespace">
      <summary>
        <para> Gets or sets the XML namespace that 
      is used during serialization of the target object type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.XmlTypeName">
      <summary>
        <para>Gets or sets the XML type name for the target object type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.XmlTypeNamespace">
      <summary>
        <para>Gets or sets the XML type namespace for the current object type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapTypeAttribute.UseAttribute">
      <summary>
        <para>Gets or sets a value indicating whether the target of the current attribute will be serialized as an XML attribute
      instead of an XML field.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapMethodAttribute">
      <summary>
        <para> Customizes SOAP generation and processing for a method. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.SoapAction">
      <summary>
        <para>Gets or sets the SOAPAction header field used with HTTP
      requests sent with this method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.UseAttribute">
      <summary>
        <para>Gets or sets a value indicating whether the target of the current attribute will be serialized as an XML attribute
      instead of an XML field.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.XmlNamespace">
      <summary>
        <para>Gets or sets the XML namespace that is used during 
      serialization of remote method calls of the target method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.ResponseXmlElementName">
      <summary>
        <para> Gets or sets the XML element name to use for the method response to the target method.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.ResponseXmlNamespace">
      <summary>
        <para> Gets or sets the XML element namesapce used for method response to the target method.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapMethodAttribute.ReturnXmlElementName">
      <summary>
        <para>Gets or sets the XML element name used for the return
      value from the target method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapFieldAttribute">
      <summary>
        <para>Customizes SOAP generation and processing for a field. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.SoapFieldAttribute.IsInteropXmlElement">
      <summary>
        <para> Returns a value indicating whether the current attribute contains interop XML element values.</para>
      </summary>
      <returns>
        <para>
          <see langword="true" /> if the current attribute contains interop XML element
   values; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.SoapFieldAttribute.XmlElementName">
      <summary>
        <para>Gets or sets the XML element name of the field contained 
      in the <see cref="T:System.Runtime.Remoting.Metadata.SoapFieldAttribute" />
      attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.SoapParameterAttribute">
      <summary>
        <para>Customizes SOAP generation and processing for a
      parameter. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.RemotingConfiguration">
      <summary>
        <para>Provides various static methods for configuring the
      remoting infrastructure.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)">
      <summary>
        <para>Reads the configuration file and configures the remoting infrastructure.</para>
      </summary>
      <param name="filename">The name of the remoting configuration file. Can be <see langword="null" /> . </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)">
      <summary>
        <para>Registers a specified object type on the service end as a type that
      
      can be activated on request from a client.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of object to register. </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)">
      <summary>
        <para>Registers an object type recorded in the provided <see cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" /> on the service end as one that can be activated on
   request from a client.</para>
      </summary>
      <param name="entry">Configuration settings for the client activated type. </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)">
      <summary>
        <para> Registers an object <see cref="T:System.Type" /> on the service end as a well-known type, using the
   given parameters to
   initialize a new instance of <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />. </para>
      </summary>
      <param name="type">The object <see cref="T:System.Type" />.</param>
      <param name="objectUri">The object URI.</param>
      <param name="mode">The activation mode of the well-known object type being registered. (See <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> .) </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)">
      <summary>
        <para>Registers an object <see cref="T:System.Type" /> recorded in the provided <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" /> on the service end as a well-known type.</para>
      </summary>
      <param name="entry">Configuration settings for the well-known type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)">
      <summary>
        <para>Registers an object <see cref="T:System.Type" /> on the client end as a type
   that can be activated on the server, using the given
   parameters to initialize a new instance of the <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> class.</para>
      </summary>
      <param name="type">The object <see cref="T:System.Type" />.</param>
      <param name="appUrl">URL of the application where this type is activated. </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)">
      <summary>
        <para>Registers an object <see cref="T:System.Type" /> recorded in the provided <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> on the client end as a
   type that can be activated on the server.</para>
      </summary>
      <param name="entry">Configuration settings for the client activated type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)">
      <summary>
        <para>Registers an object <see cref="T:System.Type" /> on the client end as a well-known type that
   can be activated on the server, using the given
   parameters to initialize a new instance of the <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> class.
   </para>
      </summary>
      <param name="type">The object <see cref="T:System.Type" />.</param>
      <param name="objectUrl">URL of a well-known client object. </param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)">
      <summary>
        <para>Registers an object <see cref="T:System.Type" /> recorded in the provided <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> on
   the client end as a well-known type that can be activated on the server.</para>
      </summary>
      <param name="entry">Configuration settings for the well-known type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes">
      <summary>
        <para> Retrieves an array of object types
      registered on the service end that can be activated on request from a
      client.</para>
      </summary>
      <returns>
        <para> An array of object types registered on the service end
      that can be activated on request from a client.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes">
      <summary>
        <para>Retrieves an array of object types registered on the
      service end as well-known types.</para>
      </summary>
      <returns>
        <para>An array of object types registered on the service end as well-known
      types.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes">
      <summary>
        <para>Retrieves an array of object types registered on the
      client as types that will be activated remotely.</para>
      </summary>
      <returns>
        <para> An array of object types registered on the client as types that
      will be activated remotely.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes">
      <summary>
        <para>Retrieves an array of object types registered on the
      client end as well-known types.</para>
      </summary>
      <returns>
        <para>An array of object types registered on the client end as well-known types.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)">
      <summary>
        <para>Checks whether the specified object <see cref="T:System.Type" /> is registered as a
   remotely activated client type.</para>
      </summary>
      <param name="svrType">The object type to check.</param>
      <returns>
        <para>The <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> corresponding to the
   specified object type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)">
      <summary>
        <para>Checks whether the object specified by its type name and
      assembly name is registered as a remotely activated client type.</para>
      </summary>
      <param name="typeName">The type name of the object to check.</param>
      <param name=" assemblyName">The assembly name of the object to check.</param>
      <returns>
        <para>The <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> corresponding to the specified object type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)">
      <summary>
        <para>Checks whether the specified object <see cref="T:System.Type" /> is registered as a
   well-known client type.</para>
      </summary>
      <param name="svrType">The object <see cref="T:System.Type" /> to check.</param>
      <returns>
        <para>The <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> corresponding to the specified object type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)">
      <summary>
        <para>Checks whether the object specified by its type name and
      assembly name is registered as a well-known client type.</para>
      </summary>
      <param name="typeName">The type name of the object to check.</param>
      <param name="assemblyName">The assembly name of the object to check.</param>
      <returns>
        <para>The <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> corresponding to the specified object type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)">
      <summary>
        <para>Returns a Boolean value indicating whether the specified
      <see cref="T:System.Type" /> is allowed
      to be client activated.</para>
      </summary>
      <param name="svrType">The object <see cref="T:System.Type" /> to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the specified <see cref="T:System.Type" /> is allowed to be
   client activated; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.RemotingConfiguration.ApplicationName">
      <summary>
        <para> Gets or sets the name of a
      remoting application.
      </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.RemotingConfiguration.ApplicationId">
      <summary>
        <para>Gets the ID of the currently executing application.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.RemotingConfiguration.ProcessId">
      <summary>
        <para>Gets the ID of the currently executing process.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.TypeEntry">
      <summary>
        <para>Implements a base class that holds the configuration information used to activate
      an instance of a remote type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.TypeEntry.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.TypeEntry" /> class.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.TypeEntry.TypeName">
      <summary>
        <para>Gets the full type name of the object type configured to be a remote activated type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.TypeEntry.AssemblyName">
      <summary>
        <para>Gets the assembly name of the object type configured to
      be a remote activated type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.ActivatedClientTypeEntry">
      <summary>
        <para>Holds values for an object type registered on the client end as a type that
      can be activated on the server.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedClientTypeEntry.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> class with the given type name, 
   assembly name, and application URL.</para>
      </summary>
      <param name="typeName">The type name of the client activated type.</param>
      <param name=" assemblyName">The assembly name of the client activated type.</param>
      <param name=" appUrl">The URL of the application to activate the type in.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedClientTypeEntry.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> class with 
   the given <see cref="T:System.Type" /> and
   application URL.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the client activated type.</param>
      <param name=" appUrl">The URL of the application to activate the type in.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedClientTypeEntry.ToString">
      <summary>
        <para>Returns the type name, assembly name, and application
      URL of the client activated type as a <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>The type name, assembly name, and application URL of the 
      client activated type as a <see cref="T:System.String" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.ActivatedClientTypeEntry.ApplicationUrl">
      <summary>
        <para>Gets the URL of the application to activate the type in.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ActivatedClientTypeEntry.ObjectType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the client activated type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ActivatedClientTypeEntry.ContextAttributes">
      <summary>
        <para>Gets or sets the context attributes for the client activated type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.ActivatedServiceTypeEntry">
      <summary>
        <para>Holds values for an object type registered on the
 service end as one that can be activated on request from a client.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedServiceTypeEntry.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" /> class with
   the given type name and application URL.</para>
      </summary>
      <param name="typeName">The type name of the client activated service type.</param>
      <param name="assemblyName">The assembly name of the client activated service type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedServiceTypeEntry.#ctor(System.Type)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" /> class with 
   the given <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the client activated service type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.ActivatedServiceTypeEntry.ToString">
      <summary>
        <para> Returns the type and assembly name
      of the client activated service type as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>The type and assembly name of the client activated 
      service type as a <see cref="T:System.String" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.ActivatedServiceTypeEntry.ObjectType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the client activated service type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.ActivatedServiceTypeEntry.ContextAttributes">
      <summary>
        <para>Gets or sets the context attributes for the client
      activated service type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.WellKnownClientTypeEntry">
      <summary>
        <para> Holds values for an object type registered on the client as a well-known type object (single call or singleton).</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownClientTypeEntry.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> class with the
   given type, assembly name, and object URL.</para>
      </summary>
      <param name="typeName">The type name of the well-known client type.</param>
      <param name="assemblyName">The assembly name of the well-known client type.</param>
      <param name="objectUrl">The URL of the well-known object type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownClientTypeEntry.#ctor(System.Type,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> class with
   the given <see cref="T:System.Type" /> and
   object URL.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the well-known client type.</param>
      <param name="objectUrl"> The URL of the well-known object type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownClientTypeEntry.ToString">
      <summary>
        <para> Returns the full type name, assembly name, and object
      URL of the well-known client type as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para> The full type name, assembly name, and object
      URL of the well-known client type as a <see cref="T:System.String" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownClientTypeEntry.ObjectUrl">
      <summary>
        <para>Gets the URL of the well-known client object.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownClientTypeEntry.ObjectType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the well-known client type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownClientTypeEntry.ApplicationUrl">
      <summary>
        <para>Gets or sets the URL of the application to
      activate the type in.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.WellKnownServiceTypeEntry">
      <summary>
        <para> Holds values for an object type registered on the service end as a
      well-known type object (single call or singleton).</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownServiceTypeEntry.#ctor(System.String,System.String,System.String,System.Runtime.Remoting.WellKnownObjectMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" /> class with the given type name,
   assembly name, object URI, and <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> .</para>
      </summary>
      <param name="typeName">The full type name of the well-known service type.</param>
      <param name=" assemblyName">The assembly name of the well-known service type.</param>
      <param name=" objectUri"> The URI of the well-known object.</param>
      <param name=" mode">The <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> of the type, which defines how the object is activated.</param>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownServiceTypeEntry.#ctor(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" /> class with the given <see cref="T:System.Type" />, object URI, and <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" />.</para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> of the well-known service type object.</param>
      <param name=" objectUri">The URI of the well-known type.</param>
      <param name=" mode">The <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> of the type, which defines how the object is activated.</param>
    </member>
    <member name="M:System.Runtime.Remoting.WellKnownServiceTypeEntry.ToString">
      <summary>
        <para>Returns the type name, assembly name, object URI
      and the <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> of
      the well-known server activated type as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>The type name, assembly name, object URI and
      the <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> of
      the well-known server activated type as a <see cref="T:System.String" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ObjectUri">
      <summary>
        <para> Gets the URI of the well
      known service type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.Mode">
      <summary>
        <para>Gets the <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> of the well-known service type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ObjectType">
      <summary>
        <para>Gets the <see cref="T:System.Type" /> of the well-known service type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ContextAttributes">
      <summary>
        <para>Gets or sets the context attributes for the well-known service type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.RemotingException">
      <summary>
        <para>The exception that is thrown when something has gone wrong during
      remoting.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingException" /> class with default
   properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingException" /> class with a specified
   message.</para>
      </summary>
      <param name="message"> The error message that explains why the exception occurred.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains why the exception occurred.</param>
      <param name="InnerException">The exception that is the cause of the current exception. If the <paramref name="InnerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingException" /> class from serialized data.</para>
      </summary>
      <param name="info">
        <para> The object that holds the serialized object data.</para>
      </param>
      <param name="context">The contextual information about the source or destination of the exception.</param>
    </member>
    <member name="T:System.Runtime.Remoting.ServerException">
      <summary>
        <para> The exception that is thrown to communicate errors to the client when the client connects
      to non .NET Framework applications that cannot throw exceptions.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ServerException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ServerException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.ServerException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ServerException" /> class with a specified message.</para>
      </summary>
      <param name="message">The message that describes the exception</param>
    </member>
    <member name="M:System.Runtime.Remoting.ServerException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.ServerException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="InnerException">The exception that is the cause of the current exception. If the <paramref name="InnerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.Remoting.RemotingTimeoutException">
      <summary>
        <para>The exception that is thrown when the server or the client cannot
      be reached for a previously specified period of time.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingTimeoutException.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingTimeoutException" /> class with default properties.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingTimeoutException.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of <see cref="T:System.Runtime.Remoting.RemotingTimeoutException" /> class with a specified message.</para>
      </summary>
      <param name="message">The message that indicates the reason why the exception occurred.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.RemotingTimeoutException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="InnerException">The exception that is the cause of the current exception. If the <paramref name="InnerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="T:System.Runtime.Remoting.RemotingServices">
      <summary>
        <para> Provides several methods for using and publishing remoted objects and proxies. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.IsTransparentProxy(System.Object)">
      <summary>
        <para> Returns a Boolean value indicating whether the given
      object
      is a transparent proxy or a real object.</para>
      </summary>
      <param name="proxy">The reference to the object to check.</param>
      <returns>
        <para>A Boolean value indicating whether the object specified
      in the <paramref name="proxy " />parameter is a transparent
      proxy or a real object.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.IsObjectOutOfContext(System.Object)">
      <summary>
        <para>Returns a Boolean value indicating whether the object
      represented by the given proxy is contained in a different context than the object
      that called the current method.</para>
      </summary>
      <param name="tp">The object to check.</param>
      <returns>
        <para>
          <see langword="true " />if
   the object is out of the current
   context; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.IsObjectOutOfAppDomain(System.Object)">
      <summary>
        <para>Returns a Boolean value indicating whether the object specified by the given transparent proxy is
      contained in a different AppDomain than the object that called the current
      method.</para>
      </summary>
      <param name="tp">The object to check.</param>
      <returns>
        <para>
          <see langword="true" /> if the object is out of the current
   AppDomain; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetRealProxy(System.Object)">
      <summary>
        <para>Returns the real proxy backing the specified transparent proxy.</para>
      </summary>
      <param name="proxy">A transparent proxy.</param>
      <returns>
        <para> The real proxy instance backing the transparent proxy.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetSessionIdForMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage)">
      <summary>
        <para>Retrieves a session ID for a message.</para>
      </summary>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodMessage" /> for which a session ID is requested.</param>
      <returns>
        <para>A session ID string that uniquely identifies the current
      session.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetLifetimeService(System.MarshalByRefObject)">
      <summary>
        <para> Returns a lifetime service object that controls
      the lifetime policy of the specified object.</para>
      </summary>
      <param name="obj">The object to obtain lifetime service for.</param>
      <returns>
        <para> The object that controls the lifetime of <paramref name="obj" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetObjectUri(System.MarshalByRefObject)">
      <summary>
        <para>Retrieves the URI for the specified object.</para>
      </summary>
      <param name="obj">The <see cref="T:System.MarshalByRefObject" /> for which a URI is requested.</param>
      <returns>
        <para>The URI of the specified object if it has one, or
   <see langword="null" /> if the object has not yet been marshaled.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.SetObjectUriForMarshal(System.MarshalByRefObject,System.String)">
      <summary>
        <para> Sets the URI for the subsequent call to the <see cref="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject)" /> method.
   </para>
      </summary>
      <param name="obj">The object to set a URI for.</param>
      <param name=" uri">The URI to assign to the specified object.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject)">
      <summary>
        <para> Takes a <see cref="T:System.MarshalByRefObject" />, registers it with the
   remoting infrastructure, and converts it into an instance of the
<see cref="T:System.Runtime.Remoting.ObjRef" /> 
class.</para>
      </summary>
      <param name="Obj">The object to convert. </param>
      <returns>
        <para> An instance of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class representing the object specified
   in
   the <paramref name="Obj" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject,System.String)">
      <summary>
        <para> Converts the given <see cref="T:System.MarshalByRefObject" /> into an instance
   of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class with the specified URI.</para>
      </summary>
      <param name="Obj">The object to convert. </param>
      <param name="URI">The specified URI with which to initialize the new <see cref="T:System.Runtime.Remoting.ObjRef" />. Can be <see langword="null" /> . </param>
      <returns>
        <para>An instance of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class representing the
   object specified in the <paramref name="Obj" /> parameter. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject,System.String,System.Type)">
      <summary>
        <para>Takes a <see cref="T:System.MarshalByRefObject" /> and converts it into an instance of the
<see cref="T:System.Runtime.Remoting.ObjRef" /> class with the specified URI, and the provided <see cref="T:System.Type" />
.</para>
      </summary>
      <param name="Obj">The object to convert into an <see cref="T:System.Runtime.Remoting.ObjRef" /> .</param>
      <param name="ObjURI">The URI the object specified in the <paramref name="Obj" /> parameter is marshaled with. Can be <see langword="null" /> .</param>
      <param name="RequestedType">The <see cref="T:System.Type" /><paramref name="Obj" /> is marshaled as. Can be <see langword="null" /> .</param>
      <returns>
        <para>An instance of the <see cref="T:System.Runtime.Remoting.ObjRef" /> class representing the
   object specified in the <paramref name="Obj" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Serializes the specified marshal by reference object into
      the provided <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</para>
      </summary>
      <param name="obj">The object to serialize.</param>
      <param name=" info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> into which the object is serialized.</param>
      <param name=" context">The source and destination of the serialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Unmarshal(System.Runtime.Remoting.ObjRef)">
      <summary>
        <para> Takes an <see cref="T:System.Runtime.Remoting.ObjRef" />
and creates a proxy object out of it.</para>
      </summary>
      <param name="objectRef">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that represents the remote object for which the proxy is being created. </param>
      <returns>
        <para> A proxy to the object that the given <see cref="T:System.Runtime.Remoting.ObjRef" /> represents.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Unmarshal(System.Runtime.Remoting.ObjRef,System.Boolean)">
      <summary>
        <para>Takes an <see cref="T:System.Runtime.Remoting.ObjRef" /> and creates a proxy object out of it,
   refining it to the type on the server.</para>
      </summary>
      <param name="objectRef">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that represents the remote object for which the proxy is being created.</param>
      <param name=" fRefine">
        <see langword="true" /> to refine the proxy to the type on the server; otherwise, <see langword="false" />.</param>
      <returns>
        <para>A proxy to the object that the given <see cref="T:System.Runtime.Remoting.ObjRef" /> represents. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Connect(System.Type,System.String)">
      <summary>
        <para>Takes in the <see cref="T:System.Type" /> and URL of the well-known object to which you
   want to connect to, and creates a proxy object for it.</para>
      </summary>
      <param name="classToProxy">The <see cref="T:System.Type" /> of a well-known object on the server end to which you want to connect. </param>
      <param name="url">The URL of the server class. </param>
      <returns>
        <para> A proxy to the remote object that points to an
      endpoint served by the specified well-known object.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Connect(System.Type,System.String,System.Object)">
      <summary>
        <para> Takes in the <see cref="T:System.Type" />
and URL of the well-known object to which you
want to connect, and as well as channel specific data, and creates
a proxy for it.</para>
      </summary>
      <param name="classToProxy">The <see cref="T:System.Type" /> of the well-known object to which you want to connect. </param>
      <param name="url"> The URL of the well-known object. </param>
      <param name="data">Channel specific data. Can be <see langword="null" /> . </param>
      <returns>
        <para> A proxy that points to an endpoint that is served by
      the requested well-known object.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.Disconnect(System.MarshalByRefObject)">
      <summary>
        <para>Stops an object from receiving any further messages through the registered remoting channels.</para>
      </summary>
      <param name="obj">Object to disconnect from its channel. </param>
      <returns>
        <para>
          <see langword="true" /> if the object
   was disconnected from the registered remoting
   channels successfully; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetEnvoyChainForProxy(System.MarshalByRefObject)">
      <summary>
        <para> Returns a chain of envoy sinks that should be used
      when sending messages to the remote object represented by the specified proxy.</para>
      </summary>
      <param name="obj">The proxy of the remote object that requested envoy sinks are associated with.</param>
      <returns>
        <para>A chain of envoy sinks associated with the specified proxy.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetObjRefForProxy(System.MarshalByRefObject)">
      <summary>
        <para>Returns the <see cref="T:System.Runtime.Remoting.ObjRef" /> that represents the
   remote object from the specified proxy.</para>
      </summary>
      <param name="obj">A proxy connected to the object you want to create an <see cref="T:System.Runtime.Remoting.ObjRef" /> for.</param>
      <returns>
        <para>An <see cref="T:System.Runtime.Remoting.ObjRef" />
representing the remote object the specified proxy is connected to, or
<see langword="null" /> if the object
or proxy have not been marshaled.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage)">
      <summary>
        <para>Returns the method base from the given <see cref="T:System.Runtime.Remoting.Messaging.IMethodMessage" /> .</para>
      </summary>
      <param name="msg">The method message to extract the method base from.</param>
      <returns>
        <para>The method base extracted from the <paramref name="msg" /> parameter.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.IsMethodOverloaded(System.Runtime.Remoting.Messaging.IMethodMessage)">
      <summary>
        <para>Returns a Boolean value indicating whether the method in the given message is overloaded.</para>
      </summary>
      <param name="msg">The message containing a call to the method in question.</param>
      <returns>
        <para>
          <see langword="true" /> if the method called in <paramref name="msg" /> is
   overloaded; otherwise, <see langword="false" />.
</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.IsOneWay(System.Reflection.MethodBase)">
      <summary>
        <para> Returns a Boolean value indicating whether the
      client that called the method specified in the given message is waiting for the server to finish processing the method
      before continuing execution.</para>
      </summary>
      <param name="method">The method in question.</param>
      <returns>
        <para>
          <see langword="true" /> if the method is one way; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.GetServerTypeForUri(System.String)">
      <summary>
        <para>Returns the <see cref="T:System.Type" /> of the object with the specified URI.</para>
      </summary>
      <param name="URI">The URI of the object whose <see cref="T:System.Type" /> is requested.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> of the object with the specified URI.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.RemotingServices.ExecuteMessage(System.MarshalByRefObject,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
      <summary>
        <para>Connects to the specified remote object, and executes
      the provided <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> on it.</para>
      </summary>
      <param name="target">The remote object whose method you want to call.</param>
      <param name=" reqMsg">A method call message to the specified remote object's method.</param>
      <returns>
        <para>The response of the remote method.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector">
      <summary>
        <para> Selects the remoting surrogate that can be used
      to serialize an object that derives from a <see cref="T:System.MarshalByRefObject" />.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" /> class.
   </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.SetRootObject(System.Object)">
      <summary>
        <para>Sets the object at the root of the object graph.</para>
      </summary>
      <param name="obj">The object at the root of the object graph.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.GetRootObject">
      <summary>
        <para>Returns the object at the root of the object graph.</para>
      </summary>
      <returns>
        <para>The object at the root of the object graph.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector)">
      <summary>
        <para>Adds the specified <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to the surrogate selector chain.</para>
      </summary>
      <param name="selector">The next <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to examine. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>
        <para> Returns the appropriate surrogate for the given type in the given
      context.
      </para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> for which the surrogate is requested. </param>
      <param name="context">The source or destination of serialization. </param>
      <param name="ssout">When this method returns, contains an <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that is appropriate for the specified object type. This parameter is passed uninitialized.</param>
      <returns>
        <para> The appropriate surrogate for the given type in the given
      context.
      </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.GetNextSelector">
      <summary>
        <para>Returns the next <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />in the chain of surrogate selectors.</para>
      </summary>
      <returns>
        <para>The next <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> in the chain of surrogate selectors.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.UseSoapFormat">
      <summary>
   Sets up the current surrogate selector to use the SOAP
   format.
</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector.Filter">
      <summary>
        <para>Gets or sets the <see cref="T:System.Runtime.Remoting.Messaging.MessageSurrogateFilter" />
delegate for the current instance of the <see cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.SoapServices">
      <summary>
        <para> Provides several methods for using
      and publishing remoted objects in SOAP format.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.RegisterInteropXmlElement(System.String,System.String,System.Type)">
      <summary>
        <para> Associates the given XML element name and namespace with a run-time type
      that should be used for deserialization.
      </para>
      </summary>
      <param name="xmlElement"> The XML element name to use in deserialization.</param>
      <param name=" xmlNamespace"> The XML namespace to use in deserialization.</param>
      <param name=" type">The run-time <see cref="T:System.Type" /> to use in deserialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.RegisterInteropXmlType(System.String,System.String,System.Type)">
      <summary>
        <para> Associates the given XML type name and namespace with the run-time type
      that should be used for deserialization.
      </para>
      </summary>
      <param name="xmlType"> The XML type to use in deserialization.</param>
      <param name=" xmlTypeNamespace"> The XML namespace to use in deserialization.</param>
      <param name=" type">The run-time <see cref="T:System.Type" /> to use in deserialization.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.PreLoad(System.Type)">
      <summary>
        <para> Registers the given object <see cref="T:System.Type" /> based on values set in a <see cref="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute" /> on the type.
   </para>
      </summary>
      <param name="type">The <see cref="T:System.Type" /> to preload.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.PreLoad(System.Reflection.Assembly)">
      <summary>
        <para> Preloads every <see cref="T:System.Type" /> found in the specified <see cref="T:System.Reflection.Assembly" /> from the information found in the 
<see langword="SoapTypeAttributes" /> 
(see <see cref="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute" />) associated with the object
types. </para>
      </summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> for each type of which to call <see cref="M:System.Runtime.Remoting.SoapServices.PreLoad(System.Type)" />.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetInteropTypeFromXmlElement(System.String,System.String)">
      <summary>
        <para> Retrieves the <see cref="T:System.Type" />
that should be used during deserialization of an unrecognized object type with the
given XML element name and
namespace.</para>
      </summary>
      <param name="xmlElement">The XML element name of the unknown object type.</param>
      <param name=" xmlNamespace">The XML namespace of the unknown object type.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> of
   object associated with the specified XML element name and namespace.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetInteropTypeFromXmlType(System.String,System.String)">
      <summary>
        <para>Retrieves the object <see cref="T:System.Type" /> that should used be during deserialization
   of an unrecognized object type with the given XML type name and namespace.</para>
      </summary>
      <param name="xmlType">The XML type of the unknown object type.</param>
      <param name=" xmlTypeNamespace">The XML type namespace of the unknown object type.</param>
      <returns>
        <para>The <see cref="T:System.Type" /> of
   object associated with the specified XML type name and namespace.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetInteropFieldTypeAndNameFromXmlElement(System.Type,System.String,System.String,System.Type@,System.String@)">
      <summary>
        <para> Retrieves the <see cref="T:System.Type" /> and name of a field from the provided XML element name, namespace, and the containing type.
   </para>
      </summary>
      <param name="containingType">The <see cref="T:System.Type" /> of the object containing the field.</param>
      <param name=" xmlElement">The XML element name of field.</param>
      <param name=" xmlNamespace">The XML namespace of the field type.</param>
      <param name=" type">When this method returns, contains a <see cref="T:System.Type" /> of the field. This parameter is passed uninitialized.</param>
      <param name=" name">When this method returns, contains a <see cref="T:System.String" /> that holds the name of the field. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetInteropFieldTypeAndNameFromXmlAttribute(System.Type,System.String,System.String,System.Type@,System.String@)">
      <summary>
        <para> Retrieves field type from XML attribute name, namespace,
      and the <see cref="T:System.Type" /> of the containing object.
      </para>
      </summary>
      <param name="containingType">The <see cref="T:System.Type" /> of the object containing the field.</param>
      <param name="xmlAttribute">The XML attribute name of the field type.</param>
      <param name="xmlNamespace">The XML namespace of the field type.</param>
      <param name="type">When this method returns, contains a <see cref="T:System.Type" /> of the field. This parameter is passed uninitialized.</param>
      <param name="name">When this method returns, contains a <see cref="T:System.String" /> that holds the name of the field. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetXmlElementForInteropType(System.Type,System.String@,System.String@)">
      <summary>
        <para> Returns
      XML element information that should be used when serializing the given type.
      </para>
      </summary>
      <param name="type">The object <see cref="T:System.Type" /> for which the XML element and namespace names were requested.</param>
      <param name=" xmlElement">When this method returns, contains a <see cref="T:System.String" /> that holds the XML element name of the specified object type. This parameter is passed uninitialized.</param>
      <param name=" xmlNamespace">When this method returns, contains a <see cref="T:System.String" /> that holds the XML namespace name of the specified object type. This parameter is passed uninitialized.</param>
      <returns>
        <para>
          <see langword="true" /> if the requested values have been set flagged with
<see cref="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute" />; 
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetXmlTypeForInteropType(System.Type,System.String@,System.String@)">
      <summary>
        <para>Returns XML type information that should be used when 
      serializing the given <see cref="T:System.Type" />.
      </para>
      </summary>
      <param name="type">The object <see cref="T:System.Type" /> for which the XML element and namespace names were requested.</param>
      <param name=" xmlType">The XML type of the specified object <see cref="T:System.Type" />.</param>
      <param name=" xmlTypeNamespace">The XML type namespace of the specified object <see cref="T:System.Type" />.</param>
      <returns>
        <para>
          <see langword="true" /> if the
   requested values have been set flagged with <see cref="T:System.Runtime.Remoting.Metadata.SoapTypeAttribute" />; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetXmlNamespaceForMethodCall(System.Reflection.MethodBase)">
      <summary>
        <para>Retrieves the XML namespace used during remote calls of 
      the method specified in the given <see cref="T:System.Reflection.MethodBase" />.</para>
      </summary>
      <param name="mb">The <see cref="T:System.Reflection.MethodBase" /> of the method for which the XML namespace was requested.</param>
      <returns>
        <para>The XML namespace used during remote calls of the specified method.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase)">
      <summary>
        <para> Retrieves the XML namespace used during the generation 
      of responses to the remote call to the method specified in the given
   <see cref="T:System.Reflection.MethodBase" /> .
      </para>
      </summary>
      <param name="mb">The <see cref="T:System.Reflection.MethodBase" /> of the method for which the XML namespace was requested.</param>
      <returns>
        <para>The XML namespace used during the generation of responses to a remote method
      call. </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.RegisterSoapActionForMethodBase(System.Reflection.MethodBase)">
      <summary>
        <para>Associates the specified <see cref="T:System.Reflection.MethodBase" />
with the SOAPAction cached with it.</para>
      </summary>
      <param name="mb">The <see cref="T:System.Reflection.MethodBase" /> of the method to associate with the SOAPAction cached with it.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.RegisterSoapActionForMethodBase(System.Reflection.MethodBase,System.String)">
      <summary>
        <para> Associates the provided SOAPAction value with the
      given <see cref="T:System.Reflection.MethodBase" /> for use in
      channel sinks.
      </para>
      </summary>
      <param name="mb">The <see cref="T:System.Reflection.MethodBase" /> to associate with the provided SOAPAction.</param>
      <param name=" soapAction">The SOAPAction value to associate with the given <see cref="T:System.Reflection.MethodBase" />.</param>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetSoapActionFromMethodBase(System.Reflection.MethodBase)">
      <summary>
        <para> Returns the SOAPAction value associated
      with the method specified in the given <see cref="T:System.Reflection.MethodBase" />.</para>
      </summary>
      <param name="mb">The <see cref="T:System.Reflection.MethodBase" /> containing the method for which a SOAPAction is requested.</param>
      <returns>
        <para> The SOAPAction value associated with the
      method specified in the given <see cref="T:System.Reflection.MethodBase" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.IsSoapActionValidForMethodBase(System.String,System.Reflection.MethodBase)">
      <summary>
        <para> Determines if the specified SOAPAction is acceptable for
      a given <see cref="T:System.Reflection.MethodBase" />.
      </para>
      </summary>
      <param name="soapAction">The SOAPAction to check against the given <see cref="T:System.Reflection.MethodBase" />.</param>
      <param name=" mb">The <see cref="T:System.Reflection.MethodBase" /> the specified SOAPAction is checked against.</param>
      <returns>
        <para>
          <see langword="true " />if the specified SOAPAction is
   acceptable for a given <see cref="T:System.Reflection.MethodBase" />; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.GetTypeAndMethodNameFromSoapAction(System.String,System.String@,System.String@)">
      <summary>
        <para> Determines the type and method name of the method associated with the specified SOAPAction value.
      </para>
      </summary>
      <param name="soapAction">The SOAPAction of the method for which the type and method names were requested.</param>
      <param name=" typeName">When this method returns, contains a <see cref="T:System.String" /> that holds the type name of the method in question. This parameter is passed uninitialized.</param>
      <param name=" methodName">When this method returns, contains a <see cref="T:System.String" /> that holds the method name of the method in question. This parameter is passed uninitialized.</param>
      <returns>
        <para>
          <see langword="true " />if the type and method name were successfully
   recovered; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.IsClrTypeNamespace(System.String)">
      <summary>
        <para>Returns a Boolean value indicating whether the specified
      namespace is native to the common language run-time.</para>
      </summary>
      <param name="namespaceString">The namespace to check in the common language run-time.</param>
      <returns>
        <para>
          <see langword="true" /> if the given
   namespace is native to the
   common language run-time; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.CodeXmlNamespaceForClrTypeNamespace(System.String,System.String)">
      <summary>
        <para> Returns the common language run-time type
      namespace name from the provided namespace and assembly names.</para>
      </summary>
      <param name="typeNamespace">The namespace that is to be coded.</param>
      <param name=" assemblyName">The name of the assembly that is to be coded.</param>
      <returns>
        <para>The common language run-time type namespace name from the provided namespace
      and assembly names.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.SoapServices.DecodeXmlNamespaceForClrTypeNamespace(System.String,System.String@,System.String@)">
      <summary>
        <para> Decodes the XML namespace and assembly names from
      the provided common language run-time namespace.</para>
      </summary>
      <param name="inNamespace">The common language run-time namespace.</param>
      <param name=" typeNamespace">When this method returns, contains a <see cref="T:System.String" /> that holds the decoded namespace name. This parameter is passed uninitialized.</param>
      <param name=" assemblyName">When this method returns, contains a <see cref="T:System.String" /> that holds the decoded assembly name. This parameter is passed uninitialized.</param>
      <returns>
        <para>
          <see langword="true" /> if the namespace and assembly names
   were successfully decoded; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.SoapServices.XmlNsForClrType">
      <summary>
        <para> Gets the XML namespace prefix for
      common language run-time types.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.SoapServices.XmlNsForClrTypeWithAssembly">
      <summary>
        <para>Gets the default XML namespace prefix that should be used for XML encoding of a
      common language run-time class that has an assembly, but no native
      namespace.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.SoapServices.XmlNsForClrTypeWithNs">
      <summary>
        <para>Gets the XML namespace prefix that should be used for XML encoding of a common
      language run-time class that is part of the mscorlib.dll file.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.SoapServices.XmlNsForClrTypeWithNsAndAssembly">
      <summary>
        <para>Gets the default XML namespace prefix that should be used for XML encoding of a
      common language run-time class that has both a common language run-time namespace and an
      assembly.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd">
      <summary>
        <para> Provides access to the XML Schema definition
      language (XSD) of a SOAP type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the current
      SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" />
indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime">
      <summary>
        <para> Wraps an XML <see langword="dateTime" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime.ToString(System.DateTime)">
      <summary>
        <para>Returns the specified <see cref="T:System.DateTime" /> object as a
<see cref="T:System.String" /> .</para>
      </summary>
      <param name="value">The <see cref="T:System.DateTime" /> object to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> representation of <paramref name="value" /> in the format
   "yyyy-MM-dd'T'HH:mm:ss.fffffffzzz".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.DateTime" /> object obtained from <paramref name="value" />
.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration">
      <summary>
        <para> Wraps an XML <see langword="duration" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration.ToString(System.TimeSpan)">
      <summary>
        <para>Returns the specified <see cref="T:System.TimeSpan" /> object as a
<see cref="T:System.String" /> .</para>
      </summary>
      <param name="timeSpan">The <see cref="T:System.TimeSpan" /> object to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> representation of <paramref name="timeSpan" />
in the format "PxxYxxDTxxHxxMxx.xxxS" or
"PxxYxxDTxxHxxMxxS". The "PxxYxxDTxxHxxMxx.xxxS" is used if <see cref="P:System.TimeSpan.Milliseconds" qualify="true" /> does not equal zero.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.TimeSpan" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.TimeSpan" /> object obtained from <paramref name="value" /> .</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime">
      <summary>
        <para> Wraps an XML <see langword="time" /> 
type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime" /> class with a 
   specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.ToString">
      <summary>
        <para> Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.Value" /> in the
   format "HH:mm:ss.fffffffzzz".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime" /> object.</para>
      </summary>
      <param name="value">The <see cref="T:System.String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime" />
object obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate">
      <summary>
        <para> Wraps an XML <see langword="date" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" /> class with a 
   specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.#ctor(System.DateTime,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" /> class with a
   specified <see cref="T:System.DateTime" /> object and an integer
   indicating whether <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Value" />
   is a positive or negative value.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
      <param name=" sign"> An integer indicating whether <paramref name="value" /> is positive.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.ToString">
      <summary>
        <para> Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Value" /> in 
   the format "yyyy-MM-dd" or "'-'yyyy-MM-dd" if <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Sign" />
   is negative.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate" /> object obtained from
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate.Sign">
      <summary>
        <para> Gets or sets whether the date and time of the current
      instance is positive or negative.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth">
      <summary>
        <para>Wraps an XML <see langword="gYearMonth" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth" /> class with a 
   specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.#ctor(System.DateTime,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth" /> class with a
   specified <see cref="T:System.DateTime" /> object and an integer
   indicating whether <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Value" />
   is a positive or negative value.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
      <param name=" sign"> An integer indicating whether <paramref name="value" /> is positive.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.ToString">
      <summary>
        <para>Returns a <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Value" /> as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see langword="String" /> obtained from 
<see langword="Value" /> in the format "yyyy-MM" or 
   "'-'yyyy-MM" if <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Sign" /> is negative.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert</param>
      <returns>
        <para>A <see langword="SoapYearMonth" /> object obtained from
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth.Sign">
      <summary>
        <para>Gets or sets whether the date and time of the current
      instance is positive or negative.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear">
      <summary>
        <para>Wraps an XML <see langword="gYear" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear" /> class with a 
   specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.#ctor(System.DateTime,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear" /> class with a
   specified <see cref="T:System.DateTime" /> object and an integer indicating whether <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Value" /> is a
   positive or negative value.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
      <param name=" sign"> An integer indicating whether <paramref name="value" /> is positive.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Value" /> in 
   the format "yyyy" or "-yyyy" if <see langword="Sign" />
   is negative.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see langword="SoapYear" /> object
   obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear.Sign">
      <summary>
        <para>Gets or sets whether the date and time of the current
      instance is positive or negative.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay">
      <summary>
        <para>Wraps an XML <see langword="gMonthDay" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay" /> 
class with a specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.Value" /> as a 
<see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.Value" /> in the format
   "'--'MM'-'dd".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay" />
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see langword="SoapMonthDay" /> object
   obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay">
      <summary>
        <para>Wraps an XML <see langword="gDay" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay" /> class with a
   specified <see cref="T:System.DateTime" /> object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.Value" /> as a 
<see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.Value" /> in the
   format "---dd".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see langword="SoapDay" /> object
   obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth">
      <summary>
        <para>Wraps an XML <see langword="gMonth" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.#ctor(System.DateTime)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth" /> class with a
   specified <see cref="T:System.DateTime" />
   object.</para>
      </summary>
      <param name="value">A <see cref="T:System.DateTime" /> object to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.Value" /> as a 
<see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> 
obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.Value" /> in the
format "--MM--".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see langword="SoapDay" /> object
   obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth.Value">
      <summary>
        <para>Gets or sets the date and time of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary">
      <summary>
        <para>Wraps an XML <see langword="hexBinary" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> class.</para>
      </summary>
      <param name="value">A <see cref="T:System.Byte" /> array containing a hexadecimal number.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Parse(System.String)">
      <summary>
        <para> Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary.Value">
      <summary>
        <para> Gets or 
      sets the hexadecimal representation of a number.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary">
      <summary>
        <para>Wraps an XML <see langword="base64Binary" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary" /> class with the
   binary representation of a 64-bit number.</para>
      </summary>
      <param name="value">A <see cref="T:System.Byte" /> array containing a 64-bit number.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.Value" /> as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary" /> object obtained from
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary.Value">
      <summary>
        <para>Gets or sets the binary representation of a 64-bit number.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger">
      <summary>
        <para>Wraps an XML <see langword="integer" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" /> class with 
   a <see cref="T:System.Decimal" /> value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see langword="Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" /> object obtained from
<paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger.Value">
      <summary>
        <para>Gets or sets the numeric value of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger">
      <summary>
        <para>Wraps an XML <see langword="positiveInteger" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger" /> class with 
   a <see cref="T:System.Decimal" />
   value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.Value" /> 
as a <see cref="T:System.String" />
.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see langword="Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger" /> object obtained
   from <paramref name="value" /></returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger.Value">
      <summary>
        <para>Gets or sets the numeric value of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger">
      <summary>
        <para>Wraps an XML <see langword="nonPositiveInteger" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the 
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger" /> class with a
<see cref="T:System.Decimal" /> value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.Value" /> 
as a <see cref="T:System.String" />
.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see langword="Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger" /> object obtained
   from <paramref name="value" /></returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger.Value">
      <summary>
        <para>Gets or sets the numeric value of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger">
      <summary>
        <para>Wraps an XML <see langword="nonNegativeInteger" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger" /> class with a 
<see cref="T:System.Decimal" /> value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.Value" /> 
as a <see cref="T:System.String" />
.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see langword="Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger" /> object obtained
   from <paramref name="value" /></para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger.Value">
      <summary>
        <para>Gets or sets the numeric value of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger">
      <summary>
        <para>Wraps an XML <see langword="negativeInteger" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger" />
class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.#ctor(System.Decimal)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger" /> class with a 
<see cref="T:System.Decimal" /> 
value.</para>
      </summary>
      <param name="value">A <see cref="T:System.Decimal" /> value to initialize the current instance.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.Value" /> 
as a <see cref="T:System.String" />
.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see langword="Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger" /> object obtained
   from <paramref name="value" /></returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger.Value">
      <summary>
        <para>Gets or sets the numeric value of the current instance.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri">
      <summary>
        <para>Wraps an XML <see langword="anyURI" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri" /> 
class with the specified URI.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing a URI.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into 
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri.Value">
      <summary>
        <para> Gets or sets a URI.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName">
      <summary>
        <para>Wraps an XML <see langword="QName" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> class with the local part of a qualified name.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing the local part of a qualified name.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.#ctor(System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> 
class with the namespace alias and the local part of a qualified name.</para>
      </summary>
      <param name="key">A <see cref="T:System.String" /> containing the namespace alias of a qualified name.</param>
      <param name=" name">A <see cref="T:System.String" /> containing the local part of a qualified name.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> class with the namespace alias, the local part of a qualified name, and the
   namespace referenced by the alias.</para>
      </summary>
      <param name="key">A <see cref="T:System.String" /> containing the namespace alias of a qualified name.</param>
      <param name=" name">A <see cref="T:System.String" /> containing the local part of a qualified name.</param>
      <param name=" namespaceValue">A <see cref="T:System.String" /> containing the namespace referenced by <paramref name="key" />.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.ToString">
      <summary>
        <para>Returns the qualified name as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> in the format "<see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Key" />:<see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Name" />". If <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Key" /> is not specified,
   this method returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Name" /> .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into 
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Name">
      <summary>
        <para>Gets or sets the name portion of a qualified name.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Namespace">
      <summary>
        <para>Gets or sets the namespace referenced by <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Key" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName.Key">
      <summary>
        <para>Gets or sets the namespace alias of a qualified name.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation">
      <summary>
        <para>Wraps an XML <see langword="NOTATION" /> attribute type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation" /> class with an XML 
<see langword="NOTATION" /> 
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="NOTATION" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.ToString">
      <summary>
   Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.Value" /> as
   a <see cref="T:System.String" />.
</summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation.Value">
      <summary>
        <para>Gets or sets an XML <see langword="NOTATION" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString">
      <summary>
        <para>Wraps an XML <see langword="normalizedString" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString" /> class with a 
   normalized string.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> object containing a normalized string.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.Value" /> as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.Value" /> 
in the format "&lt;![CDATA[" + <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.Value" />
+ "]]&gt;".</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString" /> object obtained
   from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString.Value">
      <summary>
        <para>Gets or sets a normalized string.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken">
      <summary>
        <para>Wraps an XML <see langword="token" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken" /> class with an XML 
<see langword="token" /> 
.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="token" /> .</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken" />
   object obtained from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken.Value">
      <summary>
        <para>Gets or sets an XML <see langword="token" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage">
      <summary>
        <para>Wraps an XML <see langword="language" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" /> class with the 
   language identifier value of <see langword="language" />
   attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing the language indentifier value of an <see langword="language" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" /> object obtained
   from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage.Value">
      <summary>
        <para>Gets or sets the language identifier of 
      an <see langword="language" />
      attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName">
      <summary>
        <para>Wraps an XML <see langword="Name" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName" /> class with an XML 
<see langword="Name" /> 
type.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="Name" /> type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.ToString">
      <summary>
   Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.Value" /> as
   a <see cref="T:System.String" />.
</summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName" />
   object obtained from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName.Value">
      <summary>
        <para>Gets or sets an XML <see langword="Name" /> type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs">
      <summary>
        <para>Wraps an XML <see langword="IDREFS" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs" /> class with an XML 
<see langword="IDREFS" /> attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="IDREFS" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.Value" /> as 
   a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into 
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs" /> object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.String" /> obtained from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs.Value">
      <summary>
        <para>Gets or sets an XML <see langword="IDREFS" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities">
      <summary>
        <para>Wraps an XML <see langword="ENTITIES" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" /> class with an XML 
<see langword="ENTITIES" /> 
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="ENTITIES" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.ToString">
      <summary>
   Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.Value" /> as
   a <see cref="T:System.String" />.
</summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities.Value">
      <summary>
        <para>Gets or sets an XML <see langword="ENTITIES" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken">
      <summary>
        <para>Wraps an XML <see langword="NMTOKEN" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken" /> class with an XML 
<see langword="NMTOKEN" /> 
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="NMTOKEN" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.Value" /> as
   a <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> obtained from 
<see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken" /> object obtained
   from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken.Value">
      <summary>
        <para>Gets or sets an XML <see langword="NMTOKEN" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens">
      <summary>
        <para>Wraps an XML <see langword="NMTOKENS" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens" /> class with an XML 
<see langword="NMTOKENS" /> attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="NMTOKENS" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.Value" /> as a 
<see cref="T:System.String" />.</para>
      </summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens" />
object obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens.Value">
      <summary>
        <para>Gets or sets an XML <see langword="NMTOKENS" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName">
      <summary>
        <para>Wraps an XML <see langword="NcName" /> type.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName" /> class with an XML 
<see langword="NcName" /> 
type.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="NcName" /> type.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.ToString">
      <summary>
   Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.Value" /> as
   a <see cref="T:System.String" />.
</summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName" />
   object obtained from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName.Value">
      <summary>
        <para>Gets or sets an XML <see langword="NcName" /> type.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId">
      <summary>
        <para>Wraps an XML <see langword="ID" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId" /> class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId" /> class with an XML 
<see langword="ID" /> 
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="ID" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.ToString">
      <summary>
   Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.Value" /> as
   a <see cref="T:System.String" />.
</summary>
      <returns>
   A <see cref="T:System.String" /> obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.Value" />.
</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.Parse(System.String)">
      <summary>
   Converts the specified <see cref="T:System.String" /> into
   a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId" /> object.
</summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
   A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId" />
   object obtained from <paramref name="value" />.
</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId.Value">
      <summary>
        <para>Gets or sets an XML <see langword="ID" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref">
      <summary>
        <para>Wraps an XML <see langword="IDREFS" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref" /> class.
</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref" /> class with an XML 
<see langword="IDREF" /> 
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="IDREF" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.Value" /> as a 
<see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> 
obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.String" /> 
obtained from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref.Value">
      <summary>
        <para>Gets or sets an XML <see langword="IDREF" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity">
      <summary>
        <para>Wraps an XML <see langword="ENTITY" /> attribute.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.GetXsdType">
      <summary>
        <para>Returns the XML Schema definition language (XSD) of the
      current SOAP type.</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> indicating the XSD of the current SOAP type.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity" /> 
class.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity" /> class with an XML 
<see langword="ENTITY" />
attribute.</para>
      </summary>
      <param name="value">A <see cref="T:System.String" /> containing an XML <see langword="ENTITY" /> attribute.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.ToString">
      <summary>
        <para>Returns <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.Value" /> as a 
<see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>A <see cref="T:System.String" /> 
obtained from <see cref="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.Value" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.Parse(System.String)">
      <summary>
        <para>Converts the specified <see cref="T:System.String" /> into a <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity" /> 
object.</para>
      </summary>
      <param name="value">The <see langword="String" /> to convert.</param>
      <returns>
        <para>A <see cref="T:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities" /> object obtained 
   from <paramref name="value" />.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.XsdType">
      <summary>
        <para>Gets the XML Schema definition language (XSD) of the current SOAP type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity.Value">
      <summary>
        <para>Gets or sets an XML <see langword="ENTITY" /> attribute.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute">
      <summary>
        <para>Enforces a synchronization domain for the current
      context and all contexts that share the same instance.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Contexts.SynchronizationAttribute.NOT_SUPPORTED">
      <summary>
        <para> Indicates that the class to which this attribute is applied cannot be created in a
      context that has synchronization. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Contexts.SynchronizationAttribute.SUPPORTED">
      <summary>
        <para>Indicates that the class to which this attribute is applied is not dependent on whether the
      context has synchronization. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Contexts.SynchronizationAttribute.REQUIRED">
      <summary>
        <para>Indicates that the class to which this attribute is applied must be created in a
      context that has synchronization. This field is constant.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Remoting.Contexts.SynchronizationAttribute.REQUIRES_NEW">
      <summary>
        <para> Indicates that the class to which this attribute is
      applied must be created in a context with a new instance of the
      synchronization property each time. This field is constant.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.#ctor(System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" /> class with a Boolean value
   indicating whether reentry is required.</para>
      </summary>
      <param name="reEntrant">A Boolean value indicating whether reentry is required.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.#ctor(System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" />
class with a flag indicating the behavior of the object to which this attribute is applied.</para>
      </summary>
      <param name="flag">An integer value indicating the behavior of the object to which this attribute is applied.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.#ctor(System.Int32,System.Boolean)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" />
class with a flag indicating the behavior of the object to which this attribute is applied, and a Boolean value indicating whether reentry is required.</para>
      </summary>
      <param name="flag">An integer value indicating the behavior of the object to which this attribute is applied.</param>
      <param name=" reEntrant">
        <see langword="true" /> if reentry is required, and callouts must be intercepted and serialized; otherwise, <see langword="false" /> .</param>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.IsContextOK(System.Runtime.Remoting.Contexts.Context,System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para>Returns a Boolean value indicating whether the context
      parameter meets the context attribute's requirements.</para>
      </summary>
      <param name="ctx">
        <para> The context to check.</para>
      </param>
      <param name=" msg">Information gathered at construction time of the context bound object marked by this attribute. The <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" /> can inspect, add to, and remove properties from the context while determining if the context is acceptable to it.</param>
      <returns>
        <para>
          <see langword="true" /> if the passed
   in context is OK; otherwise, <see langword="false" />
   .</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para>Adds the <see langword="Synchronized" /> context property to the specified
<see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> .</para>
      </summary>
      <param name="ctorMsg">The <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> to which to add the property.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>Creates a synchronized dispatch sink and chains it in
      front of the provided chain of sinks at the context boundary on
      the server end of a remoting call.</para>
      </summary>
      <param name="nextSink">The chain of sinks composed so far.</param>
      <returns>
        <para>The composite sink chain with the new synchronized
      dispatch sink.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Contexts.SynchronizationAttribute.GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>
        <para>Creates a CallOut sink and chains it in front of the provided chain of sinks 
      at the context boundary on the client end of a remoting call.</para>
      </summary>
      <param name="nextSink">The chain of sinks composed so far.</param>
      <returns>
        <para> The composite 
      sink chain with the new CallOut sink.</para>
      </returns>
    </member>
    <member name="P:System.Runtime.Remoting.Contexts.SynchronizationAttribute.Locked">
      <summary>
        <para>Gets or sets a Boolean value indicating whether the 
   <see cref="T:System.Runtime.Remoting.Contexts.Context" /> implementing this instance of 
   <see cref="T:System.Runtime.Remoting.Contexts.SynchronizationAttribute" /> is locked.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Remoting.Contexts.SynchronizationAttribute.IsReEntrant">
      <summary>
        <para> Gets or sets a
      Boolean value indicating whether reentry is required.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Services.ITrackingHandler">
      <summary>
        <para> Indicates that the implementing object must be notified
      of marshaling, unmarshaling, and disconnection of objects and proxies
      by the remoting infrastructure.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.ITrackingHandler.MarshaledObject(System.Object,System.Runtime.Remoting.ObjRef)">
      <summary>
        <para>Notifies the current instance that an object has been marshaled.
      </para>
      </summary>
      <param name=" obj">The object that has been marshaled.</param>
      <param name="or">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that results from marshaling and represents the specified object.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.ITrackingHandler.UnmarshaledObject(System.Object,System.Runtime.Remoting.ObjRef)">
      <summary>
        <para> Notifies the current instance that an object has been unmarshaled.
      </para>
      </summary>
      <param name=" obj"> The unmarshaled object. </param>
      <param name="or">The <see cref="T:System.Runtime.Remoting.ObjRef" /> that represents the specified object.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.ITrackingHandler.DisconnectedObject(System.Object)">
      <summary>
        <para>Notifies the current instance that an object has been disconnected from its proxy.
      </para>
      </summary>
      <param name="obj"> The disconnected object. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Services.TrackingServices">
      <summary>
        <para> Provides a way to register, unregister, and obtain a list of tracking handlers.
      </para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.TrackingServices.RegisterTrackingHandler(System.Runtime.Remoting.Services.ITrackingHandler)">
      <summary>
        <para> Registers a new tracking handler with the <see cref="T:System.Runtime.Remoting.Services.TrackingServices" /> .
   </para>
      </summary>
      <param name="handler">The tracking handler to register. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.TrackingServices.UnregisterTrackingHandler(System.Runtime.Remoting.Services.ITrackingHandler)">
      <summary>
        <para>Unregisters the specified tracking handler from <see cref="T:System.Runtime.Remoting.Services.TrackingServices" /> .</para>
      </summary>
      <param name="handler">The handler to unregister.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Services.TrackingServices.RegisteredHandlers">
      <summary>
        <para>Gets an array of the tracking handlers that are currently registered with <see cref="T:System.Runtime.Remoting.Services.TrackingServices" /> in the current <see cref="T:System.AppDomain" /> .
   </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Remoting.Activation.UrlAttribute">
      <summary>
        <para> Defines an attribute that can be used at the call
      site to specify the URL where the activation will happen. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.UrlAttribute.#ctor(System.String)">
      <summary>
        <para>Creates a new instance of the <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />
class.</para>
      </summary>
      <param name="callsiteURL">The call site URL.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.UrlAttribute.Equals(System.Object)">
      <summary>
        <para>Checks whether the specified object refers to the
      same URL as the current instance.</para>
      </summary>
      <param name="o">
        <para>The object to compare to the current <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />.</para>
      </param>
      <returns>
        <para>
          <see langword="true" /> if the object is a <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />
with the same value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.UrlAttribute.GetHashCode">
      <summary>
        <para>Returns the hash value for the current <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />.</para>
      </summary>
      <returns>
        <para>The hash value for the current <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.UrlAttribute.IsContextOK(System.Runtime.Remoting.Contexts.Context,System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para> Returns a Boolean value indicating whether the specified
   <see cref="T:System.Runtime.Remoting.Contexts.Context" /> meets <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />
   's requirements.
   </para>
      </summary>
      <param name="ctx">The context to check against the current context attribute. </param>
      <param name="msg">The construction call, the parameters of which need to be checked against the current context. </param>
      <returns>
        <para>
          <see langword="true" /> if the passed in context is OK;
   otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Remoting.Activation.UrlAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage)">
      <summary>
        <para> Forces the creation of the context and the
      server object inside the context at the specified URL.</para>
      </summary>
      <param name="ctorMsg">The <see cref="T:System.Runtime.Remoting.Activation.IConstructionCallMessage" /> of the server object to create.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Activation.UrlAttribute.UrlValue">
      <summary>
        <para>Gets the URL value of the <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> .</para>
      </summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageScope">
      <summary>
        <para> Enumerates the levels of isolated storage scope that are
      supported by <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" />.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.None">
      <summary>
        <para> No isolated storage usage.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.User">
      <summary>
        <para> Isolated storage scoped by user identity.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Domain">
      <summary>
        <para> Isolated storage scoped to the application domain identity.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Assembly">
      <summary>
        <para> Isolated storage scoped to the identity of the assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.IO.IsolatedStorage.IsolatedStorageScope.Roaming">
      <summary>
        <para> The isolated store can be placed in a
      location on the file system that might roam (if roaming user data is enabled on
      the underlying operating system).</para>
      </summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorage">
      <summary>
        <para> Represents the abstract base class from which
      all isolated storage implementations must
      derive.
      </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.InitStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> object.
   </para>
      </summary>
      <param name="scope">
        <para>A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </para>
      </param>
      <param name="domainEvidenceType">
        <para>The type of the <see cref="T:System.Security.Policy.Evidence" /> that you can chose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the domain of the calling application. <see langword="null" /> lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> choose the evidence.</para>
      </param>
      <param name="assemblyEvidenceType">
        <para>The type of the <see cref="T:System.Security.Policy.Evidence" /> that you can chose from the list of <see cref="T:System.Security.Policy.Evidence" /> present in the domain of the calling application. <see langword="null" /> lets the <see cref="T:System.IO.IsolatedStorage.IsolatedStorage" /> choose the evidence.</para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.Remove">
      <summary>
        <para> When overridden in a derived class, removes the individual isolated store and all contained data.
      </para>
      </summary>
      <returns>
        <para> This is an abstract method in this base class; it must be implemented by derived
      classes.
      </para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorage.GetPermission(System.Security.PermissionSet)">
      <summary>
        <para> When implemented by a derived class, returns a permission that
      represents access to isolated storage from within a permission set.</para>
      </summary>
      <param name="ps">The <see cref="T:System.Security.PermissionSet" /> that contains the set of permissions granted to code attempting to use isolated storage.</param>
      <returns>
        <para>An <see cref="T:System.Security.Permissions.IsolatedStoragePermission" />
object.</para>
      </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.SeparatorExternal">
      <summary>
        <para>Gets a backslash character that can be used in a directory string. When 
 overridden in a derived class, another character might be returned.</para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.SeparatorInternal">
      <summary>
        <para> Gets a period character that can be used in a directory 
 string. When overridden in a derived class, another character might be returned.</para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.MaximumSize">
      <summary>
        <para> Gets a value representing the maximum amount of space available for
 isolated storage. When overridden in a derived class, this value can take on different
 units of measure. </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.CurrentSize">
      <summary>
        <para> Gets a value representing the current size of isolated storage.
 </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.DomainIdentity">
      <summary>
        <para> Gets a domain identity that scopes isolated storage.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.AssemblyIdentity">
      <summary>
        <para> Gets an assembly identity used to scope isolated storage.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorage.Scope">
      <summary>
        <para>Gets an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> enumeration value specifying the
 scope used to isolate the store.</para>
      </summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFile">
      <summary>
        <para> Represents an isolated storage area containing files and directories.
      </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain">
      <summary>
        <para> Obtains isolated storage corresponding
 to the application domain identity and assembly identity.</para>
      </summary>
      <returns>
        <para>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />
corresponding to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" />,
based on a combination of the application
domain identity and the assembly identity.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly">
      <summary>
        <para> Obtains isolated storage corresponding to the calling code's assembly identity.</para>
      </summary>
      <returns>
        <para> An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> 
corresponding to the isolated storage scope based
on the calling code's assembly identity.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)">
      <summary>
        <para> Obtains isolated storage corresponding to the isolated storage scope given the application domain and assembly
 evidence types.</para>
      </summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values.</param>
      <param name=" domainEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application domain evidence.</param>
      <param name=" assemblyEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application code assembly evidence.</param>
      <returns>
        <para>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> representing the parameters.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Object,System.Object)">
      <summary>
        <para> Obtains the isolated storage corresponding to the given application domain and assembly
      evidence objects.</para>
      </summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name=" domainIdentity">An <see cref="T:System.Object" /> that contains evidence for the application domain identity. Use <see langword="null" /> to indicate that the current application's domain evidence should be used.</param>
      <param name=" assemblyIdentity">An <see cref="T:System.Object" /> that contains evidence for the code assembly identity. Use <see langword="null" /> to indicate that the current assembly's evidence should be used.</param>
      <returns>
        <para>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> representing the parameters.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Security.Policy.Evidence,System.Type,System.Security.Policy.Evidence,System.Type)">
      <summary>
        <para> Obtains isolated storage corresponding to the given application domain
 and the assembly evidence objects and types.</para>
      </summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
      <param name=" domainEvidence">An <see cref="T:System.Security.Policy.Evidence" /> object containing the application domain identity.</param>
      <param name=" domainEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application domain evidence. </param>
      <param name=" assemblyEvidence">An <see cref="T:System.Security.Policy.Evidence" /> object containing the code assembly identity.</param>
      <param name=" assemblyEvidenceType">The identity <see cref="T:System.Type" /> to choose from the application code assembly evidence. </param>
      <returns>
        <para>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> representing the parameters.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
      <summary>
        <para>Deletes a file in the isolated storage scope.</para>
      </summary>
      <param name="file">The relative path of the file to delete within the isolated storage scope.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
      <summary>
        <para>Creates a directory in the isolated storage scope.</para>
      </summary>
      <param name="dir">The relative path of the directory to create within the isolated storage scope.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
      <summary>
        <para>Deletes a directory in the isolated storage scope.</para>
      </summary>
      <param name="dir">The relative path of the directory to delete within the isolated storage scope.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
      <summary>
        <para>Enumerates files in isolated storage scope that match a given pattern.</para>
      </summary>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multicharacter ("*") wildcards are supported.</param>
      <returns>
        <para> An <see cref="T:System.Array" /> of relative paths
   of files in the isolated storage scope that match <paramref name="searchPattern" />. A zero-length
   array specifies that there are no
   files that match.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
      <summary>
        <para>Enumerates directories in an isolated storage scope that match a given pattern.</para>
      </summary>
      <param name="searchPattern">A search pattern. Both single-character ("?") and multicharacter ("*") wildcards are supported.</param>
      <returns>
        <para>An <see cref="T:System.Array" /> of the relative
   paths of directories in the isolated storage scope that match
<paramref name="searchPattern" />. A zero-length 
   array specifies that there are no
   directories that match.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove">
      <summary>
        <para>Removes the isolated storage scope and all its contents.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Close">
      <summary>
        <para>Closes a store previously opened with <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)" />, <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly" />, or <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain" />.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
      <summary>
        <para>Closes a store previously opened with <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore(System.IO.IsolatedStorage.IsolatedStorageScope,System.Type,System.Type)" />, <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly" />, or <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain" />.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Finalize">
      <summary>
        <para> Closes an isolated store. This method will run even
      if an exception is thrown or the program crashes.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove(System.IO.IsolatedStorage.IsolatedStorageScope)">
      <summary>
        <para> Removes the specified isolated storage scope for
      all identities.</para>
      </summary>
      <param name="scope">A bitwise combination of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> values. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetEnumerator(System.IO.IsolatedStorage.IsolatedStorageScope)">
      <summary>
        <para> Gets the enumerator for the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> stores within an isolated storage scope.
   </para>
      </summary>
      <param name="scope">Represents the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope" /> for which to return isolated stores. <see langword="User" /> and <see langword="User|Roaming" /> are the only <see langword="IsolatedStorageScope" /> combinations supported.</param>
      <returns>
        <para> Enumerator for the <see langword="IsolatedStorageFile " /> stores within the specified isolated storage scope.
   </para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetPermission(System.Security.PermissionSet)">
      <summary>
        <para> Returns the <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> from
 within a given permission set that represents access to isolated storage.</para>
      </summary>
      <param name="ps">The <see cref="T:System.Security.PermissionSet" /> that contains the set of permissions granted to code that is attempting to use isolated storage. </param>
      <returns>
        <para>An <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> object
 that represents the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> object in
 the supplied permission set. The value is <see langword="null " />
 
 if there is no permission of type <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" />
 in the supplied
 set.</para>
      </returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.CurrentSize">
      <summary>
        <para> Gets the current size of the isolated storage.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.MaximumSize">
      <summary>
        <para> Gets a value representing the maximum amount of space available for isolated storage within the limits established by the
 quota.
 </para>
      </summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">
      <summary>
        <para> Exposes a file within isolated storage.
      </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>
        <para> Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path " />in the specified <paramref name="mode" />.
 </para>
      </summary>
      <param name="path">
        <para> The relative path of the file within isolated storage. </para>
      </param>
      <param name="mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values.</para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>
 Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path, " />in the specified <paramref name="mode, " />and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.
<para><see langword=" " /></para></summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values.</para>
      </param>
      <param name=" isf">
        <para>The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
        <para> Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
   designated by <paramref name="path " />in the specified <paramref name="mode" />, with the kind of
<paramref name="access " /> 
requested.</para>
      </summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values.</para>
      </param>
      <param name=" access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>
 Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path " />in the specified <paramref name="mode" />, with the specified file
<paramref name="access" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.
<para><see langword=" " /></para></summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values. </para>
      </param>
      <param name=" access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
      <param name=" isf">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
        <para> Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path, " />in the
 specified <paramref name="mode, " />with the specified file <paramref name="access" />,<paramref name=" " /> using the file sharing mode specified by <paramref name="share" />.</para>
      </summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values. </para>
      </param>
      <param name=" access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
      <param name=" share">
        <para>A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>
 Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file designated by <paramref name="path, " />in the specified <paramref name="mode" />, with the specified file <paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by
<paramref name="isf" />.
<para><see langword=" " /></para></summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values. </para>
      </param>
      <param name=" access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
      <param name=" share">
        <para>A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </para>
      </param>
      <param name=" isf">
        <para>The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>
        <para> Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path, " />in the specified <paramref name="mode" />, with the specified file
<paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, with the <paramref name="buffersize " />
specified.</para>
      </summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name=" mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values. </para>
      </param>
      <param name=" access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
      <param name=" share">
        <para>A bitwise combination of the <see cref="T:System.IO.FileShare" /> values. </para>
      </param>
      <param name=" bufferSize">The buffer size. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>
        <para>Initializes a new instance of an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> object giving access to the file
 designated by <paramref name="path, " />in the specified <paramref name="mode" />, with the specified file
<paramref name="access" />, using the file sharing mode specified by <paramref name="share" />, with the <paramref name="buffersize " />specified, and in the context of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> specified by <paramref name="isf" />.</para>
        <para>
          <see langword=" " />
        </para>
      </summary>
      <param name="path">The relative path of the file within isolated storage. </param>
      <param name="mode">
        <para>One of the <see cref="T:System.IO.FileMode" /> values. </para>
      </param>
      <param name="access">
        <para>A bitwise combination of the <see cref="T:System.IO.FileAccess" /> values. </para>
      </param>
      <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare" /> values </param>
      <param name="bufferSize">The buffer size. </param>
      <param name=" isf">
        <para>The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> in which to open the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </para>
      </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Close">
      <summary>
        <para> Releases resources associated with the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />.
   </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)">
      <summary>
        <para>Releases resources associated with the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />.</para>
      </summary>
      <param name="disposing">A value that indicates all associated resources should be closed.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush">
      <summary>
        <para> Updates the file with the current state of the buffer then clears
      the buffer.
      </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)">
      <summary>
        <para> Sets the length of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> to 
   the specified <paramref name="value" />.</para>
      </summary>
      <param name="value">The new length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Copies bytes from the current buffered <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> to an array.</para>
      </summary>
      <param name="buffer">The buffer to read. </param>
      <param name=" offset">The offset in the buffer at which to begin writing. </param>
      <param name=" count">The maximum number of bytes to read. </param>
      <returns>
        <para> The total number of bytes read into the <paramref name="buffer" />. This can be less than the number
   of bytes requested if that many bytes are not currently available, or zero
   if the end of the stream is reached.
   </para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte">
      <summary>
        <para> Reads a single byte from the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> in isolated storage.
   </para>
      </summary>
      <returns>
        <para>The 8-bit unsigned integer value read from the isolated storage file.
      </para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
        <para> Sets the current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> to 
   the specified value.</para>
      </summary>
      <param name="offset">The new position of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />. </param>
      <param name=" origin">One of the <see cref="T:System.IO.SeekOrigin" />values.</param>
      <returns>
        <para> The new position in the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />.
   </para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>Writes a block of bytes to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> using data read
   from a byte array.</para>
      </summary>
      <param name="buffer">The buffer to write. </param>
      <param name="offset"> The byte offset in buffer from which to begin. </param>
      <param name="count">The maximum number of bytes to write. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)">
      <summary>
        <para> Writes a single byte to the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />.
   </para>
      </summary>
      <param name="value">The byte value to write to the isolated storage file. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous read.</para>
      </summary>
      <param name="buffer">The buffer into which to read data.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin reading.</param>
      <param name="numBytes">The maximum number of bytes to read.</param>
      <param name="userCallback">The method to be called when the asynchronous read operation is completed. This parameter is optional.</param>
      <param name="stateObject">The status of the asynchronous read.</param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which is possibly
   still pending. This <see langword="IAsyncResult " />must be passed to this
   stream's <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> method to
   determine how many bytes were read. This can be done either by the same code
   that called <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> or in a callback
   passed to <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)">
      <summary>
        <para>Ends a pending asynchronous read request.</para>
      </summary>
      <param name="asyncResult">The pending asynchronous request. </param>
      <returns>
        <para> The number of bytes read from
      the stream, between zero and the number of requested bytes. Streams will only return zero at the end
      of the stream. Otherwise, they will block until at least one byte
      is available.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
        <para>Begins an asynchronous write.</para>
      </summary>
      <param name="buffer">The buffer to which to write data.</param>
      <param name="offset">The byte offset in <paramref name="array" /> at which to begin writing.</param>
      <param name="numBytes">The maximum number of bytes to write.</param>
      <param name="userCallback">The method to be called when the asynchronous write operation is completed. This parameter is optional.</param>
      <param name="stateObject">The status of the asynchronous write. </param>
      <returns>
        <para>An <see cref="T:System.IAsyncResult" /> that represents the
   asynchronous write, which is possibly still pending. This
<see langword="IAsyncResult" /> must be passed to this stream's
<see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" /> method to ensure that the write
   is complete, then frees resources appropriately. This can be done
   either by the same code that called <see langword="BeginWrite" />
   or in a callback passed to <see langword="BeginWrite" />.</para>
      </returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
      <summary>
        <para> Ends an asynchronous write.
      </para>
      </summary>
      <param name="asyncResult">The pending asynchronous I/O request to end.</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead">
      <summary>
        <para> Gets a Boolean value indicating whether the file can be read.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite">
      <summary>
        <para> Gets a Boolean value indicating whether you can write to the file.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek">
      <summary>
        <para> Gets a Boolean value indicating whether seek operations are supported.
      </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.IsAsync">
      <summary>
        <para> Gets a Boolean value indicating whether the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />
was opened
asynchronously or synchronously.</para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length">
      <summary>
        <para> Gets the length of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> .
   </para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position">
      <summary>
        <para> Gets or sets the current position of this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />
to the specified value.</para>
      </summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Handle">
      <summary>
        <para> Gets the file handle for the file that the current
   <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />
   object encapsulates.
   </para>
      </summary>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageException">
      <summary>
        <para> The exception that is thrown when an operation in isolated storage fails.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with default properties.
   </para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
      <summary>
        <para> Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> class with a specified error
   message.
   </para>
      </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" />
class with a specified error message and a reference to the
inner exception that is the cause of this exception.</para>
      </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> 
class with serialized data.</para>
      </summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name=" context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:System.IO.IsolatedStorage.INormalizeForIsolatedStorage">
      <summary>
        <para>Enables comparisons between an isolated store and an application domain and assembly's evidence.</para>
      </summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.INormalizeForIsolatedStorage.Normalize">
      <summary>
        <para>When overridden in a derived class, returns a normalized
      copy of the object on which it is called.</para>
      </summary>
      <returns>
        <para>A normalized object that represents the instance on which this method was called. This instance
      can be a string, stream, or any serializable object.</para>
      </returns>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle">
      <summary>
    Indicates the format in which type descriptions are laid
    out in the serialized stream.
 </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesWhenNeeded">
      <summary>
        <para>Indicates that types can be stated only for arrays of objects, object
 members of type <see cref="T:System.Object" />, and <see cref="T:System.Runtime.Serialization.ISerializable" /> nonprimitive
 value types.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesAlways">
      <summary>
        <para>Indicates that types can be given to all object
 members and <see cref="T:System.Runtime.Serialization.ISerializable" /> object
 members.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.XsdString">
      <summary>
        <para>Indicates that strings can be given in the XSD format rather than SOAP. No
 string IDs are transmitted. </para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle">
      <summary>
        <para>Indicates the format in which assembly names are serialized.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple">
      <summary>
        <para> Simple assembly name format.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full">
      <summary>
        <para>Full assembly name format.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.ISoapMessage">
      <summary>
        <para>Provides an interface for an object that contains the
      names and types of parameters required during
      serialization of a SOAP RPC (Remote Procedure Call).</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.ParamNames">
      <summary>
        <para>Gets or sets the parameter names of the method call.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.ParamValues">
      <summary>
        <para>Gets or sets the parameter values of a method call.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.ParamTypes">
      <summary>
        <para>Gets or sets the parameter types of a method call. </para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.MethodName">
      <summary>
        <para> Gets or sets the name of the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.XmlNameSpace">
      <summary>
        <para>Gets or sets the XML namespace of the SOAP RPC (Remote Procedure
      Call) <see cref="P:System.Runtime.Serialization.Formatters.ISoapMessage.MethodName" /> element.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ISoapMessage.Headers">
      <summary>
        <para>Gets or sets the out-of-band data of the method call.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.SoapMessage">
      <summary>
        <para>Holds the names and types of parameters required during serialization of a SOAP RPC (Remote Procedure Call).</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.ParamNames">
      <summary>
        <para>Gets or sets the parameter names for the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.ParamValues">
      <summary>
        <para>Gets or sets the parameter values for the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.ParamTypes">
      <summary>
        <para>Gets or sets the parameter types for the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.MethodName">
      <summary>
        <para> Gets or sets the name of the called method.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.XmlNameSpace">
      <summary>
        <para>Gets or sets the XML namespace name where the object 
      containing the called method is located.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapMessage.Headers">
      <summary>
        <para>Gets or sets the out-of-band data of the called method.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.SoapFault">
      <summary>
        <para> Carries error and status information within a SOAP message. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.SoapFault.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.SoapFault.#ctor(System.String,System.String,System.String,System.Runtime.Serialization.Formatters.ServerFault)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> class, setting the
 properties to specified values.</para>
      </summary>
      <param name="faultCode">The fault code for the new instance of <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" />. The fault code identifies the type of the fault that occurred.</param>
      <param name=" faultString">The fault string for the new instance of <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" />. The fault string provides a human readable explanation of the fault.</param>
      <param name=" faultActor">The URI of the object that generated the fault.</param>
      <param name=" serverFault">The description of a common language runtime exception thrown on the server that is necessary to rethrow the exception on the client. This information is also present in the <see cref="P:System.Runtime.Serialization.Formatters.SoapFault.Detail" /> property.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.SoapFault.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data
   to serialize the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> object.</para>
      </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name=" context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for the current serialization. </param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapFault.FaultCode">
      <summary>
        <para>Gets or sets the fault code for the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapFault.FaultString">
      <summary>
        <para>Gets or sets the fault message for the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapFault.FaultActor">
      <summary>
        <para> Gets or sets the fault actor for the <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> .</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.SoapFault.Detail">
      <summary>
        <para>Gets or sets additional information needed for the
 <see cref="T:System.Runtime.Serialization.Formatters.SoapFault" /> .</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.ServerFault">
      <summary>
        <para>Contains information for a server fault. This class cannot be inherited.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.ServerFault.#ctor(System.String,System.String,System.String)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.ServerFault" /> class.</para>
      </summary>
      <param name="exceptionType">The type of the exception that occurred on the server.</param>
      <param name=" message">The message that accompanied the exception.</param>
      <param name=" stackTrace">The stack trace of the thread that threw the exception on the server.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ServerFault.ExceptionType">
      <summary>
        <para>Gets or sets the type of exception that was thrown by the server.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ServerFault.ExceptionMessage">
      <summary>
        <para> Gets or sets the exception message that accompanied
      the exception thrown on the server.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.ServerFault.StackTrace">
      <summary>
        <para>Gets or sets the stack trace of the thread that threw 
      the exception on the server.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
      <summary>
        <para> Serializes and deserializes an object,
      or an entire graph of connected objects, in binary format.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> class with default values.</para>
      </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> class with a given surrogate
   selector and streaming context.</para>
      </summary>
      <param name="selector">The <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to use. Can be <see langword="null" />.</param>
      <param name="context">The source and destination for the serialized data.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)">
      <summary>
        <para>Deserializes the specified stream into an object graph.</para>
      </summary>
      <param name="serializationStream">The stream from which to deserialize the object graph.</param>
      <returns>
        <para>The top (root) of the object graph.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream,System.Runtime.Remoting.Messaging.HeaderHandler)">
      <summary>
        <para> Deserializes the specified
      stream into an object graph. The provided <see cref="T:System.Runtime.Remoting.Messaging.HeaderHandler" /> handles any headers in that
      stream.</para>
      </summary>
      <param name="serializationStream">The stream from which to deserialize the object graph.</param>
      <param name=" handler">The <see cref="T:System.Runtime.Remoting.Messaging.HeaderHandler" /> that handles any headers in the <paramref name="serializationStream" />. Can be <see langword="null" />.</param>
      <returns>
        <para>The deserialized object or the top object (root) of the object graph.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.DeserializeMethodResponse(System.IO.Stream,System.Runtime.Remoting.Messaging.HeaderHandler,System.Runtime.Remoting.Messaging.IMethodCallMessage)">
      <summary>
        <para>Deserializes a response to a remote method call from the
      provided <see cref="T:System.IO.Stream" />
      . </para>
      </summary>
      <param name="serializationStream">The stream from which to deserialize the object graph.</param>
      <param name=" handler">The <see cref="T:System.Runtime.Remoting.Messaging.HeaderHandler" /> that handles any headers in the <paramref name="serializationStream" />. Can be <see langword="null" />.</param>
      <param name=" methodCallMessage">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> containing details about where the call came from.</param>
      <returns>
        <para>The deserialized response to the remote method call.</para>
      </returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>
        <para> Serializes the object, or graph of objects with the specified top (root),
      to the given stream.</para>
      </summary>
      <param name="serializationStream">The stream to which the graph is to be serialized.</param>
      <param name="graph">The object at the root of the graph to serialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object,System.Runtime.Remoting.Messaging.Header[])">
      <summary>
        <para>Serializes the object, or graph of objects with the
      specified top (root), to the given stream attaching the provided headers.</para>
      </summary>
      <param name="serializationStream">The stream to which the object is to be serialized.</param>
      <param name="graph">The object at the root of the graph to serialize.</param>
      <param name="headers">Remoting headers to include in the serialization. Can be <see langword="null" />.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.TypeFormat">
      <summary>
        <para>Gets or sets the format in which type descriptions are laid out in the serialized
 stream.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.AssemblyFormat">
      <summary>
        <para>Gets or sets the format in which assembly names are serialized.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.SurrogateSelector">
      <summary>
        <para>Gets or sets an <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that controls type substitution
 during serialization and deserialization.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Binder">
      <summary>
        <para>Gets or sets an object of type <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that controls the binding
   of a serialized object to a type.</para>
      </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Context">
      <summary>
        <para> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" />
for this formatter.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>
        <para> Defines and represents a dynamic assembly.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>
        <para>Defines a named transient dynamic module in this assembly.</para>
      </summary>
      <param name="name">The name of the dynamic module.</param>
      <returns>
        <para>A <see cref="T:System.Reflection.Emit.ModuleBuilder" />
representing the defined dynamic module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.Boolean)">
      <summary>
        <para> Defines a named transient dynamic module
      in this assembly and specifies whether symbol information should be emitted.</para>
      </summary>
      <param name="name">The name of the dynamic module.</param>
      <param name="emitSymbolInfo">
        <see langword="true" /> if symbol information is to be emitted; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see cref="T:System.Reflection.Emit.ModuleBuilder" />
representing the defined dynamic module.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String)">
      <summary>
        <para> Defines a dynamic module with the given name that will be saved
      to the specified file. No symbol information is emitted.
      </para>
      </summary>
      <param name="name">The name of the dynamic module. </param>
      <param name="fileName">The name of the file to which the dynamic module should be saved. </param>
      <returns>
        <para> A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object
   representing the defined dynamic module.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String,System.String,System.Boolean)">
      <summary>
        <para> Defines a persistable dynamic module in this
      dynamic assembly that includes symbolic information using the default symbol
      
      writer.
      </para>
      </summary>
      <param name="name">The name of the dynamic module. </param>
      <param name=" fileName">The name of the file to which the dynamic module should be saved. </param>
      <param name=" emitSymbolInfo">If <see langword="true" />, symbolic information is written using the default symbol writer. </param>
      <returns>
        <para>A <see cref="T:System.Reflection.Emit.ModuleBuilder" /> object representing the defined dynamic module. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String)">
      <summary>
        <para>Defines a standalone managed resource for this assembly with the default public resource attribute.</para>
      </summary>
      <param name="name">The logical name of the resource.</param>
      <param name="description">A textual description of the resource.</param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</param>
      <returns>
        <para>A <see cref="T:System.Resources.ResourceWriter" />
object for the specified resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineResource(System.String,System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>
        <para>Defines a standalone managed resource for this assembly. Attributes can be specified for the managed
      resource.</para>
      </summary>
      <param name="name">The logical name of the resource.</param>
      <param name="description">A textual description of the resource.</param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</param>
      <param name="attribute">The resource attributes.</param>
      <returns>
        <para>A <see cref="T:System.Resources.ResourceWriter" />
object for the specified resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String)">
      <summary>
        <para> Adds an existing resource file to this assembly.</para>
      </summary>
      <param name="name">The logical name of the resource.</param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>
        <para> Adds an existing resource file to this
      assembly.</para>
      </summary>
      <param name="name">The logical name of the resource.</param>
      <param name="fileName">The physical file name (.resources file) to which the logical name is mapped. This should not include a path.</param>
      <param name="attribute">The resource attributes.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>
        <para>Loads the specified manifest resource from this assembly.</para>
      </summary>
      <returns>
        <para>An array of type
   <see langword="String" /> containing the names of all the resources.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>
        <para>Gets a <see cref="T:System.IO.FileStream" /> for the
   specified file in the file table of the manifest of this assembly.</para>
      </summary>
      <param name="name">The name of the specified file.</param>
      <returns>
        <para>A <see cref="T:System.IO.FileStream" /> for the 
   specified file, or <see langword="null" />,<see langword=" " />
   if the file is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>
        <para>Gets the files in the file table of an assembly
      manifest, specifying whether to include resource modules.</para>
      </summary>
      <param name="getResourceModules">
        <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</param>
      <returns>
        <para>An array of <see cref="T:System.IO.FileStream" /> objects.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>
        <para>Loads the specified
      manifest resource, scoped by the namespace of the specified type, from this
      assembly.</para>
      </summary>
      <param name="type">The type whose namespace is used to scope the manifest resource name.</param>
      <param name="name">The name of the manifest resource being requested.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> representing
   this
   manifest resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>
        <para> Loads the specified manifest resource from this assembly.</para>
      </summary>
      <param name="name">The name of the manifest resource being requested.</param>
      <returns>
        <para>A <see cref="T:System.IO.Stream" /> representing this manifest resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>
        <para>Returns information about how the given resource has been persisted.</para>
      </summary>
      <param name="resourceName">The name of the resource.</param>
      <returns>
        <para>
          <see cref="T:System.Reflection.ManifestResourceInfo" /> populated with information about
   the resource's topology, or <see langword="null" />
   if the resource is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para> Defines an unmanaged version information
      resource for this
      assembly with the given specifications.</para>
      </summary>
      <param name="product">The name of the product with which this assembly is distributed.</param>
      <param name=" productVersion">The version of the product with which this assembly is distributed.</param>
      <param name=" company">The name of the company that produced this assembly.</param>
      <param name=" copyright">Describes all copyright notices, trademarks, and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, copyright dates, trademark numbers, and so on. In English, this string should be in the format "Copyright Microsoft Corp. 1990-2001".</param>
      <param name=" trademark">Describes all trademarks and registered trademarks that apply to this assembly. This should include the full text of all notices, legal symbols, trademark numbers, and so on. In English, this string should be in the format "Windows is a trademark of Microsoft Corporation".</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource">
      <summary>
        <para> Defines an unmanaged version information resource using 
      the information specified in the assembly's AssemblyName object and the
      assembly's custom attributes.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.Byte[])">
      <summary>
        <para>Defines an unmanaged resource for this assembly as an
      opaque blob of bytes.</para>
      </summary>
      <param name="resource">The opaque blob of bytes representing the unmanaged resource.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(System.String)">
      <summary>
        <para>Defines an unmanaged resource file for this assembly
      given the name of the resource file.</para>
      </summary>
      <param name="resourceFileName">The name of the resource file.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>
        <para> Returns the dynamic module with the specified name.
      </para>
      </summary>
      <param name="name">The name of the requested dynamic module. </param>
      <returns>
        <para> A ModuleBuilder object
      representing the requested dynamic module.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo)">
      <summary>
        <para>Sets the entry point for this dynamic assembly, assuming
      that a console application is being built.</para>
      </summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)">
      <summary>
        <para>Sets the entry point for this assembly and defines the
      type of the PE being built.</para>
      </summary>
      <param name="entryMethod">A reference to the method that represents the entry point for this dynamic assembly. </param>
      <param name=" fileKind">The type of the assembly executable being built.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para>Set a custom attribute on this assembly using a specified custom attribute blob. </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para>Set a custom attribute on this assembly using a custom attribute builder. </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Save(System.String)">
      <summary>
        <para>Saves this dynamic assembly to disk.</para>
      </summary>
      <param name="assemblyFileName">The file name of the assembly.</param>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>
        <para>Gets the
      exported types defined in this assembly.</para>
      </summary>
      <returns>
   An array of <see cref="T:System.Type" /> containing the
   exported types defined in this assembly.
</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>
        <para>Gets the location, in codebase format, of the loaded file that
      contains the manifest if it is not shadow-copied.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>
        <para>Gets the location of the assembly, as specified originally (such as in an
   <see cref="T:System.Reflection.AssemblyName" /> object). </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>
        <para>Returns the entry point of this assembly.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>
        <para> Defines the access modes for a dynamic
      assembly.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>
        <para>Represents that the dynamic assembly can be executed, but not saved.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Save">
      <summary>
        <para>Represents that the dynamic assembly can be saved, but not executed.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndSave">
      <summary>
 Represents that the dynamic assembly can be executed and saved.
 </summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>
        <para> Defines and represents a constructor of a dynamic class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetToken">
      <summary>
        <para>Returns the <see cref="T:System.Reflection.Emit.MethodToken" /> that represents the token for this constructor.</para>
      </summary>
      <returns>
        <para>Returns the <see cref="T:System.Reflection.Emit.MethodToken" /> of this
   constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>
        <para>Defines a parameter of this constructor.</para>
      </summary>
      <param name="iSequence">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</param>
      <param name="attributes">The attributes of the parameter.</param>
      <param name="strParamName">The name of the parameter. The name can be the null string.</param>
      <returns>
        <para>Returns a <see langword="ParameterBuilder" /> object that
   represents the new parameter of this constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>
        <para> Sets this constructor's custom attribute associated with symbolic information.
      </para>
      </summary>
      <param name="name">The name of the custom attribute. </param>
      <param name=" data">The value of the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>
        <para>Gets an <see cref="T:System.Reflection.Emit.ILGenerator" />
for this constructor.</para>
      </summary>
      <returns>
        <para>Returns an <see cref="T:System.Reflection.Emit.ILGenerator" /> object for this
   constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>
        <para>Adds declarative security to this constructor.</para>
      </summary>
      <param name="action">The security action to be taken, such as Demand, Assert, and so on.</param>
      <param name="pset">The set of permissions the action applies to.</param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>
        <para>Returns this <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> instance as a <see cref="T:System.String" />.</para>
      </summary>
      <returns>
        <para>Returns a <see cref="T:System.String" /> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language
   (MSIL) stream.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetModule">
      <summary>
        <para> Returns a reference to the module that contains this constructor.
      </para>
      </summary>
      <returns>
   The module that contains this
   constructor.
</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> Invokes the constructor dynamically reflected by this instance on
      the given object, passing along the specified parameters, and under the
      constraints of the given binder.
      </para>
      </summary>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" /> , such as InvokeMethod, NonPublic, and so on. </param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If binder is <see langword="null" />, the default binder is used. See <see cref="T:System.Reflection.Binder" /> . </param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be <see langword="null" /> . </param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.) </param>
      <returns>
        <para> Returns an <see cref="T:System.Object" /> that is the return value of the invoked constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> Dynamically invokes the constructor reflected by
      this instance with the specified arguments, under the
      constraints of the specified <see langword="Binder" />.</para>
      </summary>
      <param name=" obj">The object that needs to be reinitialized.</param>
      <param name="invokeAttr">One of the <see langword="BindingFlags" /> values that specifies the type of binding that is desired.</param>
      <param name=" binder">A <see langword="Binder" /> that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If <paramref name="binder " />is <see langword="null" />, then Binder.DefaultBinding is used.</param>
      <param name=" parameters">An array of type <see langword="Object" /> used to match the number, order and type of the parameters for this constructor, under the constraints of <paramref name="binder" />. If this constructor does not require parameters, pass an array with zero elements, as in Object[] parameters = new Object[0]. If the parameters contain an uninitialized <see langword="Object" />, it is treated as <see cref="T:System.Empty" /> which, with the default binder, can be widened to 0, 0.0 or <see langword="String" />.</param>
      <param name=" culture">A <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</param>
      <returns>
        <para>An instance of the class associated with the constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>
        <para> Returns the parameters of this constructor.
      </para>
      </summary>
      <returns>
        <para> Returns an array of <see cref="T:System.Reflection.ParameterInfo" />
objects that represent the parameters of this constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> Returns all the custom attributes defined for this constructor.
      </para>
      </summary>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>
        <para> Returns an array of objects representing all the custom
      attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder" />
      instance.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>
        <para>
       Returns the method implementation flags for this constructor.
    </para>
      </summary>
      <returns>
        <para>
       The method implementation flags for this constructor.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Returns the custom attributes identified by the given type.</para>
      </summary>
      <param name="attributeType">The custom attribute type.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>
        <para>Returns an array of type <see cref="T:System.Object" /> representing the
   attributes of this
   constructor.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Set a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Set a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para> Checks if the specified custom attribute type is defined.
      </para>
      </summary>
      <param name="attributeType">A custom attribute type. </param>
      <param name=" inherit">Controls inheritance of custom attributes from base classes. This parameter is ignored.</param>
      <returns>
        <para>
          <see langword="true " />if the specified custom attribute
   type is defined; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>
        <para> Sets the method implementation flags for this constructor.
      </para>
      </summary>
      <param name="attributes">The method implementation flags. </param>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReturnType">
      <summary>
        <para>Retrieves the <see langword="Type" /> of this constructor's
   return value.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Signature">
      <summary>
        <para> Retrieves the signature of the field in the form of a string.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>
        <para>
       Retrieves the attributes for this constructor.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>
        <para> Holds a reference to the <see cref="T:System.Type" />
object from which this object was
obtained.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>
    Retrieves a reference to the <see cref="T:System.Type" /> object for the type that declares this member.
 </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>
        <para> Gets or sets whether the local variables in this
      constructor
      should
      be zero-initialized.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>
        <para>
       Retrieves the name of this constructor.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>
        <para>
       Retrieves the internal handle for the method. Use this handle to
       access the underlying metadata handle.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>
        <para> Defines events for a class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.GetEventToken">
      <summary>
        <para> Returns the token for this event.
      </para>
      </summary>
      <returns>
        <para> Returns the <see langword="EventToken" /> for this event.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Sets the method used to subscribe to this event.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the method used to subscribe to this event. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Sets the method used to unsubscribe to this event.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the method used to unsubscribe to this event. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Sets the method used to raise this event.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the method used to raise this event. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Adds one of the "other" methods associated with this 
      event. "Other" methods are methods other than the "on" and "raise" methods associated with an event.
      This function can be called many times to add as many "other" methods.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the other method. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Set a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Sets a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
    </member>
    <member name="T:System.Reflection.Emit.EventToken">
      <summary>
        <para> Represents the <see langword="Token " /> returned by the metadata to represent an event.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.EventToken.Empty">
      <summary>
        <para> The default <see langword="EventToken" /> with <see cref="P:System.Reflection.Emit.EventToken.Token" /> value
   0.
   </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for this event.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash code for this instance.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.EventToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of
   <see langword="EventToken " /> and is equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to be compared with this instance. </param>
      <returns>
        <para> Returns <see langword="true " /> if <paramref name="obj" /> is an
   instance of <see langword="EventToken " />and equals the current instance;
   otherwise, <see langword="false" />
   .
   </para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.EventToken.Token">
      <summary>
        <para>
       Retrieves
       the metadata token for this event.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>
        <para>Defines and represents a field. This class cannot be
      inherited.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetToken">
      <summary>
        <para>Returns the token representing this field.</para>
      </summary>
      <returns>
        <para>Returns the <see cref="T:System.Reflection.Emit.FieldToken" /> object that
    represents the token for this field.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>
        <para>Specifies the field layout.</para>
      </summary>
      <param name="iOffset">The offset of the field within the type containing this field.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>
        <para>Describes the native marshaling of the field.</para>
      </summary>
      <param name="unmanagedMarshal">A descriptor specifying the native marshalling of this field.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>
        <para>Sets the default value of this field.</para>
      </summary>
      <param name="defaultValue">The new default value for this field.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>
        <para>Retrieves the value of the field supported by the given object.</para>
      </summary>
      <param name="obj">The object on which to access the field.</param>
      <returns>
        <para> An <see cref="T:System.Object" /> containing the value of
   the field reflected by this instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>
        <para>Sets the value of the field supported by the given object.</para>
      </summary>
      <param name="obj">The object on which to access the field.</param>
      <param name="val">The value to assign to the field.</param>
      <param name="invokeAttr">A member of <see langword="IBinder" /> that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).</param>
      <param name="binder">A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.</param>
      <param name="culture">The software preferences of a particular culture.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Returns all the custom attributes defined for this field.</para>
      </summary>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>
        <para> An array of type <see cref="T:System.Object" /> representing all the custom
   attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" />
   instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Returns all the custom attributes defined for this field identified by the given type.</para>
      </summary>
      <param name=" attributeType">The custom attribute type.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>
        <para> An array of type <see cref="T:System.Object" /> representing all the custom
   attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.FieldBuilder" />
   instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para>Sets a custom attribute using a specified custom attribute blob.</para>
      </summary>
      <param name="con">The constructor for the custom attribute.</param>
      <param name="binaryAttribute">A byte blob representing the attributes.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para>Sets a custom attribute using a custom attribute builder.</para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute.</param>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Indicates whether an attribute having the specified type is defined on a field.</para>
      </summary>
      <param name="attributeType">The type of the attribute.</param>
      <param name="inherit">Controls inheritance of custom attributes from base classes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is
   defined on this field; otherwise, <see langword="false" /> .</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>
        <para>Indicates the <see cref="T:System.Type" /> object that represents the
    type of this field. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>
        <para>Indicates the name of this field. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>
        <para>Indicates a reference to the <see cref="T:System.Type" /> object for the type that
    declares this field. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>
        <para>Indicates the reference to the <see cref="T:System.Type" /><see langword=" " /> object from which this object was obtained. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>
        <para>Indicates the internal metadata handle
      for this field. This property is read-only.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>
        <para>Indicates the attributes of this field. This property is read-only.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.FieldToken">
      <summary>
        <para>The <see langword="FieldToken" /> class is an object representation of a token that represents a field.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.FieldToken.Empty">
      <summary>
        <para>
       The default FieldToken with <see cref="P:System.Reflection.Emit.FieldToken.Token" /> value
       0.
    </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for this field.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash code for this instance.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldToken.Equals(System.Object)">
      <summary>
        <para> Determines if an object is an instance of 
   <see langword="FieldToken " /> and
      is equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to compare to this <see langword="FieldToken" /> . </param>
      <returns>
        <para> Returns <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="FieldToken " /> and is equal
   to this object; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldToken.Token">
      <summary>
        <para>
       Retrieves the metadata token for this field.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary>
        <para> Generates Microsoft intermediate language (MSIL)
      instructions.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary>
        <para>Puts the specified instruction onto the stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream. Defined in the <see langword="OpCodes" /> enumeration.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary>
        <para>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary>
        <para>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
      <param name="arg">The character argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary>
        <para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="arg">The <see langword="Int" /> argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary>
        <para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary>
        <para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
      metadata token for the given method.</para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
      <param name="meth">A <see langword="MethodInfo" /> representing a method.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary>
        <para> Puts a calli instruction using a
      managed calling convention onto
      the
      Microsoft intermediate language (MSIL) stream.
      </para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="callingConvention">The managed calling convention to be used. </param>
      <param name="returnType">The <see cref="T:System.Type" /> of the result. </param>
      <param name="parameterTypes">The types of the required arguments to the instruction. </param>
      <param name="optionalParameterTypes">The types of the optional arguments for vararg calls. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
      <summary>
        <para>Puts a calli instruction using an unmanaged calling convention onto the Microsoft intermediate language (MSIL) stream. </para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="unmanagedCallConv">The unmanaged calling convention to be used. </param>
      <param name="returnType">The <see cref="T:System.Type" /> of the result. </param>
      <param name="parameterTypes">The types of the required arguments to the instruction. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary>
        <para> Puts a
      call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream.
      </para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream. </param>
      <param name="methodInfo">The method to be called. </param>
      <param name="optionalParameterTypes">The types of the optional arguments if the method is a <see langword="varargs" /> method. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary>
        <para>Puts the specified instruction and
      a signature token onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="signature">A helper for constructing a signature token.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary>
        <para>Puts the specified instruction and metadata token for
      the specified constructor onto the Microsoft intermediate language (MSIL) stream
      of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="con">A <see langword="ConstructorInfo" /> representing a constructor.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary>
        <para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by
      the metadata token for the given type.</para>
      </summary>
      <param name="opcode">The MSIL instruction to be put onto the stream.</param>
      <param name="cls">A <see langword="Type" /> .</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary>
        <para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary>
        <para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream.</param>
      <param name="arg">The <see langword="Single" /> argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary>
        <para>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL)
      stream of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be put onto the stream. Defined in the <see langword="OpCodes" /> enumeration.</param>
      <param name="arg">The numerical argument pushed onto the stream immediately after the instruction.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary>
        <para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
      to include a label when fixes are done.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="label">The label to which to branch from this location.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary>
        <para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space
      to include a label when fixes are done.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="labels">The array of label objects to which to branch from this location. All of the labels will be used.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary>
        <para>Puts the specified instruction and metadata token for
      the specified field onto the Microsoft intermediate language (MSIL) stream
      of instructions.</para>
      </summary>
      <param name="opcode">The Microsoft intermediate language (MSIL) instruction to be emitted onto the stream.</param>
      <param name="field">A <see langword="FieldInfo" /> representing a field.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary>
        <para>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the
      metadata token for the given string.</para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
      <param name="str">The <see langword="String" /> to be emitted.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary>
        <para> Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by
      the index of the given local
      variable.</para>
      </summary>
      <param name="opcode">The MSIL instruction to be emitted onto the stream.</param>
      <param name="local">A local variable.</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary>
        <para> Begins an exception block for a non-filtered exception.
      </para>
      </summary>
      <returns>
        <para> The label for the end of the block. This will leave you in the
      correct place to execute finally blocks or to finish the try.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary>
        <para> Ends an exception block.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary>
        <para> Begins
      an exception block for a filtered exception.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary>
        <para> Begins a catch block.
      </para>
      </summary>
      <param name="exceptionType">The Type object that represents the exception. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary>
        <para> Begins an exception fault block in the
      Microsoft intermediate
      language (MSIL)
      stream.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary>
        <para> Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary>
        <para> 
      Declares a new label.
   </para>
      </summary>
      <returns>
        <para> Returns a new label that can be used as a token for branching.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary>
        <para> Marks the Microsoft intermediate language (MSIL) stream's current position with
      the given label.
      </para>
      </summary>
      <param name="loc">The label for which to set an index. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary>
        <para>Emits an instruction to throw an exception.</para>
      </summary>
      <param name="excType">The class of the type of exception to throw. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary>
        <para> Emits the Microsoft intermediate language (MSIL) to call <see cref="M:System.Console.WriteLine" />
with a string.</para>
      </summary>
      <param name="value">The string to be printed. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary>
        <para> Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="M:System.Console.WriteLine" />
with
the given local variable.</para>
      </summary>
      <param name="localBuilder">The local variable whose value is to be written to the console. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary>
        <para> Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="M:System.Console.WriteLine" />
with the given field.</para>
      </summary>
      <param name="fld">The field whose value is to be written to the console. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary>
        <para> Declares
      a local
      variable.
      </para>
      </summary>
      <param name="localType">The <see cref="T:System.Type" /> of the local variable. </param>
      <returns>
        <para> The
      declared local
      variable.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary>
        <para>Specifies the namespace to be used in evaluating locals
      and watches for the current active lexical scope.</para>
      </summary>
      <param name="usingNamespace">The namespace to be used in evaluating locals and watches for the current active lexical scope</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para> Marks a sequence point in the Microsoft intermediate language (MSIL)
      stream.
      </para>
      </summary>
      <param name="document">The document for which the sequence point is being defined. </param>
      <param name=" startLine">The line where the sequence point begins. </param>
      <param name=" startColumn">The column in the line where the sequence point begins. </param>
      <param name=" endLine">The line where the sequence point ends. </param>
      <param name=" endColumn">The column in the line where the sequence point ends. </param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary>
        <para> Begins a
      lexical scope.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary>
        <para> Ends a
      lexical scope.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary>
        <para>Represents a label in the instruction stream.
   <see langword="Label" /> is used in conjunction with the <see cref="T:System.Reflection.Emit.ILGenerator" />
   class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary>
        <para>
       Generates a hash code for this instance.
    </para>
      </summary>
      <returns>
        <para>
       Returns a hash code for this instance.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of
   <see langword="Label " /> and is
      equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to compare with this <see langword="Label" /> instance. </param>
      <returns>
        <para>Returns <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="Label " /> and is equal to this object; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary>
        <para>Represents a local variable within a method or
      constructor.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)">
      <summary>
        <para> Sets the name of this local variable.
      </para>
      </summary>
      <param name="name">The name of the local variable. </param>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)">
      <summary>
        <para> Sets the name and lexical scope of this
      local variable.
      </para>
      </summary>
      <param name="name">The name of the local variable. </param>
      <param name="startOffset">The beginning offset of the lexical scope of the local variable. </param>
      <param name="endOffset">The ending offset of the lexical scope of the local variable. </param>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary>
        <para> Returns the type of the local variable.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>
        <para> Defines and represents a method
      (or constructor) on a dynamic class.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetToken">
      <summary>
        <para> Returns the <see langword="MethodToken" /> that represents
   the token for this method.
   </para>
      </summary>
      <returns>
        <para> Returns the <see langword="MethodToken" /> of this method.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>
        <para> Determines whether the given object is equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to compare with this <see langword="MethodBuilder" /> instance. </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="obj" /> is an instance of
<see langword="MethodBuilder " /> and is equal to this object; otherwise,
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>
        <para>Gets the hash code for this method.</para>
      </summary>
      <returns>
   The hash code for this method.
</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>
        <para>Defines
      a parameter of this method.</para>
      </summary>
      <param name="position">The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.</param>
      <param name="attributes">The attributes of the parameter.</param>
      <param name="strParamName">The name of the parameter. The name can be the null string.</param>
      <returns>
        <para>Returns a <see langword="ParameterBuilder" />
object that represents the new parrameter
of this method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>
        <para>Sets marshaling information for the return type of
      this method.</para>
      </summary>
      <param name="unmanagedMarshal">Marshaling information for the return type of this method. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>
        <para> Set a symbolic custom attribute using a blob.
      </para>
      </summary>
      <param name="name">The name of the symbolic custom attribute. </param>
      <param name="data">The byte blob that represents the value of the symbolic custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)">
      <summary>
        <para> Adds declarative security
      to
      this method.
      </para>
      </summary>
      <param name="action">The security action to be taken (Demand, Assert, and so on). </param>
      <param name="pset">The set of permissions the action applies to. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)">
      <summary>
        <para> Creates the body of the method using the given array of Microsoft intermediate language (MSIL)
      instructions.
      </para>
      </summary>
      <param name="il">An array containing valid MSIL instructions. If this parameter is <see langword="null" /> , the method's body is cleared. </param>
      <param name="count">The number of valid bytes in the MSIL array. This value is ignored if MSIL is <see langword="null" /> . </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>
        <para> Sets the
      implementation flags for this method.
      </para>
      </summary>
      <param name="attributes">The implementation flags to set. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>
        <para> Returns an <see langword="ILGenerator" /> for this method with a default Microsoft
   intermediate
   language (MSIL) stream size of 64 bytes.
   </para>
      </summary>
      <returns>
        <para> Returns an <see langword="ILGenerator" />
object for this method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>
        <para>Returns an <see langword="ILGenerator" /> for this method with the
   specified Microsoft intermediate language (MSIL) stream size.</para>
      </summary>
      <param name="size">The size of the MSIL stream</param>
      <returns>
        <para>Returns an <see langword="ILGenerator" /> object for this method. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>
        <para> Returns this <see langword="MethodBuilder" /> instance as a string.
   </para>
      </summary>
      <returns>
        <para> Returns a string containing
      the name, attributes, method signature, exceptions,
      and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetModule">
      <summary>
        <para>
       Returns
       a reference to the module that contains this method.
    </para>
      </summary>
      <returns>
        <para>
       Returns
       a reference to the module that contains this method.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>
        <para> Return the base implementation
      for a
      method.
      </para>
      </summary>
      <returns>
        <para> The base implementation
      of this
      method.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>Dynamically
      invokes the method reflected by this instance on the given object, passing
      along the specified parameters, and under the constraints of the given binder.</para>
      </summary>
      <param name="obj">The object on which to invoke the specified method. If the method is static, this parameter is ignored.</param>
      <param name="invokeAttr">This must be a bit flag from <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" />, and so on.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is <see langword="null" />, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be <see langword="null" />.</param>
      <param name="culture">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used. (Note that this is necessary to, for example, convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, since 1000 is represented differently by different cultures.)</param>
      <returns>
        <para>Returns an object containing the return value of the invoked method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>
        <para> Returns
      the parameters of this method.
      </para>
      </summary>
      <returns>
        <para> An array of <see langword="ParameterInfo" />
objects that
represent the parameters of the method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>
        <para>
       Returns
       the implementation flags for the method.
    </para>
      </summary>
      <returns>
        <para>
       Returns
       the implementation flags for the method.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para> Returns all the custom attributes defined for this method.
      </para>
      </summary>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>
        <para> Returns an array of objects representing all the custom
      attributes of this
      method.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para> Returns the custom attributes identified by the given type.
      </para>
      </summary>
      <param name="attributeType">The custom attribute type. </param>
      <param name=" inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>
        <para> Returns an array of objects representing the attributes
      of this method that are of <see cref="T:System.Type" /> attribute
      type.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para> Checks if the specified custom attribute type is defined.
      </para>
      </summary>
      <param name="attributeType">The custom attribute type. </param>
      <param name="inherit">Specifies whether to search this member's inheritance chain to find the custom attributes.</param>
      <returns>
        <para>
          <see langword="true " />if the specified custom attribute
   type is defined; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Sets a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Sets a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to describe the custom attribute. </param>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>
        <para> Gets or sets whether the local variables in this method 
      should be zero initialized. The default value of this property is
   <see langword="true" /> 
   
   .
   </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>
        <para>
       Returns the type that
       declares
       this method.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>
        <para> Retrieves the type of this method’s
      return value.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>
        <para>Returns the custom attributes of the
      method's return type.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Signature">
      <summary>
        <para> Retrieves the signature of the field.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>
        <para> Retrieves the attributes for this method.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>
        <para>
       Returns the calling convention
       of
       the method.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>
        <para> Retrieves the class that was used in reflection to obtain this
      object.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>
        <para> Retrieves the internal handle for the method. Use this
      handle to access the
      underlying
      metadata handle.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>
        <para> Retrieves the name of this method.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary>
        <para> Helps build
      custom attributes.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>
        <para> Initializes an instance of the
   <see langword="CustomAttributeBuilder" /> class given the constructor 
      for the custom attribute and the arguments to the
      constructor.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary>
        <para> Initializes an instance of the
   <see langword="CustomAttributeBuilder" /> class given the constructor 
      for the custom attribute, the arguments to the constructor, and
      a set of named property or value
      pairs.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>
        <para> Initializes an instance of the
   <see langword="CustomAttributeBuilder" /> class given the constructor 
      for the custom attribute, the arguments to the
      constructor, and a set of named field/value
      pairs.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>
        <para> Initializes an instance of the
   <see langword="CustomAttributeBuilder" /> class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value
      pairs.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="constructorArgs">The arguments to the constructor of the custom attribute. </param>
      <param name="namedProperties">Named properties of the custom attribute. </param>
      <param name="propertyValues">Values for the named properties of the custom attribute. </param>
      <param name="namedFields">Named fields of the custom attribute. </param>
      <param name="fieldValues">Values for the named fields of the custom attribute. </param>
    </member>
    <member name="T:System.Reflection.Emit.MethodRental">
      <summary>
        <para> Provides a fast way
      to swap method body implementation given a method of a class.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodRental.JitOnDemand">
      <summary>
        <para> Specifies that
      the method
      should be just-in-time (JIT) compiled when needed.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodRental.JitImmediate">
      <summary>
        <para> Specifies that the
 method should be just-in-time (JIT) compiled immediately.
 </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodRental.SwapMethodBody(System.Type,System.Int32,System.IntPtr,System.Int32,System.Int32)">
      <summary>
        <para>Swaps the body of a method.</para>
      </summary>
      <param name="cls">The class containing the method. </param>
      <param name="methodtoken">The token for the method. </param>
      <param name="rgIL">A pointer to the method. This should include the method header. </param>
      <param name="methodSize">The size of the new method body in bytes. </param>
      <param name="flags">Flags that control the swapping. See the definitions of the constants. </param>
    </member>
    <member name="T:System.Reflection.Emit.MethodToken">
      <summary>
        <para>The <see langword="MethodToken" /> class is an object
   representation of a token that represents a method.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.MethodToken.Empty">
      <summary>
        <para> The default <see langword="MethodToken" /> with <see cref="P:System.Reflection.Emit.MethodToken.Token" /> value 0.
   </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.GetHashCode">
      <summary>
        <para>
       Returns the generated hash code for this method.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash code for this instance.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodToken.Equals(System.Object)">
      <summary>
        <para> Tests whether the given object is equal to this
   <see langword="MethodToken " />
   object.
   </para>
      </summary>
      <param name="obj">The object to compare to this object. </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="MethodToken " /> and is equal
   to this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodToken.Token">
      <summary>
        <para>
       Returns the metadata token for this method.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>
        <para> Defines and represents a module. Get an instance of
      ModuleBuilder by calling <see cref="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)" />.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>
        <para> 
      Gets the named type defined in the module.
      </para>
      </summary>
      <param name="className">The name of the <see cref="T:System.Type" /> to get.</param>
      <returns>
        <para>The requested type. Returns
   <see langword="null " />if the type is not found.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>
        <para>Gets the named type defined in the module optionally ignoring the case of the type name. </para>
      </summary>
      <param name="className">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, if <paramref name="typeName" /> has less than 128 characters. <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" /> .</para>
      </param>
      <returns>
        <para>The requested type. Returns <see langword="null " />if the type is not found. </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>
        <para>Gets the named type defined in the module optionally ignoring the
      case of the type name. Optionally throws an exception if the type is not found. </para>
      </summary>
      <param name="className">The name of the <see cref="T:System.Type" /> to get.</param>
      <param name="throwOnError">
        <para>
          <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if an error occurs while loading the <see cref="T:System.Type" />.<see langword="false" /> to ignore errors while loading the <see cref="T:System.Type" />.</para>
      </param>
      <param name="ignoreCase">
        <para>
          <see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, if <paramref name="typeName" /> has less than 128 characters. <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" /> .</para>
      </param>
      <returns>
        <para> The requested type. Returns
   <see langword="null " />if the type is not found.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>
        <para>Returns
      all the classes defined within this module.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="Type" />
containing classes defined within the module that is reflected by this
instance.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder" /> for a type with the specified name.</para>
      </summary>
      <param name="name">The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <returns>
        <para>Returns the created <see langword="TypeBuilder" />
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>
        <para>Constructs a <see langword="TypeBuilder " /> given the
   type name, attributes, the type that the defined type extends, and the interfaces
   that the defined type implements.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attributes to be associated with the type.</param>
      <param name="parent">The type that the defined type extends.</param>
      <param name="interfaces">The list of interfaces that the type implements.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder " /> created with all of
   the requested attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder " /> given type name, its attributes, and the type
   that the defined type extends.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attribute to be associated with the type.</param>
      <param name=" parent">The Type that the defined type extends.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder" /> created with all of
   the requested attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder" /> given the
   type name and the type attributes.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder " /> created with all of
   the requested attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder" /> given the
   type name, attributes, the type that
   the defined type extends, the packing size of the defined type, and the total
   size of the defined type.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name=" parent">The type that the defined type extends.</param>
      <param name="packingSize">The packing size of the type.</param>
      <param name="typesize">The total size of the type.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder" /> created with all of
   the requested attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder" /> given the type name, the
   attributes, the type that the defined type extends, and the total size of the type.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name="parent">The Type that the defined type extends.</param>
      <param name="typesize">The total size of the type.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>
        <para>Constructs a <see langword="TypeBuilder " /> given the type name,
   the attributes, the type that the defined type extends, and the packing size of
   the type.</para>
      </summary>
      <param name="name"> The full path of the type. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="attr">The attributes of the defined type.</param>
      <param name="parent">The Type that the defined type extends.</param>
      <param name="packsize">The packing size of the type.</param>
      <returns>
        <para>Returns a <see langword="TypeBuilder" /> object.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>
        <para> Defines an enumeration type with that is a value type
      with a single non-static field called <paramref name="value__ " />
      of
      the specified type.
      </para>
      </summary>
      <param name="name"> The full path of the enumeration type. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name=" visibility">The type attributes for the enumeration. The attributes are any bits defined by <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />. </param>
      <param name=" underlyingType">The underlying type for the enumeration. </param>
      <returns>
        <para> Returns the defined enumeration.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String)">
      <summary>
        <para>Defines the named managed embedded resource
      to be stored in this module.</para>
      </summary>
      <param name="name">The name of the resource. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name=" description">The description of the resource.</param>
      <returns>
        <para>Returns a resource writer for the
      defined resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)">
      <summary>
        <para>Defines the named managed embedded resource
      with the given attributes that is to be stored in this module.</para>
      </summary>
      <param name="name">The name of the resource. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name="description">The description of the resource.</param>
      <param name=" attribute">The resource attributes.</param>
      <returns>
        <para>Returns a resource writer for the defined resource.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>
        <para>Defines a global method given its name,
      attributes, return type, and parameter types.</para>
      </summary>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name=" attributes">The attributes of the method.</param>
      <param name=" returnType">The return type of the method.</param>
      <param name=" parameterTypes">The types of the method's parameters.</param>
      <returns>
        <para>Returns the defined global method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>
        <para>Defines a
      global method given its name, attributes, calling
      convention, return type, and parameter types.</para>
      </summary>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name=" attributes">The attributes of the method.</param>
      <param name=" callingConvention">The calling convention for the method.</param>
      <param name=" returnType">The return type of the method.</param>
      <param name=" parameterTypes">The types of the method's parameters.</param>
      <returns>
        <para>Returns the defined global method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>
        <para>Defines initialized data field in the .sdata section of
      the portable executable (PE) file.</para>
      </summary>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls.</param>
      <param name=" data">The blob of data.</param>
      <param name=" attributes">The attributes for the field. The default is <see langword="Static" /> .</param>
      <returns>
        <para>A field to reference the data.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>
        <para> Defines uninitialized data field in the .sdata section of
      the portable executable (PE) file.
      </para>
      </summary>
      <param name="name">The name used to refer to the data. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="size">The blob of data. </param>
      <param name="attributes">The attributes for the field. </param>
      <returns>
        <para> A field to reference the data.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)">
      <summary>
        <para> Returns the token used to identify the specified type within this
      module.
      </para>
      </summary>
      <param name="type">The type object that represents the class type. </param>
      <returns>
        <para> Returns the <see langword="TypeToken" /> used to identify
   the given type within this module.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)">
      <summary>
        <para> Returns the token used to identify the type given its
      name.
      </para>
      </summary>
      <param name="name">A string representing the name of the class. </param>
      <returns>
        <para> Returns the <see langword="TypeToken" /> used to identify
   the type given by name within this module.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)">
      <summary>
        <para> Returns the token used to identify the specified method within
      this module.
      </para>
      </summary>
      <param name="method">A <see langword="MethodToken" /> object representing the method to get a token for. </param>
      <returns>
        <para> Returns the token used to identify the method represented by method within this module.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>
        <para> Returns the token for the named method on an
      array class.
      </para>
      </summary>
      <param name="arrayClass">The <see langword="Type" /> object for the array. </param>
      <param name="methodName">A string containing the name of the method. </param>
      <param name="callingConvention">The calling convention for the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <returns>
        <para> The token for
      the named method on an array class.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>
        <para> Returns the named method on an array
      class.
      </para>
      </summary>
      <param name="arrayClass">An array class. </param>
      <param name=" methodName">The name of a method on the array class. </param>
      <param name=" callingConvention">The method's calling convention. </param>
      <param name=" returnType">The return type of the method. </param>
      <param name=" parameterTypes">The types of the method's parameters. </param>
      <returns>
        <para>The named method on an array class.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)">
      <summary>
        <para> Returns the token used to identify the specified field within
      this module.
      </para>
      </summary>
      <param name="field">A <see langword="FieldInfo" /> object representing the field to get a token for. </param>
      <returns>
        <para> Returns the token used to identify the field represented 
      by <paramref name="con" /> within this module.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)">
      <summary>
        <para> Returns the token of the given string in the module’s constant
      pool.
      </para>
      </summary>
      <param name="str">The string to add to the module's constant pool. </param>
      <returns>
        <para> Returns the <see langword="StringToken" /> of the string
   added to the constant pool.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Set a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Set a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)">
      <summary>
        <para> Defines a signature token using the given
   <see langword="SignatureHelper" />
   object.
   </para>
      </summary>
      <param name="sigHelper">A reference to a <see langword="SignatureHelper" /> . </param>
      <returns>
        <para> A <see langword="SignatureToken" /> for
   the defined signature.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)">
      <summary>
        <para> Defines a signature token specified by the character array and
      signature length.
      </para>
      </summary>
      <param name="sigBytes">The signature blob. </param>
      <param name="sigLength">The length of the signature blob. </param>
      <returns>
        <para> A <see langword="SignatureToken " /> for
   the defined signature.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)">
      <summary>
        <para> Returns the token used to identify the specified constructor
      within this module.
      </para>
      </summary>
      <param name="con">A <see langword="ConstructorInfo" /> object representing the constructor to get a token for. </param>
      <returns>
        <para> Returns the token used to identify the constructor 
      represented by <paramref name="con" />
      within this module.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetSymWriter">
      <summary>
        <para>
       Returns
       the symbol writer associated with
       this dynamic module.
    </para>
      </summary>
      <returns>
        <para>
       Returns
       the symbol writer associated with
       this dynamic module.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)">
      <summary>
        <para> Sets the user entry point.
      </para>
      </summary>
      <param name="entryPoint">The user entry point. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <para> Define a document for source.
      </para>
      </summary>
      <param name="url">The URL for the document. </param>
      <param name="language">The GUID identifying the document language. This can be null. </param>
      <param name="languageVendor">The GUID identifying the document language vendor. This can be null. </param>
      <param name="documentType">The GUID identifying the document type. This can be null. </param>
      <returns>
        <para> An <see langword="ISymbolDocumentWriter" /> object
   representing the defined document.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(System.String,System.Byte[])">
      <summary>
        <para> Sets the custom attribute that is stored
      with the symbolic information.
      </para>
      </summary>
      <param name="name">The name of the custom attribute </param>
      <param name=" data">An opaque blob of bytes that represents the value of the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <para> Defines a <see langword="PInvoke" /> method given its
   name, the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke" />
   
   flags.
   </para>
      </summary>
      <param name="name">The name of the <see langword="PInvoke" /> method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name=" dllName">The name of the DLL in which the <see langword="PInvoke" /> method is defined. </param>
      <param name=" attributes">The attributes of the method. </param>
      <param name=" callingConvention">The method's calling convention. </param>
      <param name=" returnType">The method's return type. </param>
      <param name=" parameterTypes">The types of the method's parameters. </param>
      <param name=" nativeCallConv">The native calling convention. </param>
      <param name=" nativeCharSet">The method's native character set.</param>
      <returns>
        <para> The defined <see langword="PInvoke" /> method.
   </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <para> Defines a <see langword="PInvoke" /> method given its 
   name, the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke" />
   
   flags.
   </para>
      </summary>
      <param name="name">The name of the <see langword="PInvoke" /> method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="dllName">The name of the DLL in which the <see langword="PInvoke" /> method is defined. </param>
      <param name="entryName">The name of the entry point in the DLL. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="callingConvention">The method's calling convention. </param>
      <param name="returnType">The method's return type. </param>
      <param name="parameterTypes">The types of the method's parameters. </param>
      <param name="nativeCallConv">The native calling convention. </param>
      <param name=" nativeCharSet">The method's native character set.</param>
      <returns>
        <para> The defined PInvoke method.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>
        <para> Complete the global function definitions for this dynamic module.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsTransient">
      <summary>
        <para> Checks if this dynamic module is transient.
      </para>
      </summary>
      <returns>
        <para>Returns <see langword="true " /> if
   this dynamic module is transient; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])">
      <summary>
        <para>Defines an unmanaged embedded resource given an opaque
      blob of bytes.</para>
      </summary>
      <param name="resource">An opaque blob that represents an unmanaged resource</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)">
      <summary>
        <para>Defines an unmanaged resource given the name of Win32 resource file.</para>
      </summary>
      <param name="resourceFileName">The name of the unmanaged resource file</param>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>
        <para>Gets a <see langword="String" /> representing the
   fully-qualified name and path to this module.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.PEFileKinds">
      <summary>
        <para>Specifies the type of the portable executable (PE) file.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.Dll">
      <summary>
        <para>The portable executable (PE) file is a DLL.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.ConsoleApplication">
      <summary>
        <para>The application is a console (not a Windows-based) application.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PEFileKinds.WindowApplication">
      <summary>
        <para>The application is a Windows-based application.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>
   Provides field representations of the Microsoft
   Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).
</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>
        <para>Fills space if bytecodes are patched. No meaningful operation is
      performed although a processing cycle can be consumed.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>
        <para>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break
      point has been tripped.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>
        <para>Loads the argument at index 0 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>
        <para>Loads the argument at index 1 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>
        <para>Loads the argument at index 2 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>
        <para>Loads the argument at index 3 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>
        <para>Loads the local variable at index 0 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>
        <para>Loads the local variable at index 1 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>
        <para>Loads the local variable at index 2 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>
        <para>Loads the local variable at index 3 onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at index 0.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at index 1.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at index 2.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at index 3.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>
        <para>Loads the argument (referenced by a specified short form index)
      onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>
        <para>Load an argument address, in short form, onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>
        <para>Stores the value on top of the evaluation stack in the
      argument slot at a specified index <paramref name="," /> short
      form<paramref name="." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>
        <para>Loads the local variable at a specific index onto the
      evaluation stack, short form.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>
        <para>Loads the address of the local variable at a specific
      index onto the evaluation
      stack, short form.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at <paramref name="index" /> (short
      form)<paramref name="." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>
        <para>Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>
        <para>Pushes the integer value of -1 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>
        <para>Pushes the integer value of 0 onto the evaluation
      stack as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>
        <para> Pushes the integer value of 1 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>
        <para> Pushes the integer value of 2 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>
        <para> Pushes the integer value of 3 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>
        <para> Pushes the integer value of 4 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>
        <para> Pushes the integer value of 5 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>
        <para> Pushes the integer value of 6 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>
        <para> Pushes the integer value of 7 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>
        <para> Pushes the integer value of 8 onto the evaluation stack
      as an <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>
        <para>Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an
<see langword="int32" />, short form.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>
        <para>Pushes a supplied value of
      type <see langword="int32" /> onto the evaluation stack as an
   <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>
        <para>Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an
<see langword="int64" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>
        <para>Pushes a supplied value of type <see langword="float32" /> onto the
   evaluation stack as type <see langword="F" /> (float).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>
        <para>Pushes a supplied value of type <see langword="float64 " /> onto the
   evaluation stack as type <see langword="F" /> (float).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>
        <para>Copies the current topmost value on the evaluation stack, and then pushes
      the copy onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>
        <para>Removes the value currently on top of the evaluation
      stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>
        <para>Exits current method and jumps to specified method.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>
        <para>Calls the method indicated by the passed method descriptor.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>
        <para>Calls the method indicated on the evaluation stack (as a
      pointer to an entry point) with arguments described by a calling
      convention.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>
        <para> Returns from the current method, pushing a return value (if
      present) from the caller's evaluation stack onto the callee's evaluation
      stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>
        <para>Unconditionally transfers control to a target
      instruction (short form).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>
        <para> Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>
        <para>Transfers control to a target instruction (short
      form) if <paramref name="value" /> is <see langword="true" /> , not null, or non-zero.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>
        <para>Transfers control to a target instruction (short form) if
      two values are equal.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if the first value is greater than or equal to the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if the first value is greater than the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>
        <para>Transfers control to a target instruction (short form) if the first
      value is less than or equal to the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if the first value is less than the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      when two unsigned integer
      values or unordered float values are not equal.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if if the the first value is greather than the second value, when comparing unsigned integer values or unordered
      float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if the first value is greater than the second value, when comparing unsigned
      integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>
        <para>Transfers control to a target instruction (short form) if the first
      value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>
        <para>Transfers control to a target instruction (short form)
      if the first value is less than the second value, when
      comparing unsigned integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>
        <para>Unconditionally transfers control to a target
      instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>
        <para> Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a 
   null reference (<see langword="Nothing" /> in Visual Basic), or zero.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>
        <para> Transfers control to a target instruction if
   <paramref name="value" /> is <see langword="true" /> , not null, or non-zero.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>
        <para>Transfers control to a target instruction if two values
      are equal.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>
        <para> Transfers control to a target instruction if the
      first value is greater than or equal to the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>
        <para>Transfers control to a target instruction if the
      first value is greater than the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>
        <para>Transfers control to a target instruction if the first value is less
      than or equal to the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>
        <para>Transfers control to a target instruction if the first
      value is less than the second value.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>
        <para>Transfers control to a target instruction
      when two unsigned integer
      values or unordered float values are not equal.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>
        <para>Transfers control to a target instruction if the the
      first value is greather than the second value,
      when comparing unsigned integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>
        <para>Transfers control to a target instruction if the first
      value is greater than the second value, when comparing unsigned integer
      values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>
        <para>Transfers control to a target instruction if the first value is less
      than or equal to the second value, when
      comparing unsigned integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>
        <para>Transfers control to a target instruction if the first
      value is less than the second value, when comparing
      unsigned integer values or unordered float values.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>
        <para>Implements a jump table.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>
        <para> Loads a value of type <see langword="int8" /> as
   an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>
        <para> Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>
        <para> Loads a value of type <see langword="int16" /> as
   an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>
        <para> Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>
        <para> Loads a value of type <see langword="int32" /> as
   an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>
        <para> Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>
        <para> Loads a value of type <see langword="int64" /> as
   an <see langword="int64" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>
        <para> Loads a value of type <see langword="natural int" /> as a
<see langword="natural int" /> onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>
        <para> Loads a value of
      type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>
        <para> Loads a value of
      type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>
        <para> Loads an object reference as a
      type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>
        <para>Stores a object reference value at a supplied
      address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>
        <para>Stores a value of type <see langword=" int8" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>
        <para>Stores a value of type <see langword=" int16" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>
        <para>Stores a value of type <see langword=" int32" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>
        <para>Stores a value of type <see langword=" int64" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>
        <para>Stores a value of type <see langword=" float32" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>
        <para>Stores a value of type <see langword=" float64" />
at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>
        <para> Adds two values and pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>
        <para>Subtracts one value from another and
      pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>
        <para> Multiplies two values and pushes the result on the
      evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>
        <para>Divides two values and pushes the
      result as a floating-point (type <see langword="F" /> ) or quotient (type
   <see langword="int32" />) onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>
        <para>Divides two unsigned integer values and pushes the result
      (<see langword="int32" />) onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>
        <para>Divides two values and pushes
      the remainder onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>
        <para>Divides two unsigned values and pushes the remainder onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>
        <para> Computes the bitwise AND of two values
      and pushes the result onto the evalution stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>
        <para>Compute the bitwise complement of the two integer values
      on top of the stack and pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>
        <para>Computes the bitwise XOR of the top two values on the evaluation
      stack, pushing the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>
        <para>Shifts an integer value to the left (in zeroes) by
      a specified number of bits, pushing the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>
        <para>Shifts an integer value (in sign) to the right by a
      specified number of bits, pushing the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>
        <para>Shifts an unsigned integer value (in zeroes) to the right
      by a specified number of bits, pushing the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>
        <para>Negates a value and pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>
        <para>Computes the bitwise complement of the integer value on top of the stack and
      pushes the result onto the evaluation stack as the same type.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="int8" />, then extends (pads) it to
   <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="int16" />, then extends (pads) it to
   <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword=" int64" />. </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="float32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="float64" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="unsigned" /><see langword="int64" />, and extends it to <see langword="int64" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>
        <para>Calls a late-bound method on an object, pushing the
      return value onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>
        <para> Copies the value type located at the address of an object
      (type <see langword="&amp;" />,<see langword="*" /> or
   <see langword="natural int" />) to the address of the destination object (type
   <see langword="&amp;" />,<see langword="*" /> or <see langword="natural int" />).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>
        <para>Copies the value type object pointed to by an
      address to the top of the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>
        <para> Pushes
      a new object reference to a string literal stored in the metadata.
   </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>
        <para>Creates a new object or a new instance of a value type,
      pushing an object reference (type <see langword="O" />) onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>
        <para>Attempts to cast an object passed by reference to
      the specified class.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>
        <para>Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>
        <para>Converts the unsigned integer value on top of the evaluation stack
      to <see langword="float32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>
        <para>Converts the boxed representation of a value type to its unboxed form.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>
        <para>Throws the exception object
      currently on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>
        <para> Finds the value of a field in the object whose reference is currently on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>
        <para>Finds the address of a field in the object whose reference is currently
      on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>
        <para>Replaces the value stored in the field of an
      object reference or pointer with a new value.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>
        <para>Pushes the value of a static field onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>
        <para>Pushes the address of a static field onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>
        <para>Replaces the value of a static field with a value from the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>
        <para>Copies a value of a specified type from the evaluation
      stack into a supplied memory address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation stack to
      signed <see langword="int8" /> and extends it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation stack to
      signed <see langword="int16" /> and extends it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation stack to signed
   <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation stack to signed
   <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation
      stack to <see langword="unsigned" /><see langword="int8" /> and extends it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation
      stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation
      stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation
      stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation stack to signed
   <see langword="natural int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>
        <para>Converts the unsigned value on top of the evaluation
      stack to <see langword="unsigned" /><see langword="natural int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>
        <para>Converts a value type to an object
      reference (type <see langword="O" />).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>
        <para>Pushes an object reference to a new zero-based,
      one-dimensional array whose elements are of a specific type onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>
        <para>Pushes the number of elements of a
      zero-based, one-dimensional array onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>
        <para>Loads the address of the array element at a specified
      array index onto the top of the evaluation stack as type <see langword="&amp; " />
      (managed pointer).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>
        <para>Loads the element with type <see langword="int8" /> at a specified array index onto the
   top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>
        <para>Loads the element with type <see langword="unsigned int8" /> at a specified array index
   onto the top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>
        <para>Loads the element with type <see langword="int16" /> at a specified array index onto the
   top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>
        <para>Loads the element with type <see langword="unsigned int16" /> at a specified array index
   onto the top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>
        <para>Loads the element with type <see langword="int32" /> at a specified array index onto the
   top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>
        <para>Loads the element with type <see langword="unsigned int32" /> at a specified array index
   onto the top of the evaluation stack as an <see langword="int32." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>
        <para>Loads the element with type <see langword="int64" /> at a specified array index onto the
   top of the evaluation stack as an <see langword="int64." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>
        <para>Loads the element with type <see langword="natural int" /> at a specified array
   index onto the top of the evaluation stack as a <see langword="natural int." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>
        <para>Loads the element with type <see langword="float32" /> at a specified array index onto
   the top of the evaluation stack as type <see langword="F" />
   (float)<see langword="." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>
        <para>Loads the element with type <see langword="float64" /> at a specified array index onto
   the top of the evaluation stack as type <see langword="F" />
   (float)<see langword="." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>
        <para>Loads the element containing an object reference at a
      specified array index onto the top of the evaluation stack as type<see langword=" O" /> (object reference). </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="natural int" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="int8" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="int16" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="int32" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="int64" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="float32" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>
        <para>Replaces the array element at a given index with
      the <see langword="float64" /> value on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>
        <para>Replaces the array element at a given index with the object ref value (type
   <see langword="O" />) on the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>
        <para>Converts the signed value on top of the evaluation stack to
      signed <see langword="int8" /> and extends it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>
        <para>Converts the signed value on top of the evaluation stack
      to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing
   <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>
        <para>Converts the signed value on top of the evaluation stack to
      signed <see langword="int16" /> and extending it to <see langword="int32" />,
      throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>
        <para>Converts the signed value on top of the evaluation stack
      to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing
   <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>
        <para>Converts the signed value on top of the sevaluation tack to signed
   <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>
        <para>Converts the signed value on top of the evaluation stack
      to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on
      overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>
        <para>Converts the signed value on top of the evaluation stack to signed <see langword="int64" />,
   throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>
        <para>Converts the signed value on top of the evaluation stack
      to <see langword="unsigned" /><see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>
        <para>Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>
        <para>Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>
        <para>Pushes a typed reference to an instance of a
      specific type onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>
        <para>Converts a metadata token to its
      runtime representation, pushing it onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="unsigned" /><see langword="int16" />, and extends it to <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="natural int" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>
        <para>Converts the signed value on top of the evaluation stack to
      signed <see langword="natural int" />, throwing <see cref="T:System.OverflowException" /> on
      overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>
        <para>Converts the signed value on top of the evaluation stack
      to <see langword="unsigned" /><see langword="natural int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>
        <para> Adds
      two
      integers, performs an overflow check, and
      pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>
        <para>Adds two unsigned integer values, performs an
   overflow check, and pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>
        <para>Multiplies two integer
      values, performs an overflow check, and pushes the result
      onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>
        <para>Multiplies two unsigned integer values<paramref name="," />performs an overflow check<paramref name="," /> and pushes
   the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>
        <para>Subtracts one integer value from
      another, performs an overflow check, and pushes the result
      onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>
        <para>Subtracts one unsigned
      integer value from another, performs an overflow check, and
      pushes the result onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>
        <para>Transfers control from the <see langword="fault " />or<see langword=" finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>
        <para>Exits a protected region of code, unconditionally
      tranferring control to a specific target instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>
        <para>Exits a protected region of code, unconditionally
      tranferring control to a target instruction (short form).</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>
        <para>Stores a value of type <see langword="natural int" /> at a supplied address.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>
        <para>Converts the value on top of the evaluation stack to
   <see langword="unsigned" /><see langword="natural int" />, and extends it to <see langword="natural int" />.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>
        <para>Returns an unmanaged pointer to the argument list of the current method.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>
        <para>Compares two values. If they are equal, the integer value 1 <see langword="(int32" />) is pushed
   onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>
        <para>Compares two values. If the first value is greater than
      the second, the integer value 1
   <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0
      (<see langword="int32" />) is pushed onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>
        <para>Compares two unsigned or unordered values. If the first
      value is greater than the second, the integer value 1 <see langword="(int32" />)
      is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>
        <para>Compares two values. If the first value is less than
      the second, the integer value 1 <see langword="(int32" />) is pushed onto the
      evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>
        <para>Compares the unsigned or unordered values <paramref name="value1" /> and
<paramref name="value2" />. If <paramref name="value1 " />is less than <paramref name="value2," /> 
then the integer value 1
<see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 
(<see langword="int32" />) is
pushed onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>
        <para>Pushes an unmanaged pointer (type
   <see langword="natural int" />) to the native code implementing a
      specific method onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>
        <para>Pushes an unmanaged pointer (type <see langword="natural int" />) to the native code implementing a
   particular virtual method associated with a specified object onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>
        <para>Loads an argument (referenced by a specified index 
      value) onto the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>
        <para>Load an argument address onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>
        <para>Stores the value on top of the evaluation stack in the 
      argument slot at a specified index.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>
        <para>Loads the local variable at a specific index onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>
        <para>Loads the address of the local variable at a specific
      index onto the evaluation
      stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>
        <para>Pops the current value from the top of the evaluation
      stack and stores it in a the local variable list at a specified index.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>
        <para>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address
      (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>
        <para>Transfers control from the <see langword="filter" /> clause of an exception back to
   the Common Language Infrastructure (CLI) exception handler.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>
        <para>Indicates that an address
      currently atop the evaluation stack might not be aligned to the natural size of
      the immediately following <see langword="ldind" />, <see langword="stind" />,
   <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />,
   <see langword="stobj" />,<see langword=" initblk" />, or <see langword="cpblk" /> instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>
        <para> Specifies that an address currently atop the evaluation stack might be
      volatile, and the results of reading that location cannot be cached or that
      multiple stores to that location cannot be suppressed.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>
        <para>Performs a postfixed method call instruction such that the current
      method's stack frame is removed before the actual call instruction is executed.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>
        <para>Initializes all the fields of the object at a specific
      address to a null reference or a 0
      of the appropriate primitive type.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>
        <para>Copies a specified number bytes from a source
      address to a destination address
   <paramref name="." /></para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>
        <para>Initializes a specified block of memory at a specific address to a given size and initial value.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>
        <para>Rethrows the current exception.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>
        <para>Pushes the size, in bytes, of a supplied value
      type onto the evaluation stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>
        <para>Retrieves the type token embedded in a typed
      reference<paramref name="." /></para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>
        <para>Returns true or false if the supplied opcode takes a single byte 
      argument.</para>
      </summary>
      <param name="inst">An instance of an Opcode object.</param>
      <returns>
        <see langword="True" /> or 
<see langword="false." /></returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>
        <para> Describes a Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>
        <para>Tests whether the given object is equal to this
   <see langword="Opcode" /> .</para>
      </summary>
      <param name="obj">The object to compare to this object.</param>
      <returns>
        <para>
          <see langword="true" /> if
<paramref name="obj" /> is an instance of <see langword="Opcode" /> and is equal to this 
   object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>
        <para>Returns the generated hash code for this 
   <see langword="Opcode" /> .</para>
      </summary>
      <returns>
   Returns the hash code for this
   instance.
</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>
        <para>Returns this <see langword="Opcode" /> as a <see cref="T:System.String" /> .</para>
      </summary>
      <returns>
        <para>Returns a <see cref="T:System.String" /> containing the
   name of this <see langword="Opcode" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>
        <para> The operand type of an Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>
        <para> The flow control characteristics of the Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>
        <para> The type of Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>
        <para> How the Microsoft intermediate language (MSIL) instruction pops the stack.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>
        <para> How the Microsoft intermediate language (MSIL) instruction pushes operand onto
      the stack.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>
        <para> The size of the Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>
        <para> The value of the immediate operand of the Microsoft intermediate language (MSIL) instruction.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>
        <para>The name of the Microsoft intermediate language (MSIL) instruction.</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>
        <para>Describes the types of the Microsoft intermediate language (MSIL) instructions.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>
        <para>These are Microsoft intermediate language (MSIL) instructions that are used as a
      synonym for other MSIL instructions. For example, <see langword="ldarg.0 " />represents the <see langword="ldarg " /><paramref name="0 " />instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>
        <para>Describes a reserved Microsoft intermediate language (MSIL) instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>
        <para>Describes a Microsoft intermediate language (MSIL) instruction that applies to
      objects.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>
        <para> 
      Describes a prefix instruction that modifies the behavior of the following instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>
    Describes a built-in instruction.
 </summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>
    Describes how values are pushed onto a stack
    or popped off a stack.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>
    No values are popped off the stack.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>
        <para>Pops one value off the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>
        <para> Pops 1 value off the stack for the first
      operand, and 1 value of the stack for the second operand.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>
        <para>Pops a 32-bit integer off the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>
        <para> Pops
      a 32-bit integer off the stack for
      the first operand, and a value off the stack for the second operand.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>
        <para> Pops a 32-bit integer off the stack for the
      first operand, and a 32-bit integer off the stack for the second operand.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>
        <para>Pops a 32-bit integer off the stack for the
      first operand, and a 64-bit integer off the stack for the second operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>
        <para> Pops a 32-bit integer off the stack for the
      first operand, a 32-bit integer off the stack for the second operand, and a
      32-bit integer off the stack for the third operand.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>
        <para>Pops a 32-bit integer off the stack for the
      first operand, and a 32-bit floating point number off the stack for the second
      operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>
        <para>Pops a 32-bit integer off the stack for the
      first operand, and a 64-bit floating point number off the stack for the second
      operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>
        <para>Pops a reference off the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>
        <para> Pops a reference off the stack for the first
      operand, and a value off the stack for the second operand.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, and a 32-bit integer off the stack for the second operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, a value off the stack for the second operand, and a value off the stack
      for the third operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, a value off the stack for the second operand, and a 64-bit integer off
      the stack for the third operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, a value off the stack for the second operand, and a 32-bit integer off
      the stack for the third operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, a value off the stack for the second operand, and a 64-bit floating
      point number off the stack for the third operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>
        <para>Pops a reference off the stack for the first
      operand, a value off the stack for the second operand, and a reference off the
      stack for the third operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>
        <para>
       No values are pushed onto the stack.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>
        <para>Pushes one value onto the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>
        <para>Pushes 1 value onto the stack for the first
      operand, and 1 value onto the stack for the second operand.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>
        <para>Pushes a 32-bit integer onto the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>
        <para>Pushes a 64-bit integer onto the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>
        <para>Pushes a 32-bit floating point number onto the
      stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>
        <para>Pushes a 64-bit floating point number onto the
      stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>
        <para>Pushes a reference onto the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>
        <para>Pops a variable off the stack.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>
        <para> Pushes a variable onto the stack.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>
        <para>Describes the operand type of Microsoft intermediate language (MSIL)
      instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>
        <para> The operand is a 32-bit integer branch target.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>
    The operand is a 32-bit metadata token.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>
        <para>
       The operand is a 32-bit integer.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>
        <para>
       The operand is a 64-bit integer.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>
        <para> The operand is a 32-bit metadata token.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>
    No operand.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>
        <para>
       The operand is a 64-bit IEEE floating point number.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>
        <para>The operand is a 32-bit metadata signature token.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>
        <para>The operand is a 32-bit metadata string token.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>
        <para>The operand is the 32-bit integer argument to a switch
      instruction.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>
        <para>The operand is a <see langword="FieldRef" />, 
<see langword="MethodRef" />, or <see langword="TypeRef " /> 
token.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>
        <para>The operand is a 32-bit metadata token.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>
        <para> The operand is 16-bit integer containing the ordinal of 
      a local variable or an argument.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>
        <para>The operand is an 8-bit integer branch target.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>
    The operand is a 16-bit integer.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>
    The operand is a 32-bit IEEE floating point
    number.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>
        <para>The operand is an 8-bit integer containing the ordinal 
      of a local variable or an argumenta .</para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>
        <para> Describes how an instruction alters
      the flow of control.
      </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>
    Branch instruction.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>
    Break instruction.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>
    Call instruction.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>
    Conditional branch instruction.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>
        <para> Provides information about a subsequent instruction. For
      example, the <see langword="Unaligned" /> instruction of
   <see langword="Reflection.Emit.Opcodes " />has <see langword="FlowControl.Meta " /> 
   and specifies that the subsequent pointer instruction might be unaligned.
   </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>
        <para>
       Normal flow of control.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>
    Return instruction.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>
    Exception throw instruction.
 </summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary>
        <para> Creates or associates parameter information.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal)">
      <summary>
        <para> Specifies the marshaling for this parameter.
      </para>
      </summary>
      <param name="unmanagedMarshal">The marshaling information for this parameter. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary>
        <para> Sets the default value of the parameter.
      </para>
      </summary>
      <param name="defaultValue">The default value of this parameter. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Set a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Set a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.GetToken">
      <summary>
        <para>
       Retrieves the token for this parameter.
    </para>
      </summary>
      <returns>
        <para>
       Returns the token for this parameter.
    </para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary>
        <para>
       Retrieves the name of this parameter.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary>
        <para>
       Retrieves the signature position for this parameter.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary>
        <para> Retrieves the attributes for this parameter.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary>
        <para> Retrieves whether this is an input parameter.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary>
        <para> Retrieves whether this parameter is an output parameter.
      </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary>
        <para> Retrieves whether this parameter is optional.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterToken">
      <summary>
        <para>The <see langword="ParameterToken" />
class is an opaque representation of the token returned by the metadata to
represent a parameter.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.ParameterToken.Empty">
      <summary>
        <para> The default <see langword="ParameterToken" /> with <see cref="P:System.Reflection.Emit.ParameterToken.Token" />
value 0.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for this parameter.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash code for this parameter.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of 
   <see langword="ParameterToken" /> and is equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to compare to this object. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> 
is an instance of <see langword="ParameterToken" /> and equals the current
instance; otherwise, <see langword="false" />
.
</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterToken.Token">
      <summary>
        <para>
       Retrieves the metadata token for this parameter.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>
        <para> Defines the properties for a type.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>
        <para>Sets the default value of this property.</para>
      </summary>
      <param name="defaultValue">The default value of this property. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Sets the method that gets the property value.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the method that gets the property value. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Sets the method that sets the property value.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the method that sets the property value. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
        <para> Adds one of the other methods associated with this property.
      </para>
      </summary>
      <param name="mdBuilder">A <see langword="MethodBuilder" /> object that represents the other method. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>
        <para> Set a custom attribute using a specified custom attribute blob.
      </para>
      </summary>
      <param name="con">The constructor for the custom attribute. </param>
      <param name="binaryAttribute">A byte blob representing the attributes. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>
        <para> Set a custom attribute using a custom attribute builder.
      </para>
      </summary>
      <param name="customBuilder">An instance of a helper class to define the custom attribute. </param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>
        <para>Gets the value of the indexed property by calling the property's getter method.</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <returns>
        <para>The value of the specified indexed
      property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para>Gets the value of a property having the specified
      binding, index, and <see langword="CultureInfo" /> .</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name="culture">The <see langword="CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match. If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</param>
      <returns>
        <para>The property value for <paramref name="obj" />.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>
        <para>Sets the value of the property with optional index values for index properties.</para>
      </summary>
      <param name="obj">The object whose property value will be set.</param>
      <param name="value">The new value for this property.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>
        <para> Sets the property value for the given object to the given value.</para>
      </summary>
      <param name="obj">The object whose property value will be returned.</param>
      <param name=" value">The new value for this property.</param>
      <param name="invokeAttr">The invocation attribute. This must be a bit flag from <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />. A suitable invocation attribute must be specified. If a static member is to be invoked, the <see langword="Static" /> flag of <see langword="BindingFlags" /> must be set.</param>
      <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects using reflection. If <paramref name="binder" /> is <see langword="null" /> , the default binder is used.</param>
      <param name="index">Optional index values for indexed properties. This value should be <see langword="null" /> for non-indexed properties.</param>
      <param name="culture">The <see langword="CultureInfo" /> object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the <see langword="CultureInfo.Parent" /> method will be called successively in search of a match. If this value is <see langword="null" />, the <see langword="CultureInfo" /> is obtained from the <see langword="CultureInfo.CurrentUICulture" /> property.</param>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>
        <para>Returns an array of the public and non-public 
   <see langword="get" /> and <see langword="set" /> accessors on this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether non-public methods should be returned in the <see langword="MethodInfo" /> array. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>An array of type <see langword="MethodInfo" /> containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>
        <para> Returns the public and non-public get accessor for this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether non-public get accessors should be returned. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <para>A <see langword="MethodInfo" /> object representing the get accessor for this property, if <paramref name="nonPublic " />is <see langword="true" />. Returns <see langword="null" /> if <paramref name="nonPublic " />is <see langword="false" /> and the get accessor is non-public, or if <paramref name="nonPublic " />is <see langword="true" /> but no get accessors exist.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>
        <para> Returns the set accessor for this property.</para>
      </summary>
      <param name="nonPublic">Indicates whether the accessor should be returned if it is non-public. <see langword="true" /> if non-public methods are to be included; otherwise, <see langword="false" /> .</param>
      <returns>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Condition</description>
          </listheader>
          <item>
            <term> A <see cref="T:System.Reflection.MethodInfo" /> object representing the Set method for this property.</term>
            <description>
              <para>The set accessor is public.</para>
              <para>
                <paramref name="nonPublic " />is true and non-public methods can be returned.</para>
            </description>
          </item>
          <item>
            <term> null</term>
            <description>
              <para>
                <paramref name="nonPublic " />is true, but the property is read-only.</para>
              <para>
                <paramref name="nonPublic " />is false and the set accessor is non-public.</para>
            </description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>
        <para> Returns an array of all the index parameters for the property.</para>
      </summary>
      <returns>
        <para>An array of type <see langword="ParameterInfo " />containing the parameters for the indexes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>
        <para>Returns an array of all the custom attributes for this property.</para>
      </summary>
      <param name="inherit">If <see langword="true" /> , walks up this property's inheritance chain to find the custom attributes</param>
      <returns>
        <para>An array of all the custom attributes.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
        <para>Returns an array of custom attributes identified by
   <see cref="T:System.Type" /> .</para>
      </summary>
      <param name="attributeType">An array of custom attributes identified by type.</param>
      <param name=" inherit">If <see langword="true" /> , walks up this property's inheritance chain to find the custom attributes.</param>
      <returns>
        <para>An array of custom attributes defined
      on this reflected member, or <see langword="null" /> if no attributes are defined
      on this member.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>
        <para>Indicates whether one or more instance of
   <paramref name="attributeType" /> is defined on this property.</para>
      </summary>
      <param name="attributeType">The <see langword="Type" /> object to which the custom attributes are applied.</param>
      <param name=" inherit">Specifies whether to walk up this property's inheritance chain to find the custom attributes.</param>
      <returns>
        <para>
          <see langword="true" /> if one or more
   instance of <paramref name="attributeType" /> is defined on this property; otherwise
<see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyToken">
      <summary>
        <para>
       Retrieves the token for this property.
    </para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>
        <para>Gets the type of the field of this property.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>
        <para>Gets the attributes for this property.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>
        <para>Gets a value indicating whether the property can be read.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>
        <para>Gets a value indicating whether the property can be written to.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>
        <para>Gets the name of this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>
        <para>Gets the class that declares this member.</para>
      </summary>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>
        <para>Gets the class object that was used to obtain this
      instance of <see langword="MemberInfo." /></para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.PropertyToken">
      <summary>
        <para>The <see langword="PropertyToken" /> class is an opaque
   representation of the <see langword="Token" />
   returned by the metadata to
   represent a property.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PropertyToken.Empty">
      <summary>
        <para> The default <see langword="PropertyToken" /> with <see cref="P:System.Reflection.Emit.PropertyToken.Token" />
value 0.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.GetHashCode">
      <summary>
        <para>
       Generates the hash code for this property.
    </para>
      </summary>
      <returns>
        <para>
       Returns the hash code for this property.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of
   <see langword="PropertyToken " /> and is equal to this instance.
      </para>
      </summary>
      <param name="obj">The object to this object. </param>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="obj" /> 
is an instance of <see langword="PropertyToken" /> and equals the current
instance; otherwise, <see langword="false" />
.
</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyToken.Token">
      <summary>
        <para>
       Retrieves the metadata token for this property.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>
        <para> Provides methods for building signatures.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)">
      <summary>
        <para> Returns a signature helper for a method given
      the method's module and an unmanaged calling convention.</para>
      </summary>
      <param name="mod">The module that contains the method for which the <see langword="SignatureHelper" /> is requested. </param>
      <param name="unmanagedCallConv">The unmanaged calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <returns>
        <para>The <see langword="SignatureHelper" /> object for a method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>
        <para> Returns a signature helper for a local variable.
      </para>
      </summary>
      <param name="mod">The module that contains the local variable for which the <see langword="SignatureHelper" /> is requested. </param>
      <returns>
        <para> The <see langword="SignatureHelper " /> 
object for a local variable.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>
        <para> Returns a signature helper for a field.
      </para>
      </summary>
      <param name="mod">The module that contains the field for which the <see langword="SignatureHelper" /> is requested. </param>
      <returns>
        <para> The <see langword="SignatureHelper " /> 
object for a field.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>
        <para> Returns a signature helper for a method
      given the method's module, calling convention, and return type.
      </para>
      </summary>
      <param name="mod">The module that contains the method for which the <see langword="SignatureHelper" /> is requested. </param>
      <param name=" callingConvention">The calling convention of the method. </param>
      <param name=" returnType">The return type of the method. </param>
      <returns>
        <para>The <see langword="SignatureHelper " /> object for a
   method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>
        <para> Returns a signature helper for a method, given the
      method's module, calling convention, return type, and parameter types.
      </para>
      </summary>
      <param name="mod">The module that contains the method for which the <see langword="SignatureHelper" /> is requested. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <returns>
        <para>The <see langword="SignatureHelper " /> object for a
   method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>
        <para> Returns a signature helper for a property
      given the property's module, return type, and parameter types.
      </para>
      </summary>
      <param name="mod">The module that contains the property for which the <see langword="SignatureHelper" /> is requested. </param>
      <param name=" returnType">The return type of the property. </param>
      <param name=" parameterTypes">The types of the parameters of the property. </param>
      <returns>
        <para>The <see langword="SignatureHelper " /> object for a
   property.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>
        <para>Adds an argument to the signature.</para>
      </summary>
      <param name="clsArgument">The type of the argument. </param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>
        <para>Marks the end of a vararg fixed part. This is only used
      if the caller is creating a vararg signature call site.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>
        <para> Checks if this instance is equal to the given object.
      </para>
      </summary>
      <param name="obj">The object with which this instance should be compared. </param>
      <returns>
        <para>
          <see langword="true " />if the given 
   object is a <see langword="SignatureHelper" />
   and represents the same signature; otherwise,
<see langword="false" /> 
.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>
        <para> Creates and returns a hash code for this instance.
      </para>
      </summary>
      <returns>
        <para> Returns the hash code based on the name.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>
        <para> Adds
      the end token to the signature and marks the signature as finished, so no
      further tokens can be added.
      </para>
      </summary>
      <returns>
        <para> Returns a byte array made up of the full signature.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>
        <para> Returns a string representing the signature parameters.
      </para>
      </summary>
      <returns>
        <para> Returns a string representing the
      parameters of this signature.
      </para>
      </returns>
    </member>
    <member name="T:System.Reflection.Emit.SignatureToken">
      <summary>
        <para>Represents the <see langword="Token" />
returned by the metadata to represent a signature.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.SignatureToken.Empty">
      <summary>
        <para> The default <see langword="SignatureToken " /> with <see cref="P:System.Reflection.Emit.SignatureToken.Token" />
value
0.</para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.GetHashCode">
      <summary>
        <para> Generates the hash code for this signature.
      </para>
      </summary>
      <returns>
        <para> Returns the
      hash code for this signature.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of
   <see langword="SignatureToken " />
   and is equal to this instance.
   </para>
      </summary>
      <param name="obj">The object to compare with this <see langword="SignatureToken" /> . </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="SignatureToken " /> and is
   equal to this object; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.SignatureToken.Token">
      <summary>
        <para> Retrieves the metadata token for the local variable signature for
      this method.
      </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.StringToken">
      <summary>
        <para> Represents a token that represents a string.
      </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.GetHashCode">
      <summary>
        <para>
       Returns the hash code for this
       string.
    </para>
      </summary>
      <returns>
        <para>
       Returns the
       underlying string token.
    </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.StringToken.Equals(System.Object)">
      <summary>
        <para> Checks if the given object is an instance of
   <see langword="StringToken " />
   and is equal to this instance.
   </para>
      </summary>
      <param name="obj">The object to compare with this <see langword="StringToken" /> . </param>
      <returns>
        <para>
          <see langword="true " />if <paramref name="obj" /> is an instance of <see langword="StringToken " /> and is
   equal to this object; otherwise, <see langword="false" />.
   </para>
      </returns>
    </member>
    <member name="P:System.Reflection.Emit.StringToken.Token">
      <summary>
        <para>
       Retrieves the metadata token for this string.
    </para>
      </summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>
        <para> Specifies the packing
      size of a type.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>
    The packing size is not specified.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>
        <para>
       The packing size is 1 byte.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>
        <para>
       The packing size is 2 bytes.
    </para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>
    The packing size is 4 bytes.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>
    The packing size is 8 bytes.
 </summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>
    The packing size is 16 bytes.
 </summary>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>
        <para> Defines and
      
      creates new instances of classes
      during runtime.</para>
      </summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>
        <para>
       Represents that total size for the type is not specified.
    </para>
      </summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>
        <para> Sets the parent of this
   <see langword="Type" />.
      </para>
      </summary>
      <param name="parent">The parent type. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>
        <para> Adds an interface that this type
      implements.
      </para>
      </summary>
      <param name="interfaceType">The interface that this type implements. </param>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>
        <para> Adds a new method to the class, with the given name and method
      signature.
      </para>
      </summary>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <returns>
        <para>The defined method.</para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>
        <para> Adds a new method to the class, with the given name and method
      signature.
      </para>
      </summary>
      <param name="name">The name of the method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the method. </param>
      <param name=" callingConvention">The calling convention of the method. </param>
      <param name="returnType">The return type of the method. </param>
      <param name="parameterTypes">The types of the parameters of the method. </param>
      <returns>
        <para> The defined method.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>
        <para> Adds a new property to the class, with the given name and property
      signature.
      </para>
      </summary>
      <param name="name">The name of the property. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the property. </param>
      <param name="returnType">The return type of the property. </param>
      <param name="parameterTypes">The types of the parameters of the property. </param>
      <returns>
        <para> The defined property.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>
        <para> Adds
      a new event to the class, with the given name, attributes and event
      type.
      </para>
      </summary>
      <param name="name">The name of the event. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name="attributes">The attributes of the event. </param>
      <param name="eventtype">The type of the event. </param>
      <returns>
        <para> The defined event.
      </para>
      </returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>
        <para> Defines a <see langword="PInvoke " />method given its name,
   the name of the DLL in which the method is defined, the attributes of the
   method, the calling convention of the method, the return type of the method, the
   types of the parameters of the method, and the <see langword="PInvoke " />
   
   flags.
   </para>
      </summary>
      <param name="name">The name of the <see langword="PInvoke" /> method. <paramref name="name" /> cannot contain embedded nulls. </param>
      <param name=" dllName">The name of the DLL in which the <see langword="PInvoke" /> method is defined. </param>
      <param name=" attributes">The attributes of the met