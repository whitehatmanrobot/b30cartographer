4e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="T:System.Messaging.Design.QueuePathDialog">
      <summary>Represents a path editor control.</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Messaging.Design.QueuePathDialog" /> class, using the specified service provider.</summary>
      <param name="provider">A <see cref="T:System.IServiceProvider" /> that can be used to obtain services.</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.#ctor(System.Windows.Forms.Design.IUIService)">
      <summary>Initializes a new instance of the <see cref="T:System.Messaging.Design.QueuePathDialog" /> class, using the specified UI service.</summary>
      <param name="uiService">A <see cref="T:System.Windows.Forms.Design.IUIService" /> that enables interaction with the user interface of the hosting development environment object.</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.ChoosePath">
      <summary>Updates the path editor control when a queue path is selected.</summary>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.DoubleClicked(System.Object,System.EventArgs)">
      <summary>Occurs when the control is double-clicked.</summary>
      <param name="source">The source of the event.</param>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
      <summary>Event handler for the form closing event of the queue path editor control.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> object that contains the arguments for the form closing event handler.</param>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.OnHandleCreated(System.EventArgs)">
      <summary>Event handler for the form creation event of the queue path editor control.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.FormClosingEventArgs" /> object that contains the arguments for the form creation event handler.</param>
    </member>
    <member name="P:System.Messaging.Design.QueuePathDialog.Path">
      <summary>Gets the queue path.</summary>
      <returns>The path for the queue.</returns>
    </member>
    <member name="M:System.Messaging.Design.QueuePathDialog.SelectQueue(System.Messaging.MessageQueue)">
      <summary>Selects the specified queue.</summary>
      <param name="queue">The <see cref="T:System.Messaging.MessageQueue" /> to be selected.</param>
    </member>
    <member name="T:System.Messaging.Design.QueuePathEditor">
      <summary>Provides a user interface for selecting a message queue path.</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Messaging.Design.QueuePathEditor" /> class.</summary>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified message queue using the specified type descriptor context and service provider.</summary>
      <returns>The new value of the message queue path. </returns>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides additional context information. </param>
      <param name="provider">A <see cref="T:System.IServiceProvider" /> that the editor can use to obtain services. </param>
      <param name="value">The message queue to edit. </param>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Messaging.MessageQueuePermission, System.Messaging, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Unrestricted="true" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Messaging.Design.QueuePathEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns the editing style used by the <see cref="Overload:System.Messaging.Design.QueuePathEditor.EditValue" /> method. </summary>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />.</returns>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides additional context information. </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Runtime.Serialization.Formatters.Soap.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Formatters.Soap</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter">
      <summary>Serializes and deserializes an object, or an entire graph of connected objects, in SOAP format.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> class with default property values.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.#ctor(System.Runtime.Serialization.ISurrogateSelector,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> class with the specified <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="selector">The <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> to use with the new instance of <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />. Can be null. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that holds the source and destination of the serialization. If the <paramref name="context" /> parameter is null, then the <see cref="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Context" /> defaults to <see cref="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine" />. </param>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.AssemblyFormat">
      <summary>Gets or sets the behavior of the deserializer with regards to finding and loading assemblies.</summary>
      <returns>One of the <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> values that specifies the deserializer behavior.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Binder">
      <summary>Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that controls the binding of a serialized object to a type.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used with this <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Context">
      <summary>Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used with this <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.StreamingContext" /> used with this <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Deserialize(System.IO.Stream)">
      <summary>Deserializes the data on the provided stream and reconstitutes the graph of objects.</summary>
      <returns>The top object of the deserialized graph (root).</returns>
      <param name="serializationStream">The stream that contains the data to deserialize. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Deserialize(System.IO.Stream,System.Runtime.Remoting.Messaging.HeaderHandler)">
      <summary>Deserializes the stream into an object graph with any headers in that stream being handled by the given <see cref="T:System.Runtime.Remoting.Messaging.HeaderHandler" />.</summary>
      <returns>The top object of the deserialized graph (root).</returns>
      <param name="serializationStream">The stream that contains the data to deserialize.</param>
      <param name="handler">Delegate to handle any headers found on the stream. Can be null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="serializationStream" /> supports seeking, and its length is 0. </exception>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.FilterLevel">
      <summary>Gets or sets the <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> of automatic deserialization for .NET Framework remoting.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.Formatters.TypeFilterLevel" /> that represents the current automatic deserialization level.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes an object or graph of objects with the specified root to the given <see cref="T:System.IO.Stream" />.</summary>
      <param name="serializationStream">The stream onto which the formatter puts the data to serialize. </param>
      <param name="graph">The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.Serialize(System.IO.Stream,System.Object,System.Runtime.Remoting.Messaging.Header[])">
      <summary>Serializes an object or graph of objects with the specified root to the given <see cref="T:System.IO.Stream" /> in the SOAP Remote Procedure Call (RPC) format.</summary>
      <param name="serializationStream">The stream onto which the formatter puts the data to serialize. </param>
      <param name="graph">The object or root of the object graph to serialize. All child objects of this root object are automatically serialized. </param>
      <param name="headers">Remoting headers to include in the serialization. Can be null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationStream" /> is null. </exception>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.SurrogateSelector">
      <summary>Gets or sets the <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> that controls type substitution during serialization and deserialization.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used with this <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.TopObject">
      <summary>Gets or sets the <see cref="T:System.Runtime.Serialization.Formatters.ISoapMessage" /> into which the SOAP top object is deserialized.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.Formatters.ISoapMessage" /> into which the SOAP top object is deserialized.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Formatters.Soap.SoapFormatter.TypeFormat">
      <summary>Gets or sets the format in which type descriptions are laid out in the serialized stream.</summary>
      <returns>The format in which type descriptions are laid out in the serialized stream.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Runtime.Caching.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Caching</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Caching.CacheEntryChangeMonitor">
      <summary>Provides a base class that represents a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type that can be implemented in order to monitor changes to cache entries. </summary>
    </member>
    <member name="M:System.Runtime.Caching.CacheEntryChangeMonitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> class. This constructor is called from constructors in derived classes to initialize the base class.</summary>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryChangeMonitor.CacheKeys">
      <summary>Gets a collection of cache keys that are monitored for changes. </summary>
      <returns>A collection of cache keys.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryChangeMonitor.LastModified">
      <summary>Gets a value that indicates the latest time (in UTC time) that the monitored cache entry was changed.</summary>
      <returns>The elapsed time.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryChangeMonitor.RegionName">
      <summary>Gets the name of a region of the cache.</summary>
      <returns>The name of a region in the cache. </returns>
    </member>
    <member name="T:System.Runtime.Caching.CacheEntryRemovedArguments">
      <summary>Provides information about a cache entry that was removed from the cache. </summary>
    </member>
    <member name="M:System.Runtime.Caching.CacheEntryRemovedArguments.#ctor(System.Runtime.Caching.ObjectCache,System.Runtime.Caching.CacheEntryRemovedReason,System.Runtime.Caching.CacheItem)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.CacheEntryRemovedArguments" /> class. </summary>
      <param name="source">The <see cref="T:System.Runtime.Caching.ObjectCache" /> instance from which <paramref name="cacheItem" /> was removed. </param>
      <param name="reason">One of the enumeration values that indicate why <paramref name="cacheItem" /> was removed.</param>
      <param name="cacheItem">An instance of the cached entry that was removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. -or-<paramref name="cacheItem" /> is null. </exception>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryRemovedArguments.CacheItem">
      <summary>Gets an instance of a cache entry that was removed from the cache. </summary>
      <returns>An instance of the <see cref="T:System.Runtime.Caching.CacheItem" /> class that was removed from the cache. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryRemovedArguments.RemovedReason">
      <summary>Gets a value that indicates why a cache entry was removed.</summary>
      <returns>One of the enumeration values that indicates why the entry was removed.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryRemovedArguments.Source">
      <summary>Gets a reference to the source <see cref="T:System.Runtime.Caching.ObjectCache" /> instance that originally contained the removed cache entry. </summary>
      <returns>A reference to the cache that originally contained the removed cache entry.</returns>
    </member>
    <member name="T:System.Runtime.Caching.CacheEntryRemovedCallback">
      <summary>Defines a reference to a method that is called after a cache entry is removed from the cache.</summary>
      <param name="arguments">The information about the cache entry that was removed from the cache.</param>
    </member>
    <member name="T:System.Runtime.Caching.CacheEntryRemovedReason">
      <summary>Specifies the reason why a cache entry was removed or an entry is about to be removed.</summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheEntryRemovedReason.Removed">
      <summary>A cache entry was removed by using the <see cref="M:System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)" /> or <see cref="M:System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)" /> method. </summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheEntryRemovedReason.Expired">
      <summary>A cache entry was removed because it expired. Expiration can be based on an absolute time or on a sliding expiration time.</summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheEntryRemovedReason.Evicted">
      <summary>A cache entry was removed to free memory in the cache. This occurs when a cache instance approaches cache-specific memory limits, or when a process or cache instance approaches computer-wide memory limits. </summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheEntryRemovedReason.ChangeMonitorChanged">
      <summary>A cache entry was removed because a related dependency (such as a file or another cache entry) triggered eviction of the cache entry.</summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheEntryRemovedReason.CacheSpecificEviction">
      <summary>A cache entry was evicted for as reason that is defined by a particular cache implementation.</summary>
    </member>
    <member name="T:System.Runtime.Caching.CacheEntryUpdateArguments">
      <summary>Provides information about a cache entry that will be removed from the cache. </summary>
    </member>
    <member name="M:System.Runtime.Caching.CacheEntryUpdateArguments.#ctor(System.Runtime.Caching.ObjectCache,System.Runtime.Caching.CacheEntryRemovedReason,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.CacheEntryUpdateArguments" /> class. </summary>
      <param name="source">The <see cref="T:System.Runtime.Caching.ObjectCache" /> instance from which the cache entry referenced by <paramref name="key" /> will be removed. </param>
      <param name="reason">One of the enumeration values that indicate why the cache entry will be removed. </param>
      <param name="key">The key of the cache entry that will be removed. </param>
      <param name="regionName">The name of the region in the cache to  remove the cache entry from. This parameter is optional. If cache regions are not defined, <paramref name="regionName" /> must be null. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.Key">
      <summary>Gets the unique identifier for a cache entry that is about to be removed. </summary>
      <returns>The unique identifier for the cache entry. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.RegionName">
      <summary>Gets the name of a region in the cache that contains a cache entry. </summary>
      <returns>The name of a region in the cache. If regions are not used, this value is null. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.RemovedReason">
      <summary>Gets the reason that a cache entry is about to be removed from the cache. </summary>
      <returns>One of the enumeration values that describes why a cache entry is being removed.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.Source">
      <summary>Gets a reference to the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance that contains a cache entry that is about to be removed.</summary>
      <returns>A reference to the cache instance.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItem">
      <summary>Gets or sets the value of <see cref="T:System.Runtime.Caching.CacheItem" /> entry that is used to update the cache object. </summary>
      <returns>The cache entry to update in the cache object. The default is null. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy">
      <summary>Gets or sets the cache eviction or expiration policy of the <see cref="T:System.Runtime.Caching.CacheItem" /> entry that is updated. </summary>
      <returns>The cache eviction or expiration policy of the cache item that was updated. The default is null. </returns>
    </member>
    <member name="T:System.Runtime.Caching.CacheEntryUpdateCallback">
      <summary>Defines a reference to a method that is invoked when a cache entry is about to be removed from the cache. </summary>
      <param name="arguments">The information about the entry that is about to be removed from the cache.</param>
    </member>
    <member name="T:System.Runtime.Caching.CacheItem">
      <summary>Represents an individual cache entry in the cache. </summary>
    </member>
    <member name="M:System.Runtime.Caching.CacheItem.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.Runtime.Caching.CacheItem" /> instance using the specified key of a cache entry. </summary>
      <param name="key">A unique identifier for a <see cref="T:System.Runtime.Caching.CacheItem" /> entry. </param>
    </member>
    <member name="M:System.Runtime.Caching.CacheItem.#ctor(System.String,System.Object)">
      <summary>Initializes a new <see cref="T:System.Runtime.Caching.CacheItem" /> instance using the specified key and a value of the cache entry. </summary>
      <param name="key">A unique identifier for a <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</param>
      <param name="value">The data for a <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</param>
    </member>
    <member name="M:System.Runtime.Caching.CacheItem.#ctor(System.String,System.Object,System.String)">
      <summary>Initializes a new <see cref="T:System.Runtime.Caching.CacheItem" /> instance using the specified key, value, and region of the cache entry. </summary>
      <param name="key">A unique identifier for a <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</param>
      <param name="value">The data for a <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</param>
      <param name="regionName">The name of a region in the cache that will contain the <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</param>
    </member>
    <member name="P:System.Runtime.Caching.CacheItem.Key">
      <summary>Gets or sets a unique identifier for a <see cref="T:System.Runtime.Caching.CacheItem" /> instance. </summary>
      <returns>The identifier for a <see cref="T:System.Runtime.Caching.CacheItem" /> instance.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItem.RegionName">
      <summary>Gets or sets the name of a region in the cache that contains a <see cref="T:System.Runtime.Caching.CacheItem" /> entry.</summary>
      <returns>The name of a region in a cache. The default is null. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItem.Value">
      <summary>Gets or sets the data for a <see cref="T:System.Runtime.Caching.CacheItem" /> instance.</summary>
      <returns>The data for a <see cref="T:System.Runtime.Caching.CacheItem" /> instance. The default is null. </returns>
    </member>
    <member name="T:System.Runtime.Caching.CacheItemPolicy">
      <summary>Represents a set of eviction and expiration details for a specific cache entry. </summary>
    </member>
    <member name="M:System.Runtime.Caching.CacheItemPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> class.</summary>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration">
      <summary>Gets or sets a value that indicates whether a cache entry should be evicted after a specified duration.</summary>
      <returns>The period of time that must pass before a cache entry is evicted. The default value is <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />, meaning that the entry does not expire.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors">
      <summary>Gets a collection of <see cref="T:System.Runtime.Caching.ChangeMonitor" /> objects that are associated with a cache entry. </summary>
      <returns>A collection of change monitors. The default is an empty collection. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.Priority">
      <summary>Gets or sets a priority setting that is used to determine whether to evict a cache entry. </summary>
      <returns>One of the enumeration values that indicates the priority for eviction. The default priority value is <see cref="F:System.Runtime.Caching.CacheItemPriority.Default" />, which means no priority. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.RemovedCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Runtime.Caching.CacheEntryRemovedCallback" /> delegate that is called after an entry is removed from the cache. </summary>
      <returns>A reference to a delegate that is called by a cache implementation. </returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration">
      <summary>Gets or sets a value that indicates whether a cache entry should be evicted if it has not been accessed in a given span of time. </summary>
      <returns>A span of time within which a cache entry must be accessed before the cache entry is evicted from the cache. The default is <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />, meaning that the item should not be expired based on a time span.</returns>
    </member>
    <member name="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback">
      <summary>Gets or sets a reference to a <see cref="T:System.Runtime.Caching.CacheEntryUpdateCallback" /> delegate that is called before a cache entry is removed from the cache.</summary>
      <returns>A reference to a delegate that is called by a cache implementation.</returns>
    </member>
    <member name="T:System.Runtime.Caching.CacheItemPriority">
      <summary>Specifies a priority setting that is used to decide whether to evict a cache entry.</summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheItemPriority.Default">
      <summary>Indicates that there is no priority for removing the cache entry.</summary>
    </member>
    <member name="F:System.Runtime.Caching.CacheItemPriority.NotRemovable">
      <summary>Indicates that a cache entry should never be removed from the cache.</summary>
    </member>
    <member name="T:System.Runtime.Caching.ChangeMonitor">
      <summary>Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</summary>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class. This constructor is called from constructors in derived classes to initialize the base class.</summary>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</summary>
      <exception cref="T:System.InvalidOperationException">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method. </exception>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)">
      <summary>Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. This overload must be implemented by derived change-monitor classes. </summary>
      <param name="disposing">true to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; false to release only unmanaged resources. When false is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a finalizer thread and any external managed references are likely no longer valid because they have already been garbage collected.</param>
    </member>
    <member name="P:System.Runtime.Caching.ChangeMonitor.HasChanged">
      <summary>Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</summary>
      <returns>true if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, false. </returns>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete">
      <summary>Called from the constructor of derived classes to indicate that initialization is finished. </summary>
    </member>
    <member name="P:System.Runtime.Caching.ChangeMonitor.IsDisposed">
      <summary>Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</summary>
      <returns>true if the instance is disposed; otherwise, false. </returns>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)">
      <summary>Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed. </summary>
      <param name="onChangedCallback">A reference to a method that is invoked when a dependency has changed.</param>
      <exception cref="T:System.InvalidOperationException">The callback method has already been invoked. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onChangedCallback" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)">
      <summary>Called by derived classes to raise the event when a dependency changes. </summary>
      <param name="state">The data for the change event. This value can be null. </param>
    </member>
    <member name="P:System.Runtime.Caching.ChangeMonitor.UniqueId">
      <summary>Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</summary>
      <returns>The identifier for a change-monitor instance.</returns>
    </member>
    <member name="T:System.Runtime.Caching.DefaultCacheCapabilities">
      <summary>Represents a set of features that a cache implementation provides.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.None">
      <summary>A cache implementation does not provide any of the features that are described in the <see cref="T:System.Runtime.Caching.DefaultCacheCapabilities" /> enumeration.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.InMemoryProvider">
      <summary>A cache implementation runs at least partially in memory. A distributed cache would not set this flag, whereas an in-memory cache such as the <see cref="T:System.Runtime.Caching.MemoryCache" /> class would do so.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.OutOfProcessProvider">
      <summary>A cache implementation runs out-of-process. A distributed cache would set this flag, whereas an in-memory cache such as the <see cref="T:System.Runtime.Caching.MemoryCache" /> class would not.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.CacheEntryChangeMonitors">
      <summary>A cache implementation supports the ability to create change monitors that monitor entries.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.AbsoluteExpirations">
      <summary>A cache implementation supports the ability to automatically remove cache entries at a specific date and time.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.SlidingExpirations">
      <summary>A cache implementation supports the ability to automatically remove cache entries that have not been accessed in a specified time span.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.CacheEntryUpdateCallback">
      <summary>A cache implementation can raise a notification that an entry is about to be removed from the cache. This setting also indicates that a cache implementation supports the ability to automatically replace the entry that is being removed with a new cache entry.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.CacheEntryRemovedCallback">
      <summary>A cache implementation can raise a notification that an entry has been removed from the cache.</summary>
    </member>
    <member name="F:System.Runtime.Caching.DefaultCacheCapabilities.CacheRegions">
      <summary>A cache implementation supports the ability to partition its storage into cache regions, and supports the ability to insert cache entries into those regions and to retrieve cache entries from those regions.</summary>
    </member>
    <member name="T:System.Runtime.Caching.FileChangeMonitor">
      <summary>Represents an object that monitors changes to files.</summary>
    </member>
    <member name="M:System.Runtime.Caching.FileChangeMonitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.FileChangeMonitor" /> class. This constructor is called from constructors in derived classes in order to initialize the base class.</summary>
    </member>
    <member name="P:System.Runtime.Caching.FileChangeMonitor.FilePaths">
      <summary>Gets a collection that contains the paths of files that are monitored for changes.</summary>
      <returns>A collection of file paths.</returns>
    </member>
    <member name="P:System.Runtime.Caching.FileChangeMonitor.LastModified">
      <summary>Gets a value that indicates the last time that a file that is being monitored was changed.</summary>
      <returns>If multiple files are monitored, the last modified time of the most recently modified file; otherwise, the last time that the file that is being monitored was changed.</returns>
    </member>
    <member name="T:System.Runtime.Caching.HostFileChangeMonitor">
      <summary>Monitors directories and file paths, and notifies the cache of changes to the monitored items. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> class. </summary>
      <param name="filePaths">A list that contains one or more directory paths or file paths to monitor. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filePaths" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePaths" /> contains zero items. -or-A path in the <paramref name="filePaths" /> list is null or an empty string.</exception>
    </member>
    <member name="P:System.Runtime.Caching.HostFileChangeMonitor.FilePaths">
      <summary>Gets the collection of directories and file paths that was passed to the <see cref="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})" /> constructor.</summary>
      <returns>A collection of directories and file paths.</returns>
    </member>
    <member name="P:System.Runtime.Caching.HostFileChangeMonitor.LastModified">
      <summary>Gets a read-only value that indicates the last write time of a monitored file or path.</summary>
      <returns>The last write time of a monitored file or path.</returns>
    </member>
    <member name="P:System.Runtime.Caching.HostFileChangeMonitor.UniqueId">
      <summary>Gets an identifier for the <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> instance that is based on the set of monitored directories and file paths. </summary>
      <returns>An identifier for the change monitor. </returns>
    </member>
    <member name="T:System.Runtime.Caching.MemoryCache">
      <summary>Represents the type that implements an in-memory cache.</summary>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. </summary>
      <param name="name">The name to use to look up configuration information. NoteIt is not required for configuration information to exist for every name.If a matching configuration entry exists, the configuration information is used to configure the <see cref="T:System.Runtime.Caching.MemoryCache" /> instance. If a matching configuration entry does not exist, the name can be accessed through the <see cref="P:System.Runtime.Caching.MemoryCache.Name" /> property, because the specified name is associated with the <see cref="T:System.Runtime.Caching.MemoryCache" /> instance. For information about memory cache configuration, see <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheElement" />.</param>
      <param name="config">A collection of name/value pairs of configuration information to use for configuring the cache. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string. </exception>
      <exception cref="T:System.ArgumentException">The string value "default" (case insensitive) is assigned to <paramref name="name" />. The value "default" cannot be assigned to a new <see cref="T:System.Runtime.Caching.MemoryCache" /> instance, because the value is reserved for use by the <see cref="P:System.Runtime.Caching.MemoryCache.Default" /> property.</exception>
      <exception cref="T:System.Configuration.ConfigurationException">A value in the <paramref name="config" /> collection is invalid. </exception>
      <exception cref="T:System.ArgumentException">A name or value in the <paramref name="config" /> parameter could not be parsed.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
      <summary>Adds a cache entry into the cache using the specified <see cref="T:System.Runtime.Caching.CacheItem" /> instance and details about how to evict the entry.</summary>
      <returns>If a cache entry with the same key exists, the existing cache entry; otherwise, null.</returns>
      <param name="item">The object to add. </param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null. </exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Runtime.Caching.CacheItem.Value" /> property is null.</exception>
      <exception cref="T:System.ArgumentException">An <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property has been supplied. NoteThe <see cref="Overload:System.Runtime.Caching.ObjectCache.Add" /> and <see cref="Overload:System.Runtime.Caching.ObjectCache.AddOrGetExisting" /> method overloads do not support the <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property. Therefore, to set the <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property for a cache entry, use the <see cref="Overload:System.Runtime.Caching.MemoryCache.Set" /> method overloads instead. </exception>
      <exception cref="T:System.ArgumentException">Both the absolute and sliding expiration values for the <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /> fields. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> instance. The other expiration setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> field or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /> field.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />. -or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> property is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
      <summary>Adds a cache entry into the cache using the specified key and a value and an absolute expiration value.</summary>
      <returns>If a cache entry with the same key exists, the existing cache entry; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry to add. </param>
      <param name="value">The data for the cache entry. </param>
      <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. </param>
      <param name="regionName">A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value " />is not null.</exception>
      <exception cref="T:System.ArgumentException">An <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property has been supplied. NoteThe <see cref="Overload:System.Runtime.Caching.ObjectCache.Add" /> and the <see cref="Overload:System.Runtime.Caching.ObjectCache.AddOrGetExisting" /> method overloads do not support the <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property. Therefore, to set the <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property for a cache entry, use the <see cref="Overload:System.Runtime.Caching.MemoryCache.Set" /> overloads instead.</exception>
      <exception cref="T:System.ArgumentException">Both the absolute and sliding expiration values for the <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /> fields. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class cannot set expiration policy based on a combination of an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> instance. The other expiration setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /></exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />. -or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> property is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
      <summary>Inserts a cache entry into the cache using the specified key and value and the specified details for how it is to be evicted.</summary>
      <returns>If a matching cache entry already exists, a cache entry; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry to add or get. </param>
      <param name="value">The data for the cache entry.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
      <param name="regionName">A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. By default, this parameter is null, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Both the absolute and sliding expiration values of <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class cannot set expiration policy based on a combination of both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. The other setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />.-or-Both the removal callback and the update callback have been specified for <see cref="T:System.Runtime.Caching.CacheItemPolicy" />. The <see cref="T:System.Runtime.Caching.MemoryCache" /> only supports using one type of callback per cache entry.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> has been set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> property is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.CacheMemoryLimit">
      <summary>Gets the amount of memory on the computer, in megabytes, that can be used by the cache. </summary>
      <returns>The amount of memory in megabytes. </returns>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Contains(System.String,System.String)">
      <summary>Determines whether a cache entry exists in the cache.</summary>
      <returns>true if the cache contains a cache entry whose key matches <paramref name="key" />; otherwise, false.</returns>
      <param name="key">A unique identifier for the cache entry to search for.</param>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>Creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> object that can trigger events in response to changes to specified cache entries.</summary>
      <returns>A change monitor that monitors entries in the cache.</returns>
      <param name="keys">An enumeration of unique cache entry keys for the <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> object.</param>
      <param name="regionName">A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of items in <paramref name="keys" /> is zero. </exception>
      <exception cref="T:System.ArgumentException">An item in the <paramref name="keys" /> collection is null. </exception>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.Default">
      <summary>Gets a reference to the default <see cref="T:System.Runtime.Caching.MemoryCache" /> instance. </summary>
      <returns>The default instance of the cache.</returns>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.DefaultCacheCapabilities">
      <summary>Gets a description of the features that the cache provides.</summary>
      <returns>A bitwise combination of flags that indicate the default capabilities of the cache implementation.</returns>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.MemoryCache" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Get(System.String,System.String)">
      <summary>Returns an entry from the cache. </summary>
      <returns>A reference to the cache entry that is identified by <paramref name="key" />, if the entry exists; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry to get. </param>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.GetCacheItem(System.String,System.String)">
      <summary>Returns the specified entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance.</summary>
      <returns>A reference to the cache entry identified by <paramref name="key" /> if the entry exists; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry to get. </param>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.GetCount(System.String)">
      <summary>Returns the total number of cache entries in the cache. </summary>
      <returns>The number of entries in the cache. </returns>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.GetEnumerator">
      <summary>Creates an enumerator that can be used to iterate through a collection of cache entries.</summary>
      <returns>The enumerator object that provides access to the items in the cache.</returns>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>Returns a set of cache entries that correspond to the specified keys.</summary>
      <returns>A set of cache entries that correspond to the specified keys.</returns>
      <param name="keys">A set of unique identifiers for the cache entries to return. </param>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> is null. </exception>
      <exception cref="T:System.ArgumentException">An individual key in the collection is null. </exception>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.Item(System.String)">
      <summary>Gets or sets a value in the cache by using the default indexer property for an instance of the <see cref="T:System.Runtime.Caching.MemoryCache" /> class.</summary>
      <returns>The value in the cache instance for the specified key, if the entry exists; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache value to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. -or-The inserted value is null.</exception>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.Name">
      <summary>Gets the name of the cache. </summary>
      <returns>The name of the cache. </returns>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.PhysicalMemoryLimit">
      <summary>Gets the percentage of physical memory that the cache can use. </summary>
      <returns>The percentage of physical memory that the cache can use.</returns>
    </member>
    <member name="P:System.Runtime.Caching.MemoryCache.PollingInterval">
      <summary>Gets the maximum time after which the cache updates its memory statistics.</summary>
      <returns>The maximum time that can occur before memory statistics are updated.</returns>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Remove(System.String,System.String)">
      <summary>Removes a cache entry from the cache. </summary>
      <returns>If the entry is found in the cache, the removed cache entry; otherwise, null. </returns>
      <param name="key">A unique identifier for the cache entry to remove. </param>
      <param name="regionName">A named region in the cache to which a cache entry was added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
      <summary>Inserts a cache entry into the cache by using a <see cref="T:System.Runtime.Caching.CacheItem" /> instance to supply the key and value for the cache entry.</summary>
      <param name="item">An object that represents a cache entry to insert. </param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.-or-The <see cref="P:System.Runtime.Caching.CacheItem.Key" /> property is null.-or-The <see cref="P:System.Runtime.Caching.CacheItem.Value" /> property is null. </exception>
      <exception cref="T:System.ArgumentException">An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:If both the absolute and sliding expiration values of the <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /> fields. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class cannot set expiration policy based on both an absolute expiration and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. The other setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" /> property. If both the removal callback and the update callback are specified for <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class only supports using one type of callback per cache entry. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />. -or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
      <summary>Inserts a cache entry into the cache by using a key and a value and specifies time-based expiration details.</summary>
      <param name="key">A unique identifier for the cache entry to insert. </param>
      <param name="value">The data for the cache entry.</param>
      <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. </param>
      <param name="regionName">A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions. </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.-or-<paramref name="Value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An invalid combination of arguments for the cache entry was passed. This occurs if the following expiration details are set on the policy object for the cache entry:If both the absolute and sliding expiration values on <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />. This occurs because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. The other setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />. If both the removal callback and the update callback are specified on <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class only supports using one type of callback per cache entry.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />. -or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> property is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
      <summary>Inserts a cache entry into the cache by using a key and a value and eviction.</summary>
      <param name="key">A unique identifier for the cache entry to insert. </param>
      <param name="value">The data for the cache entry.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
      <param name="regionName">A named region in the cache to which a cache entry can be added. Do not pass a value for this parameter. This parameter is null by default, because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not implement regions.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.-or-<paramref name="value" /> is null-or-The callback reference that was passed to the helper method in the <see cref="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" /> property is null.</exception>
      <exception cref="T:System.ArgumentException">An invalid combination of arguments for the cache entry exists. This occurs if the following expiration details are set on the policy object for the cache entry:If both the absolute and sliding expiration values on <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> object are set to values other than the defaults of <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> and <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />. This is because the <see cref="T:System.Runtime.Caching.MemoryCache" /> class does not support expiring entries based on both an absolute and a sliding expiration. Only one expiration setting can be explicitly set when you use the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. The other setting must be set to <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" /> or <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />. If both the removal callback and the update callback are specified on <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> class. The <see cref="T:System.Runtime.Caching.MemoryCache" /> class only supports using one type of callback per cache entry.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value less than <see cref="F:System.TimeSpan.Zero" />. -or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" /> property is set to a value greater than one year.-or-The <see cref="P:System.Runtime.Caching.CacheItemPolicy.Priority" /> property is not a value of the <see cref="T:System.Runtime.Caching.CacheItemPriority" /> enumeration.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="regionName " />is not null.</exception>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
      <summary>Provides support for iteration over a generic collection.</summary>
      <returns>The enumerator object that provides access to the entries in the cache.</returns>
    </member>
    <member name="M:System.Runtime.Caching.MemoryCache.Trim(System.Int32)">
      <summary>Removes a specified percentage of cache entries from the cache object. </summary>
      <returns>The number of entries removed from the cache.</returns>
      <param name="percent">The percentage of total cache entries to remove.</param>
    </member>
    <member name="T:System.Runtime.Caching.ObjectCache">
      <summary>Represents an object cache and provides the base methods and properties for accessing the object cache.</summary>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.#ctor">
      <summary>Called from constructors in derived classes in order to initialize the <see cref="T:System.Runtime.Caching.ObjectCache" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
      <summary>When overridden in a derived class, tries to insert a cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance, and adds details about how the entry should be evicted.</summary>
      <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as <paramref name="item" />.</returns>
      <param name="item">The object to add.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration. </param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache without overwriting any existing cache entry. </summary>
      <returns>true if insertion succeeded, or false if there is an already an entry in the cache that has the same key as <paramref name="key" />. </returns>
      <param name="key">A unique identifier for the cache entry.</param>
      <param name="value">The object to insert. </param>
      <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. This parameter is required when the <see cref="Overload:System.Runtime.Caching.ObjectCache.Add" /> method is called.</param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. Because regions are not implemented in .NET FrameworkÂ 4, the default value is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache, specifying information about how the entry will be evicted.</summary>
      <returns>true if the insertion try succeeds, or false if there is an already an entry in the cache with the same key as <paramref name="key" />.</returns>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="value">The object to insert. </param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
      <summary>When overridden in a derived class, inserts the specified <see cref="T:System.Runtime.Caching.CacheItem" /> object into the cache, specifying information about how the entry will be evicted.</summary>
      <returns>If a cache entry with the same key exists, the specified cache entry; otherwise, null.</returns>
      <param name="value">The object to insert. </param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</summary>
      <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="value">The object to insert. </param>
      <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache, specifying a key and a value for the cache entry, and information about how the entry will be evicted.</summary>
      <returns>If a cache entry with the same key exists, the specified cache entry's value; otherwise, null.</returns>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="value">The object to insert.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Contains(System.String,System.String)">
      <summary>When overridden in a derived class, checks whether the cache entry already exists in the cache.</summary>
      <returns>true if the cache contains a cache entry with the same key value as <paramref name="key" />; otherwise, false. </returns>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="regionName">Optional. A named region in the cache where the cache can be found, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>When overridden in a derived class, creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> object that can trigger events in response to changes to specified cache entries. </summary>
      <returns>A change monitor that monitors cache entries in the cache. </returns>
      <param name="keys">The unique identifiers for cache entries to monitor. </param>
      <param name="regionName">Optional. A named region in the cache where the cache keys in the <paramref name="keys" /> parameter exist, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="P:System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities">
      <summary>When overridden in a derived class, gets a description of the features that a cache implementation provides.</summary>
      <returns>A bitwise combination of flags that indicate the default capabilities of a cache implementation.</returns>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Get(System.String,System.String)">
      <summary>When overridden in a derived class, gets the specified cache entry from the cache as an object.</summary>
      <returns>The cache entry that is identified by <paramref name="key" />. </returns>
      <param name="key">A unique identifier for the cache entry to get. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.GetCacheItem(System.String,System.String)">
      <summary>When overridden in a derived class, gets the specified cache entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance.</summary>
      <returns>The cache entry that is identified by <paramref name="key" />.</returns>
      <param name="key">A unique identifier for the cache entry to get. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache was added, if regions are implemented. Because regions are not implemented in .NET FrameworkÂ 4, the default is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.GetCount(System.String)">
      <summary>When overridden in a derived class, gets the total number of cache entries in the cache. </summary>
      <returns>The number of cache entries in the cache. If <paramref name="regionName" /> is not null, the count indicates the number of entries that are in the specified cache region. </returns>
      <param name="regionName">Optional. A named region in the cache for which the cache entry count should be computed, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.GetEnumerator">
      <summary>When overridden in a derived class, creates an enumerator that can be used to iterate through a collection of cache entries. </summary>
      <returns>The enumerator object that provides access to the cache entries in the cache.</returns>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>When overridden in a derived class, gets a set of cache entries that correspond to the specified keys.</summary>
      <returns>A dictionary of key/value pairs that represent cache entries. </returns>
      <param name="keys">A collection of unique identifiers for the cache entries to get. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry or entries were added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])">
      <summary>Gets a set of cache entries that correspond to the specified keys.</summary>
      <returns>A dictionary of key/value pairs that represent cache entries. </returns>
      <param name="regionName">Optional. A named region in the cache to which the cache entry or entries were added, if regions are implemented. Because regions are not implemented in .NET FrameworkÂ 4, the default is null.</param>
      <param name="keys">A collection of unique identifiers for the cache entries to get. </param>
    </member>
    <member name="P:System.Runtime.Caching.ObjectCache.Host">
      <summary>Gets or set a reference to a managed hosting environment that is available to <see cref="T:System.Runtime.Caching.ObjectCache" /> implementations and that can provide host-specific services to <see cref="T:System.Runtime.Caching.ObjectCache" /> implementations.</summary>
      <returns>A reference to a cache-aware managed hosting environment. </returns>
      <exception cref="T:System.ArgumentNullException">The value being assigned to the property is null. </exception>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set the property value more than one time.</exception>
    </member>
    <member name="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration">
      <summary>Gets a value that indicates that a cache entry has no absolute expiration. </summary>
      <returns>A date-time value that is set to the maximum possible value.</returns>
    </member>
    <member name="P:System.Runtime.Caching.ObjectCache.Item(System.String)">
      <summary>Gets or sets the default indexer for the <see cref="T:System.Runtime.Caching.ObjectCache" /> class.</summary>
      <returns>A key that serves as an indexer into the cache instance.</returns>
      <param name="key">A unique identifier for a cache entry in the cache. </param>
    </member>
    <member name="P:System.Runtime.Caching.ObjectCache.Name">
      <summary>Gets the name of a specific <see cref="T:System.Runtime.Caching.ObjectCache" /> instance. </summary>
      <returns>The name of a specific cache instance.</returns>
    </member>
    <member name="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration">
      <summary>Indicates that a cache entry has no sliding expiration time.</summary>
      <returns>A time-duration value that is set to zero.</returns>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)">
      <summary>When overridden in a derived class, removes the cache entry from the cache.</summary>
      <returns>An object that represents the value of the removed cache entry that was specified by the key, or null if the specified entry was not found.</returns>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry was added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)">
      <summary>When overridden in a derived class, inserts the cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance, specifying information about how the entry will be evicted.</summary>
      <param name="item">The cache item to add.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache, specifying time-based expiration details. </summary>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="value">The object to insert.</param>
      <param name="absoluteExpiration">The fixed date and time at which the cache entry will expire.</param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)">
      <summary>When overridden in a derived class, inserts a cache entry into the cache. </summary>
      <param name="key">A unique identifier for the cache entry. </param>
      <param name="value">The object to insert.</param>
      <param name="policy">An object that contains eviction details for the cache entry. This object provides more options for eviction than a simple absolute expiration.</param>
      <param name="regionName">Optional. A named region in the cache to which the cache entry can be added, if regions are implemented. The default value for the optional parameter is null.</param>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Supports iteration over a strongly typed collection.</summary>
      <returns>The enumerator object that provides access to the cache entries in the cache.</returns>
    </member>
    <member name="M:System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator">
      <summary>Supports iteration over a generic collection.</summary>
      <returns>The enumerator object that provides access to the items in the cache.</returns>
    </member>
    <member name="T:System.Runtime.Caching.OnChangedCallback">
      <summary>Defines a reference to a method that handles changes to monitored items.</summary>
      <param name="state">The state of the dependent object that was changed. </param>
    </member>
    <member name="T:System.Runtime.Caching.SqlChangeMonitor">
      <summary>Provides change monitoring for SQL Server databases. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Caching.SqlChangeMonitor.#ctor(System.Data.SqlClient.SqlDependency)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.SqlChangeMonitor" /> class. </summary>
      <param name="dependency">An object that represents an ADO.NET <see cref="T:System.Data.SqlClient.SqlDependency" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependency" /> is null. </exception>
    </member>
    <member name="P:System.Runtime.Caching.SqlChangeMonitor.UniqueId">
      <summary>Gets an identifier for a <see cref="T:System.Runtime.Caching.SqlChangeMonitor" /> instance. </summary>
      <returns>An identifier for the change monitor. </returns>
    </member>
    <member name="T:System.Runtime.Caching.Configuration.CachingSectionGroup">
      <summary>Defines a configuration section for.NET Framework caching. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Caching.Configuration.CachingSectionGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.Configuration.CachingSectionGroup" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.CachingSectionGroup.MemoryCaches">
      <summary>Gets the collection of <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheElement" /> objects. </summary>
      <returns>The collection of cache-section objects.</returns>
    </member>
    <member name="T:System.Runtime.Caching.Configuration.MemoryCacheElement">
      <summary>Defines an element that is used to configure a cache that is based on the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Caching.Configuration.MemoryCacheElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheElement" /> class. </summary>
      <param name="name">The unique name for a specific cache configuration. </param>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheElement.CacheMemoryLimitMegabytes">
      <summary>Gets or sets the maximum memory size, in megabytes, that an instance of a <see cref="T:System.Runtime.Caching.MemoryCache" /> object can grow to.</summary>
      <returns>The amount of maximum memory size, in megabytes. The default is zero, which indicates that <see cref="T:System.Runtime.Caching.MemoryCache" /> instances manage their own memory based on the amount of memory that is installed on the computer. </returns>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheElement.Name">
      <summary>Gets or sets the name of a particular cache configuration.</summary>
      <returns>The name of a cache configuration.</returns>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheElement.PhysicalMemoryLimitPercentage">
      <summary>Gets or sets the percentage of server memory that can be used by the cache.</summary>
      <returns>The percentage of physical memory that the cache can use, expressed as an integer value from 1 to 100. The default is zero, which indicates that <see cref="T:System.Runtime.Caching.MemoryCache" /> instances manage their own memory based on the amount of memory that is installed on the computer. </returns>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheElement.PollingInterval">
      <summary>Gets or sets a value that indicates the time interval after which the cache implementation compares the current memory load against the absolute and percentage-based memory limits that are set for the cache instance. </summary>
      <returns>The time interval after which the cache implementation compares the current memory load against the absolute and percentage-based memory limits that are set for the cache instance. The default is two minutes.</returns>
    </member>
    <member name="T:System.Runtime.Caching.Configuration.MemoryCacheSection">
      <summary>Defines a configuration section for a cache based on the <see cref="T:System.Runtime.Caching.MemoryCache" /> class. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Caching.Configuration.MemoryCacheSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheSection" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheSection.NamedCaches">
      <summary>Gets the collection of configuration settings for the named <see cref="T:System.Runtime.Caching.MemoryCache" /> instances. </summary>
      <returns>A collection of settings for each named cache.</returns>
    </member>
    <member name="T:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection">
      <summary>Represents a collection of <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection" /> objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection.CollectionType">
      <summary>Gets the type of the configuration collection.</summary>
      <returns>The type of the collection. </returns>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheElement" /> item that has the specified index.</summary>
      <returns>The element at the specified index. </returns>
      <param name="index">The zero-based index of the item in the collection.</param>
    </member>
    <member name="P:System.Runtime.Caching.Configuration.MemoryCacheSettingsCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.Runtime.Caching.Configuration.MemoryCacheElement" /> item that has the specified key.</summary>
      <returns>The item that is specified by the key. </returns>
      <param name="key">A unique identifier for the item.</param>
    </member>
    <member name="T:System.Runtime.Caching.Hosting.IApplicationIdentifier">
      <summary>Defines an identifier for application domains that a cache implementation can use to interact with a host environment. </summary>
    </member>
    <member name="M:System.Runtime.Caching.Hosting.IApplicationIdentifier.GetApplicationId">
      <summary>Gets an identifier for an application domain. </summary>
      <returns>A unique identifier for the current application domain. </returns>
    </member>
    <member name="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem">
      <summary>Defines a way to expose a custom <see cref="T:System.Runtime.Caching.FileChangeMonitor" /> object to a cache implementation.</summary>
    </member>
    <member name="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)">
      <summary>Registers a file path to monitor with the host environment. </summary>
      <param name="filePath">The fully qualified physical path of a directory or file to monitor for changes.</param>
      <param name="onChangedCallback">A reference to a method that implements the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate. When the monitored file or directory changes, the host environment's implementation of the <see cref="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" /> interface raises an event by calling the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> class. </param>
      <param name="state">The state that is supplied by the host environment. Cache implementations and custom change monitors should treat the state value as opaque. However, the state must be stored so that it can be sent to the host environment when the cache implementation calls the <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" /> method. </param>
      <param name="lastWriteTime">When this method returns, contains the last date and time that a write operation occurred on <paramref name="filePath" />. This parameter is passed uninitialized. This parameter is returned from the host environment. </param>
      <param name="fileSize">When this method returns, contains the total size of the monitored <paramref name="filePath" />. This parameter is passed uninitialized. This parameter is returned from the host environment.</param>
    </member>
    <member name="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)">
      <summary>Ends change monitoring.</summary>
      <param name="filePath">The path of the file or folder to stop monitoring. This should match a file path value that was passed in an earlier call to the <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> method. </param>
      <param name="state">The state information that was originally supplied by the host environment during an earlier call to the <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" /> method.</param>
    </member>
    <member name="T:System.Runtime.Caching.Hosting.IMemoryCacheManager">
      <summary>Defines an interface that a cache uses in order to communicate cache memory usage to a host environment.</summary>
    </member>
    <member name="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.ReleaseCache(System.Runtime.Caching.MemoryCache)">
      <summary>Removes all references to a cache in the host environment.</summary>
      <param name="cache">A reference to the cache.</param>
    </member>
    <member name="M:System.Runtime.Caching.Hosting.IMemoryCacheManager.UpdateCacheSize(System.Int64,System.Runtime.Caching.MemoryCache)">
      <summary>Reports the size of the current cache.</summary>
      <param name="size">The size of the memory, in bytes, that the cache consumes.</param>
      <param name="cache">A reference to the cache.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Runtime.Remoting.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Remoting</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSink">
      <summary>Provides the implementation for a client formatter sink that uses the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSink" /> class.</summary>
      <param name="nextSink">The next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> in the sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>Asynchronously processes the provided message.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> that provides a way to control the asynchronous message after it has been dispatched.</returns>
      <param name="msg">The message to process. </param>
      <param name="replySink">The sink that will receive the reply to the provided message. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests asynchronous processing of a method call on the current sink.</summary>
      <param name="sinkStack">A stack of channel sinks that called the current sink. </param>
      <param name="msg">The message to process. </param>
      <param name="headers">The headers to add to the outgoing message that is heading to the server. </param>
      <param name="stream">The stream that is headed toward the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests asynchronous processing of a response to a method call on the current sink.</summary>
      <param name="sinkStack">A stack of sinks that called the current sink. </param>
      <param name="state">Information that is associated with the current sink, generated on the request side and needed on the response side. </param>
      <param name="headers">The headers that are retrieved from the server response stream. </param>
      <param name="stream">The stream that is coming back from the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> onto which the provided message is to be serialized.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> onto which the provided message is to be serialized.</returns>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> that contains details about the method call. </param>
      <param name="headers">The headers to add to the outgoing message that is heading to the server. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.NextChannelSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> in the sink chain.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.NextSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> in the sink chain.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>Requests message processing from the current sink.</summary>
      <param name="msg">The message to process. </param>
      <param name="requestHeaders">The headers to add to the outgoing message that is heading to the server. </param>
      <param name="requestStream">The stream that is headed toward the transport sink. </param>
      <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> interface that holds the headers that the server returned. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> that is coming back from the transport sink. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>Synchronously processes the provided message.</summary>
      <returns>The response to the processed message.</returns>
      <param name="msg">The message to process. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider">
      <summary>Provides the implementation for the binary client formatter sink provider.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" /> class with the given properties and provider data.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of configuration properties to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" />. </param>
      <param name="providerData">A <see cref="T:System.Collections.ICollection" /> of <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> objects that contain provider data to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
      <summary>Creates a sink chain.</summary>
      <returns>The first sink of the newly formed channel sink chain, or null, which indicates that this provider will not or cannot provide a connection for this endpoint.</returns>
      <param name="channel">Channel for which this sink chain is being constructed. </param>
      <param name="url">URL of object to connect to or the channel URI for the target object. </param>
      <param name="remoteChannelData">A channel data object that describes a channel on the remote server. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.Next">
      <summary>Gets or sets the next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> in the sink provider chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> in the sink provider chain.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
      <summary>Provides the implementation for a server formatter sink that uses the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" /> class.</summary>
      <param name="protocol">The <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> that will be used with the current instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />. </param>
      <param name="nextSink">The next sink in the channel sink chain. </param>
      <param name="receiver">Indicates the channel that will receive the messages that are serialized by the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests processing of the response from a method call that is sent asynchronously.</summary>
      <param name="sinkStack">A stack of sinks that is leading back to the server transport sink. </param>
      <param name="state">Information that is associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message. </param>
      <param name="headers">The headers to add to the return message that is heading to the client. </param>
      <param name="stream">The stream that is heading back to the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</returns>
      <param name="sinkStack">A stack of sinks that is leading back to the server transport sink. </param>
      <param name="state">Information that is associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message to serialize. </param>
      <param name="headers">The headers to put in the response stream to the client. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>Requests message processing from the current sink.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> status value that provides information about how the message was processed.</returns>
      <param name="sinkStack">A stack of channel sinks that called the current sink. </param>
      <param name="requestMsg">The message that contains the request. </param>
      <param name="requestHeaders">Headers that are retrieved from the incoming message from the client. </param>
      <param name="requestStream">The stream that needs to be processed and passed on to the deserialization sink. </param>
      <param name="responseMsg">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that holds the response message. This parameter is passed uninitialized. </param>
      <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> that holds the headers to add to the return message that is heading to the client. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> that is heading to the transport sink. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel">
      <summary>Gets or sets the TypeFilterLevel value of automatic deserialization that the BinaryServerFormatterSink performs.</summary>
      <returns>The TypeFilterLevel that represents the current automatic deserialization level.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol">
      <summary>Specifies the protocol to use with the <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" /> class.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol.Http">
      <summary>Indicates that the current formatter sink is using the HTTP protocol, and therefore requires special processing.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol.Other">
      <summary>Indicates that a protocol other than HTTP is used with the current formatter sink.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider">
      <summary>Provides the implementation for the server formatter channel sink provider that uses the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" /> class with the provided properties and provider data.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of configuration properties to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />. </param>
      <param name="providerData">A <see cref="T:System.Collections.ICollection" /> of <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>Creates a sink chain.</summary>
      <returns>The first sink of the newly formed channel sink chain.</returns>
      <param name="channel">The channel for which to create the channel sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>Returns the channel data for the channel that the current sink is associated with.</summary>
      <param name="channelData">A <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> object in which the channel data is to be returned. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.Next">
      <summary>Gets or sets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.TypeFilterLevel">
      <summary>Gets or sets the TypeFilterLevel value of automatic deserialization the BinaryServerFormatterSink performs.</summary>
      <returns>The TypeFilterLevel that represents the current automatic deserialization level.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.CommonTransportKeys">
      <summary>The transport keys associated with common values used by the channels.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.CommonTransportKeys.#ctor">
      <summary>Creates an instance of <see cref="T:System.Runtime.Remoting.Channels.CommonTransportKeys" />.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.ConnectionId">
      <summary>The transport key associated with a unique ID given to each incoming socket connection.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.IPAddress">
      <summary>The transport key associated with the IP address from which an incoming request arrived.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.RequestUri">
      <summary>The transport key associated with the URI that made the request.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection">
      <summary>The <see cref="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection" /> interface provides methods that indicate whether a client is authorized to connect on the current channel, based on the client's network address and user identity.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection.IsConnectingEndPointAuthorized(System.Net.EndPoint)">
      <summary>Gets a Boolean value that indicates whether the network address of the client is authorized to connect on the current channel.</summary>
      <returns>true if the network address of the client is authorized; otherwise, false.</returns>
      <param name="endPoint">The <see cref="T:System.Net.EndPoint" /> that identifies the network address of the client.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection.IsConnectingIdentityAuthorized(System.Security.Principal.IIdentity)">
      <summary>Gets a Boolean value that indicates whether the user identity of the client is authorized to connect on the current channel.</summary>
      <returns>true if the user identity of the client is authorized; otherwise, false.</returns>
      <param name="identity">The <see cref="T:System.Security.Principal.IIdentity" /> that represents the user identity of the client.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapClientFormatterSink">
      <summary>Provides the implementation for a client formatter sink that uses the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSink" /> class.</summary>
      <param name="nextSink">The next sink in the channel sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>Asynchronously processes the provided message.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> that provides a way to control the asynchronous message after it has been dispatched.</returns>
      <param name="msg">The message to process. </param>
      <param name="replySink">The sink that will receive the reply to the provided message. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests asynchronous processing of a method call on the current sink.</summary>
      <param name="sinkStack">A stack of channel sinks that called the current sink. </param>
      <param name="msg">The message to process. </param>
      <param name="headers">The headers to add to the outgoing message heading to the server. </param>
      <param name="stream">The stream headed to the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests asynchronous processing of a response to a method call on the current sink.</summary>
      <param name="sinkStack">A stack of sinks that called the current sink. </param>
      <param name="state">The state associated with the current sink. </param>
      <param name="headers">The headers retrieved from the server response stream. </param>
      <param name="stream">The stream coming back from the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> onto which the provided message is to be serialized.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> onto which the provided message is to be serialized.</returns>
      <param name="msg">The <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> containing details about the method call. </param>
      <param name="headers">The headers to add to the outgoing message heading to the server. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.NextChannelSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> in the sink chain.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.NextSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> in the sink chain.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>Requests message processing from the current sink.</summary>
      <param name="msg">The message to process. </param>
      <param name="requestHeaders">The headers to add to the outgoing message heading to the server. </param>
      <param name="requestStream">The stream headed toward the transport sink. </param>
      <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> interface that holds the headers that the server returned. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> coming back from the transport sink. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>Synchronously processes the provided message.</summary>
      <returns>The response to the processed message.</returns>
      <param name="msg">The message to process. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider">
      <summary>Provides the implementation for a client formatter sink provider.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" /> class with the given properties and provider data.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of configuration properties to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />. </param>
      <param name="providerData">A <see cref="T:System.Collections.ICollection" /> of provider data to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
      <summary>Creates a sink chain.</summary>
      <returns>The first sink of the newly formed channel sink chain, or null, which indicates that this provider will not or cannot provide a connection for this endpoint.</returns>
      <param name="channel">Channel for which this sink chain is being constructed. </param>
      <param name="url">URL of object to connect to or the channel URI for the target object. </param>
      <param name="remoteChannelData">A channel data object describing a channel on the remote server. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.Next">
      <summary>Gets or sets the next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> in the sink provider chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> in the sink provider chain.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink">
      <summary>Provides the implementation for a server formatter sink that uses the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" /> class.</summary>
      <param name="protocol">The <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol" /> that will be used with the current instance of <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" />. </param>
      <param name="nextSink">The next sink in the channel sink chain. </param>
      <param name="receiver">Indicates the channel that will receive the messages serialized by the new instance of <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests processing from the current sink of the response from a method call sent asynchronously.</summary>
      <param name="sinkStack">A stack of sinks leading back to the server transport sink. </param>
      <param name="state">Information associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message. </param>
      <param name="headers">The headers to add to the return message heading to the client. </param>
      <param name="stream">The stream heading back to the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</returns>
      <param name="sinkStack">A stack of sinks leading back to the server transport sink. </param>
      <param name="state">Information associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message that is to be serialized. </param>
      <param name="headers">The headers to put in the response stream to the client. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.NextChannelSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>Requests message processing from the current sink.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> status value that provides information about how the message was processed.</returns>
      <param name="sinkStack">The stack of sinks that transports the message. </param>
      <param name="requestMsg">The message that contains the request. </param>
      <param name="requestHeaders">Headers retrieved from the incoming message from the client. </param>
      <param name="requestStream">The stream that needs to be processed and passed on to the deserialization sink. </param>
      <param name="responseMsg">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that holds the response message. This parameter is passed uninitialized. </param>
      <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> that holds the headers to add to the return message heading to the client. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> that is heading back to the transport sink. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink. For more information, see Channel and Formatter Configuration Properties.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.TypeFilterLevel">
      <summary>Gets or sets the TypeFilterLevel value of automatic deserialization the SoapServerFormatterSink performs.</summary>
      <returns>The TypeFilterLevel that represents the current automatic deserialization level.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol">
      <summary>Specifies the protocol to use with the <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" /> class.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol.Http">
      <summary>Indicates that the current formatter sink is using the HTTP protocol, and therefore requires special processing.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol.Other">
      <summary>Indicates that a protocol other than HTTP is used with the current formatter sink.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider">
      <summary>Provides the implementation for a server formatter channel sink provider that uses the <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider" /> class with the provided properties and provider data.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of configuration properties to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />. </param>
      <param name="providerData">A <see cref="T:System.Collections.ICollection" /> of provider data to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>Creates a sink chain.</summary>
      <returns>The first sink of the newly formed channel sink chain.</returns>
      <param name="channel">The channel for which to create the channel sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>Returns the channel data for the channel that the current sink is associated with.</summary>
      <param name="channelData">A <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> object in which the channel data is to be returned. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.Next">
      <summary>Gets or sets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.TypeFilterLevel">
      <summary>Gets or sets the TypeFilterLevel value of automatic deserialization the SoapServerFormatterSink performs.</summary>
      <returns>The TypeFilterLevel that represents the current automatic deserialization level.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SocketCachePolicy">
      <summary>Specifies the policy for removing clients from the cache maintained by remoting clients.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SocketCachePolicy.Default">
      <summary>Remove a socket from the cache a fixed time after its last use.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SocketCachePolicy.AbsoluteTimeout">
      <summary>Remove a socket from the cache a fixed time after its creation.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpChannel">
      <summary>Implements a client channel for remote calls that uses the HTTP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> class with the specified configuration properties and sinks.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the client and server channels. </param>
      <param name="clientSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the client channel. </param>
      <param name="serverSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the server channel.</param>
      <exception cref="T:System.ArgumentException">A configuration property was incorrectly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> class with a server channel that listens on the specified port.</summary>
      <param name="port">The port on which the server channel listens.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.AddHookChannelUri(System.String)">
      <summary>Adds a URI on which the channel hook should listen.</summary>
      <param name="channelUri">Should always be a null reference (Nothing in Visual Basic) for <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /></param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelData">
      <summary>Gets the channel-specific data.</summary>
      <returns>The channel data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelScheme">
      <summary>Gets the type of listener to hook into (for example, "http").</summary>
      <returns>The type of listener to hook into.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelSinkChain">
      <summary>Gets the channel sink chain that the current channel is using.</summary>
      <returns>The channel sink chain that the current channel is using.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink will deliver messages. Can be null. </param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be null. </param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />.</returns>
      <param name="objectURI">The URI of the object for which URL's are required. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Item(System.Object)">
      <summary>Returns the specified channel property.</summary>
      <returns>A <see cref="T:System.Object" /> that represents the channel property specified by <paramref name="key" />.</returns>
      <param name="key">The key of the channel property to retrieve.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Keys">
      <summary>Gets a <see cref="T:System.Collections.ICollection" /> of keys that the channel properties are associated with.</summary>
      <returns>A <see cref="T:System.Collections.ICollection" /> of keys that the channel properties are associated with.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel, or null if the specified URL is not an HTTP URL.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of the channel properties associated with the current channel.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of the channel properties associated with the current channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">Should always be a null reference (Nothing in Visual Basic) for <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">The channel URI on which the channel hook is listening.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.WantsToListen">
      <summary>Gets a Boolean value that indicates whether the current instance wants to be hooked into the outside listener service.</summary>
      <returns>A Boolean value that indicates whether <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> wants to be hooked into the outside listener service.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel">
      <summary>Implements a client channel for remote calls that uses the HTTP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> class with the specified configuration properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the channel. </param>
      <exception cref="T:System.ArgumentException">A configuration property was incorrectly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> class with the specified name and sink.</summary>
      <param name="name">The name of the new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" />. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> to be used by the channel. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink will deliver messages. Can be null. </param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be null. </param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.IsSecured">
      <summary>Gets or sets whether the client channel is secured.</summary>
      <returns>true is the client channel is secured otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Item(System.Object)">
      <summary>Returns the specified channel property.</summary>
      <returns>A <see cref="T:System.Object" /> that represents the channel property specified by <paramref name="key" />.</returns>
      <param name="key">The key of the channel property to retrieve.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Keys">
      <summary>Gets a <see cref="T:System.Collections.ICollection" /> of keys that the channel properties are associated with.</summary>
      <returns>A <see cref="T:System.Collections.ICollection" /> of keys that the channel properties are associated with.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel, or null if the specified URL is not an HTTP URL.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler">
      <summary>Implements an ASP.NET handler that forwards requests to the remoting HTTP channel.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.#ctor(System.Type,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> class with default values. </summary>
      <param name="type">The constructor ignores the <paramref name="type" /> parameter.</param>
      <param name="srvID">The constructor ignores the <paramref name="srvID" /> parameter.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.IsReusable">
      <summary>Gets a Boolean value that indicates whether another request can use the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />.</summary>
      <returns>true for all instances of <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by the current instance.</summary>
      <param name="context">A <see cref="T:System.Web.HttpContext" /> that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory">
      <summary>Initializes new instances of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.#ctor">
      <summary>Creates an instance of <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
      <summary>Returns an instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> class.</summary>
      <returns>A new <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> that processes the request.</returns>
      <param name="context">An instance of the <see cref="T:System.Web.HttpContext" /> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests. </param>
      <param name="verb">The HTTP data transfer method (GET or POST) that the client uses. </param>
      <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl" /> of the requested resource. </param>
      <param name="filePath">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> to the requested resource. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
      <summary>Enables a factory to reuse the specified <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />.</summary>
      <param name="handler">The <see cref="T:System.Web.IHttpHandler" /> to release. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel">
      <summary>Implements a server channel for remote calls that uses the HTTP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> class with the specified channel properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of the channel properties that hold the configuration information for the current channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> to use with the new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" />. </param>
      <exception cref="T:System.ArgumentException">A configuration property was incorrectly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> class that listens on the specified port.</summary>
      <param name="port">The port on which the channel listens. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> class with the given name and that listens on the specified port.</summary>
      <param name="name">The name of the channel. </param>
      <param name="port">The port on which the channel listens. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> class at the specified port with the given name, which listens on the specified port, and uses the specified sink.</summary>
      <param name="name">The name of the channel. </param>
      <param name="port">The port on which the channel listens. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> to be used by the channel. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.AddHookChannelUri(System.String)">
      <summary>Adds a URI on which the channel hook must listen.</summary>
      <param name="channelUri">A URI on which the channel hook must listen. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelData">
      <summary>Gets channel-specific data.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance that contains channel-specific data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> object that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelScheme">
      <summary>Gets the type of listener to hook into (for example, "http").</summary>
      <returns>The type of listener to hook into.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelSinkChain">
      <summary>Gets the channel sink chain that the current channel is using.</summary>
      <returns>The channel sink chain that the current channel is using.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetChannelUri">
      <summary>Returns the URI of the current channel.</summary>
      <returns>The URI of the current channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />.</returns>
      <param name="objectUri">The URI of the object for which URLs are required. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Item(System.Object)">
      <summary>Returns the specified channel property.</summary>
      <returns>A <see cref="T:System.Object" /> that represents the channel property specified by <paramref name="key" />.</returns>
      <param name="key">The key of the channel property to retrieve.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Keys">
      <summary>Gets a <see cref="T:System.Collections.ICollection" /> of keys the channel properties are associated with.</summary>
      <returns>A <see cref="T:System.Collections.ICollection" /> of keys the channel properties are associated with.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The channel URI.</returns>
      <param name="url">The URL from which to extract the URIs. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">Should always be null for <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">Should always be null for <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.WantsToListen">
      <summary>Gets a Boolean value that indicates whether <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> wants to be hooked into the outside listener service.</summary>
      <returns>A Boolean value that indicates whether <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> wants to be hooked into the outside listener service.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel">
      <summary>Provides a channel implementation that uses the IPC protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> class, activating only a client channel, and not a server channel.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> class with the specified configuration properties and sinks.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection specifying values for configuration properties to be used by the client and server channels. </param>
      <param name="clientSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the client channel. </param>
      <param name="serverSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the server channel. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)"></member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> class with a server channel that listens on the specified IPC port.</summary>
      <param name="portName">The name of the IPC port.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelData">
      <summary>Gets the channel-specific data.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance that contains channel-specific data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink should deliver messages. Can be null. </param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink should deliver messages. Can be null. </param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" />.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" />.</returns>
      <param name="objectURI">The URI of the object for which URLs are required. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">Optional initialization information. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">Optional state information for the channel. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel">
      <summary>Implements a client channel for remote calls that uses the IPC protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel" /> class with the specified configuration properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel.</param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel" /> class with the specified name and sink.</summary>
      <param name="name">The name of the channel.</param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the channel.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> instance that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that indicates the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink delivers messages. This parameter can be null.</param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. This parameter can be null. </param>
      <param name="objectURI">When this method returns, contains the URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized.</param>
      <exception cref="T:System.Runtime.Remoting.RemotingException">The provided sink does not implement <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" />.</exception>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>A <see cref="T:System.String" /> that contains the channel URI.</returns>
      <param name="url">The URL from which to extract the object URI.</param>
      <param name="objectURI">When this method returns, a <see cref="T:System.String" /> instance that holds the URI of the remote well-known object. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
      <summary>Implements a server channel for remote calls that uses the IPC system to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel.</param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel properties, sink, and security descriptor.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel.</param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</param>
      <param name="securityDescriptor">A <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> to be used by the channel.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified IPC port name.</summary>
      <param name="portName">The name of the IPC port to be used by the channel.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel name and IPC port name.</summary>
      <param name="name">The name of the channel.</param>
      <param name="portName">The name of the IPC port to be used by the channel.</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel name, IPC port name, and sink.</summary>
      <param name="name">The name of the channel.</param>
      <param name="portName">The name of the IPC port to be used by the channel.</param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData">
      <summary>Gets channel-specific data.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance that contains channel-specific data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> instance that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that indicates the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri">
      <summary>Returns the URI of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> that contains the URI of the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for the object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> instance.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> instance.</returns>
      <param name="objectUri">The URI of the object for which URLs are required.</param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object.</param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> instance that holds the URI of the remote well-known object. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">An object that specifies an initialization state, or null, if you do not want to pass a specific state to the channel.</param>
      <exception cref="T:System.Exception">The specified listening port is not available.</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">An object that specifies an initialization state, or null, if you do not want to pass a specific state to the channel.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel">
      <summary>Provides a channel implementation that uses the TCP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> class, activating only a client channel, and not a server channel.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> class with the specified configuration properties and sinks.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the client and server channels. </param>
      <param name="clientSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the client channel. </param>
      <param name="serverSinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the server channel. </param>
      <exception cref="T:System.ArgumentException">A provided channel property was improperly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> class with a server channel that listens on the specified port.</summary>
      <param name="port">The port on which the server channel listens. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData">
      <summary>Gets the channel-specific data.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance that contains channel-specific data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink should deliver messages. Can be null. </param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink should deliver messages. Can be null. </param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />.</returns>
      <param name="objectURI">The URI of the object for which URLs are required. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">Optional initialization information. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">Optional state information for the channel. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel">
      <summary>For remote calls, implements a client channel that uses the TCP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> class with the specified configuration properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel. </param>
      <exception cref="T:System.ArgumentException">A configuration property was incorrectly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> class with the specified name and sink.</summary>
      <param name="name">The name of the channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> implementation to be used by the channel. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> instance that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>Returns a channel message sink that delivers messages to the specified URL or channel data object.</summary>
      <returns>A channel message sink that delivers messages to the specified URL or channel data object.</returns>
      <param name="url">The URL to which the new sink delivers messages. Can be null. </param>
      <param name="remoteChannelData">The channel data object of the remote host to which the new sink will deliver messages. Can be null. </param>
      <param name="objectURI">When this method returns, contains a URI of the new channel message sink that delivers messages to the specified URL or channel data object. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The channel URI.</returns>
      <param name="url">The URL from which to extract the URIs. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> instance that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel">
      <summary>Implements a server channel for remote calls that uses the TCP protocol to transmit messages.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> class with the specified channel properties and sink.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection specifying values for configuration properties to be used by the channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel. </param>
      <exception cref="T:System.ArgumentException">A provided channel property was badly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> class with the specified channel properties, sink, and authorization provider.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel. </param>
      <param name="authorizeCallback">The <see cref="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection" /> implementation to be used by the channel.</param>
      <exception cref="T:System.ArgumentException">A provided channel property was badly formatted. </exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> class that listens on the specified port.</summary>
      <param name="port">The port on which the channel listens. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> class with the given name and that listens on the specified port.</summary>
      <param name="name">The name of the channel. </param>
      <param name="port">The port on which the channel listens. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> class with the given name, which listens on the specified port, and uses the specified sink.</summary>
      <param name="name">The name of the channel. </param>
      <param name="port">The port on which the channel listens. </param>
      <param name="sinkProvider">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData">
      <summary>Gets channel-specific data.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance containing channel-specific data.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName">
      <summary>Gets the name of the current channel.</summary>
      <returns>A <see cref="T:System.String" /> instance that contains the name of the channel.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority">
      <summary>Gets the priority of the current channel.</summary>
      <returns>An integer that represents the priority assigned to the channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri">
      <summary>Returns the URI of the current channel.</summary>
      <returns>The URI of the current channel.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(System.String)">
      <summary>Returns an array of all the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> instance.</summary>
      <returns>An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> instance.</returns>
      <param name="objectUri">The URI of the object for which URLs are required. </param>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured">
      <summary>Gets or sets a Boolean value that indicates whether the current channel is secure.</summary>
      <returns>A Boolean value that indicates whether the current instance is secure.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(System.String,System.String@)">
      <summary>Extracts the channel URI and the remote well-known object URI from the specified URL.</summary>
      <returns>The URI of the current channel.</returns>
      <param name="url">The URL from which to extract the URI of the remote well-known object. </param>
      <param name="objectURI">When this method returns, contains a <see cref="T:System.String" /> instance that holds the URI of the remote well-known object. This parameter is passed uninitialized. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(System.Object)">
      <summary>Instructs the current channel to start listening for requests.</summary>
      <param name="data">Optional initialization information. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(System.Object)">
      <summary>Instructs the current channel to stop listening for requests.</summary>
      <param name="data">Optional state information for the channel. </param>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.MetaData">
      <summary>Provides methods that allow you to work with XML schema.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.#ctor">
      <summary>Creates an instance of <see cref="T:System.Runtime.Remoting.MetadataServices.MetaData" />.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile(System.String,System.String,System.String)">
      <summary>Compiles a specified code source file into a runtime assembly file.</summary>
      <param name="codePath">The path to the file that contains the source code. </param>
      <param name="assemblyPath">The location where the new run-time assembly is generated. </param>
      <param name="strongNameFilename">The strong name to compile into the new assembly. Can be <see cref="F:System.String.Empty" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceStreamToAssemblyFile(System.Collections.ArrayList,System.String,System.String)">
      <summary>Compiles specified code source streams into a run-time assembly file.</summary>
      <param name="outCodeStreamList">A <see cref="T:System.Collections.ArrayList" /> of streams with the source code. </param>
      <param name="assemblyPath">The location where the new run-time assembly is generated. </param>
      <param name="strongNameFilename">The strong name to compile into the new run-time assembly. Can be <see cref="F:System.String.Empty" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList)">
      <summary>Converts the specified schema definition into C# proxy source code.</summary>
      <param name="clientProxy">Indicates the type of proxy to generate. If true, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If false, generates a transparent proxy that exposes all the methods of the remote object. </param>
      <param name="outputDirectory">The directory where the new C# source code files with the proxy are created. </param>
      <param name="inputStream">The input stream that contains the schema definition in Web Services Description Language (WSDL) format. </param>
      <param name="outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String)">
      <summary>Converts the specified schema definition into C# proxy source code for a remote object that is located at the specified URL.</summary>
      <param name="clientProxy">Indicates the type of proxy to generate. If true, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If false, generates a transparent proxy that exposes all the methods of the remote object. </param>
      <param name="outputDirectory">The directory where the new C# source code files with the proxy are created. </param>
      <param name="inputStream">The input stream that contains the schema definition in Web Services Description Language (WSDL) format. </param>
      <param name="outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams. </param>
      <param name="proxyUrl">The URL where the target remote object that is represented by the new proxy will be located. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)">
      <summary>Converts the specified schema definition into C# proxy source code for a remote object that is located at the specified URL and in the provided class namespace.</summary>
      <param name="clientProxy">Indicates the type of proxy to generate. If true, generates a simple proxy (also known as wrapped proxy) that automatically loads the channels, exposes all the methods of the remote object, and provides access to the channel properties. If false, generates a transparent proxy that exposes all the methods of the remote object. </param>
      <param name="outputDirectory">The directory where the new C# source code files with the proxy are created. </param>
      <param name="inputStream">The input stream containing the schema definition in Web Services Description Language (WSDL) format. </param>
      <param name="outCodeStreamList">The list of file names for the code streams that are generated. Note that the <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> method can create multiple source code streams. </param>
      <param name="proxyUrl">The URL where the target remote object that is represented by the new proxy will be located. </param>
      <param name="proxyNamespace">The namespace of the newly created proxy. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)">
      <summary>Converts the specified service types to XML schema, and writes it to a file that is specified by name.</summary>
      <param name="types">The <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> instances to convert to XML schema. </param>
      <param name="sdlType">The type of service description language to use for the XML schema. </param>
      <param name="path">The path of the XML file. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)">
      <summary>Converts the specified object types to XML schema, and writes it to a file that is specified by name.</summary>
      <param name="types">The object types to convert to XML schema. </param>
      <param name="sdlType">The type of service description language to use for the XML schema. </param>
      <param name="path">The path of the XML file. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)">
      <summary>Converts the specified service types to XML schema, and writes it to a specified stream.</summary>
      <param name="serviceTypes">The <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> instances to convert to XML schema. </param>
      <param name="sdlType">The type of service description language to use for the XML schema. </param>
      <param name="outputStream">The <see cref="T:System.IO.Stream" /> that the schema is written to. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)">
      <summary>Converts the specified object types to XML schema, and writes it to a specified stream.</summary>
      <param name="types">The object types to convert to XML schema. </param>
      <param name="sdlType">The type of service description language to use for the XML schema. </param>
      <param name="outputStream">The <see cref="T:System.IO.Stream" /> that the schema is written to. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToFile(System.String,System.String)">
      <summary>Downloads the XML schema from a URL, and writes it to the specified file.</summary>
      <param name="url">The URL where the XML schema is located. </param>
      <param name="path">The path of the file that the schema is written to. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToStream(System.String,System.IO.Stream)">
      <summary>Downloads the XML schema from a URL, and writes it to the specified stream.</summary>
      <param name="url">The URL where the XML schema is located. </param>
      <param name="outputStream">The <see cref="T:System.IO.Stream" /> that the schema is written to. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.SaveStreamToFile(System.IO.Stream,System.String)">
      <summary>Saves the input stream to a file with the specified name.</summary>
      <param name="inputStream">The stream to write to the specified file. </param>
      <param name="path">The file that the input stream is written to. </param>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink">
      <summary>Provides the implementation for a server channel sink that generates Web Services Description Language (WSDL) dynamically on the server.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.#ctor(System.Runtime.Remoting.Channels.IChannelReceiver,System.Runtime.Remoting.Channels.IServerChannelSink)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" /> class.</summary>
      <param name="receiver">Indicates the channel that will receive the messages serialized by the new instance of <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" />. </param>
      <param name="nextSink">The next sink in the sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>Requests processing from the current sink of the response from a method call that was sent asynchronously.</summary>
      <param name="sinkStack">A stack of sinks that lead back to the server transport sink. </param>
      <param name="state">Information associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message. </param>
      <param name="headers">The headers to add to the return message heading to the client. </param>
      <param name="stream">The stream heading back to the transport sink. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> onto which the provided response message is to be serialized.</returns>
      <param name="sinkStack">A stack of sinks that lead back to the server transport sink. </param>
      <param name="state">Information associated with the current sink, generated on the request side, and needed on the response side. </param>
      <param name="msg">The response message to serialize. </param>
      <param name="headers">The headers to put in the response stream to the client. </param>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSink.NextChannelSink">
      <summary>Gets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in the sink chain.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>Requests message processing from the current sink.</summary>
      <returns>A <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> status value that provides information about how the message was processed.</returns>
      <param name="sinkStack">A stack of channel sinks that called the current sink. </param>
      <param name="requestMsg">The message that contains the request. </param>
      <param name="requestHeaders">The headers that are retrieved from the incoming message from the client. </param>
      <param name="requestStream">The stream that needs to be processed and passed on to the deserialization sink. </param>
      <param name="responseMsg">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that holds the response message. This parameter is passed uninitialized. </param>
      <param name="responseHeaders">When this method returns, contains a <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> that holds the headers to add to return message heading to the client. This parameter is passed uninitialized. </param>
      <param name="responseStream">When this method returns, contains a <see cref="T:System.IO.Stream" /> that is heading to the transport sink. This parameter is passed uninitialized. </param>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSink.Properties">
      <summary>Gets a <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</summary>
      <returns>A <see cref="T:System.Collections.IDictionary" /> of properties for the current channel sink.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider">
      <summary>Provides the implementation for the server channel sink provider that creates <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" /> instances.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" /> class with specified properties and provider data.</summary>
      <param name="properties">A <see cref="T:System.Collections.IDictionary" /> of configuration properties to use with the new instance of <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" />. </param>
      <param name="providerData">A <see cref="T:System.Collections.ICollection" /> of <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> instances to use with the new instance of <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>Creates a sink chain.</summary>
      <returns>The first sink of the newly formed channel sink chain.</returns>
      <param name="channel">The channel for which to create the channel sink chain. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>Returns the channel data for the channel that the current sink is associated with.</summary>
      <param name="localChannelData">A <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> object in which the channel data is to be returned. </param>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.Next">
      <summary>Gets or sets the next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</summary>
      <returns>The next <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> in the sink provider chain.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlType">
      <summary>Specifies the schema type that is used to describe services that are provided by an application.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.MetadataServices.SdlType.Sdl">
      <summary>Indicates that basic Services Description Language (SDL) is used to describe services that are provided by an application. This value is obsolete.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.MetadataServices.SdlType.Wsdl">
      <summary>Indicates that the Web Services Description Language (WSDL) is used to describe services that are provided by an application.</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.ServiceType">
      <summary>Associates a well-known object type that is passed to the Web Services Description Language (WSDL) generator with a remote endpoint that can process messages that are sent to a method on the type.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.ServiceType.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> class with the object <see cref="T:System.Type" /> that is passed to the Web Services Description Language (WSDL) generator.</summary>
      <param name="type">The object <see cref="T:System.Type" /> that is passed to the WSDL generator. </param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.ServiceType.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> class with the URL and <see cref="T:System.Type" /> of an object that is passed to the Web Services Description Language (WSDL) generator.</summary>
      <param name="type">The object <see cref="T:System.Type" /> that is passed to the WSDL generator. </param>
      <param name="url">The well-known endpoint that can process messages that are sent to a method on the object type that is specified in the <paramref name="type" /> parameter. </param>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.ServiceType.ObjectType">
      <summary>Gets the object <see cref="T:System.Type" /> that is passed to the Web Services Description Language (WSDL) generator.</summary>
      <returns>The object <see cref="T:System.Type" /> that the current <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> was created for.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.ServiceType.Url">
      <summary>Gets the URL of an object <see cref="T:System.Type" /> that is passed to the Web Services Description Language (WSDL) generator.</summary>
      <returns>The URL of an object <see cref="T:System.Type" /> that the current <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> was created for.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException">
      <summary>The exception that is thrown if an error occurs during the generation of Web Services Description Language (WSDL).</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SUDSParserException">
      <summary>The exception that is thrown if an error occurs during parsing of the Web Services Description Language (WSDL).</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SUDSParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Remoting.MetadataServices.SUDSParserException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Runtime.Remoting.Services.RemotingClientProxy">
      <summary>The abstract base class for proxies to well-known objects that were generated by the Soapsuds tool.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.#ctor"></member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._tp">
      <summary>The transparent proxy inside the remoting client proxy object.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._type">
      <summary>Indicates the type of the object that the current proxy represents.</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._url">
      <summary>Indicates the URL of the object that the current proxy represents.</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.AllowAutoRedirect">
      <summary>Gets or sets a value that indicates whether the automatic handling of server redirects is enabled.</summary>
      <returns>A Boolean value that indicates whether the automatic handling of server redirects is enabled.</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.ConfigureProxy(System.Type,System.String)">
      <summary>Internal. Automatically configures the proxy by loading the channels, if they are not already loaded and creating the proxy.</summary>
      <param name="type">The <see cref="T:System.Type" /> class type of the object that the current proxy represents. </param>
      <param name="url">The URL of the object that the current proxy represents. </param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.ConnectProxy">
      <summary>Internal. Connects the proxy to the remoting channel that is specified by the <see cref="P:System.Runtime.Remoting.Services.RemotingClientProxy.Url" /> property.</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Cookies">
      <summary>This property is not currently implemented. The property returns null (Nothing in Visual Basic).</summary>
      <returns>The cookies for the current proxy.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Domain">
      <summary>Gets or sets the domain name to be used for basic authentication and digest authentication.</summary>
      <returns>The name of the domain to use for basic authentication and digest authentication.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.EnableCookies">
      <summary>This property is not currently implemented. The property throws a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>A Boolean value that indicates whether the handling of cookies received from the server is enabled.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Password">
      <summary>Gets or sets the password to use for basic authentication and digest authentication.</summary>
      <returns>The password to use for basic authentication and digest authentication.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Path">
      <summary>Gets or sets the base URL to the server to use for requests.</summary>
      <returns>The base URL to the server to use for requests.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.PreAuthenticate">
      <summary>Gets or sets a value that indicates whether preauthentication of requests is enabled.</summary>
      <returns>A Boolean value that indicates whether preauthentication of requests is enabled.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.ProxyName">
      <summary>Gets or sets the name of the proxy server to use for requests.</summary>
      <returns>The name of the proxy server to use for requests.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.ProxyPort">
      <summary>Gets or sets the port number of the proxy server to use for requests.</summary>
      <returns>The port number of the proxy server to use for requests.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Timeout">
      <summary>Gets or sets the time-out in milliseconds to use for synchronous calls.</summary>
      <returns>The time-out in milliseconds to use for synchronous calls.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Url">
      <summary>Gets or sets the base URL to the server to use for requests.</summary>
      <returns>The base URL to the server to use for requests.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.UserAgent">
      <summary>Gets or sets the user agent HTTP header for the request.</summary>
      <returns>The user agent HTTP header for the request.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Username">
      <summary>Gets or sets the user name to send for basic authentication and digest authentication.</summary>
      <returns>The user name to send for basic authentication and digest authentication.</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Services.RemotingService">
      <summary>Provides the base implementation for the remoting XML Web services.</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingService.#ctor">
      <summary>Creates an instance of <see cref="T:System.Runtime.Remoting.Services.RemotingService" />.</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Application">
      <summary>Gets a reference to the application object for the current HTTP request.</summary>
      <returns>A reference to the application object for the current HTTP request.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Context">
      <summary>Gets the current HTTP-specific context that is used by the HTTP server to process Web requests.</summary>
      <returns>The current HTTP-specific context that is used by the HTTP server to process Web requests.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Server">
      <summary>Gets the <see cref="T:System.Web.HttpServerUtility" /> for the current request.</summary>
      <returns>The <see cref="T:System.Web.HttpServerUtility" /> for the current request.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Session">
      <summary>Gets the <see cref="T:System.Web.SessionState.HttpSessionState" /> for the current request.</summary>
      <returns>The <see cref="T:System.Web.SessionState.HttpSessionState" /> for the current request.</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.User">
      <summary>Gets the security context of the user on whose behalf the code is running, including that user's identity and any roles that the user belongs to.</summary>
      <returns>The security context of the user.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Printing.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Printing</name>
  </assembly>
  <members>
    <member name="T:System.Printing.EnumeratedPrintQueueTypes">
      <summary>Specifies attributes of print queues.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.EnableDevQuery">
      <summary>A print queue that holds its print jobs when the document and printer configurations do not match.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.PushedMachineConnection">
      <summary>A print queue that was installed by using the Push Printer Connections computer policy. See Remarks.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.PushedUserConnection">
      <summary>A print queue that was installed by using the Push Printer Connections user policy. See Remarks.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.Queued">
      <summary>A print queue that allows multiple print jobs in the queue.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.DirectPrinting">
      <summary>A print queue that sends a print job directly to printing instead of spooling the job first.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.PublishedInDirectoryServices">
      <summary>A print queue that is visible in the directory of printers.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.WorkOffline">
      <summary>A print queue that can work offline.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.RawOnly">
      <summary>A print queue that spools only raw data.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.EnableBidi">
      <summary>A print queue for a printer that has bidirectional communication enabled.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.KeepPrintedJobs">
      <summary>A print queue that keeps jobs in the queue after printing them.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.Fax">
      <summary>A print queue that services a fax machine.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.TerminalServer">
      <summary>A print queue that is installed by the redirection feature in Terminal Services.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.Connections">
      <summary>A print queue that is connected to the specified print server.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.Shared">
      <summary>A print queue that is shared.</summary>
    </member>
    <member name="F:System.Printing.EnumeratedPrintQueueTypes.Local">
      <summary>A print queue that is installed as a local print queue on the specified print server.</summary>
    </member>
    <member name="T:System.Printing.LocalPrintServer">
      <summary>Represents the local print server (the computer on which your application is running) and enables management of its print queues.</summary>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class. </summary>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor(System.Printing.LocalPrintServerIndexedProperty[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class that has the specified <see cref="T:System.Printing.LocalPrintServerIndexedProperty" /> array. </summary>
      <param name="propertiesFilter">An array of properties that the constructor initializes.</param>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor(System.Printing.LocalPrintServerIndexedProperty[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class that has the specified <see cref="T:System.Printing.LocalPrintServerIndexedProperty" /> array and the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />. </summary>
      <param name="propertiesFilter">An array of properties that the constructor initializes.</param>
      <param name="desiredAccess">A value specifying the type of access to the print server that your program needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor(System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class that has the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />. </summary>
      <param name="desiredAccess">A value specifying the type of access to the print server that your application needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class that has the specified properties.</summary>
      <param name="propertiesFilter">An array of the property names that the constructor initializes.</param>
    </member>
    <member name="M:System.Printing.LocalPrintServer.#ctor(System.String[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.LocalPrintServer" /> class that has the specified properties and <see cref="T:System.Printing.PrintSystemDesiredAccess" />. </summary>
      <param name="propertiesFilter">An array of the property names that the constructor initializes.</param>
      <param name="desiredAccess">A value specifying the type of access to the print server that your application needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.Commit">
      <summary>Writes any changes that your application made to the properties of the <see cref="T:System.Printing.LocalPrintServer" /> to the actual print server that the object represents. </summary>
      <exception cref="T:System.Printing.PrintServerException">Some properties are not committed.</exception>
      <exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.LocalPrintServer" /> object was not created with sufficient rights. See Remarks.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.ConnectToPrintQueue(System.Printing.PrintQueue)">
      <summary>Connects the local print server to the specified <see cref="T:System.Printing.PrintQueue" />. </summary>
      <returns>true if the connection is made; otherwise false.</returns>
      <param name="printer">The print queue to connect.</param>
      <exception cref="T:System.Printing.PrintServerException">A print queue that matches the <see cref="P:System.Printing.PrintQueue.FullName" /> property of the <paramref name="printer" /> is not found.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.ConnectToPrintQueue(System.String)">
      <summary>Connects to the print queue that is specified by using the <see cref="T:System.String" />. </summary>
      <returns>true if the connection is made; otherwise false.</returns>
      <param name="printQueuePath">The full path of the print queue that is being connected.</param>
      <exception cref="T:System.Printing.PrintServerException">A print queue with the specified path is not found.</exception>
    </member>
    <member name="P:System.Printing.LocalPrintServer.DefaultPrintQueue">
      <summary>Gets or sets the default print queue. </summary>
      <returns>The <see cref="T:System.Printing.PrintQueue" /> that is designated as the default queue for the local computer.</returns>
    </member>
    <member name="M:System.Printing.LocalPrintServer.DisconnectFromPrintQueue(System.Printing.PrintQueue)">
      <summary>Disconnects the local print server from the specified <see cref="T:System.Printing.PrintQueue" />. </summary>
      <returns>true if the disconnection is successful; otherwise false.</returns>
      <param name="printer">The print queue that is being disconnected.</param>
      <exception cref="T:System.Printing.PrintServerException">A print queue matching the <see cref="P:System.Printing.PrintQueue.FullName" /> property of the <paramref name="printer" /> is not found.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.DisconnectFromPrintQueue(System.String)">
      <summary>Disconnects from the print queue that is specified in the <see cref="T:System.String" />. </summary>
      <returns>true if the disconnection is successful; otherwise false.</returns>
      <param name="printQueuePath">The full path to the print queue that is disconnected.</param>
      <exception cref="T:System.Printing.PrintServerException">A print queue with the specified path is not found.</exception>
    </member>
    <member name="M:System.Printing.LocalPrintServer.GetDefaultPrintQueue">
      <summary>Returns a reference to the default print queue of the <see cref="T:System.Printing.LocalPrintServer" />. </summary>
      <returns>The default <see cref="T:System.Printing.PrintQueue" />.</returns>
    </member>
    <member name="M:System.Printing.LocalPrintServer.Refresh">
      <summary>Updates the properties of the <see cref="T:System.Printing.LocalPrintServer" /> object so that their values match the values of the print server that the object represents. </summary>
      <exception cref="T:System.Printing.PrintServerException">Some properties did not update.</exception>
    </member>
    <member name="T:System.Printing.LocalPrintServerIndexedProperty">
      <summary>Specifies the properties of a <see cref="T:System.Printing.LocalPrintServer" /> object that are initialized when it is constructed.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.MinorVersion">
      <summary>The property that specifies the minor version of the operating system.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.MajorVersion">
      <summary>The property that specifies the major version of the operating system.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.EventLog">
      <summary>The property that specifies the kind of event logging that is provided by the local print server.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.DefaultPrintQueue">
      <summary>The property that specifies the default print queue for the local print server.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.RestartJobOnPoolEnabled">
      <summary>The property that specifies whether users can restart jobs when printer pooling is being used.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.RestartJobOnPoolTimeout">
      <summary>The property that specifies the wait time before jobs can be restarted when printer pooling is being used.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.NetPopup">
      <summary>The property that specifies whether the client computer or the print server receives notifications that a job is finished.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.BeepEnabled">
      <summary>The property that specifies whether a printer error causes the local print server to beep.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.DefaultSchedulerPriority">
      <summary>The property that specifies the default priority for the scheduler.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.SchedulerPriority">
      <summary>The property that specifies the priority of the scheduler.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.DefaultPortThreadPriority">
      <summary>The property that specifies the default priority for the thread that manages port I/0.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.PortThreadPriority">
      <summary>The property that specifies the priority of the thread that manages port I/O.</summary>
    </member>
    <member name="F:System.Printing.LocalPrintServerIndexedProperty.DefaultSpoolDirectory">
      <summary>The property that specifies the path to the folder where spool jobs are located as temporary files.</summary>
    </member>
    <member name="T:System.Printing.PrintDocumentImageableArea">
      <summary>Specifies the size of the paper (or other media), the size of the imageable area, and the location of the imageable area.</summary>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.ExtentHeight">
      <summary>Gets the height of the imageable area. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance from the origin.</returns>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.ExtentWidth">
      <summary>Gets the width of the imageable area. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance from the origin.</returns>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.MediaSizeHeight">
      <summary>Gets the height of the paper or media.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance from the upper-left corner of the page to the lower-left corner.</returns>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.MediaSizeWidth">
      <summary>Gets the width of the paper or media.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance from the upper-left corner of the page to the upper-right corner.</returns>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.OriginHeight">
      <summary>Gets the distance from the upper-left corner of the imageable area (also called the 'origin' of the imageable area) to the nearest point on the top edge of the page.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance (in pixels - 1/96 of an inch) from the upper-left corner of the imageable area (also called the 'origin' of the imageable area) to the nearest point on the top edge of the page.</returns>
    </member>
    <member name="P:System.Printing.PrintDocumentImageableArea.OriginWidth">
      <summary>Gets the origin width, which is the distance from the left edge of the page to the upper-left corner of the imageable area (also called the "origin" of the imageable area).</summary>
      <returns>A <see cref="T:System.Double" /> that represents the origin width (in pixels - 1/96 of an inch), which is the distance from the left edge of the page to the upper-left corner of the imageable area (also called the "origin" of the imageable area).</returns>
    </member>
    <member name="T:System.Printing.PrintDriver">
      <summary>Represents a print driver.</summary>
    </member>
    <member name="M:System.Printing.PrintDriver.Commit">
      <summary>Do not use.</summary>
    </member>
    <member name="M:System.Printing.PrintDriver.Refresh">
      <summary>Do not use.</summary>
    </member>
    <member name="T:System.Printing.PrintFilter">
      <summary>Defines disposal behavior that is common to both the <see cref="T:System.Printing.PrintDriver" /> and <see cref="T:System.Printing.PrintProcessor" /> classes. <see cref="T:System.Printing.PrintFilter" /> supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Printing.PrintFilter.InternalDispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the class that is derived from <see cref="T:System.Printing.PrintFilter" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="T:System.Printing.PrintJobInfoCollection">
      <summary>Represents one or more <see cref="T:System.Printing.PrintSystemJobInfo" /> objects. </summary>
    </member>
    <member name="M:System.Printing.PrintJobInfoCollection.#ctor(System.Printing.PrintQueue,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintJobInfoCollection" /> class that contains the <see cref="T:System.Printing.PrintSystemJobInfo" /> objects for every job that is in the specified <see cref="T:System.Printing.PrintQueue" /> and that initializes those objects only in the properties that are listed in the specified property filter. </summary>
      <param name="printQueue">The print queue whose print jobs will populate the collection. </param>
      <param name="propertyFilter">A list of a subset of the properties of a <see cref="T:System.Printing.PrintSystemJobInfo" /> object. </param>
    </member>
    <member name="M:System.Printing.PrintJobInfoCollection.Add(System.Printing.PrintSystemJobInfo)">
      <summary>Adds a member to the <see cref="T:System.Printing.PrintJobInfoCollection" />. </summary>
      <param name="printObject">The object that is added.</param>
    </member>
    <member name="M:System.Printing.PrintJobInfoCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are being used by the <see cref="T:System.Printing.PrintJobInfoCollection" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Printing.PrintJobInfoCollection.GetEnumerator">
      <summary>Gets an object that implements the generic <see cref="T:System.Collections.IEnumerator" /> interface that is closed with <see cref="T:System.Printing.PrintSystemJobInfo" />.</summary>
      <returns>An object that implements the generic <see cref="T:System.Collections.IEnumerator" /> interface and that can iterate through the <see cref="T:System.Printing.PrintSystemJobInfo" /> objects that the <see cref="T:System.Printing.PrintJobInfoCollection" /> contains.</returns>
    </member>
    <member name="M:System.Printing.PrintJobInfoCollection.GetNonGenericEnumerator">
      <summary>Gets an object that implements the non-generic <see cref="T:System.Collections.IEnumerator" /> interface. </summary>
      <returns>An object that implements the non-generic <see cref="T:System.Collections.IEnumerator" /> interface and that can iterate through the <see cref="T:System.Printing.PrintSystemJobInfo" /> objects that the <see cref="T:System.Printing.PrintJobInfoCollection" /> contains.</returns>
    </member>
    <member name="T:System.Printing.PrintJobPriority">
      <summary>Specifies a non-numerical priority for a print job relative to other print jobs in the print queue. </summary>
    </member>
    <member name="F:System.Printing.PrintJobPriority.Default">
      <summary>A job that has the <see cref="P:System.Printing.PrintQueue.DefaultPriority" /> for the <see cref="T:System.Printing.PrintQueueStream" />.</summary>
    </member>
    <member name="F:System.Printing.PrintJobPriority.None">
      <summary>A job that has no non-numerical priority.</summary>
    </member>
    <member name="F:System.Printing.PrintJobPriority.Minimum">
      <summary>A job that has the lowest priority.</summary>
    </member>
    <member name="F:System.Printing.PrintJobPriority.Maximum">
      <summary>A job that has the highest priority.</summary>
    </member>
    <member name="T:System.Printing.PrintJobSettings">
      <summary>Describes a print job. </summary>
    </member>
    <member name="P:System.Printing.PrintJobSettings.CurrentPrintTicket">
      <summary>Gets or sets a <see cref="T:System.Printing.PrintTicket" /> object that holds all the detailed settings for the print job.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" /> object that holds all the details about the print job, such as the number of copies to print, and whether stapling or duplex printing is used. </returns>
    </member>
    <member name="P:System.Printing.PrintJobSettings.Description">
      <summary>Gets or sets a description of a print job. </summary>
      <returns>A <see cref="T:System.String" /> that describes the print job, for example, "Quarterly Report." </returns>
    </member>
    <member name="T:System.Printing.PrintJobStatus">
      <summary>Specifies the current status of a print job in a print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Retained">
      <summary>The print job is retained in the print queue after printing.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Completed">
      <summary>The print job is complete, including any post-printing processing. </summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Restarted">
      <summary>The print job was blocked but has restarted.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.UserIntervention">
      <summary>The printer requires user action to fix an error condition.  </summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Blocked">
      <summary>An error condition, possibly on a print job that precedes this one in the queue, blocked the print job.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Deleted">
      <summary>The print job was deleted from the queue, typically after printing.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Printed">
      <summary>The print job printed. </summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.PaperOut">
      <summary>The printer is out of the required paper size.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Offline">
      <summary>The printer is offline.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Spooling">
      <summary>The print job is spooling.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Deleting">
      <summary>The print job is in the process of being deleted.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Paused">
      <summary>The print job is paused.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.None">
      <summary>The print job has no specified state.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Printing">
      <summary>The print job is now printing.</summary>
    </member>
    <member name="F:System.Printing.PrintJobStatus.Error">
      <summary>The print job is in an error state.</summary>
    </member>
    <member name="T:System.Printing.PrintJobType">
      <summary>Specifies whether the print job uses XML Paper Specification (XPS). </summary>
    </member>
    <member name="F:System.Printing.PrintJobType.None">
      <summary>Not specified whether the print job is XPS.</summary>
    </member>
    <member name="F:System.Printing.PrintJobType.Xps">
      <summary>An XPS print job. </summary>
    </member>
    <member name="F:System.Printing.PrintJobType.Legacy">
      <summary>A non-XPS print job.</summary>
    </member>
    <member name="T:System.Printing.PrintPort">
      <summary>Represents a printer port on a print server. Each print queue has a print port assigned to it.</summary>
    </member>
    <member name="M:System.Printing.PrintPort.Commit">
      <summary>Do not use. </summary>
    </member>
    <member name="M:System.Printing.PrintPort.Refresh">
      <summary>Do not use. </summary>
    </member>
    <member name="T:System.Printing.PrintProcessor">
      <summary>Represents a print processor on a print server.</summary>
    </member>
    <member name="M:System.Printing.PrintProcessor.Commit">
      <summary>Do not use. </summary>
    </member>
    <member name="M:System.Printing.PrintProcessor.Refresh">
      <summary>Do not use. </summary>
    </member>
    <member name="T:System.Printing.PrintQueue">
      <summary>Manages printers and print jobs. </summary>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" /> and queue name. </summary>
      <param name="printServer">The print server to host the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, and print schema version. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="printSchemaVersion">The version of the Print Schema to use.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, print schema version, and desired access. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="printSchemaVersion">The version of the Print Schema to use.</param>
      <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />   values that specifies the type of access to the print queue that your program needs.</param>
      <exception cref="T:System.Printing.PrintQueueException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" /> object, not a <see cref="T:System.Printing.PrintQueue" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, and array of <see cref="T:System.Printing.PrintQueueIndexedProperty" /> values to initialize. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="propertyFilter">An array of <see cref="T:System.Printing.PrintQueueIndexedProperty" /> values that specifies the property values to initialize.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class with the specified <see cref="T:System.Printing.PrintServer" />, queue name, array of <see cref="T:System.Printing.PrintQueueIndexedProperty" /> values to initialize, and desired access. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="propertyFilter">An array of <see cref="T:System.Printing.PrintQueueIndexedProperty" /> values that specifies the properties to initialize.</param>
      <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" /> values that specifies the type of access to the print queue that your program needs.</param>
      <exception cref="T:System.Printing.PrintQueueException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" /> object, not a <see cref="T:System.Printing.PrintQueue" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, and desired access. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />   values that specifies the type of access to the print queue that your program needs.</param>
      <exception cref="T:System.Printing.PrintQueueException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" /> object, not a <see cref="T:System.Printing.PrintQueue" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, and array of property names to initialize. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="propertyFilter">An array of the names of properties to initialize.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of <see cref="T:System.Printing.PrintQueue" /> class using the specified <see cref="T:System.Printing.PrintServer" />, queue name, property filter, and desired access. </summary>
      <param name="printServer">The print server that hosts the print queue.</param>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="propertyFilter">An array of the names of properties to initialize.</param>
      <param name="desiredAccess">One of the <see cref="T:System.Printing.PrintSystemDesiredAccess" />   values that specifies the type of access to the print queue that your program needs.</param>
      <exception cref="T:System.Printing.PrintQueueException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintServer" /> object, not a <see cref="T:System.Printing.PrintQueue" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.AddJob">
      <summary>Inserts a new (generically named) print job, whose content is a <see cref="T:System.Byte" /> array, into the queue. </summary>
      <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> that represents the print job and its status.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.AddJob(System.String)">
      <summary>Inserts a new print job, whose content is a <see cref="T:System.Byte" /> array, into the queue. </summary>
      <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> that represents the print job and its status.</returns>
      <param name="jobName">The name of the print job.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)">
      <summary>Inserts a new print job for an XML Paper Specification (XPS) Document into the queue, gives it the specified name, and specifies whether or not it should be validated.</summary>
      <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> that represents the print job and its status.</returns>
      <param name="jobName">The name of the print job.</param>
      <param name="documentPath">The path and name of the document that is being printed.</param>
      <param name="fastCopy">true to spool quickly without page-by-page progress feedback and without validating that the file is valid XPS; otherwise, false. </param>
    </member>
    <member name="P:System.Printing.PrintQueue.AveragePagesPerMinute">
      <summary>Gets the speed of the printer measured in pages per minute. </summary>
      <returns>The average pages printed per minute of the printer.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.ClientPrintSchemaVersion">
      <summary>Gets the version of the Print Schema. </summary>
      <returns>The version of the Print Schema in use.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.Comment">
      <summary>Gets or sets a comment about the printer. </summary>
      <returns>A comment about the printer.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.Commit">
      <summary>Writes the current properties of the <see cref="T:System.Printing.PrintQueue" /> object to the actual print queue on the print server. </summary>
      <exception cref="T:System.Printing.PrintSystemException">Some of the properties could not be committed. </exception>
      <exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.PrintQueue" /> object was not created with sufficient rights.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object with the specified dimensions. </summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes to an XPS stream. This can be null. </returns>
      <param name="width">The width of the XPS document.</param>
      <param name="height">The height of the XPS document.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object, opens a Windows common print dialog and returns a ref (ByRef in Visual Basic) parameter that represents information about the imageable area and the dimensions of the media.</summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes XPS data to a stream. This can be null. (The parameter <paramref name="documentImageableArea" /> is a ref [ByRef in Visual Basic] parameter that is initialized by the method, so it represents a second returned item.) </returns>
      <param name="documentImageableArea">A reference to an object that contains the dimensions of the area of the page on which the device can print. Since its data type has no public constructor, this parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object, opens a Windows common print dialog, provides the dialog with a page range and a description of the print job, and returns a ref (ByRef in Visual Basic) parameter that represents information about the imageable area and the dimensions of the media.</summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes XPS data to a stream. This can be null. (The parameters <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, and <paramref name="pageRange" /> are all ref [ByRef in Visual Basic] parameters that are initialized by the user and returned when the dialog is closed, so each represents an additional returned item.) </returns>
      <param name="documentImageableArea">A reference to an object that contains the dimensions of the area of the page on which the device can print. Since its data type has no public constructor, this parameter is passed uninitialized.</param>
      <param name="pageRangeSelection">A value that specifies whether to print all pages or only a range that is specified by the user.</param>
      <param name="pageRange">The range of pages that is printed.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object and associates it with the specified print queue. </summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes to an XPS stream. </returns>
      <param name="printQueue">A print queue to print the XPS document.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object, opens a Windows common print dialog (and provides it a job description) and returns a ref (ByRef in Visual Basic) parameter that represents information about the imageable area and the dimensions of the media.</summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes XPS data to a stream. This can be null. (The parameter <paramref name="documentImageableArea" /> is a ref [ByRef in Visual Basic] parameter that is initialized by the method, so it represents a second returned item.) </returns>
      <param name="jobDescription">A name for the print job. It appears in the Windows printing user interface. </param>
      <param name="documentImageableArea">A reference to an object that contains the dimensions of the area of the page on which the device can print. Since its data type has no public constructor, this parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)">
      <summary>Creates an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> object, opens a Windows common print dialog, provides the dialog with a page range, and returns a ref (ByRef in Visual Basic) parameter that represents information about the imageable area and the dimensions of the media.</summary>
      <returns>An <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> that writes XPS data to a stream. This can be null. (The parameters <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" />, and <paramref name="pageRange" /> are all ref [ByRef in Visual Basic] parameters that are initialized by the user and returned when the dialog is closed, so each represents an additional returned item.)</returns>
      <param name="jobDescription">A name for the print job. It appears in the Windows printing user interface. </param>
      <param name="documentImageableArea">A reference to an object that contains the dimensions of the area of the page on which the device can print. Since its data type has no public constructor, this parameter is passed uninitialized.</param>
      <param name="pageRangeSelection">A value that specifies whether to print all pages or only a range that is specified by the user.</param>
      <param name="pageRange">The range of pages that is printed.</param>
    </member>
    <member name="P:System.Printing.PrintQueue.CurrentJobSettings">
      <summary>Gets an object that contains the configuration settings for the current print job. </summary>
      <returns>A <see cref="T:System.Printing.PrintJobSettings" /> value that holds the settings of the currently printing job. These settings include a description of the job and a reference to the job's <see cref="T:System.Printing.PrintTicket" />. </returns>
    </member>
    <member name="P:System.Printing.PrintQueue.DefaultPrintTicket">
      <summary>Gets or sets the default printer options associated with this <see cref="T:System.Printing.PrintQueue" />.</summary>
      <returns>The default <see cref="T:System.Printing.PrintTicket" /> for the print queue; or null if an error has occurred in the print queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.DefaultPriority">
      <summary>Gets or sets the default priority that is given to each new print job added to the queue. </summary>
      <returns>The default priority for print jobs added to the queue. Possible values range from 1 through 99. The default is 1. </returns>
    </member>
    <member name="P:System.Printing.PrintQueue.Description">
      <summary>Gets a description of the print queue. </summary>
      <returns>A description of the print queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.FullName">
      <summary>Gets the complete name of the queue. </summary>
      <returns>The complete name of the print queue.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.GetJob(System.Int32)">
      <summary>Gets the print job with the specified ID number. </summary>
      <returns>A <see cref="T:System.Printing.PrintSystemJobInfo" /> that specifies the properties of the job and its status.</returns>
      <param name="jobId">The number of the job in the queue.</param>
    </member>
    <member name="M:System.Printing.PrintQueue.GetPrintCapabilities">
      <summary>Gets a <see cref="T:System.Printing.PrintCapabilities" /> object that identifies the capabilities of the printer. </summary>
      <returns>A <see cref="T:System.Printing.PrintCapabilities" /> object that specifies what the printer can and cannot do, such as two-sided coping or automatic stapling. </returns>
      <exception cref="T:System.Printing.PrintQueueException">The <see cref="T:System.Printing.PrintCapabilities" /> object could not be retrieved.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)">
      <summary>Gets a <see cref="T:System.Printing.PrintCapabilities" /> object that identifies the capabilities of the printer. </summary>
      <returns>A <see cref="T:System.Printing.PrintCapabilities" /> object that specifies what the printer can and cannot do, such as two-sided coping or automatic stapling. </returns>
      <param name="printTicket">A print ticket that provides the basis on which the print capabilities are reported. </param>
      <exception cref="T:System.Printing.PrintQueueException">The <see cref="T:System.Printing.PrintCapabilities" /> object could not be retrieved.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="printTicket" /> is not well-formed.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml">
      <summary>Gets a <see cref="T:System.IO.MemoryStream" /> object that specifies the printer's capabilities as an XML stream that complies with the Print Schema. </summary>
      <returns>A <see cref="T:System.IO.MemoryStream" /> specifying the printer's capabilities by using the XML schema "PrintCapabilities," a part of the Print Schema system.</returns>
      <exception cref="T:System.Printing.PrintQueueException">The print capabilities could not be retrieved.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)">
      <summary>Gets a <see cref="T:System.IO.MemoryStream" /> object that specifies the printer's capabilities in an XML format that complies with the Print Schema. </summary>
      <returns>A <see cref="T:System.IO.MemoryStream" /> specifying the printer's capabilities by using the XML schema "PrintCapabilities," a part of the Print Schema system.</returns>
      <param name="printTicket">A print ticket that provides the basis on which the print capabilities are reported. </param>
      <exception cref="T:System.Printing.PrintQueueException">The print capabilities could not be retrieved.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="printTicket" /> is not well-formed.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.GetPrintJobInfoCollection">
      <summary>Creates a collection that contains a <see cref="T:System.Printing.PrintSystemJobInfo" /> object for each job in the queue. </summary>
      <returns>Returns a <see cref="T:System.Printing.PrintJobInfoCollection" /> of <see cref="T:System.Printing.PrintSystemJobInfo" /> objects. There is one for each job in the queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.HasPaperProblem">
      <summary>Gets a value that indicates if the printer is having an unspecified paper problem. </summary>
      <returns>true if there is an unspecified paper problem; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.HasToner">
      <summary>Gets a value that indicates if the printer has toner. </summary>
      <returns>true if the current printer has toner; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.HostingPrintServer">
      <summary>Gets or sets (protected) the print server that controls the print queue. </summary>
      <returns>The name and other properties of the <see cref="T:System.Printing.PrintServer" /> that is hosting the print queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.InPartialTrust">
      <summary>Gets or sets a value that indicates whether the queue is operating in a partially trusted mode, a higher level of trust. </summary>
      <returns>true if the queue is operating in a partially trusted mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Printing.PrintQueue" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Printing.PrintQueue.IsBidiEnabled">
      <summary>Gets a value that indicates whether bidirectional communication with the printer is enabled. </summary>
      <returns>true if bidirectional communication with the printer is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsBusy">
      <summary>Gets a value that indicates whether the printing device is busy. </summary>
      <returns>true if the device is busy; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsDevQueryEnabled">
      <summary>Gets a value that indicates whether the queue holds documents when document and printer configurations do not match. </summary>
      <returns>true if the queue holds mismatched configurations; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsDirect">
      <summary>Gets a value that indicates whether the queue prints directly to the printer or spools documents first and then prints them. </summary>
      <returns>true if the queue prints directly to the printer; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsDoorOpened">
      <summary>Gets a value that indicates whether a door is open on the printer. </summary>
      <returns>true if a door is open; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsHidden">
      <summary>Gets a value that indicates whether the print queue is hidden in your application's user interface. </summary>
      <returns>true if the print queue is hidden in the Windows user interface; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsInError">
      <summary>Gets a value that indicates whether the printer or device is in an error condition. </summary>
      <returns>true if the device is in an error condition; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsInitializing">
      <summary>Gets a value that indicates whether the printer is initializing itself. </summary>
      <returns>true if the printer is initializing; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsIOActive">
      <summary>Gets a value that indicates whether the printer is receiving or sending data or signals. </summary>
      <returns>true if the printer is receiving or sending; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsManualFeedRequired">
      <summary>Gets a value that indicates whether the printer needs to be manually fed paper for the current print job. </summary>
      <returns>true if the printer needs to be manually fed paper; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsNotAvailable">
      <summary>Gets a value that indicates whether the printer is available. </summary>
      <returns>true if the printer is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsOffline">
      <summary>Gets a value that indicates whether the printer is offline. </summary>
      <returns>true if the printer is offline; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsOutOfMemory">
      <summary>Gets a value that indicates whether the printer is out of memory. </summary>
      <returns>true if the printer is out of memory; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsOutOfPaper">
      <summary>Gets a value that indicates whether the printer needs to be reloaded with paper of the size required for the current job. </summary>
      <returns>true if the printer needs to be reloaded; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsOutputBinFull">
      <summary>Gets a value that indicates whether the output area of the printer is in danger of overflowing. </summary>
      <returns>true if the output area of the printer is full; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPaperJammed">
      <summary>Gets a value that indicates whether the current sheet of paper is stuck in the printer. </summary>
      <returns>true if the paper is stuck; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPaused">
      <summary>Gets a value that indicates whether the print queue has been paused. </summary>
      <returns>true if the print queue has been paused; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPendingDeletion">
      <summary>Gets a value that indicates whether the printer is in the process of deleting a print job. </summary>
      <returns>true if the printer is deleting a job; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPowerSaveOn">
      <summary>Gets a value that indicates whether the printer is in power save mode. </summary>
      <returns>true if the printer is in power save mode; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPrinting">
      <summary>Gets a value that indicates whether a job is printing. </summary>
      <returns>true if a job is printing; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsProcessing">
      <summary>Gets a value that indicates whether the printer is processing a print job. </summary>
      <returns>true if the printer is processing a print job; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsPublished">
      <summary>Gets a value that indicates whether the printer is visible to other network users. </summary>
      <returns>true if the printer is visible to other network users; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsQueued">
      <summary>Gets a value that indicates whether the printer can support a queue with more than one print job in it at a time. </summary>
      <returns>true if the printer can support the queuing of multiple print jobs; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsRawOnlyEnabled">
      <summary>Gets a value that indicates whether the print queue can use EMF (Enhanced Meta File) that enables faster data flow from a printing application to the Windows spooler. </summary>
      <returns>true if the printer cannot use EMF printing; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsServerUnknown">
      <summary>Gets a value that indicates whether the printer is in an error state. </summary>
      <returns>true if in the printer is in an error state; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsShared">
      <summary>Gets a value that indicates whether the printer is available for use by other computers on the network. </summary>
      <returns>true if the printer is shared; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsTonerLow">
      <summary>Gets a value that indicates whether the printer is running short of toner. </summary>
      <returns>true if the printer is running short of toner; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsWaiting">
      <summary>Gets a value that indicates whether the queue is waiting for a job to be added. </summary>
      <returns>true if the queue is waiting for a job; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsWarmingUp">
      <summary>Gets a value that indicates whether the printer is warming up. </summary>
      <returns>true if the printer is warming up; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.IsXpsDevice">
      <summary>Gets a value that indicates whether the printer's driver is built on the Printing Overview so it uses XML Paper Specification (XPS) as its page description language.Â </summary>
      <returns>true if the printer uses the Printing Overview; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.KeepPrintedJobs">
      <summary>Gets a value that indicates whether the queue is saving the printer language file instead of deleting it following printing. </summary>
      <returns>true if the queue is saving the printer language file; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.Location">
      <summary>Gets or sets the printer's physical location. </summary>
      <returns>The printer's physical location.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.MaxPrintSchemaVersion">
      <summary>Gets the most recent possible version number of the Print Schema that the queue can use. </summary>
      <returns>The most recent version number of the Print Schema that the queue can use.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)">
      <summary>Merges two <see cref="T:System.Printing.PrintTicket" />s and guarantees that the resulting <see cref="T:System.Printing.PrintTicket" /> is valid and does not ask for any printing functionality that the printer does not support. </summary>
      <returns>A <see cref="T:System.Printing.ValidationResult" /> that includes the merged <see cref="T:System.Printing.PrintTicket" /> and an indication of whether any of its settings had to be changed to guarantee viability.</returns>
      <param name="basePrintTicket">The first print ticket. </param>
      <param name="deltaPrintTicket">The second print ticket. This can be null. </param>
      <exception cref="T:System.ArgumentException">At least one of the input print tickets is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="basePrintTicket" /> is null.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The validation, merger, and viability checking operation failed.</exception>
    </member>
    <member name="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)">
      <summary>Merges two <see cref="T:System.Printing.PrintTicket" />s and guarantees that the resulting <see cref="T:System.Printing.PrintTicket" /> is valid, does not ask for any printing functionality that the printer does not support, and is limited to the specified scope. </summary>
      <returns>A <see cref="T:System.Printing.ValidationResult" /> that includes the merged <see cref="T:System.Printing.PrintTicket" /> and an indication of whether any of its settings had to be changed to guarantee viability.</returns>
      <param name="basePrintTicket">The first print ticket. </param>
      <param name="deltaPrintTicket">The second print ticket. This can be null. </param>
      <param name="scope">A value indicating whether the scope of <paramref name="deltaPrintTicket" />, and the scope of the print ticket returned in the <see cref="T:System.Printing.ValidationResult" />, is a page, a document, or the whole job. </param>
      <exception cref="T:System.ArgumentException">At least one of the input print tickets is not valid. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="basePrintTicket" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="scope" /> parameter does not have a valid <see cref="T:System.Printing.PrintTicketScope" /> value.</exception>
      <exception cref="T:System.Printing.PrintQueueException">The validation, merger, and viability checking operation failed.</exception>
    </member>
    <member name="P:System.Printing.PrintQueue.Name">
      <summary>Gets or sets the print queue's name. </summary>
      <returns>The name of the print queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.NeedUserIntervention">
      <summary>Gets a value that indicates whether the printer needs the attention of a human being. </summary>
      <returns>true if the printer needs human attention; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.NumberOfJobs">
      <summary>Gets the total number of jobs lined up in the print queue. </summary>
      <returns>The number of jobs in the queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.PagePunt">
      <summary>Gets a value that indicates whether the printer is unable to print the current page. </summary>
      <returns>true if the printer is unable to print the current page; otherwise, false.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.Pause">
      <summary>Pauses the print queue. It remains paused until <see cref="M:System.Printing.PrintQueue.Resume" /> is executed. </summary>
      <exception cref="T:System.Printing.PrintSystemException">The printer cannot be paused. </exception>
    </member>
    <member name="P:System.Printing.PrintQueue.PrintingIsCancelled">
      <summary>Gets or sets a value that indicates whether the current print job is being cancelled. </summary>
      <returns>true if the print job is being cancelled; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.Priority">
      <summary>Gets or sets the priority of the print queue relative to other print queues that are hosted by the same print server and that use the same physical printer. </summary>
      <returns>The priority for the print queue. Possible values are from 1 through 99. The default is 1.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.Purge">
      <summary>Removes all the jobs in the print queue. </summary>
      <exception cref="T:System.Printing.PrintSystemException">Some print jobs could not be removed from the queue. </exception>
    </member>
    <member name="P:System.Printing.PrintQueue.QueueAttributes">
      <summary>Gets the properties of the print queue. </summary>
      <returns>A bitwise combination of the <see cref="T:System.Printing.PrintQueueAttributes" /> enumeration values. </returns>
    </member>
    <member name="P:System.Printing.PrintQueue.QueueDriver">
      <summary>Gets or sets the printer driver for the queue. </summary>
      <returns>The <see cref="T:System.Printing.PrintDriver" /> that the queue uses.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.QueuePort">
      <summary>Gets or sets the port that the queue uses. </summary>
      <returns>The <see cref="T:System.Printing.PrintPort" /> that is assigned to the print queue.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.QueuePrintProcessor">
      <summary>Gets or sets the print processor that the queue uses. </summary>
      <returns>The <see cref="T:System.Printing.PrintProcessor" /> that the queue uses, such as WinPrint or ModiPrint. </returns>
    </member>
    <member name="P:System.Printing.PrintQueue.QueueStatus">
      <summary>Gets a value that represents the status of the printer. These include "warming up," "initializing," "printing," and others. </summary>
      <returns>The current <see cref="T:System.Printing.PrintQueueStatus" /> value.</returns>
    </member>
    <member name="M:System.Printing.PrintQueue.Refresh">
      <summary>Updates the properties of the <see cref="T:System.Printing.PrintQueue" /> object with values from the printer and the print queue utility that runs on the computer. </summary>
      <exception cref="T:System.Printing.PrintSystemException">Some of the properties could not be refreshed. </exception>
    </member>
    <member name="M:System.Printing.PrintQueue.Resume">
      <summary>Restarts a print queue that was paused. </summary>
      <exception cref="T:System.Printing.PrintSystemException">The printer cannot resume. </exception>
    </member>
    <member name="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst">
      <summary>Gets a value that indicates whether the printer prints jobs that have completed the spooling process before jobs that have not fully spooled even if the latter entered the queue first or have a higher priority. </summary>
      <returns>true if the printer prints jobs that have completed the spooling process before jobs that have not fully spooled; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.SeparatorFile">
      <summary>Gets or sets the path and file name of a file that is inserted at the beginning of each print job. </summary>
      <returns>The path and file name of the separator file.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.ShareName">
      <summary>Gets or sets a name for the printer that is seen by users on the network when it is shared. </summary>
      <returns>The public name of a shared printer.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.StartTimeOfDay">
      <summary>Gets or sets the earliest time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the printer will print a job. </summary>
      <returns>The time of day that the printer first becomes available, expressed as the number of minutes after midnight (UTC). The maximum value is 1439. When a printer is first installed by using the Microsoft Windows Add Printer Wizard, the printer defaults to being available all the time, and this property returns 0 in all time zones.</returns>
    </member>
    <member name="P:System.Printing.PrintQueue.UntilTimeOfDay">
      <summary>Gets or sets the latest time, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the printer will print a job. </summary>
      <returns>The time of day that the printer is no longer available, expressed as the number of minutes after midnight (UTC). The maximum value is 1439. When a printer is first installed by using the Microsoft Windows Add Printer Wizard, the printer defaults to being available all the time, and this property returnsÂ 0 in all time zones. </returns>
    </member>
    <member name="P:System.Printing.PrintQueue.UserPrintTicket">
      <summary>Gets or sets the current user's default <see cref="T:System.Printing.PrintTicket" /> object which contains detailed information about the print job. </summary>
      <returns>The <see cref="T:System.Printing.PrintTicket" /> for the current user, or null if a user <see cref="T:System.Printing.PrintTicket" /> has not been specified.</returns>
    </member>
    <member name="T:System.Printing.PrintQueueAttributes">
      <summary>Specifies the attributes of a print queue and its printer.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.Published">
      <summary>The print queue is visible to other network users.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.RawOnly">
      <summary>The print queue cannot use enhanced metafile (EMF) printing.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.EnableBidi">
      <summary>The printer's bidirectional communication is enabled.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.ScheduleCompletedJobsFirst">
      <summary>The queue prints a fully spooled job before it prints higher priority jobs that are still spooling.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.KeepPrintedJobs">
      <summary>The printer language file is not deleted after the file prints.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.EnableDevQuery">
      <summary>The queue holds its jobs when the document and printer configurations do not match.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.Hidden">
      <summary>The print queue is not visible in the application UI.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.Shared">
      <summary>The print queue is shared.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.Direct">
      <summary>The print queue sends print jobs immediately to the printer instead of spooling jobs first.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.Queued">
      <summary>The print queue can hold more than one print job at a time.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueAttributes.None">
      <summary>No print queue attribute is specified.</summary>
    </member>
    <member name="T:System.Printing.PrintQueueCollection">
      <summary>Represents a collection of <see cref="T:System.Printing.PrintQueue" /> objects. </summary>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" /> class. </summary>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.#ctor(System.Printing.PrintServer,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" /> class for the specified <see cref="T:System.Printing.PrintServer" />. </summary>
      <param name="printServer">The print server that hosts the collection.</param>
      <param name="propertyFilter">The properties of the collection members that are initialized. </param>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.#ctor(System.Printing.PrintServer,System.String[],System.Printing.EnumeratedPrintQueueTypes[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueCollection" /> class for the specified <see cref="T:System.Printing.PrintServer" />, containing only the print server's queues of the specified <see cref="T:System.Printing.EnumeratedPrintQueueTypes" />. </summary>
      <param name="printServer">The print server that hosts the collection.</param>
      <param name="propertyFilter">The properties of the collection members that are initialized. </param>
      <param name="enumerationFlag">An array that specifies the types of print queues that are included in the collection. </param>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.Add(System.Printing.PrintQueue)">
      <summary>Adds a <see cref="T:System.Printing.PrintQueue" /> to the collection.</summary>
      <param name="printObject">The print queue that is added.</param>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are being used by the <see cref="T:System.Printing.PrintQueueCollection" />, and optionally releases the managed resources that are being used. </summary>
      <param name="disposing">true to release both the managed resources and the unmanaged resources; false to release only the unmanaged resources.</param>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.GetEnumerator">
      <summary>Returns an object that implements the generic <see cref="T:System.Collections.IEnumerator" /> interface that has been closed with <see cref="T:System.Printing.PrintQueue" />. </summary>
      <returns>An object that implements the generic <see cref="T:System.Collections.IEnumerator" /> and that can iterate through the <see cref="T:System.Printing.PrintQueue" /> objects that the <see cref="T:System.Printing.PrintQueueCollection" /> contains.</returns>
    </member>
    <member name="M:System.Printing.PrintQueueCollection.GetNonGenericEnumerator">
      <summary>Gets an object that implements the non-generic <see cref="T:System.Collections.IEnumerator" /> interface. </summary>
      <returns>An object that implements the non-generic <see cref="T:System.Collections.IEnumerator" /> and that can iterate through the <see cref="T:System.Printing.PrintQueue" /> objects that the <see cref="T:System.Printing.PrintQueueCollection" /> contains.</returns>
    </member>
    <member name="P:System.Printing.PrintQueueCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Printing.PrintQueueCollection" />.</summary>
      <returns>A <see cref="T:System.Object" /> that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Printing.PrintQueueIndexedProperty">
      <summary>Specifies the properties that are initialized when a <see cref="T:System.Printing.PrintQueue" /> object is constructed.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.Description">
      <summary>The description of the queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.Priority">
      <summary>The priority of the print queue relative to other print queues serving the same printer.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.Location">
      <summary>The location of the physical printer.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.DefaultPrintTicket">
      <summary>The default print ticket object.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.UserPrintTicket">
      <summary>The print ticket for the user.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.SeparatorFile">
      <summary>The path to the separator file.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.QueueStatus">
      <summary>The current status of the queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.HostingPrintServer">
      <summary>The host print server.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.QueuePrintProcessor">
      <summary>The print processor for the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.QueuePort">
      <summary>The printer port used by the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.QueueDriver">
      <summary>The printer driver for the queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.QueueAttributes">
      <summary>The attributes of the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.NumberOfJobs">
      <summary>The number of jobs in the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.AveragePagesPerMinute">
      <summary>The speed of the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.UntilTimeOfDay">
      <summary>The time of day that the queue stops printing jobs.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.StartTimeOfDay">
      <summary>The time of day that the queue begins printing its jobs.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.DefaultPriority">
      <summary>The default priority. </summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.Comment">
      <summary>A comment specific to the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.ShareName">
      <summary>The share name of the queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueIndexedProperty.Name">
      <summary>The name of the print queue.</summary>
    </member>
    <member name="T:System.Printing.PrintQueueStatus">
      <summary>Specifies the status of a print queue or its printer. </summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PowerSave">
      <summary>The printer is in power save mode.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.ServerUnknown">
      <summary>The printer is in an error state.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.DoorOpen">
      <summary>A door on the printer is open.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.OutOfMemory">
      <summary>The printer has no available memory.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.UserIntervention">
      <summary>The printer requires user action to correct an error condition.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PagePunt">
      <summary>The printer is unable to print the current page.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.NoToner">
      <summary>The printer is out of toner.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.TonerLow">
      <summary>Only a small amount of toner remains in the printer.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.WarmingUp">
      <summary>The printer is warming up.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Initializing">
      <summary>The printer is initializing.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Processing">
      <summary>The device is doing some kind of work, which need not be printing if the device is a combination printer, fax machine, and scanner.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Waiting">
      <summary>The printer is waiting for a print job.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.NotAvailable">
      <summary>Status information is unavailable.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.OutputBinFull">
      <summary>The printer's output bin is full.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Busy">
      <summary>The printer is busy.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.IOActive">
      <summary>The printer is exchanging data with the print server.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Offline">
      <summary>The printer is offline.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PaperProblem">
      <summary>The paper in the printer is causing an unspecified error condition.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.ManualFeed">
      <summary>The printer is waiting for a user to place print media in the manual feed bin.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PaperOut">
      <summary>The printer does not have, or is out of, the type of paper needed for the current print job.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PaperJam">
      <summary>The paper in the printer is jammed.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.PendingDeletion">
      <summary>The print queue is deleting a print job.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Paused">
      <summary>The print queue is paused.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.None">
      <summary>Status is not specified.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Printing">
      <summary>The device is printing. </summary>
    </member>
    <member name="F:System.Printing.PrintQueueStatus.Error">
      <summary>The printer cannot print due to an error condition.</summary>
    </member>
    <member name="T:System.Printing.PrintQueueStream">
      <summary>A stream that represents a spooled print job in a print queue.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueStream.#ctor(System.Printing.PrintQueue,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStream" /> class for the specified print job that is hosted in the specified <see cref="T:System.Printing.PrintQueue" />. </summary>
      <param name="printQueue">The <see cref="T:System.Printing.PrintQueue" /> that hosts the print job that provides the content of the stream.</param>
      <param name="printJobName">The name of the print job that provides the content of the stream.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.#ctor(System.Printing.PrintQueue,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStream" /> class for the specified print job that is hosted in the specified <see cref="T:System.Printing.PrintQueue" />, with an indication of whether data in the <see cref="T:System.Printing.PrintQueueStream" /> should be committed when the stream is closed. </summary>
      <param name="printQueue">The <see cref="T:System.Printing.PrintQueue" /> that hosts the print job that provides the content of the stream.</param>
      <param name="printJobName">The name of the print job that provides the content of the stream.</param>
      <param name="commitDataOnClose">true to commit data in the <see cref="T:System.Printing.PrintQueueStream" /> when the <see cref="M:System.Printing.PrintQueueStream.Close" /> method is called; otherwise, false.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation. </summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous write, which might still be pending.</returns>
      <param name="buffer">The buffer from which to write data.</param>
      <param name="offset">The byte offset in the buffer from which to begin writing.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">An asynchronous callback, which is called when the writing operation is complete.</param>
      <param name="state">A user-provided object that distinguishes this asynchronous writing request from other requests.</param>
    </member>
    <member name="P:System.Printing.PrintQueueStream.CanRead">
      <summary>Gets a value that indicates whether the stream supports reading.</summary>
      <returns>true if reading is supported; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueueStream.CanSeek">
      <summary>Gets a value that indicates whether the stream supports seeking, which is moving the read/write position to a new position in the stream.</summary>
      <returns>true if seeking is supported; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintQueueStream.CanWrite">
      <summary>Gets a value that indicates whether the stream supports writing.</summary>
      <returns>true if writing is supported; otherwise false.</returns>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Close">
      <summary>Closes the stream and releases any resources, such as sockets and file handles, that are associated with it.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintQueueStream" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.EndWrite(System.IAsyncResult)">
      <summary>Ends an asynchronous write operation.</summary>
      <param name="asyncResult">A reference to the pending asynchronous I/O request.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Finalize">
      <summary>Enables a <see cref="T:System.Printing.PrintQueueStream" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Printing.PrintQueueStream" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Flush">
      <summary>Clears all the buffers for this stream and writes any buffered data to the underlying device.</summary>
    </member>
    <member name="M:System.Printing.PrintQueueStream.HandlePackagingProgressEvent(System.Object,System.Windows.Xps.Packaging.PackagingProgressEventArgs)">
      <summary>Enables the <see cref="T:System.Printing.PrintQueueStream" /> to respond to the packaging progress by handling the <see cref="E:System.Windows.Xps.Serialization.XpsPackagingPolicy.PackagingProgressEvent" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="P:System.Printing.PrintQueueStream.JobIdentifier">
      <summary>Gets the ID number of the print job.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents an ID number.</returns>
    </member>
    <member name="P:System.Printing.PrintQueueStream.Length">
      <summary>Gets the length of the stream in bytes.</summary>
      <returns>An <see cref="T:System.Int64" /> that represents the length of the stream in bytes.</returns>
    </member>
    <member name="P:System.Printing.PrintQueueStream.Position">
      <summary>Gets or sets the current read/write position in the stream.</summary>
      <returns>An <see cref="T:System.Int64" /> that represents the current position in the stream.</returns>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the stream and advances the read/write position in the stream by the number of bytes that were read.</summary>
      <returns>An <see cref="T:System.Int32" /> that holds the total number of bytes that are read into the buffer. </returns>
      <param name="buffer">An array of bytes. </param>
      <param name="offset">The zero-based byte offset in the buffer where you want to begin storing the data that is read from the stream.</param>
      <param name="count">The maximum number of bytes to be read from the stream.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the read/write position within the stream.</summary>
      <returns>An <see cref="T:System.Int64" /> that represents the new read/write position.</returns>
      <param name="offset">A byte offset that is relative to the origin parameter.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> that indicates the reference point that is used to obtain the new position.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.SetLength(System.Int64)">
      <summary>Sets the length of the stream.</summary>
      <param name="value">The needed length, in bytes, of the current stream.</param>
    </member>
    <member name="M:System.Printing.PrintQueueStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a sequence of bytes to the stream and advances the read/write position in the stream by the number of bytes that are written.</summary>
      <param name="buffer">An array of bytes from which to copy to the stream.</param>
      <param name="offset">The zero-based byte offset in the <paramref name="buffer" /> where you want to begin copying bytes to the stream.</param>
      <param name="count">The number of bytes to write to the stream.</param>
    </member>
    <member name="T:System.Printing.PrintQueueStringProperty">
      <summary>Represents one, and only one, of three possible properties of a print queue: <see cref="P:System.Printing.PrintQueue.Location" />, <see cref="P:System.Printing.PrintQueue.Comment" />, or <see cref="P:System.Printing.PrintQueue.ShareName" />. </summary>
    </member>
    <member name="M:System.Printing.PrintQueueStringProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintQueueStringProperty" /> class. </summary>
    </member>
    <member name="P:System.Printing.PrintQueueStringProperty.Name">
      <summary>Gets or sets the value of the print queue property that is represented. </summary>
      <returns>A <see cref="T:System.String" /> with the value of the property. </returns>
    </member>
    <member name="P:System.Printing.PrintQueueStringProperty.Type">
      <summary>Gets or sets a value that identifies which of the three possible properties of a print queue is being represented. </summary>
      <returns>A <see cref="T:System.Printing.PrintQueueStringPropertyType" /> that specifies the kind of print queue property that is being represented. </returns>
    </member>
    <member name="T:System.Printing.PrintQueueStringPropertyType">
      <summary>Specifies the intended meaning of a <see cref="T:System.Printing.PrintQueueStringProperty" />.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStringPropertyType.Location">
      <summary>The location of the physical printer.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStringPropertyType.ShareName">
      <summary>The share name of the print queue.</summary>
    </member>
    <member name="F:System.Printing.PrintQueueStringPropertyType.Comment">
      <summary>A comment about the print queue.</summary>
    </member>
    <member name="T:System.Printing.PrintServer">
      <summary>Manages the print queues on a print server, which is usually a computer, but can be a dedicated hardware print server appliance. </summary>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class. </summary>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class that represents the local print server and assigns it the specified <see cref="T:System.Printing.PrintSystemDesiredAccess" />. </summary>
      <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class that has the specified path. </summary>
      <param name="path">The name and complete path of the print server.</param>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String,System.Printing.PrintServerIndexedProperty[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class by using the specified <see cref="T:System.Printing.PrintServerIndexedProperty" /> array to determine which properties will be initialized. </summary>
      <param name="path">The complete path and name of the print server</param>
      <param name="propertiesFilter">The properties that the constructor initializes.</param>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String,System.Printing.PrintServerIndexedProperty[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class and provides the specified path, the <see cref="T:System.Printing.PrintServerIndexedProperty" /> array, and the needed access. </summary>
      <param name="path">The complete path and name of the print server</param>
      <param name="propertiesFilter">The properties that the constructor initializes.</param>
      <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String,System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class that has the specified path and the needed access. </summary>
      <param name="path">The name and complete path of the print server.</param>
      <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String,System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class that has the specified path and properties filter. </summary>
      <param name="path">The name and complete path of the print server.</param>
      <param name="propertiesFilter">An array of the names of properties that the constructor initializes.</param>
    </member>
    <member name="M:System.Printing.PrintServer.#ctor(System.String,System.String[],System.Printing.PrintSystemDesiredAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintServer" /> class that has the specified path, properties filter, and the needed access. </summary>
      <param name="path">The name and complete path of the print server.</param>
      <param name="propertiesFilter">An array of the names of properties that the constructor initializes.</param>
      <param name="desiredAccess">A value that specifies the type of print server access that your program needs.</param>
      <exception cref="T:System.Printing.PrintServerException">
        <paramref name="desiredAccess" /> is a value that can be applied only to a <see cref="T:System.Printing.PrintQueue" /> object, not a <see cref="T:System.Printing.LocalPrintServer" /> object. For example, <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</exception>
    </member>
    <member name="P:System.Printing.PrintServer.BeepEnabled">
      <summary>Gets or sets a value that indicates whether the print server beeps in response to an error condition in the printer. </summary>
      <returns>
        <see cref="T:System.Boolean" />true if the print server beeps in response to an error; otherwise, false.</returns>
    </member>
    <member name="M:System.Printing.PrintServer.Commit">
      <summary>Commits any changes that your program made to the properties of the print server object by writing them to the print server that the object represents. </summary>
      <exception cref="T:System.Printing.PrintSystemException">Some of the properties are not committed. </exception>
      <exception cref="T:System.Printing.PrintCommitAttributesException">Some of the properties could not be committed. - or -The <see cref="T:System.Printing.PrintServer" /> object was not created with sufficient rights. See Remarks.</exception>
    </member>
    <member name="P:System.Printing.PrintServer.DefaultPortThreadPriority">
      <summary>Do not use.</summary>
      <returns>The thread priority.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.DefaultSchedulerPriority">
      <summary>Do not use.</summary>
      <returns>The default scheduler thread priority.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.DefaultSpoolDirectory">
      <summary>Gets or sets the path where the print server's spool files are located. </summary>
      <returns>A <see cref="T:System.String" /> that identifies the complete path of the folder for the spool files.</returns>
    </member>
    <member name="M:System.Printing.PrintServer.DeletePrintQueue(System.Printing.PrintQueue)">
      <summary>Removes the specified <see cref="T:System.Printing.PrintQueue" /> from the print server. </summary>
      <returns>true if the queue is successfully deleted; otherwise, false.</returns>
      <param name="printQueue">The queue that is deleted.</param>
    </member>
    <member name="M:System.Printing.PrintServer.DeletePrintQueue(System.String)">
      <summary>Removes the print queue with the specified name from the print server. </summary>
      <returns>true if the queue is successfully deleted; otherwise, false.</returns>
      <param name="printQueueName">The name of the queue that is deleted.</param>
    </member>
    <member name="P:System.Printing.PrintServer.EventLog">
      <summary>Gets or sets the type of events that the print server logs. </summary>
      <returns>A value of <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> that identifies the type of event logging that is provided by the print server. The default is <see cref="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingErrorEvents" />.</returns>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueue(System.String)">
      <summary>Obtains a reference to the named print queue from the print server. </summary>
      <returns>A <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the print queue.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueue(System.String,System.String[])">
      <summary>Gets a specified print queue from the print server. </summary>
      <returns>A <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the print queue.</param>
      <param name="propertiesFilter">The names of the properties that are initialized in the returned queue.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues">
      <summary>Gets the collection of print queues that the print server hosts. </summary>
      <returns>The <see cref="T:System.Printing.PrintQueueCollection" /> of print queues on the print server.</returns>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues(System.Printing.EnumeratedPrintQueueTypes[])">
      <summary>Gets the collection of print queues of the specified types that are named in <see cref="T:System.Printing.EnumeratedPrintQueueTypes" /> and hosted by the print server. </summary>
      <returns>The <see cref="T:System.Printing.PrintQueueCollection" /> of print queues, of the specified types, on the print server.</returns>
      <param name="enumerationFlag">An array of values that represent the types of print queues that are in the collection.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues(System.Printing.PrintQueueIndexedProperty[])">
      <summary>Gets a collection of print queues that are hosted by the print server and initialized only in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" /> array. </summary>
      <returns>A <see cref="T:System.Printing.PrintQueueCollection" /> whose members are initialized only in the properties specified by <paramref name="propertiesFilter" />.</returns>
      <param name="propertiesFilter">The properties that the constructor initializes.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues(System.Printing.PrintQueueIndexedProperty[],System.Printing.EnumeratedPrintQueueTypes[])">
      <summary>Gets a collection of print queues of the specified types. These print queues are only initialized in the properties that are specified in the <see cref="T:System.Printing.PrintQueueIndexedProperty" /> array. </summary>
      <returns>The <see cref="T:System.Printing.PrintQueueCollection" /> of the print server.</returns>
      <param name="propertiesFilter">The properties that the constructor initializes.</param>
      <param name="enumerationFlag">An array of values that represent the types of print queues in the collection.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues(System.String[])">
      <summary>Gets a collection of print queues that are hosted by the print server and that are initialized only in the specified properties. </summary>
      <returns>The <see cref="T:System.Printing.PrintQueueCollection" /> of print queues on the print server; each print queue is initialized only in the properties that are specified in <paramref name="propertiesFilter" />.</returns>
      <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
    </member>
    <member name="M:System.Printing.PrintServer.GetPrintQueues(System.String[],System.Printing.EnumeratedPrintQueueTypes[])">
      <summary>Gets the collection of print queues, which are of the specified <see cref="T:System.Printing.EnumeratedPrintQueueTypes" /> and are initialized only in the specified properties.  </summary>
      <returns>A <see cref="T:System.Printing.PrintQueueCollection" /> of print queues of the specified types; each print queue has only the specified properties initialized. </returns>
      <param name="propertiesFilter">The names of the queue properties that are initialized.</param>
      <param name="enumerationFlag">An array of values that represent the types of print queues that are returned in the collection.</param>
    </member>
    <member name="M:System.Printing.PrintServer.InstallPrintQueue(System.String,System.String,System.String[],System.String,System.Printing.IndexedProperties.PrintPropertyDictionary)">
      <summary>Installs a print queue, and associated printer driver, on the print server. </summary>
      <returns>The new <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the new queue.</param>
      <param name="driverName">The path and name of the printer driver.</param>
      <param name="portNames">The IDs of the ports that the new queue uses.</param>
      <param name="printProcessorName">The name of the print processor.</param>
      <param name="initialParameters">The parameters that are initialized.</param>
    </member>
    <member name="M:System.Printing.PrintServer.InstallPrintQueue(System.String,System.String,System.String[],System.String,System.Printing.PrintQueueAttributes)">
      <summary>Installs a print queue, and associated printer driver, on the print server. </summary>
      <returns>The newly created <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the new queue.</param>
      <param name="driverName">The path and name of the printer driver.</param>
      <param name="portNames">The IDs of the ports that the new queue uses.</param>
      <param name="printProcessorName">The name of the print processor.</param>
      <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
    </member>
    <member name="M:System.Printing.PrintServer.InstallPrintQueue(System.String,System.String,System.String[],System.String,System.Printing.PrintQueueAttributes,System.Printing.PrintQueueStringProperty,System.Int32,System.Int32)">
      <summary>Installs a prioritized print queue, and associated printer driver, on the print server. </summary>
      <returns>The newly created <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the new queue.</param>
      <param name="driverName">The path and name of the printer driver.</param>
      <param name="portNames">The IDs of the ports that the new queue uses.</param>
      <param name="printProcessorName">The name of the print processor.</param>
      <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
      <param name="printQueueProperty">The comment, location, or share name of the new queue.</param>
      <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of this print queue relative to other queues that are hosted by the print server.</param>
      <param name="printQueueDefaultPriority">A value from 1 to 99 that specifies the default priority of print jobs that are sent to the queue.</param>
    </member>
    <member name="M:System.Printing.PrintServer.InstallPrintQueue(System.String,System.String,System.String[],System.String,System.Printing.PrintQueueAttributes,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>Installs a shared, prioritized print queue, and associated printer driver, on the print server. </summary>
      <returns>The newly created <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="printQueueName">The name of the new queue.</param>
      <param name="driverName">The path and name of the printer driver.</param>
      <param name="portNames">The IDs of the ports that the new queue uses.</param>
      <param name="printProcessorName">The name of the print processor.</param>
      <param name="printQueueAttributes">The attributes, as flags, of the new queue.</param>
      <param name="printQueueShareName">The share name of the new queue.</param>
      <param name="printQueueComment">A comment about the queue that is visible to users in the Microsoft WindowsÂ UI.</param>
      <param name="printQueueLocation">The location of the new queue.</param>
      <param name="printQueueSeparatorFile">The path of a file that is inserted at the beginning of each print job.</param>
      <param name="printQueuePriority">A value from 1 through 99 that specifies the priority of the queue relative to other queues that are hosted by the print server.</param>
      <param name="printQueueDefaultPriority">A value from 1 through 99 that specifies the default priority of new print jobs that are sent to the queue.</param>
    </member>
    <member name="M:System.Printing.PrintServer.InternalDispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintServer" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Printing.PrintServer.IsDelayInitialized">
      <summary>Gets or sets a value that indicates whether initialization of the <see cref="T:System.Printing.PrintServer" /> properties has been postponed. </summary>
      <returns>true if initialization is postponed; otherwise, false. </returns>
    </member>
    <member name="P:System.Printing.PrintServer.MajorVersion">
      <summary>Gets the major version of the operating system. </summary>
      <returns>An <see cref="T:System.Int32" /> that identifies the major version of the operating system.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.MinorVersion">
      <summary>Gets the minor version within the major version of the operating system. </summary>
      <returns>An <see cref="T:System.Int32" /> that identifies the minor version of the operating system.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.Name">
      <summary>Gets the name of the print server. </summary>
      <returns>The name of the print server.</returns>
      <exception cref="T:System.Printing.PrintSystemException">The property is not initialized.</exception>
    </member>
    <member name="P:System.Printing.PrintServer.NetPopup">
      <summary>Gets or sets a value that indicates whether notifications that a print job has finished are sent to either the print server or the client computer. </summary>
      <returns>true if notifications are sent to the client computer; false if notifications are sent to the print server.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.PortThreadPriority">
      <summary>Gets or sets the thread priority for the process that manages I/O through the printer ports. </summary>
      <returns>A <see cref="T:System.Threading.ThreadPriority" /> enumeration value that identifies the thread priority for the process that manages the printer ports. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
    </member>
    <member name="M:System.Printing.PrintServer.Refresh">
      <summary>Updates the properties of the <see cref="T:System.Printing.PrintServer" /> object so that each property value matches the corresponding attribute value of the print server that the object represents. </summary>
      <exception cref="T:System.Printing.PrintSystemException">Some of the properties cannot be refreshed. </exception>
    </member>
    <member name="P:System.Printing.PrintServer.RestartJobOnPoolEnabled">
      <summary>Gets or sets a value that indicates whether users can restart jobs after an error occurs if printer pooling is enabled.</summary>
      <returns>true if jobs can be restarted when printer pooling is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.RestartJobOnPoolTimeout">
      <summary>Gets or sets a value that indicates the wait time before a job can be restarted, if an error occurs when printer pooling is also enabled.</summary>
      <returns>The wait time, in minutes, before a job restarts.  </returns>
    </member>
    <member name="P:System.Printing.PrintServer.SchedulerPriority">
      <summary>Gets or sets the thread priority for the process that routes print jobs from applications to print queues. </summary>
      <returns>A <see cref="T:System.Threading.ThreadPriority" /> enumeration value that identifies the thread priority for the print server scheduling process. The default is <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
    </member>
    <member name="P:System.Printing.PrintServer.SubSystemVersion">
      <summary>Gets the version of the print spooler system. </summary>
      <returns>A <see cref="T:System.Byte" /> that identifies the version of the print spooler system.</returns>
    </member>
    <member name="T:System.Printing.PrintServerEventLoggingTypes">
      <summary>Specifies the types of events that can be logged by a <see cref="T:System.Printing.PrintServer" />.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.LogAllPrintingEvents">
      <summary>All printing events.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingInformationEvents">
      <summary>Information events for printing.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingWarningEvents">
      <summary>Warning events.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingErrorEvents">
      <summary>Error events for printing.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.LogPrintingSuccessEvents">
      <summary>Successful printing events.</summary>
    </member>
    <member name="F:System.Printing.PrintServerEventLoggingTypes.None">
      <summary>No events.</summary>
    </member>
    <member name="T:System.Printing.PrintServerIndexedProperty">
      <summary>Specifies the properties of a <see cref="T:System.Printing.PrintServer" /> object that are initialized when it is constructed.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.MinorVersion">
      <summary>The property that specifies the minor version of the operating system.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.MajorVersion">
      <summary>The property that specifies the major version of the operating system.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.EventLog">
      <summary>The property that specifies the kind of event logging that is provided by the print server.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.RestartJobOnPoolEnabled">
      <summary>The property that specifies whether users can restart print jobs when printer pooling is being used.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.RestartJobOnPoolTimeout">
      <summary>The property that specifies how long to wait before restarting a print job when printer pooling is being used.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.NetPopup">
      <summary>The property that specifies whether the client computer or the print server receives notifications that a job is finished.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.BeepEnabled">
      <summary>The property that specifies whether a printer error causes the print server to beep.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.DefaultSchedulerPriority">
      <summary>The property that specifies the default thread priority for the scheduling of print jobs.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.SchedulerPriority">
      <summary>The property that specifies the priority of the scheduler.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.DefaultPortThreadPriority">
      <summary>The property that specifies the default priority for the thread that manages port I/0.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.PortThreadPriority">
      <summary>The property that specifies the priority of the thread that manages port I/O.</summary>
    </member>
    <member name="F:System.Printing.PrintServerIndexedProperty.DefaultSpoolDirectory">
      <summary>The property that specifies the path to the folder where spool jobs are located as temporary files.</summary>
    </member>
    <member name="T:System.Printing.PrintSystemDesiredAccess">
      <summary>Specifies the different access rights (or levels of access) for printing objects.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemDesiredAccess.AdministratePrinter">
      <summary>The right to perform all administrative tasks for the print queue, including the right to pause and resume any print job; and the right to delete all jobs from the queue. This access level also includes all rights under <see cref="F:System.Printing.PrintSystemDesiredAccess.UsePrinter" />.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemDesiredAccess.UsePrinter">
      <summary>The right to add print jobs to the queue and to delete and enumerate one's own jobs.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemDesiredAccess.EnumerateServer">
      <summary>The right to list the queues on the print server.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer">
      <summary>The right to perform all administrative tasks for the print server. This access level does not include <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministratePrinter" /> rights for the print queues hosted by the server.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemDesiredAccess.None">
      <summary>No access.</summary>
    </member>
    <member name="T:System.Printing.PrintSystemJobInfo">
      <summary>Defines a print job in detail.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Cancel">
      <summary>Cancels the print job. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Commit">
      <summary>Writes any changes to the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" /> object to the actual print job that the object represents.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)">
      <summary>Gets the <see cref="T:System.Printing.PrintSystemJobInfo" /> for the specified job in the specified <see cref="T:System.Printing.PrintQueue" />.</summary>
      <returns>The <see cref="T:System.Printing.PrintSystemJobInfo" /> that corresponds to the <paramref name="jobIdentifier" />.</returns>
      <param name="printQueue">The print queue hosting the print job.</param>
      <param name="jobIdentifier">A numerical ID for the print job.</param>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.HostingPrintQueue">
      <summary>Gets the print queue that is hosting the print job.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueue" /> value that represents the print queue that owns the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.HostingPrintServer">
      <summary>Gets the print server that is hosting the print queue for the print job.</summary>
      <returns>A <see cref="T:System.Printing.PrintServer" /> value that represents the hosting print server (usually a computer) for the <see cref="T:System.Printing.PrintQueue" /> that owns the print job. </returns>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.InternalDispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintSystemJobInfo" /> and optionally, releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsBlocked">
      <summary>Gets a value that indicates whether the print job is blocked and therefore, not printing. </summary>
      <returns>true if the print job is blocked; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsCompleted">
      <summary>Gets a value that indicates whether the print job is finished.</summary>
      <returns>true if the print job is finished; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsDeleted">
      <summary>Gets a value that indicates whether the print job, which is represented by the <see cref="T:System.Printing.PrintSystemJobInfo" /> object, was deleted from the print queue. </summary>
      <returns>true if the print job was deleted; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsDeleting">
      <summary>Gets a value that indicates whether the print job is being deleted from the print queue. </summary>
      <returns>true if the print job is being deleted; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsInError">
      <summary>Gets a value that indicates whether an error condition is associated with the print job.</summary>
      <returns>true if an error condition is associated with the print job; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsOffline">
      <summary>Gets a value that indicates whether the printer is offline. </summary>
      <returns>true if the printer is offline; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsPaperOut">
      <summary>Gets a value that indicates whether the printer has run out of the paper size and type that the print job requires. </summary>
      <returns>true if the printer has run out of the required paper; otherwise, false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsPaused">
      <summary>Gets a value that indicates whether the print job is paused.</summary>
      <returns>true if the print job is paused; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsPrinted">
      <summary>Gets a value that indicates whether the print job printed.</summary>
      <returns>true if the print job has printed; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsPrinting">
      <summary>Gets a value that indicates whether the print job is being printed.</summary>
      <returns>true if the printer is printing; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsRestarted">
      <summary>Gets a value that indicates whether the print job has been restarted. </summary>
      <returns>true if the printer is printing; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsRetained">
      <summary>Gets a value that indicates whether the print job was saved in the queue after it printed. </summary>
      <returns>true if the print job was saved; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsSpooling">
      <summary>Gets a value that indicates whether the print job is being spooled.</summary>
      <returns>true if the print job is being spooled; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.IsUserInterventionRequired">
      <summary>Gets a value that indicates whether the printer needs user intervention.</summary>
      <returns>true if user intervention is needed; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.JobIdentifier">
      <summary>Gets the identification number for the print job.</summary>
      <returns>An <see cref="T:System.Int32" /> that identifies the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.JobName">
      <summary>Gets or sets a name for the print job.</summary>
      <returns>A <see cref="T:System.String" /> name for the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.JobSize">
      <summary>Get the size, in bytes, of the print job.</summary>
      <returns>An <see cref="T:System.Int32" /> that states the size, in bytes, of the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.JobStatus">
      <summary>Gets the current status of the print job. </summary>
      <returns>A <see cref="T:System.Printing.PrintJobStatus" /> value.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.JobStream">
      <summary>Gets a reference to the <see cref="T:System.IO.Stream" /> of the print job.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> that contains the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.NumberOfPages">
      <summary>Gets the number of pages in the print job.</summary>
      <returns>An <see cref="T:System.Int32" /> that states the number of pages in the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.NumberOfPagesPrinted">
      <summary>Gets the number of pages that have already printed.</summary>
      <returns>An <see cref="T:System.Int32" /> that states the number of pages that have already printed.</returns>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Pause">
      <summary>Halts printing of the job until <see cref="M:System.Printing.PrintSystemJobInfo.Resume" /> runs. </summary>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.PositionInPrintQueue">
      <summary>Gets the print job's place in the print queue. </summary>
      <returns>An <see cref="T:System.Int32" /> that states the print job's place in the queue.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.Priority">
      <summary>Gets a non-numerical expression that represents the priority of the print job relative to other jobs in the print queue.</summary>
      <returns>A <see cref="T:System.Printing.PrintJobPriority" /> that represents the priority of the print job as <see cref="F:System.Printing.PrintJobPriority.Maximum" />, <see cref="F:System.Printing.PrintJobPriority.Minimum" />, <see cref="F:System.Printing.PrintJobPriority.Default" />, or <see cref="F:System.Printing.PrintJobPriority.None" />.</returns>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Refresh">
      <summary>Updates the properties of the <see cref="T:System.Printing.PrintSystemJobInfo" /> object so that their values match the values of the actual print job that the object represents.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Restart">
      <summary>Restarts a print job from the beginning. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemJobInfo.Resume">
      <summary>Resumes the printing of a paused print job.</summary>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.StartTimeOfDay">
      <summary>Gets the earliest time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</summary>
      <returns>An <see cref="T:System.Int32" /> specifying the earliest possible start time for the print job, expressed as the number of minutes after midnight (UTC). The maximum value is 1439.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.Submitter">
      <summary>Gets the name of the user who submitted the print job.</summary>
      <returns>A <see cref="T:System.String" /> that identifies the user who submitted the print job.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.TimeJobSubmitted">
      <summary>Gets the date and time that the print job is submitted.</summary>
      <returns>A <see cref="T:System.DateTime" /> object containing the date and time that the print job is submitted.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.TimeSinceStartedPrinting">
      <summary>Gets the time, in milliseconds, since the print job started printing.</summary>
      <returns>An <see cref="T:System.Int32" /> that represents the time, in milliseconds, since the print job started.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemJobInfo.UntilTimeOfDay">
      <summary>Gets the last time of day, expressed as the number of minutes after midnight Coordinated Universal Time (UTC) (also called Greenwich Mean Time [GMT]), that the print job can begin printing.</summary>
      <returns>An <see cref="T:System.Int32" /> that specifies the last time that the job can print, expressed as the number of minutes after midnight (UTC). The maximum value is 1439.</returns>
    </member>
    <member name="T:System.Printing.PrintSystemObject">
      <summary>Defines basic properties and methods that are common to the objects of the printing system. Classes that derive from this class represent such objects as print queues, print servers, and print jobs.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObject" /> class. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.#ctor(System.Printing.PrintSystemObjectLoadMode)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObject" /> class by using the specified <see cref="T:System.Printing.PrintSystemObjectLoadMode" />.</summary>
      <param name="mode">A value that specifies whether the properties of the object should be initialized when the object is loaded.</param>
    </member>
    <member name="M:System.Printing.PrintSystemObject.BaseAttributeNames">
      <summary>Gets the names of the attributes of the derived class. </summary>
      <returns>An array of <see cref="T:System.String" /> values.</returns>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Commit">
      <summary>When overridden in a derived class, writes any changes that your program has made to the object's properties to the actual software or hardware component that the object represents. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObject" />. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Printing.PrintSystemObject" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Finalize">
      <summary>Releases the resources that are being used by the <see cref="T:System.Printing.PrintSystemObject" />. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Initialize">
      <summary>Initializes the properties of the <see cref="T:System.Printing.PrintSystemObject" />. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObject.InternalDispose(System.Boolean)">
      <summary>When overridden in a derived class, releases the unmanaged resources that are being used by the <see cref="T:System.Printing.PrintSystemObject" />, and optionally releases the managed resources that are being used. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Printing.PrintSystemObject.IsDisposed">
      <summary>Gets or sets a value that indicates whether the object has been disposed. </summary>
      <returns>true if the object has been disposed; otherwise false.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemObject.Name">
      <summary>Gets the name of the object. </summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the object.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemObject.Parent">
      <summary>Gets the parent of the object. </summary>
      <returns>Another <see cref="T:System.Printing.PrintSystemObject" />.</returns>
    </member>
    <member name="P:System.Printing.PrintSystemObject.PropertiesCollection">
      <summary>Gets a collection of attribute and value pairs. </summary>
      <returns>A <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> that contains attribute and value pairs.</returns>
    </member>
    <member name="M:System.Printing.PrintSystemObject.Refresh">
      <summary>When overridden in a derived class, updates the properties of an object of the derived class so that its values match the values of the actual software or hardware component that the object represents. </summary>
    </member>
    <member name="T:System.Printing.PrintSystemObjectLoadMode">
      <summary>Specifies whether the properties of an object are initialized when the object loads.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemObjectLoadMode.LoadInitialized">
      <summary>The properties are initialized during loading.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemObjectLoadMode.LoadUninitialized">
      <summary>The properties are not initialized during loading.</summary>
    </member>
    <member name="F:System.Printing.PrintSystemObjectLoadMode.None">
      <summary>Not specified whether the properties are initialized. </summary>
    </member>
    <member name="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs">
      <summary>Provides data for a PropertiesChanged event, which you must create.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertiesChangedEventArgs.#ctor(System.Collections.Specialized.StringCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs" /> class.</summary>
      <param name="events">A collection of strings, each of which identifies a changed property.</param>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertiesChangedEventArgs.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs" /> object.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertiesChangedEventArgs.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintSystemObjectPropertiesChangedEventArgs" /> object and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Printing.PrintSystemObjectPropertiesChangedEventArgs.PropertiesNames">
      <summary>Gets a collection of the names of the changed properties.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringCollection" /> of property names.</returns>
    </member>
    <member name="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs">
      <summary>Provides data for a PropertyChanged event, which you must create.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertyChangedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs" /> class.</summary>
      <param name="eventName">The name of the property that changed.</param>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertyChangedEventArgs.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs" />.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjectPropertyChangedEventArgs.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintSystemObjectPropertyChangedEventArgs" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Printing.PrintSystemObjectPropertyChangedEventArgs.PropertyName">
      <summary>Gets the name of the property that changed.</summary>
      <returns>A <see cref="T:System.String" /> that holds the property name.</returns>
    </member>
    <member name="T:System.Printing.PrintSystemObjects">
      <summary>Represents a collection of print system objects. </summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjects.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.PrintSystemObjects" /> class.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjects.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Printing.PrintSystemObjects" />.</summary>
    </member>
    <member name="M:System.Printing.PrintSystemObjects.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Printing.PrintSystemObjects" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintBooleanProperty">
      <summary>Represents a <see cref="T:System.Boolean" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintBooleanProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> class for the specified attribute.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Boolean" /> attribute that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintBooleanProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> class for the specified property that is using the specified value.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Boolean" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintBooleanProperty.op_Implicit(System.Printing.IndexedProperties.PrintBooleanProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Boolean">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintBooleanProperty.op_Implicit(System.Printing.IndexedProperties.PrintBooleanProperty)~System.Boolean">
      <summary>Provides implicit conversion to a <see cref="T:System.Boolean" /> from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />.</summary>
      <returns>A <see cref="T:System.Boolean" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintBooleanProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintByteArrayProperty">
      <summary>Represents a property of a printing system hardware or software component whose value is an array of <see cref="T:System.Byte" /> values. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintByteArrayProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> class for the specified attribute.</summary>
      <param name="attributeName">The name of the property, which is an array of type <see cref="T:System.Byte" />, that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintByteArrayProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> class that has the specified value for the specified attribute.</summary>
      <param name="attributeName">The name of the property, which is an array of type <see cref="T:System.Byte" />, that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintByteArrayProperty.op_Implicit(System.Printing.IndexedProperties.PrintByteArrayProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Byte[]">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> to an array of <see cref="T:System.Byte" /> values. </summary>
      <returns>An array of <see cref="T:System.Byte" /> values.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintByteArrayProperty.op_Implicit(System.Printing.IndexedProperties.PrintByteArrayProperty)~System.Byte[]">
      <summary>Provides implicit conversion to an array of <see cref="T:System.Byte" /> values from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />.</summary>
      <returns>An array of <see cref="T:System.Byte" /> values.</returns>
      <param name="attribRef">A pointer to a <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintByteArrayProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintByteArrayProperty" /> represents.</summary>
      <returns>A boxed array of <see cref="T:System.Byte" /> values.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintDateTimeProperty">
      <summary>Represents a <see cref="T:System.DateTime" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDateTimeProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.DateTime" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDateTimeProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> class that has the specified value for the specified attribute.</summary>
      <param name="attributeName">The name of the <see cref="T:System.DateTime" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDateTimeProperty.op_Implicit(System.Printing.IndexedProperties.PrintDateTimeProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.ValueType!System.DateTime!System.Runtime.CompilerServices.IsBoxed">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> to a <see cref="T:System.DateTime" />. </summary>
      <returns>A <see cref="T:System.DateTime" />. </returns>
      <param name="attribRef">The object that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDateTimeProperty.op_Implicit(System.Printing.IndexedProperties.PrintDateTimeProperty)~System.ValueType!System.DateTime!System.Runtime.CompilerServices.IsBoxed">
      <summary>Provides implicit conversion from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> to a <see cref="T:System.DateTime" />. </summary>
      <returns>A <see cref="T:System.DateTime" />. </returns>
      <param name="attribRef">The object that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintDateTimeProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDateTimeProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintDriverProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintDriver" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDriverProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintDriver" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDriverProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> class that has the specified value for the specified attribute. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintDriver" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDriverProperty.op_Implicit(System.Printing.IndexedProperties.PrintDriverProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintDriver">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> to a <see cref="T:System.Printing.PrintDriver" />. </summary>
      <returns>A <see cref="T:System.Printing.PrintDriver" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintDriverProperty.op_Implicit(System.Printing.IndexedProperties.PrintDriverProperty)~System.Printing.PrintDriver">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintDriver" /> from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintDriver" />.</returns>
      <param name="attribRef">The pointer to a <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintDriverProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintDriverProperty" /> represents. </summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to a <see cref="T:System.Printing.PrintDriver" />. </returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintInt32Property">
      <summary>Represents an <see cref="T:System.Int32" /> property (and the value of the property) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintInt32Property.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Int32" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintInt32Property.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> class for the specified attribute and gives it the specified value.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Int32" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> represents.</param>
      <param name="attributeValue">The value of <see cref="T:System.Object" /> the property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintInt32Property.op_Implicit(System.Printing.IndexedProperties.PrintInt32Property|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Int32">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> to an <see cref="T:System.Int32" />. </summary>
      <returns>An <see cref="T:System.Int32" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintInt32Property.op_Implicit(System.Printing.IndexedProperties.PrintInt32Property)~System.Int32">
      <summary>Provides implicit conversion to an <see cref="T:System.Int32" /> from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />.</summary>
      <returns>An <see cref="T:System.Int32" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintInt32Property.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintInt32Property" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">The property cannot be set to the value that the calling code provides.</exception>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintJobPriorityProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintJobPriority" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobPriorityProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobPriority" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobPriorityProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> class that has the specified value for the specified attribute. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobPriority" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobPriorityProperty.op_Implicit(System.Printing.IndexedProperties.PrintJobPriorityProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintJobPriority">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> to a <see cref="T:System.Printing.PrintJobPriority" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintJobPriority" /> value.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobPriorityProperty.op_Implicit(System.Printing.IndexedProperties.PrintJobPriorityProperty)~System.Printing.PrintJobPriority">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintJobPriority" /> from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintJobPriority" /> value.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintBooleanProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintJobPriorityProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobPriorityProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Printing.PrintJobPriority" /> value.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintJobStatusProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintJobStatus" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobStatusProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobStatus" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobStatusProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintJobStatus" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobStatusProperty.op_Implicit(System.Printing.IndexedProperties.PrintJobStatusProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintJobStatus">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> to a <see cref="T:System.Printing.PrintJobStatus" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintJobStatus" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintJobStatusProperty.op_Implicit(System.Printing.IndexedProperties.PrintJobStatusProperty)~System.Printing.PrintJobStatus">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintJobStatus" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintJobStatus" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintJobStatusProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintJobStatusProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Printing.PrintJobStatus" /> value.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintPortProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintPort" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPortProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintPort" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPortProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintPort" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPortProperty.op_Implicit(System.Printing.IndexedProperties.PrintPortProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintPort">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> to a <see cref="T:System.Printing.PrintPort" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintPort" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPortProperty.op_Implicit(System.Printing.IndexedProperties.PrintPortProperty)~System.Printing.PrintPort">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintPort" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintPort" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintPortProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to a <see cref="T:System.Printing.IndexedProperties.PrintPortProperty" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintProcessorProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintProcessor" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProcessorProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> class for the specified property.</summary>
      <param name="attributeName">The <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProcessorProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintProcessor" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProcessorProperty.op_Implicit(System.Printing.IndexedProperties.PrintProcessorProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintProcessor">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> to a <see cref="T:System.Printing.PrintProcessor" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintProcessor" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProcessorProperty.op_Implicit(System.Printing.IndexedProperties.PrintProcessorProperty)~System.Printing.PrintProcessor">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintProcessor" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintProcessor" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintProcessorProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintProcessorProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to a <see cref="T:System.Printing.PrintProcessor" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintProperty">
      <summary>Represents a property (and the value of the property) of a printing system hardware or software component.</summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintProperty" /> class. </summary>
      <param name="attributeName">The name of the property that this object represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.Dispose">
      <summary>Releases all resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" /> and optionally releases the managed resource. </summary>
      <param name="disposing">true to release both managed resources and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.Finalize">
      <summary>Enables a <see cref="T:System.Printing.IndexedProperties.PrintProperty" /> to attempt to free resources and to perform other cleanup operations before the <see cref="T:System.Printing.IndexedProperties.PrintProperty" /> is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.InternalDispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both the managed resources and the unmanaged resources; false to release only the unmanaged resources. </param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintProperty.IsDisposed">
      <summary>Gets or sets a value that indicates whether the object has been disposed.</summary>
      <returns>true if the object has been disposed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintProperty.IsInitialized">
      <summary>Gets or sets a value that indicates whether the object has been initialized.</summary>
      <returns>true if the object has been initialized; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintProperty.Name">
      <summary>When overridden in a derived class, gets the name of the property that the object represents.</summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the property.</returns>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintProperty.OnDeserialization(System.Object)">
      <summary>When overridden in a derived class, implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the event. </param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintProperty.Value">
      <summary>When overridden in a derived class, gets or sets the value of the property that the object represents. </summary>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintPropertyDictionary">
      <summary>Represents a collection of properties and values that are associated with an object in the <see cref="N:System.Printing" /> namespace.</summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> class. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> class and provides it with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. </summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context of the serialized stream, including the source and the destination.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Add(System.Printing.IndexedProperties.PrintProperty)">
      <summary>Adds the specified object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />) into the dictionary.</summary>
      <param name="attributeValue">An object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />) that represents a property of a printing system hardware or software component.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose">
      <summary>Releases all the resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are being used by the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both the managed resources and the unmanaged resources; false to release only the unmanaged resources. </param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data that is needed to serialize the <see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />.</summary>
      <param name="info">Stores all the data that is used to serialize the object.</param>
      <param name="context">Describes the context of the serialized stream, including the source and the destination.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.GetProperty(System.String)">
      <summary>Gets the object (of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />) that represents the specified property.</summary>
      <returns>An object of a class that is derived from the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />.</returns>
      <param name="attribName">The name of the property that is represented by the <see cref="T:System.Printing.IndexedProperties.PrintProperty" />.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the event. </param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintPropertyDictionary.SetProperty(System.String,System.Printing.IndexedProperties.PrintProperty)">
      <summary>Sets the value of the specified attribute to an object of a class that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />.</summary>
      <param name="attribName">The name of the attribute.</param>
      <param name="attribValue">An object of a type that is derived from <see cref="T:System.Printing.IndexedProperties.PrintProperty" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attribName" /> is already in the dictionary and it already has the value <paramref name="attribValue" />.</exception>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintQueueAttributes" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueAttributeProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueAttributes" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueAttributeProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueAttributes" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> represents.</param>
      <param name="attributeValue">The value of <see cref="T:System.Object" /> the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueAttributeProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueAttributeProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintQueueAttributes">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> to a <see cref="T:System.Printing.PrintQueueAttributes" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueueAttributes" /> value.</returns>
      <param name="attributeRef">The <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueAttributeProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueAttributeProperty)~System.Printing.PrintQueueAttributes">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintQueueAttributes" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueueAttributes" /> value.</returns>
      <param name="attributeRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintQueueAttributeProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueAttributeProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Printing.PrintQueueAttributes" /> value.</returns>
      <exception cref="T:System.InvalidOperationException">The property cannot be set by using the value that is provided by the calling code.</exception>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintQueueProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintQueue" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueue" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueue" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintQueue">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> to a <see cref="T:System.Printing.PrintQueue" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueProperty)~System.Printing.PrintQueue">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintQueue" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueue" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintQueueProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to a <see cref="T:System.Printing.PrintQueue" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintQueueStatusProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintQueueStatus" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueStatusProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueStatus" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueStatusProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintQueueStatus" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueStatusProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueStatusProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintQueueStatus">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> to a <see cref="T:System.Printing.PrintQueueStatus" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueueStatus" /> value.</returns>
      <param name="attributeRef">The <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintQueueStatusProperty.op_Implicit(System.Printing.IndexedProperties.PrintQueueStatusProperty)~System.Printing.PrintQueueStatus">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintQueueStatus" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintQueueStatus" /> value.</returns>
      <param name="attributeRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintQueueStatusProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintQueueStatusProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Printing.PrintQueueStatus" />. </returns>
      <exception cref="T:System.InvalidOperationException">The property cannot be set by using the value that is provided by the calling code.</exception>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintServerLoggingProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerLoggingProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerLoggingProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerLoggingProperty.op_Implicit(System.Printing.IndexedProperties.PrintServerLoggingProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintServerEventLoggingTypes">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> (or from a pointer to such a property) to a <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> value.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerLoggingProperty.op_Implicit(System.Printing.IndexedProperties.PrintServerLoggingProperty)~System.Printing.PrintServerEventLoggingTypes">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> value.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintServerLoggingProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerLoggingProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Printing.PrintServerEventLoggingTypes" /> value.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintServerProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintServer" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServer" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> class that has the specified value for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintServer" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerProperty.op_Implicit(System.Printing.IndexedProperties.PrintServerProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintServer">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> to a <see cref="T:System.Printing.PrintServer" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintServer" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintServerProperty.op_Implicit(System.Printing.IndexedProperties.PrintServerProperty)~System.Printing.PrintServer">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintServer" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintServer" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintServerProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintServerProperty" /> represents.</summary>
      <returns>A <see cref="T:System.Object" /> that can be cast as a <see cref="T:System.Printing.PrintServer" />.</returns>
      <exception cref="T:System.InvalidOperationException">The property is not internally initialized.</exception>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintStreamProperty">
      <summary>Represents a <see cref="T:System.IO.Stream" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStreamProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.IO.Stream" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStreamProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.IO.Stream" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStreamProperty.op_Implicit(System.Printing.IndexedProperties.PrintStreamProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.IO.Stream">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> to a <see cref="T:System.IO.Stream" /> value.</summary>
      <returns>A <see cref="T:System.IO.Stream" />.</returns>
      <param name="attributeRef">The <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStreamProperty.op_Implicit(System.Printing.IndexedProperties.PrintStreamProperty)~System.IO.Stream">
      <summary>Provides implicit conversion to a <see cref="T:System.IO.Stream" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />. </summary>
      <returns>A <see cref="T:System.IO.Stream" />.</returns>
      <param name="attributeRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintStreamProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStreamProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast as a <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintStringProperty">
      <summary>Represents a <see cref="T:System.String" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStringProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.String" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStringProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> class that has the specified value for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.String" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStringProperty.op_Implicit(System.Printing.IndexedProperties.PrintStringProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.String">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> to a <see cref="T:System.String" /> value.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
      <param name="attributeRef">The <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintStringProperty.op_Implicit(System.Printing.IndexedProperties.PrintStringProperty)~System.String">
      <summary>Provides implicit conversion to a <see cref="T:System.String" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />.</summary>
      <returns>A <see cref="T:System.String" />.</returns>
      <param name="attributeRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintStringProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintStringProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintSystemTypeProperty">
      <summary>Represents a <see cref="T:System.Type" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintSystemTypeProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> class that has the specified property name.</summary>
      <param name="attributeName">The name of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintSystemTypeProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> class that has the specified property name and value.</summary>
      <param name="attributeName">The name of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintSystemTypeProperty.op_Implicit(System.Printing.IndexedProperties.PrintSystemTypeProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Type">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> to a <see cref="T:System.Type" /> value.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintSystemTypeProperty.op_Implicit(System.Printing.IndexedProperties.PrintSystemTypeProperty)~System.Type">
      <summary>Provides implicit conversion to a <see cref="T:System.Type" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />.</summary>
      <returns>A <see cref="T:System.Type" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintSystemTypeProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintSystemTypeProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" />. </returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty">
      <summary>Represents a <see cref="T:System.Threading.ThreadPriority" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintThreadPriorityProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Threading.ThreadPriority" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintThreadPriorityProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Threading.ThreadPriority" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintThreadPriorityProperty.op_Implicit(System.Printing.IndexedProperties.PrintThreadPriorityProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Threading.ThreadPriority">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> to a <see cref="T:System.Threading.ThreadPriority" /> value.</summary>
      <returns>A <see cref="T:System.Threading.ThreadPriority" /> value.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintThreadPriorityProperty.op_Implicit(System.Printing.IndexedProperties.PrintThreadPriorityProperty)~System.Threading.ThreadPriority">
      <summary>Provides implicit conversion to a <see cref="T:System.Threading.ThreadPriority" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />.</summary>
      <returns>A <see cref="T:System.Threading.ThreadPriority" /> value.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintThreadPriorityProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintThreadPriorityProperty" /> represents.</summary>
      <returns>A boxed <see cref="T:System.Threading.ThreadPriority" /> value.</returns>
    </member>
    <member name="T:System.Printing.IndexedProperties.PrintTicketProperty">
      <summary>Represents a <see cref="T:System.Printing.PrintTicket" /> property (and its value) of a printing system hardware or software component. </summary>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintTicketProperty.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> class for the specified property.</summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintTicket" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintTicketProperty.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> class that has the specified value for the specified property. </summary>
      <param name="attributeName">The name of the <see cref="T:System.Printing.PrintTicket" /> property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> represents.</param>
      <param name="attributeValue">The value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> represents.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintTicketProperty.op_Implicit(System.Printing.IndexedProperties.PrintTicketProperty|System.Runtime.CompilerServices.IsImplicitlyDereferenced)~System.Printing.PrintTicket">
      <summary>Provides implicit conversion from a <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> to a <see cref="T:System.Printing.PrintTicket" /> value.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" />.</returns>
      <param name="attribRef">The <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />  that is converted.</param>
    </member>
    <member name="M:System.Printing.IndexedProperties.PrintTicketProperty.op_Implicit(System.Printing.IndexedProperties.PrintTicketProperty)~System.Printing.PrintTicket">
      <summary>Provides implicit conversion to a <see cref="T:System.Printing.PrintTicket" /> value from a pointer to a <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />.</summary>
      <returns>A <see cref="T:System.Printing.PrintTicket" />.</returns>
      <param name="attribRef">A pointer to the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" />  that is converted.</param>
    </member>
    <member name="P:System.Printing.IndexedProperties.PrintTicketProperty.Value">
      <summary>Gets or sets the value of the property that the <see cref="T:System.Printing.IndexedProperties.PrintTicketProperty" /> represents.</summary>
      <returns>An <see cref="T:System.Object" /> that can be cast to a <see cref="T:System.Printing.PrintTicket" />.</returns>
    </member>
    <member name="T:System.Windows.Xps.VisualsToXpsDocument">
      <summary>Provides methods for writing <see cref="T:System.Windows.Media.Visual" /> objects to XML Paper Specification (XPS) documents or to a print queue in batch mode.Â </summary>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.BeginBatchWrite">
      <summary>Indicates that write operations can begin.</summary>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.Cancel">
      <summary>Cancels a synchronous writing operation.</summary>
      <exception cref="T:System.Windows.Xps.XpsWriterException">The state of the <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> is not compatible with a <see cref="M:System.Windows.Xps.VisualsToXpsDocument.Cancel" /> operation.</exception>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.CancelAsync">
      <summary>Cancels an asynchronous writing operation.</summary>
      <exception cref="T:System.Windows.Xps.XpsWriterException">The state of the <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> is not compatible with a <see cref="M:System.Windows.Xps.VisualsToXpsDocument.CancelAsync" /> operation.</exception>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.EndBatchWrite">
      <summary>Indicates that write operations must end.</summary>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.Write(System.Windows.Media.Visual)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> synchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.Write(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> synchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" /> and includes a <see cref="T:System.Printing.PrintTicket" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.WriteAsync(System.Windows.Media.Visual)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> asynchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.WriteAsync(System.Windows.Media.Visual,System.Object)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> asynchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" /> and includes additional information that the caller wants to pass to an event handler. </summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="userSuppliedState">An object that contains data that the caller wants to pass to the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted" /> event handler. </param>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> asynchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" /> and includes a <see cref="T:System.Printing.PrintTicket" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.VisualsToXpsDocument.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket,System.Object)">
      <summary>Writes a <see cref="T:System.Windows.Media.Visual" /> asynchronously to an <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or a <see cref="T:System.Printing.PrintQueue" />; also includes a <see cref="T:System.Printing.PrintTicket" /> and any additional information that the caller wants to pass to an event handler.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
      <param name="userSuppliedState">An object that contains the data that the caller wants to pass to the <see cref="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted" /> event handler. </param>
    </member>
    <member name="T:System.Windows.Xps.XpsDocumentNotificationLevel">
      <summary>Indicates whether a write operation to an XML Paper Specification (XPS) document or a print queue sends back page-by-page and document-by-document progress notifications.</summary>
    </member>
    <member name="F:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationEnabled">
      <summary>Progress notifications are enabled.</summary>
    </member>
    <member name="F:System.Windows.Xps.XpsDocumentNotificationLevel.None">
      <summary>The notification status is not indicated.</summary>
    </member>
    <member name="F:System.Windows.Xps.XpsDocumentNotificationLevel.ReceiveNotificationDisabled">
      <summary>Progress notifications are disabled.</summary>
    </member>
    <member name="T:System.Windows.Xps.XpsDocumentWriter">
      <summary>Provides methods to write to an XPS document or print queue.Â Â </summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter._WritingCancelled">
      <summary>Occurs when a <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.Write" /> or <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> operation is canceled.</summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter._WritingCompleted">
      <summary>Occurs when a write operation finishes.</summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter._WritingProgressChanged">
      <summary>Occurs when the <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> updates its progress.</summary>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.CancelAsync">
      <summary>Cancels the current <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> operation.</summary>
      <exception cref="T:System.Windows.Xps.XpsWriterException">No asynchronous write operation is in progress.</exception>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator">
      <summary>Returns a <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> that can write <see cref="T:System.Windows.Media.Visual" /> objects to a document or print queue.</summary>
      <returns>The new <see cref="T:System.Windows.Xps.VisualsToXpsDocument" />. </returns>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.CreateVisualsCollator(System.Printing.PrintTicket,System.Printing.PrintTicket)">
      <summary>Returns a <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> that can write <see cref="T:System.Windows.Media.Visual" /> objects with <see cref="T:System.Printing.PrintTicket" /> settings to an XPS document or print queue.</summary>
      <returns>The new <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> that writes <see cref="T:System.Windows.Media.Visual" /> elements with <see cref="T:System.Printing.PrintTicket" /> settings to the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</returns>
      <param name="documentSequencePrintTicket">A <see cref="T:System.Printing.PrintTicket" /> that specifies the default printing preferences for the document sequence.</param>
      <param name="documentPrintTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for each document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.String)">
      <summary>Writes synchronously a specified XPS document to the targetÂ <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPath">The path of the source document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.String,System.Windows.Xps.XpsDocumentNotificationLevel)">
      <summary>Writes synchronously a specified XPS document to the targetÂ <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> orÂ <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPath">The path of the source document.</param>
      <param name="notificationLevel">An indication of whether notification is enabled.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.DocumentPaginator)">
      <summary>Writes synchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material and also contains methods for paginating the material.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)">
      <summary>Writes synchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material and also contains methods for paginating the material.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for material.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocument)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Documents.FixedDocument" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">A document that is written to the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)">
      <summary>Writes synchronously a <see cref="T:System.Windows.Documents.FixedDocument" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">The document that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocumentSequence)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">A set of documents that is written to the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">The set of documents that are written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the set of documents.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedPage)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">A page that is written to the <see cref="T:System.Windows.Xps.Packaging.XpsDocument" />.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">The page that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the page.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Media.Visual)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Media.Visual" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.Write(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>Writes synchronously a specified <see cref="T:System.Windows.Media.Visual" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.String)">
      <summary>Writes asynchronously a specified XPS document to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPath">The path of the source document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.String,System.Windows.Xps.XpsDocumentNotificationLevel)">
      <summary>Writes asynchronously a specified XPS document with notification option to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPath">The path of the source document.</param>
      <param name="notificationLevel">An indication of whether notification is enabled.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator)">
      <summary>Writes asynchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material and also contains methods for paginating the material.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Object)">
      <summary>Writes asynchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material; also contains methods for paginating the material.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket)">
      <summary>Writes asynchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material and also contains methods for paginating the material.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the material.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.DocumentPaginator,System.Printing.PrintTicket,System.Object)">
      <summary>Writes asynchronously paginated content from a specified <see cref="T:System.Windows.Documents.DocumentPaginator" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="documentPaginator">An object that contains a pointer to unpaginated source material; also contains methods for paginating the material.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the material.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocument" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">The document that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocument" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">The document that is written.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocument" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">The document that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocument,System.Printing.PrintTicket,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocument" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocument">The document that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">The set of documents that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">The set of documents that are written.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">The set of documents that are written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the set of documents.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedDocumentSequence,System.Printing.PrintTicket,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedDocumentSequence" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedDocumentSequence">The set of documents to be written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the set of documents.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">The page that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">The page that is written.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">The page that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the page.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Documents.FixedPage,System.Printing.PrintTicket,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Documents.FixedPage" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="fixedPage">The page that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the page.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Media.Visual" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Media.Visual" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Media.Visual" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsDocumentWriter.WriteAsync(System.Windows.Media.Visual,System.Printing.PrintTicket,System.Object)">
      <summary>Writes asynchronously a specified <see cref="T:System.Windows.Media.Visual" /> together with a <see cref="T:System.Printing.PrintTicket" /> to the target <see cref="T:System.Windows.Xps.Packaging.XpsDocument" /> or <see cref="T:System.Printing.PrintQueue" />.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> that is written.</param>
      <param name="printTicket">A <see cref="T:System.Printing.PrintTicket" /> that represents the default printing preferences for the document.</param>
      <param name="userSuppliedState">A user-specified object to identify and associate with the asynchronous operation.</param>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter.WritingCancelled">
      <summary>Occurs when a <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.Write" /> or <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> operation is canceled.</summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter.WritingCompleted">
      <summary>Occurs when a write operation finishes.</summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter.WritingPrintTicketRequired">
      <summary>Occurs just before a <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.Write" /> or <see cref="Overload:System.Windows.Xps.XpsDocumentWriter.WriteAsync" /> method adds a <see cref="T:System.Printing.PrintTicket" /> to a document or print queue.</summary>
    </member>
    <member name="E:System.Windows.Xps.XpsDocumentWriter.WritingProgressChanged">
      <summary>Occurs when the <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> updates its progress.</summary>
    </member>
    <member name="T:System.Windows.Xps.XpsWriterException">
      <summary>The exception that is thrown when a method of either an <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> or a <see cref="T:System.Windows.Xps.VisualsToXpsDocument" /> object is called that is incompatible with the current state of the object. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsWriterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsWriterException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Xps.XpsWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsWriterException" /> class that provides specific <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. This constructor is protected.</summary>
      <param name="info">The data that is required to serialize or deserialize an object.</param>
      <param name="context">The context, which includes source and destination, of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsWriterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsWriterException" /> class that provides a specific error condition.</summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
    </member>
    <member name="M:System.Windows.Xps.XpsWriterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Xps.XpsWriterException" /> class that provides a specific error condition and includes the cause of the exception. </summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error condition.</param>
      <param name="innerException">The underlying error that caused the <see cref="T:System.Windows.Xps.XpsWriterException" />.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Numerics.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Represents an arbitrarily large signed integer.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</summary>
      <param name="value">An array of byte values in little-endian order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">A decimal number.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</summary>
      <param name="value">A double-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">The value of <paramref name="value" /> is <see cref="F:System.Double.NaN" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</summary>
      <param name="value">A 32-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</summary>
      <param name="value">A 64-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</summary>
      <param name="value">A single-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">The value of <paramref name="value" /> is <see cref="F:System.Single.NaN" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.-or-The value of <paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</summary>
      <param name="value">An unsigned 32-bit integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</summary>
      <param name="value">An unsigned 64-bit integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>The absolute value of <paramref name="value" />.</returns>
      <param name="value">A number.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</summary>
      <returns>A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.ValueConditionLess than zero<paramref name="left" /> is less than <paramref name="right" />.Zero<paramref name="left" /> equals <paramref name="right" />.Greater than zero<paramref name="left" /> is greater than <paramref name="right" />.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</summary>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The signed 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <returns>A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="obj" />.ZeroThe current instance equals <paramref name="obj" />.Greater than zeroThe current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is null. </returns>
      <param name="obj">The object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</summary>
      <returns>A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <paramref name="other" />.ZeroThe current instance equals <paramref name="other" />.Greater than zeroThe current instance is greater than <paramref name="other" />.</returns>
      <param name="other">The unsigned 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <param name="remainder">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division. This parameter is passed uninitialized.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</summary>
      <returns>true if the signed 64-bit integer and the current instance have the same value; otherwise, false.</returns>
      <param name="other">The signed 64-bit integer value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</summary>
      <returns>true if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, false.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value.</summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.BigInteger" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.BigInteger" /> value, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare. </param>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</summary>
      <returns>true if the current instance and the unsigned 64-bit integer have the same value; otherwise, false.</returns>
      <param name="other">The unsigned 64-bit integer to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, false.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>true if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Returns the natural (base e) logarithm of a specified number.</summary>
      <returns>The natural (base e) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">The number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <returns>The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">A number whose logarithm is to be found.</param>
      <param name="baseValue">The base of the logarithm.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <returns>The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
      <param name="value">A number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Gets a value that represents the number negative one (-1).</summary>
      <returns>An integer whose value is negative one (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs modulus division on a number raised to the power of another number.</summary>
      <returns>The remainder after dividing <paramref name="value" />exponent by <paramref name="modulus" />.</returns>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <param name="modulus">The value to divide <paramref name="value" />exponent by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> is negative.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
      <param name="left">The first number to multiply.</param>
      <param name="right">The second number to multiply.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Gets a value that represents the number one (1).</summary>
      <returns>An object whose value is one (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise And operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise And operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise Or operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise Or operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <returns>The value of the <paramref name="value" /> parameter decremented by 1.</returns>
      <param name="value">The value to decrement.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</summary>
      <returns>The integral result of the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise exclusive Or (XOr) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The result of the bitwise Or operation.</returns>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Double.NaN" />.-or-<paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Byte" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue" />. -or-<paramref name="value" /> is greater than <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 32-bit signed integer. </param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to an unsigned 64-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</summary>
      <returns>An object that contains the closest possible representation of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a single-precision floating-point value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a 16-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a signed 8-bit value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to an unsigned 32-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter</returns>
      <param name="value">The value to convert to an unsigned 16-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue" />.-or-<paramref name="value" /> is greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Single" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Single.NaN" />.-or-<paramref name="value" /> is <see cref="F:System.Single.PositiveInfinity" />.-or-<paramref name="value" /> is <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <returns>The value of the <paramref name="value" /> parameter incremented by 1.</returns>
      <param name="value">The value to increment.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</summary>
      <returns>A value that has been shifted to the left by the specified number of bits.</returns>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the left.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>true if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The remainder that results from the division.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to multiply.</param>
      <param name="right">The second value to multiply.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The bitwise one's complement of <paramref name="value" />.</returns>
      <param name="value">An integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</summary>
      <returns>A value that has been shifted to the right by the specified number of bits.</returns>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the right.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Negates a specified BigInteger value. </summary>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand. (The sign of the operand is unchanged.)</summary>
      <returns>The value of the <paramref name="value" /> operand.</returns>
      <param name="value">An integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
      <param name="value">A string that contains the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in the correct format.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
      <param name="value">A string that contains a number to convert. </param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
      <param name="value">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
      <param name="value">A string that contains a number to convert.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in the correct format.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</summary>
      <returns>The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</returns>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the <paramref name="exponent" /> parameter is negative.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</summary>
      <returns>The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</returns>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.NumberDescription-1The value of this object is negative.0The value of this object is 0 (zero).1The value of this object is positive.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</summary>
      <returns>The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if the <paramref name="value" /> parameter was converted successfully; otherwise, false.</returns>
      <param name="value">The string representation of a number. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed. The conversion fails if the <paramref name="value" /> parameter is null or is not in a format that is compliant with <paramref name="style" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.-or-<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value. </exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <returns>true if <paramref name="value" /> was converted successfully; otherwise, false.</returns>
      <param name="value">The string representation of a number.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails. The conversion fails if the <paramref name="value" /> parameter is null or is not of the correct format. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Gets a value that represents the number 0 (zero).</summary>
      <returns>An integer whose value is 0 (zero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Represents a complex number.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</summary>
      <param name="real">The real part of the complex number.</param>
      <param name="imaginary">The imaginary part of the complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Gets the absolute value (or magnitude) of a complex number.</summary>
      <returns>The absolute value of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc cosine of the specified complex number.</summary>
      <returns>The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number that represents a cosine.</param>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers and returns the result.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first complex number to add.</param>
      <param name="right">The second complex number to add.</param>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc sine of the specified complex number.</summary>
      <returns>The angle which is the arc sine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc tangent of the specified complex number.</summary>
      <returns>The angle that is the arc tangent of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Computes the conjugate of a complex number and returns the result.</summary>
      <returns>The conjugate of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Returns the cosine of the specified complex number.</summary>
      <returns>The cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic cosine of the specified complex number.</summary>
      <returns>The hyperbolic cosine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides one complex number by another and returns the result.</summary>
      <returns>The quotient of the division.</returns>
      <param name="dividend">The complex number to be divided.</param>
      <param name="divisor">The complex number to divide by.</param>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Returns a value that indicates whether the current instance and a specified complex number have the same value.</summary>
      <returns>true if this complex number and <paramref name="value" /> have the same value; otherwise, false.</returns>
      <param name="value">The complex number to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value. </summary>
      <returns>true if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Returns e raised to the power specified by a complex number.</summary>
      <returns>The number e raised to the power <paramref name="value" />.</returns>
      <param name="value">A complex number that specifies a power.</param>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Creates a complex number from a point's polar coordinates.</summary>
      <returns>A complex number.</returns>
      <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
      <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>The imaginary component of a complex number.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</summary>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Returns the natural (base e) logarithm of a specified complex number.</summary>
      <returns>The natural (base e) logarithm of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Returns the logarithm of a specified complex number in a specified base.</summary>
      <returns>The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</returns>
      <param name="value">A complex number.</param>
      <param name="baseValue">The base of the logarithm.</param>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Returns the base-10 logarithm of a specified complex number.</summary>
      <returns>The base-10 logarithm of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Gets the magnitude (or absolute value) of a complex number.</summary>
      <returns>The magnitude of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns the product of two complex numbers.</summary>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
      <param name="left">The first complex number to multiply.</param>
      <param name="right">The second complex number to multiply.</param>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Returns the additive inverse of a specified complex number.</summary>
      <returns>The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers.</summary>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides a specified complex number by another specified complex number.</summary>
      <returns>The result of dividing <paramref name="left" /> by <paramref name="right" />.</returns>
      <param name="left">The value to be divided.</param>
      <param name="right">The value to divide by.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a value that indicates whether two complex numbers are equal.</summary>
      <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
      <param name="left">The first complex number to compare.</param>
      <param name="right">The second complex number to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</summary>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero. </returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number. </summary>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero. </returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of an unsigned byte to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a double-precision floating-point number to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit signed integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a signed byte to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a single-precision floating-point number to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</summary>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
      <param name="value">The value to convert to a complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a value that indicates whether two complex numbers are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multiplies two specified complex numbers.</summary>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />.</returns>
      <param name="left">The first value to multiply.</param>
      <param name="right">The second value to multiply.</param>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtracts a complex number from another complex number.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Returns the additive inverse of a specified complex number.</summary>
      <returns>The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</returns>
      <param name="value">The value to negate.</param>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Gets the phase of a complex number.</summary>
      <returns>The phase of a complex number, in radians.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</summary>
      <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
      <param name="value">A complex number to be raised to a power.</param>
      <param name="power">A double-precision floating-point number that specifies a power.</param>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a specified complex number raised to a power specified by a complex number.</summary>
      <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
      <param name="value">A complex number to be raised to a power.</param>
      <param name="power">A complex number that specifies a power.</param>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>The real component of a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Returns the multiplicative inverse of a complex number.</summary>
      <returns>The reciprocal of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Returns the sine of the specified complex number.</summary>
      <returns>The sine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic sine of the specified complex number.</summary>
      <returns>The hyperbolic sine of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Returns the square root of a specified complex number.</summary>
      <returns>The square root of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtracts one complex number from another and returns the result.</summary>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Returns the tangent of the specified complex number.</summary>
      <returns>The tangent of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic tangent of the specified complex number.</summary>
      <returns>The hyperbolic tangent of <paramref name="value" />.</returns>
      <param name="value">A complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</summary>
      <returns>The string representation of the current instance in Cartesian form.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</summary>
      <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</returns>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</summary>
      <returns>The string representation of the current instance in Cartesian form.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</summary>
      <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Runtime.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Persistence.InstanceCollisionException">
      <summary>A persistence provider throws this exception when it expects an instance to be in an uninitialized state but the instance is not in that state. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCollisionException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCollisionException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the error message that explains the reason for the current exception, and the inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceCompletedException">
      <summary>A persistence provider throws this exception when it expects to find an instance in the initialized state, but finds the instance is in the completed state.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that causes the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceCompletedException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, error message that explains the reason for the exception, and the exception that caused the current exception.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceHandle">
      <summary>Represents a handle to <see cref="T:System.Runtime.Persistence.InstanceView" /> object.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandle.Free">
      <summary>Frees the instance handle.</summary>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceHandle.IsValid">
      <summary>Returns a value that indicates whether an instance handle is valid.</summary>
      <returns>true if the handle is valid; false if the handle is not valid.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceHandleConflictException">
      <summary>A persistence provider throws this exception when it tries to acquire an instance handle with write access to an instance for which a handle with write access already exists. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceHandleConflictException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceHandleConflictException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the error message that explains the reason for the current exception, and the inner exception information </summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKey">
      <summary>Represents an instance key and contains an identifier and metadata associated with the instance key. An instance key acts as a non-unique alias for an instance. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKey.#ctor(System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKey" /> class using the GUID associated with the instance key passed.</summary>
      <param name="value">The GUID associated with the instance key.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKey.#ctor(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue})">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKey" /> class using the GUID and metadata associated with the instance key.</summary>
      <param name="value">The GUID associated with the instance key.</param>
      <param name="metadata">The dictionary that contains metadata associated with the instance key.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKey.Equals(System.Object)">
      <summary>Compares the GUID associated with the current object (stored in the <see cref="P:System.Runtime.Persistence.InstanceKey.Value" /> property) with the GUID associated with the <see cref="T:System.Runtime.Persistence.InstanceKey" /> object. </summary>
      <returns>true if the GUIDs are same; otherwise returns false.</returns>
      <param name="obj">The GUID to be compared with the current object.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKey.GetHashCode">
      <summary>Returns a unique hash code for the current <see cref="T:System.Runtime.Persistence.InstanceKey" /> object.</summary>
      <returns>The unique hash code.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKey.InvalidKey">
      <summary>Returns an invalid <see cref="T:System.Runtime.Persistence.InstanceKey" /> object. An invalid <see cref="T:System.Runtime.Persistence.InstanceKey" /> object has Guid.Empty value for the <see cref="P:System.Runtime.Persistence.InstanceKey.Value" /> property and a false value for the <see cref="P:System.Runtime.Persistence.InstanceKey.IsValid" /> property.</summary>
      <returns>An invalid instance key.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKey.IsValid">
      <summary>Gets a value that indicates whether the instance key is valid.</summary>
      <returns>true if the instance key is valid; otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKey.Metadata">
      <summary>Gets the dictionary that contains metadata associated with the instance key.</summary>
      <returns>The dictionary that contains metadata associated with the instance key.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKey.Value">
      <summary>Gets the GUID value associated with the current instance key.</summary>
      <returns>The GUID value associated with the current instance key.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKeyCollisionException">
      <summary>A persistence provider throws this exception when it expects to find an instance key in the unassociated state, but finds the key in a different state.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with the error message passed as a parameter.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with the error message and the inner exception information passed as parameters.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.Xml.Linq.XName,System.Guid,System.Runtime.Persistence.InstanceKey,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with the name of the command, ID of the instance against which the command was executed, instance key information, and the instance ID that is currently associated with the instance key passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the instance against which the command was executed. The command failed because the instance key is already associated with another instance whose ID is represented by the <paramref name="conflictingInstanceId" /> parameter.</param>
      <param name="instanceKey">The instance key information. </param>
      <param name="conflictingInstanceId">The ID of the instance that is currently associated with the instance key. </param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.Xml.Linq.XName,System.Guid,System.Runtime.Persistence.InstanceKey,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with the name of the command, ID of the instance against which the command was executed, instance key information, the instance ID that is currently associated with the instance key, and inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the instance against which the command was executed. The command failed because the instance key is already associated with another instance whose ID is represented by the <paramref name="conflictingInstanceId" /> parameter.</param>
      <param name="instanceKey">The instance key information. </param>
      <param name="conflictingInstanceId">The ID of the instance that is currently associated with the instance key. </param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.#ctor(System.Xml.Linq.XName,System.Guid,System.Runtime.Persistence.InstanceKey,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCollisionException" /> class with the name of the command, ID of the instance against which the command was executed, instance key information, the instance ID that is currently associated with the instance key, the error message that describes the exception, and inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the instance against which the command was executed. The command failed because the instance key is already associated with another instance whose ID is represented by the conflictingInstanceId parameter.</param>
      <param name="instanceKey">The instance key information. </param>
      <param name="conflictingInstanceId">The ID of the instance that is currently associated with the instance key. </param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyCollisionException.ConflictingInstanceId">
      <summary>Gets the instance ID currently associated with the instance key. The persistence provider expects to find the instance key in an unassociated state, but the key is associated with this instance ID.</summary>
      <returns>The instance ID.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCollisionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception. </summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or the destination.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyCollisionException.InstanceKey">
      <summary>Contains information about the instance key.</summary>
      <returns>The instance key information.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKeyCompletedException">
      <summary>A persistence provider throws this exception when it expects to find an instance key in the associated state but finds the key in the completed state.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class with the serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Runtime.Persistence.InstanceKey,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class using the name of the command, ID of the instance against which the command was executed, instance key information, the error message that explains the reason for the exception, and the inner exception (the exception that caused the current exception) passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the instance against which the command was executed.</param>
      <param name="instanceKey">The information about the instance key. </param>
      <param name="message">Error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceKey)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class using the name of the command, and the instance key information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceKey">The information about the instance key. </param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.#ctor(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceKey,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyCompletedException" /> class using the name of the command, the instance key information, and the inner exception (the exception that caused the current exception).</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceKey">The information about the instance key. </param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyCompletedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception. </summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or the destination.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyCompletedException.InstanceKey">
      <summary>Contains information about the instance key.</summary>
      <returns>The information about the instance key.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKeyNotReadyException">
      <summary>A persistence provider throws this exception when it expects to find an instance key in the associated state, but finds the key in the unassociated state.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class with the serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class by using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class by using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.Xml.Linq.XName,System.Guid,System.Runtime.Persistence.InstanceKey,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class by using the name of the command, ID of the instance against which the command was executed, instance key information, the error message that explains the reason for the exception, and the inner exception (the exception that caused the current exception).</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the instance against which the command was executed.</param>
      <param name="instanceKey">The information about the instance key. </param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceKey)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class using the name of the command and the instance key information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceKey">The information about the instance key. </param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.#ctor(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceKey,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceKeyNotReadyException" /> class using the name of the command, the instance key information, and the inner exception (the exception that caused the current exception) passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceKey">The information about the instance key. </param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceKeyNotReadyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception. </summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or the destination.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyNotReadyException.InstanceKey">
      <summary>Contains information about the instance key.</summary>
      <returns>The instance key.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKeyState">
      <summary>Contains a list of valid states for instance keys.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceKeyState.Unknown">
      <summary>The instance key is not associated with any instance.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceKeyState.Associated">
      <summary>The instance key is associated with a non-completed instance.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceKeyState.Completed">
      <summary>The instance key was associated with an instance, which is no longer active.</summary>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceKeyView">
      <summary>Provides a view into instance key information.</summary>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyView.InstanceKey">
      <summary>Gets the value of the instance key (GUID).</summary>
      <returns>The value of the instance key.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyView.InstanceKeyMetadata">
      <summary>Gets the metadata for the instance key as a dictionary of XNames and corresponding InstanceValue objects. </summary>
      <returns>The metadata for the instance key.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyView.InstanceKeyMetadataConsistency">
      <summary>Gets consistency of the metadata (None, In Doubt, or Partial) of the instance key.</summary>
      <returns>The consistency of the metadata.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceKeyView.InstanceKeyState">
      <summary>Gets the state of the instance key (Unassociated, Associated, or Completed).</summary>
      <returns>The state of the instance key.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceLockedException">
      <summary>A persistence provider throws this exception when it is unable to acquire a lock on an instance because the instance is already locked by another owner. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class by using the error message passed as a parameter.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class by using the error message and the inner exception information passed as parameters.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the ID of the owner that currently has a lock on the instance, and serializable metadata information of the owner passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="instanceOwnerId">The ID of the owner that currently has a lock on the instance.</param>
      <param name="serializableInstanceOwnerMetadata">Serializable metadata information about the instance owner (who has a lock on the instance).</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the ID of the owner that currently has a lock on the instance, serializable metadata information about the owner, and the exception that caused the current exception passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="instanceOwnerId">The ID of the owner that currently has a lock on the instance.</param>
      <param name="serializableInstanceOwnerMetadata">Serializable metadata information about the instance owner (who has a lock on the instance).</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid,System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the ID of the owner that currently has a lock on the instance, serializable metadata information about the owner, the error message that explains the reason for the exception, and the exception that caused the current exception passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="instanceOwnerId">The ID of the owner that currently has lock on the instance.</param>
      <param name="serializableInstanceOwnerMetadata">The serializable metadata information about the instance owner (who has a lock on the instance).</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, the error message that explains the reason for the exception, and the exception that caused the current exception passed as parameters.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The exception that caused the current exception.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceLockedException.InstanceOwnerId">
      <summary>Gets the GUID associated with the current instance owner (who currently has a lock on the instance).</summary>
      <returns>The GUID associated with the current instance owner (who currently has a lock on the instance).</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceLockedException.SerializableInstanceOwnerMetadata">
      <summary>Gets serializable metadata information about the current instance owner (who currently has a lock on the instance).</summary>
      <returns>The serializable metadata information about the current instance owner (who currently has a lock on the instance).</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceLockLostException">
      <summary>A persistence provider throws this exception when it cannot perform the command because the lock on the instance does not match the lock associated with the instance handle against which the command was executed. Either the owner or the version does not match.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> the class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockLostException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockLostException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, error message that explains the reason for the exception, and the exception that caused the current exception.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceLockQueryResult">
      <summary>Contains a dictionary of IDs of instances and their owners, who have locks on the instances.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockQueryResult" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Guid})">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockQueryResult" /> class and sets the <see cref="P:System.Runtime.Persistence.InstanceLockQueryResult.InstanceOwnerIds" /> property using the dictionary of instance IDs and instance owner IDs.</summary>
      <param name="instanceOwnerIds">A dictionary with instance ID as the key and ID of the instance owner who owns the lock on the instance as the value.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceLockQueryResult.#ctor(System.Guid,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceLockQueryResult" /> class and sets the <see cref="P:System.Runtime.Persistence.InstanceLockQueryResult.InstanceOwnerIds" /> property using the dictionary that contains an instance ID and an instance owner ID.</summary>
      <param name="instanceId">The ID of the instance.</param>
      <param name="instanceOwnerId">The ID of the instance owner who owns locks on the instance represented by the <paramref name="instanceId" /> parameter.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceLockQueryResult.InstanceOwnerIds">
      <summary>Gets a dictionary that contains instance IDs and instance owner IDs. The dictionary has instance ID as a key and ID of the instance owner who owns the lock on the instance as the value. </summary>
      <returns>The dictionary that contains instance IDs and instance owner IDs.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceNotReadyException">
      <summary>A persistence provider throws this exception when it expects to find an instance in an initialized state, but finds the instance in an uninitialized state.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class with serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceNotReadyException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceNotReadyException" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed, error message that explains the reason for the exception, and the exception that caused the current exception.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceOwner">
      <summary>Represents the owner of an instance in the instance store. An instance owner is an interaction participant with an instance in the instance store.</summary>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceOwner.InstanceOwnerId">
      <summary>Gets ID of the instance owner as a GUID.</summary>
      <returns>The ID of the instance owner.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceOwnerException">
      <summary>A persistence provider throws this exception when it fails to acquire a lock on an instance because instance owner bound to the instance handle is invalid.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class with the serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class using the XName (the combination of namespace and name) of the command and the ID of the instance owner.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceOwnerId">The ID of the instance owner.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class using the XName (the combination of namespace and name) of the command, the ID of the instance owner, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceOwnerId">The ID of the instance owner.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> class using the XName (the combination of namespace and name) of the command, the ID of the instance owner, error message that describes the exception, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceOwnerId">The ID of the instance owner.</param>
      <param name="message">Error message that describes the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or the destination.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceOwnerException.InstanceOwnerId">
      <summary>Gets the ID of the instance owner.</summary>
      <returns>The ID of the instance owner.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceOwnerQueryResult">
      <summary>Contains metadata associated with an instance owner or instance owners that are retrieved from a persistence store. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerQueryResult" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerQueryResult.#ctor(System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue}})">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerQueryResult" /> class using the dictionary passed as a parameter that contains GUIDs associated with instance owners and dictionaries that contain metadata associated with these instance owners. </summary>
      <param name="instanceOwners">A dictionary that contains GUIDs and metadata of instance owners. Metadata itself is contained in another dictionary that contains names and values of metadata properties.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceOwnerQueryResult.#ctor(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue})">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceOwnerQueryResult" /> class using the GUID of the instance owner and metadata associated with that instance owner in the instance store. </summary>
      <param name="instanceOwnerId">GUID associated with the instance owner.</param>
      <param name="metadata">Metadata associated with the instance owner in a dictionary, (which contains the names of properties and their values).</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceOwnerQueryResult.InstanceOwners">
      <summary>Gets the metadata associated with an instance owner or instance owners stored in a dictionary that contains the GUID of the instance owner as a key and the metadata stored in another dictionary of names and values of properties as the value.</summary>
      <returns>The metadata associated with instance owners.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstancePersistenceCommand">
      <summary>Base class for all persistence related command classes.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommand.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class.</summary>
      <param name="name">The XName (the combination of namespace and name) of the command.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceCommand.AutomaticallyAcquiringLock">
      <summary>Indicates whether the command acquires a lock on the instance. </summary>
      <returns>true if the command acquires a lock on the instance;, otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceCommand.IsTransactionEnlistmentOptional">
      <summary>Returns a value that indicates whether the transaction enlistment is optional.</summary>
      <returns>true if the transaction enlistment is optional, otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceCommand.Name">
      <summary>Gets the name of the persistence command.</summary>
      <returns>An XName (the combination of namespace and name).</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommand.Validate(System.Runtime.Persistence.InstanceView)">
      <summary>Validates an instance view.</summary>
      <param name="view">An instance view object.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstancePersistenceCommandException">
      <summary>A persistence provider throws this exception when an error occurs while processing a persistence command.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the serialized data.</summary>
      <param name="info">The information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the error message.</summary>
      <param name="message">The reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the error message and the inner exception information.</summary>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The inner exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the XName (the combination of namespace and name) of the command.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the XName (the combination of namespace and name) of the command and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName,System.Guid)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the XName (the combination of namespace and name) of the command and the ID of the target instance against which the command was executed.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName,System.Guid,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommand" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName,System.Guid,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the XName (the combination of namespace and name) of the command, the ID of the target instance against which the command was executed, error message that explains the reason for the exception, and the exception that caused the current exception.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="instanceId">The ID of the target instance against which the command was executed.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.#ctor(System.Xml.Linq.XName,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceCompletedException" /> class using the XName (the combination of namespace and name) of the command, error message that explains the reason for the exception, and the exception that caused the current exception.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="message">The reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerizationInfo" /> object with information about the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommandException" />.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceCommandException.InstanceId">
      <summary>Gets the ID of the instance against which the command was executed.</summary>
      <returns>The ID of the instance.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstancePersistenceContext">
      <summary>Represents execution state information while a persistence command is being executed.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)">
      <summary>Sets the instance key state of the key view to Associated.</summary>
      <param name="key">The instance key identifier.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to bind a reclaimed lock to the instance view.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="instanceVersion">The version of the instance.</param>
      <param name="timeout">The time period after which the asynchronous operation is aborted.</param>
      <param name="callback">The method to be called when the operation is completed.</param>
      <param name="state">The state information associated with the asynchronous operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BeginExecute(System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins executing a persistence command asynchronously.</summary>
      <returns>The status of an asynchronous operation.</returns>
      <param name="command">The persistence command to be executed.</param>
      <param name="timeout">The time-out value for the operation.</param>
      <param name="callback">The delegate that receives the notification of the asynchronous receive that a request operation completes.</param>
      <param name="state">The state information.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BindAcquiredLock(System.Int64)">
      <summary>Binds a newly acquired lock on an instance with the instance view.</summary>
      <param name="instanceVersion">The version of the instance.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BindInstance(System.Guid)">
      <summary>Binds an instance whose identifier is specified as a parameter with the instance view.</summary>
      <param name="instanceId">An instance identifier.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)">
      <summary>Creates an <see cref="T:System.Runtime.Persistence.InstanceOwner" /> object based on the owner identifier and lock token parameters only if an <see cref="T:System.Runtime.Persistence.InstanceOwner" /> object does not exist for the owner and binds the instance owner to the instance view.</summary>
      <param name="instanceOwnerId">The identifier for the instance owner.</param>
      <param name="lockToken">A lock token used to correlate with an existing lock owner. If lock tokens do not match, an <see cref="T:System.InvalidOperationException" /> is thrown.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)">
      <summary>Binds an existing lock on an instance using a different version with the instance view. </summary>
      <param name="instanceVersion">The version of the instance.</param>
      <param name="timeout">The time-out value for the operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.CompletedInstance">
      <summary>Sets the instance state of the instance view to Completed. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.CompletedInstanceKey(System.Guid)">
      <summary>Sets the state of the instance key to Completed.</summary>
      <param name="key">The GUID associated with the instance key.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)">
      <summary>Creates an instance of the <see cref="M:System.Runtime.Persistence.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)" />.</summary>
      <returns>An exception.</returns>
      <param name="instanceVersion">The version of the instance.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)">
      <summary>Ends the asynchronous operation started by the <see cref="M:System.Runtime.Persistence.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</summary>
      <param name="result">The result of the asynchronous operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <param name="result">The status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.Execute(System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan)">
      <summary>Executes a persistence command.</summary>
      <param name="command">The persistence command to be executed.</param>
      <param name="timeout">The time-out value for the operation.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceContext.InstanceHandle">
      <summary>Gets the handle to an instance.</summary>
      <returns>The handle to an instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceContext.InstanceVersion">
      <summary>Gets the version of an instance.</summary>
      <returns>The version of the instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceContext.InstanceView">
      <summary>Gets the instance view object.</summary>
      <returns>The instance view object.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.LoadedInstance(System.Runtime.Persistence.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue}})">
      <summary>Reads the instance data and all associated instance keys.</summary>
      <param name="state">The instance state information.</param>
      <param name="instanceData">The instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="instanceMetadata">Instance metadata as a collection of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="associatedInstanceKeyMetadata">Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="completedInstanceKeyMetadata">Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceContext.LockToken">
      <summary>Gets the lock token object.</summary>
      <returns>The lock token object.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue})">
      <summary>Sets the instance data of the instance view using the information passed in the parameter. In addition, sets the instance status to Initialized.</summary>
      <param name="data">Instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.Persistence.InstanceStoreQueryResult)">
      <summary>Adds the <see cref="T:System.Runtime.Persistence.InstanceStoreQueryResult" /> passed as a parameter to a list of <see cref="T:System.Runtime.Persistence.InstanceStoreQueryResult" /> objects in an <see cref="T:System.Runtime.Persistence.InstanceView" />.</summary>
      <param name="queryResult">The results of a query against an instance store.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue},System.Boolean)">
      <summary>Sets the instance key metadata by using the information passed as a parameter.</summary>
      <param name="key">The instance key identifier.</param>
      <param name="metadata">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="complete">The value used to update the <see cref="P:System.Runtime.Persistence.InstanceView.InstanceMetadataConsistency" /> of the instance view.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue},System.Boolean)">
      <summary>Sets the instance metadata by using the information passed in the parameter.</summary>
      <param name="metadata">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="complete">The value used to update the <see cref="P:System.Runtime.Persistence.InstanceView.InstanceMetadataConsistency" /> of the instance view.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue},System.Boolean)">
      <summary>Sets the instance owner metadata using the data passed in the parameter.</summary>
      <param name="metadata">The dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</param>
      <param name="complete">The value to specify whether the consistency to be set to <see cref="F:System.Runtime.Persistence.InstanceValueConsistency.InDoubt" /> or <see cref="F:System.Runtime.Persistence.InstanceValueConsistency.Partial" />.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.Persistence.InstancePersistenceContext})">
      <summary>Sets the cancellation handler to be called when the cancel of an operation is requested.</summary>
      <param name="cancellationHandler">The reference to a function to be called.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)">
      <summary>Un-associates an instance key with the instance view.</summary>
      <param name="key">The instance key identifier.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceContext.UserContext">
      <summary>Gets the user context information.</summary>
      <returns>The user context information.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue)">
      <summary>Updates the metadata of an instance key by using the key and value information in the parameters.</summary>
      <param name="key">The instance key identifier.</param>
      <param name="name">The name of the metadata property.</param>
      <param name="value">The value of the metadata property.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue)">
      <summary>Updates the metadata of an instance by using the information passed as parameters.</summary>
      <param name="name">The name of the metadata property.</param>
      <param name="value">The value of the metadata property.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.Persistence.InstanceValue)">
      <summary>Updates the metadata for an instance by using the information passed using parameters. </summary>
      <param name="name">The name of the metadata property.</param>
      <param name="value">The value of the metadata property.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstancePersistenceException">
      <summary>Base class for all the persistence related exception classes. The <see cref="T:System.Runtime.Persistence.InstanceOwnerException" /> and the <see cref="T:System.Runtime.Persistence.InstancePersistenceCommandException" /> are derived classes of this class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the serialized information and the context information. </summary>
      <param name="info">The  information about the current exception.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the error message. </summary>
      <param name="message">Error message that describes the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the error message and inner exception information.</summary>
      <param name="message">The reason for the current exception.</param>
      <param name="innerException">The exception that causes the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the name of the command.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.Xml.Linq.XName,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class by using the name of the command and the inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.Xml.Linq.XName,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the name of the command and the error message.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="message">The error message that describes the exception.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.#ctor(System.Xml.Linq.XName,System.String,System.Exception)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstancePersistenceException" /> class using the name of the command, error message, and inner exception information.</summary>
      <param name="commandName">The XName (the combination of namespace and name) of the command.</param>
      <param name="message">The error message that describes the exception.</param>
      <param name="innerException">The exception that caused the current exception.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstancePersistenceException.CommandName">
      <summary>Gets the name of the command.</summary>
      <returns>The name of the command.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstancePersistenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceState">
      <summary>This enumeration contains a list of states of an instance.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceState.Unknown">
      <summary>Indicates that the instance is in Unknown state.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceState.Uninitialized">
      <summary>Indicates that the instance is uninitialized. An uninitialized instance is an instance that has never been persisted.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceState.Initialized">
      <summary>Indicates that the instance is initialized. An initialized instance is an instance that has been persisted at least once and can be persisted again in the future.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceState.Completed">
      <summary>Indicates that the instance is in completed state. A completed instance cannot be persisted again in the future.</summary>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceStore">
      <summary>Represents an instance store. </summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceStore" /> class.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.BeginExecute(System.Runtime.Persistence.InstanceHandle,System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Asynchronously executes persistence commands such as <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</summary>
      <returns>The state of the asynchronous operation.</returns>
      <param name="handle">An instance handle.</param>
      <param name="command">The command to be executed.</param>
      <param name="timeout">The timeout value for the command execution.</param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">The state information.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.BeginTryCommand(System.Runtime.Persistence.InstancePersistenceContext,System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>A persistence provider implements this method, which determines whether a particular persistence command can be executed.</summary>
      <returns>The state of the asynchronous operation.</returns>
      <param name="context">The instance context.</param>
      <param name="command">The persistence command to be executed.</param>
      <param name="timeout">The timeout value for the command execution.</param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</param>
      <param name="state">The state information.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.CreateInstanceHandle">
      <summary>Creates an instance handle. </summary>
      <returns>The instance handle.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.CreateInstanceHandle(System.Guid)">
      <summary>Creates an instance handle based on the instance identifier passed as a parameter.</summary>
      <returns>The instance handle.</returns>
      <param name="instanceId">An instance identifier.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.CreateInstanceHandle(System.Runtime.Persistence.InstanceOwner)">
      <summary>Creates an instance handle based on the instance owner information passed as a parameter.</summary>
      <returns>The instance handle.</returns>
      <param name="owner">The owner of an instance.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.CreateInstanceHandle(System.Runtime.Persistence.InstanceOwner,System.Guid)">
      <summary>Creates an instance handle based the instance owner and instance identifier information passed as parameters.</summary>
      <returns>The instance handle.</returns>
      <param name="owner">The owner of an instance.</param>
      <param name="instanceId">An instance identifier.</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceStore.DefaultInstanceOwner">
      <summary>Gets or sets the default instance owner.</summary>
      <returns>The default instance owner.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <returns>The view of the instance.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.EndTryCommand(System.IAsyncResult)">
      <summary>Ends an asynchronous operation.</summary>
      <returns>true if the asynchronous operation ended; otherwise false.</returns>
      <param name="result">The result of the operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.Execute(System.Runtime.Persistence.InstanceHandle,System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan)">
      <summary>Executes a persistence command. Examples of persistence commands are: <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />. </summary>
      <returns>The view of an instance.</returns>
      <param name="handle">An instance handle.</param>
      <param name="command">The command to be executed.</param>
      <param name="timeout">The timeout value for the operation.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.GetInstanceOwners">
      <summary>Gets the <see cref="T:System.Runtime.Persistence.InstanceOwner" /> objects that represent instance owners (hosts) with instance handles to instances. </summary>
      <returns>The owner of the instance.</returns>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.OnFreeInstanceHandle(System.Runtime.Persistence.InstanceHandle,System.Object)">
      <summary>Invoked when the instance handle is freed.</summary>
      <param name="instanceHandle">An instance handle.</param>
      <param name="userContext">The user context information.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.OnNewInstanceHandle(System.Runtime.Persistence.InstanceHandle)">
      <summary>Invoked when a new instance handle is created.</summary>
      <returns>An object.</returns>
      <param name="instanceHandle">An instance handle.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStore.TryCommand(System.Runtime.Persistence.InstancePersistenceContext,System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan)">
      <summary>A persistence provider implements this method, which determines whether a particular persistence command can be executed.</summary>
      <returns>true if the command executes successfully; otherwise, false.</returns>
      <param name="context">The instance context.</param>
      <param name="command">The command to be executed.</param>
      <param name="timeout">Timeout value for the operation.</param>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceStoreQueryResult">
      <summary>Provides extensible mechanism for retrieving data from an instance store without requiring an instance handle from the caller. For example, a caller may want to retrieve owner metadata for all the instance owners in the store.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceStoreQueryResult.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceStoreQueryResult" /> class.</summary>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceValue">
      <summary>Stores the information about instance data and metadata.</summary>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceValue.#ctor(System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceValue" /> class by using value object passed as a parameter.</summary>
      <param name="value">The value object.</param>
    </member>
    <member name="M:System.Runtime.Persistence.InstanceValue.#ctor(System.Object,System.Runtime.Persistence.InstanceValueOptions)">
      <summary>Initializes an instance of the <see cref="T:System.Runtime.Persistence.InstanceValue" /> class by using the value Object and the options for those values passed as parameters.</summary>
      <param name="value">The value object.</param>
      <param name="options">The options for the value object <see cref="T:System.Runtime.Persistence.InstanceValueOptions" />)</param>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceValue.DeletedValue">
      <summary>Gets the previously deleted value.</summary>
      <returns>An <see cref="T:System.Runtime.Persistence.InstanceValue" />.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceValue.IsDeletedValue">
      <summary>Returns a value that indicates whether the object represents a deleted value.</summary>
      <returns>true if the object represents a deleted value, otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceValue.Options">
      <summary>Specifies the options for an instance value. The options are: None, Optional, WriteOnly.</summary>
      <returns>
        <see cref="T:System.Runtime.Persistence.InstanceValueOptions" />.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceValue.Value">
      <summary>Gets the value as an object.</summary>
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceValueConsistency">
      <summary>Describes the consistency guarantee of the instance values contained in a specified dictionary.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueConsistency.None">
      <summary>Indicates that there is no consistency guarantee.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueConsistency.InDoubt">
      <summary>Indicates that the consistency of the instance value is in doubt.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueConsistency.Partial">
      <summary>Indicates that the consistency of the instance value is partial.</summary>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceValueOptions">
      <summary>Contains options for instance values to indicate whether the instance values are write-only, optional, there are no instance values.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueOptions.None">
      <summary>Indicates that there are no instance values.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueOptions.Optional">
      <summary>Indicates that a host can function without knowing the value of this instance value.</summary>
    </member>
    <member name="F:System.Runtime.Persistence.InstanceValueOptions.WriteOnly">
      <summary>Indicates that the instance value is write-only. The instance value can be used for administration purposes.</summary>
    </member>
    <member name="T:System.Runtime.Persistence.InstanceView">
      <summary>Represents view of an instance. For example, the <see cref="M:System.Runtime.Persistence.InstanceStore.Execute(System.Runtime.Persistence.InstanceHandle,System.Runtime.Persistence.InstancePersistenceCommand,System.TimeSpan)" /> method implementations return an <see cref="T:System.Runtime.Persistence.InstanceView" /> object that provides a view into the instance data in the persistence store.</summary>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceData">
      <summary>Gets instance data as a dictionary of names and values.</summary>
      <returns>The instance data.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceDataConsistency">
      <summary>Gets the consistency (None, In Doubt, and Partial) of the instance data.</summary>
      <returns>The consistency (None, In Doubt, and Partial) of the instance data.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceId">
      <summary>Gets the identifier (ID) of the instance as a GUID.</summary>
      <returns>The ID of the instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceKeys">
      <summary>Gets the instance keys as a dictionary of instance key identifiers and associated <see cref="T:System.Runtime.Persistence.InstanceKeyView" /> objects.</summary>
      <returns>A dictionary of instance key identifiers and their associated with instance key view objects.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceKeysConsistency">
      <summary>Gets the consistency value of instance keys.</summary>
      <returns>The consistency value of instance keys.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceMetadata">
      <summary>Gets the metadata of an instance as a dictionary of names and <see cref="T:System.Runtime.Persistence.InstanceValue" /> objects.</summary>
      <returns>The metadata of the instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceMetadataConsistency">
      <summary>Gets the consistency of the instance metadata.</summary>
      <returns>The consistency of the instance metadata.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceOwner">
      <summary>Gets the owner of the instance.</summary>
      <returns>The owner of the instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceOwnerMetadata">
      <summary>Gets the metadata for an instance owner as a dictionary of names and values.</summary>
      <returns>The metadata.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceOwnerMetadataConsistency">
      <summary>Gets the consistency of the instance owner metadata.</summary>
      <returns>The consistency of the instance owner metadata.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceState">
      <summary>Gets the state of an instance (Unknown, Uninitialized, Initialized, and Completed).</summary>
      <returns>The state of the instance.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.InstanceStoreQueryResults">
      <summary>Gets a collection of <see cref="T:System.Runtime.Persistence.InstanceStoreQueryResult" /> objects.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.IsBoundToInstance">
      <summary>Returns a value that indicates whether the instance view is bound to an instance.</summary>
      <returns>true if the instance view is bound to an instance; otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.IsBoundToInstanceOwner">
      <summary>Returns a value that indicates whether the instance view is bound to an instance owner.</summary>
      <returns>true if the instance view is bound to an instance owner; otherwise false.</returns>
    </member>
    <member name="P:System.Runtime.Persistence.InstanceView.IsBoundToLock">
      <summary>Returns a value that indicates whether the instance view is bound to an instance lock.</summary>
      <returns>true if the instance view is bound to an instance lock; otherwise false.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Net.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net</name>
  </assembly>
  <members>
    <member name="T:System.Net.IPEndPointCollection">
      <summary>Represents a collection used to store network endpoints as <see cref="T:System.Net.IPEndPoint" /> objects. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.IPEndPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.IPEndPointCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.IPEndPointCollection.InsertItem(System.Int32,System.Net.IPEndPoint)">
      <summary>Inserts an <see cref="T:System.Net.IPEndPoint" /> element into the <see cref="T:System.Net.IPEndPointCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.Net.IPEndPoint" /> object to insert. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is less than zero -or- the <paramref name="index" /> parameter is greater than the current count of items in the <see cref="T:System.Net.IPEndPointCollection" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Net.IPEndPointCollection.SetItem(System.Int32,System.Net.IPEndPoint)">
      <summary>Replaces the <see cref="T:System.Net.IPEndPoint" /> element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new <see cref="T:System.Net.IPEndPoint" /> value for the element at the specified index. The value can be null for reference types.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> parameter is less than zero -or- the <paramref name="index" /> parameter is greater than the current count of items in the <see cref="T:System.Net.IPEndPointCollection" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.Cloud">
      <summary>Specifies the values that define a Peer <see cref="T:System.Net.PeerToPeer.Cloud" /> object.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the PNRP <see cref="T:System.Net.PeerToPeer.Cloud" /> type. This populates a serialization information object with the data needed to serialize the Cloud object.</summary>
      <param name="info">Reference to the object that holds the data needed to deserialize this instance.</param>
      <param name="context">Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="F:System.Net.PeerToPeer.Cloud.AllLinkLocal">
      <summary>Returns a reference to a <see cref="T:System.Net.PeerToPeer.Cloud" /> which represents all the link-local clouds in which the client or peer is currently participating.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Cloud.Available">
      <summary>Returns a static reference to a <see cref="T:System.Net.PeerToPeer.Cloud" /> which represents all the available clouds in which the client is currently participating.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.Equals(System.Net.PeerToPeer.Cloud)">
      <summary>Performs a case-sensitive comparison between two cloud objects.  </summary>
      <returns>True if the <see cref="T:System.Net.PeerToPeer.Cloud" /> specified identifies the same resource as the current one, otherwise false. </returns>
      <param name="other">The cloud to compare with this <see cref="T:System.Net.PeerToPeer.Cloud" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.Equals(System.Object)">
      <summary>Determines whether the content of this peer <see cref="T:System.Net.PeerToPeer.Cloud" /> is equivalent to the content of a <see cref="N:System" /> object.  </summary>
      <returns>True if the <see cref="T:System.Net.PeerToPeer.PeerName" /> and the comparison object contain the same information; otherwise false. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this <see cref="T:System.Net.PeerToPeer.Cloud" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.GetAvailableClouds">
      <summary>Obtains a collection of peer clouds known to the calling peer.  </summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.CloudCollection" /> object that specifies a collection of peer clouds known to the calling peer.  If no clouds are available, null is returned.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.GetCloudByName(System.String)">
      <summary>Returns the <see cref="T:System.Net.PeerToPeer.Cloud" /> object with the specified cloud name.  </summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Cloud" /> object with the specified cloud name.</returns>
      <param name="cloudName">Contains the name of the PNRP <see cref="T:System.Net.PeerToPeer.Cloud" />.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Net.PeerToPeer.Cloud" /> name is not known.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.GetHashCode">
      <summary>Overrides <see cref="M:System.Object.GetHashCode" />.</summary>
      <returns>A hashcode for the current <see cref="T:System.Object" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="N:System.Runtime.Serialization" /> information object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.Cloud" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.Cloud" /> object.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Cloud.Global">
      <summary>Gets a <see cref="T:System.Net.PeerToPeer.Cloud" /> instance that contains globally (internet) scoped peers.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Cloud" /> which contains the peers that will communicate via the global network scope.</returns>
    </member>
    <member name="P:System.Net.PeerToPeer.Cloud.Name">
      <summary>Gets the name of the peer <see cref="T:System.Net.PeerToPeer.Cloud" />.  </summary>
      <returns>The name of the peer <see cref="T:System.Net.PeerToPeer.Cloud" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Cloud.Scope">
      <summary>Gets the network scope of the peer <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.PnrpScope" /> enumeration value that specifies the PNRP scope of the current peer cloud instance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Cloud.ScopeId">
      <summary>Gets the identifier of a specific IP address for this peer <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <returns>An integer value that specifies the scope-specific ID for this peer cloud.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Cloud.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.Net.PeerToPeer.Cloud.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Net.PeerToPeer.Cloud" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.CloudCollection">
      <summary>Represents a container for <see cref="T:System.Net.PeerToPeer.CloudCollection" /> elements. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.CloudCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.CloudCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.CloudCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Cloud)">
      <summary>Inserts a <see cref="T:System.Net.PeerToPeer.Cloud" /> into the <see cref="T:System.Net.PeerToPeer.CloudCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The value for the new element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Net.PeerToPeer.Cloud" /> provided cannot be null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.CloudCollection.SetItem(System.Int32,System.Net.PeerToPeer.Cloud)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Cloud" /> at the specified index.</summary>
      <param name="index"></param>
      <param name="item">The new value for the element to be replaced.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Net.PeerToPeer.Cloud" /> provided cannot be null.</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerName">
      <summary>Specifies the values that define a peer-to-peer <see cref="T:System.Net.PeerToPeer.PeerName" /> object. A peer name is typically a string used to identify a peer resource. </summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerName" />.</summary>
      <param name="info">Reference to the object that holds the data needed to deserialize this instance.</param>
      <param name="context">Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.#ctor(System.String)">
      <summary>Initializes a new object of type <see cref="T:System.Net.PeerToPeer.PeerName" /> with the supplied fully qualified peer name <see cref="T:System.String" /> value.</summary>
      <param name="remotePeerName">Contains the peer name to encode as a <see cref="T:System.Net.PeerToPeer.PeerName" /> instance.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.String" /> provided is not a valid <see cref="T:System.Net.PeerToPeer.PeerName" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.#ctor(System.String,System.Net.PeerToPeer.PeerNameType)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerName" /> class. </summary>
      <param name="classifier">
        <see cref="T:System.String" /> that contains the Peer Name to encode as a PeerToPeer name.</param>
      <param name="peerNameType">
        <see cref="T:System.Net.PeerToPeer.PeerNameType" /> enumeration value that specifies the type of peer name to create.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.PeerToPeer.PeerName.Classifier" /> includes one or more illegal characters.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerName.Authority">
      <summary>Returns a string that specifies the <see cref="P:System.Net.PeerToPeer.PeerName.Authority" /> used by this <see cref="T:System.Net.PeerToPeer.PeerName" /> object.  </summary>
      <returns>The string which contains the authentication portion of the specified <see cref="T:System.Net.PeerToPeer.PeerName" />. For secured peer names, this property contains the public key as a forty-character hexadecimal string. For unsecured peer names, this property is set to zero (0).</returns>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerName.Classifier">
      <summary>Returns a string that contains the classifier for a peer-to-peer <see cref="T:System.Net.PeerToPeer.PeerName" />. </summary>
      <returns>The string which contains the classifier portion used to identify a peer name for <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> or resolution within a PNRP <see cref="T:System.Net.PeerToPeer.Cloud" />.Unless explicitly specified, the default value for all properties is null for reference types and zero (0) for properties of type int.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.CreateFromPeerHostName(System.String)">
      <summary>Creates a new instance of the specified <see cref="P:System.Net.PeerToPeer.PeerName.PeerHostName" /> object with the specified peer host name.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.PeerName" /> object that represents the specified peer host name.</returns>
      <param name="peerHostName"></param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.String" /> provided is not a valid peer host name string.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.CreateRelativePeerName(System.Net.PeerToPeer.PeerName,System.String)">
      <summary>Creates a new <see cref="T:System.Net.PeerToPeer.PeerName" /> by replacing the <see cref="P:System.Net.PeerToPeer.PeerName.Classifier" /> field defined on the supplied <see cref="T:System.Net.PeerToPeer.PeerName" /> object with the specified classifier string value.</summary>
      <returns>The new <see cref="T:System.Net.PeerToPeer.PeerName" /> object that contains the updated classifier.</returns>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> object on which to set the new classifier string value.</param>
      <param name="classifier"></param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.String" /> provided is not a valid peer name classifier.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.Equals(System.Net.PeerToPeer.PeerName)">
      <summary>Performs a case-sensitive comparison of the current <see cref="T:System.Net.PeerToPeer.PeerName" /> and the specified peer name.</summary>
      <param name="other">The peer name to compare with this <see cref="T:System.Net.PeerToPeer.PeerName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.Equals(System.Object)">
      <summary>Determines whether the content of this <see cref="T:System.Net.PeerToPeer.PeerName" /> is equal to the content of another object. </summary>
      <returns>True if the <see cref="T:System.Net.PeerToPeer.PeerName" /> and the comparison object contain the same information; otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Net.PeerToPeer.PeerName" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.GetHashCode">
      <summary>Overrides the <see cref="M:System.Object.GetHashCode" /> method.</summary>
      <returns>A hashcode for the current <see cref="T:System.Object" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a serialization information object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerName" />.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerName.IsSecured">
      <summary>Gets a Boolean value that specifies whether this is a secured peer name.</summary>
      <returns>If true, this peer name is secured with a private key/ public key pair. Its name contains the Secure Hash Algorithm (SHA) hash of the public key of the user certificate of that peer machine. Otherwise, if false, the peer name has no associated identity.Unless explicitly specified, the default value for all properties is null for reference types and zero (0) for properties of type int.</returns>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerName.PeerHostName">
      <summary>Gets the name of the peer-to-peer host. This is a DNS-encoded version of the <see cref="T:System.Net.PeerToPeer.PeerName" /> which is equivalent to a <see cref="P:System.Net.PeerToPeer.PeerName.PeerHostName" /> in that they are both identifiers.  The difference between the two is visual representation.</summary>
      <returns>A <see cref="T:System.String" /> value that is the name of the peer-to-peer host. Unless explicitly specified, the default value for all properties is null for reference types. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerName" /> instance. </summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerName.ToString">
      <summary>Returns a string representation of the current <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</summary>
      <returns>A string that represents the current <see cref="T:System.Net.PeerToPeer.PeerName" />, and specified in the following format: Authority.Classifier. For example, "0.MyInternetPeer".</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerNameRecord">
      <summary>Defines the set of values that form a peer name record object. This record includes items such as the peer name and the collection of endpoints with which it communicates. Peer name records are used to define the individual peer nodes within a <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecord.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecord.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> class.</summary>
      <param name="info">Reference to the object that holds the data needed to deserialize this instance.</param>
      <param name="context">Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRecord.Comment">
      <summary>Gets or sets additional information about the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object.</summary>
      <returns>The comment associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object. The default value for this property is null. </returns>
      <exception cref="T:System.ArgumentException">The comment to set is either larger than 39 Unicode characters or less than one character.</exception>
      <exception cref="T:System.ArgumentNullException">The comment to set is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRecord.Data">
      <summary>Gets or sets application-defined binary data for the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object.</summary>
      <returns>An array of bytes that holds the binary data associated with the entry. The default value for this property is an empty (zero-length) array instance.</returns>
      <exception cref="T:System.ArgumentException">The length of the binary data array to set is either greater than 4096 or less than 1.</exception>
      <exception cref="T:System.ArgumentNullException">The data to set is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection">
      <summary>Gets an <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> object that contains all the endpoints available to the peer associated with this <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object. </summary>
      <returns>A <see cref="T:System.Net.IPEndPointCollection" /> object that contains a collection of <see cref="T:System.Net.IPEndPoint" /> objects. These objects contain the endpoints of other peers participating within the associated peer cloud. The default value for this property is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecord.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a serialization information object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" />.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRecord.PeerName">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.PeerName" /> within this <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object. A peer name is a string used to identify a peer resource.</summary>
      <returns>The <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> within this <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object. The default value for this property is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecord.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> instance. </summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> instance.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> instance.</param>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerNameRecordCollection">
      <summary>Represents a container for <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> elements. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecordCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecordCollection.InsertItem(System.Int32,System.Net.PeerToPeer.PeerNameRecord)">
      <summary>Inserts a <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> element into the <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> at the specified index.  </summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The value for the new element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The item provided cannot be null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRecordCollection.SetItem(System.Int32,System.Net.PeerToPeer.PeerNameRecord)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element to be replaced.</param>
      <exception cref="T:System.ArgumentNullException">The item provided cannot be null.</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerNameRegistration">
      <summary>Registers a <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> in a <see cref="T:System.Net.PeerToPeer.Cloud" /> or set of clouds.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> class with the specified name and port number.</summary>
      <param name="name">The <see cref="T:System.Net.PeerToPeer.PeerName" /> object to register.</param>
      <param name="port">Integer value that specifies the port number to register. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Net.PeerToPeer.PeerName" /> specified has already been registered from this host.The remote peer does not own the <see cref="P:System.Net.PeerToPeer.PeerName.Authority" /> for the supplied <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> class with the specified peer name, port number, and <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <param name="name">The <see cref="T:System.Net.PeerToPeer.PeerName" /> object to register.</param>
      <param name="port">Integer value that specifies the port number to register.</param>
      <param name="cloud">
        <see cref="T:System.Net.PeerToPeer.Cloud" /> in which to register the peer name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter cannot be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified port number is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Net.PeerToPeer.PeerName" /> specified has already been registered from this host.The remote peer does not own the <see cref="P:System.Net.PeerToPeer.PeerName.Authority" /> for the supplied <see cref="T:System.Net.PeerToPeer.PeerName" /> object.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new serializable <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</summary>
      <param name="info">Reference to the object that holds the data needed to deserialize this instance.</param>
      <param name="context">Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud">
      <summary>Gets or sets information in a <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" /> into which this <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> object will be registered.</summary>
      <returns>An object of type <see cref="T:System.Net.PeerToPeer.Cloud" /> that specifies the peer cloud for which this registration is defined. This property is set to null by default.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.Comment">
      <summary>Gets or sets additional information about the <see cref="T:System.Net.PeerToPeer.PeerName" /> object that will be registered with the <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <returns>The comment that contains additional information about the <see cref="T:System.Net.PeerToPeer.PeerName" /> to associate with the <see cref="T:System.Net.PeerToPeer.Cloud" />. This property is set to null by default.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The specified string value is greater than 39 Unicode characters.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.Data">
      <summary>Gets or sets application-defined binary data for the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</summary>
      <returns>An array of bytes that holds the binary data associated with the entry. This property is set to null by default.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Data" /> is greater than 4096 bytes.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection">
      <summary>Gets the collection of network endpoints for which the associated peer name is registered.</summary>
      <returns>An <see cref="P:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection" /> object that contains the network endpoints for which the associated peer name is registered. Unless explicitly specified, the default value for all properties is null for reference types.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a serialization information object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> instance.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</param>
      <param name="context">Contains destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.IsRegistered">
      <summary>Gets or sets whether the peer name specified in the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property is registered with a specific <see cref="T:System.Net.PeerToPeer.Cloud" /> on a host.</summary>
      <returns>If true, the peer name is registered with a <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" /> for the peer host. If false, then the registration process can be started with <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Start" />.</returns>
      <exception cref="T:System.ObjectDisposedException">An object that has been disposed already cannot be registered.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName">
      <summary>Gets or sets the peer name to register with a peer cloud.</summary>
      <returns>An object of type <see cref="T:System.Net.PeerToPeer.PeerName" /> that contains values associated with this <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object. Unless explicitly specified, the default value for all properties is null for reference types.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.Port">
      <summary>Gets or sets the TCP/IP port number used by the peer being registered into the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object.</summary>
      <returns>An integer value indicating the TCP port number of the <see cref="T:System.Net.IPEndPoint" />. Unless explicitly specified, the default value for this property is zero (0).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified port value is less than zero.  Port numbers must be greater than or equal to zero and less than 65,535 (0xFFFF).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.Start">
      <summary>Registers the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> into the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" />. If no <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection" /> is specified, automatic address selection is used with the port value specified by the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Port" /> property.</summary>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property is set to null.</exception>
      <exception cref="T:System.ObjectDisposedException">This object had Dispose() called on it previously.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Net.PeerToPeer.PeerName" /> specified has already been registered. The <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Update" /> method must be used to update a registration. The remote peer does not own the <see cref="P:System.Net.PeerToPeer.PeerName.Authority" /> for the <see cref="T:System.Net.PeerToPeer.PeerName" /> specified.Either the <see cref="T:System.Net.PeerToPeer.PeerName" /> or the <see cref="P:System.Net.PeerToPeer.PeerNameRecord.Data" /> is not specified; at least one needs to be provided.The message or data elements are invalid. Or, <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection" /> is not set and no data blob or <see cref="T:System.Net.IPEndPoint" /> is specified.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.Stop">
      <summary>Unregisters the peer name specified in the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property from all the clouds in which it was registered.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property has not yet been registered. This occurs when a <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> object is constructed using the empty constructor. The <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property must be populated in this instance prior to calling <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Start" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This object had Dispose() called on it previously.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> instance.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> instance.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> instance.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameRegistration.Update">
      <summary>Updates the <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> for a node registered with a specific <see cref="T:System.Net.PeerToPeer.Cloud" />. Update is performed using the information specified in the properties.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property is set to null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property has not yet been registered. The <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Update" /> method cannot be called until the peer name specified in the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property is registered in one or more clouds.The peer name specified in the <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> property has changed since the corresponding <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> was registered.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An object that has been disposed cannot be registered.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection">
      <summary>Gets or sets a value that specifies whether to use automatic endpoint selection when traversing a peer mesh or <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" />. </summary>
      <returns>True if automatic endpoint selection is to be used; false if some other method will be used to determine an endpoint. The default value is true. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerNameResolver">
      <summary>Specifies the values that resolve a <see cref="T:System.Net.PeerToPeer.PeerName" /> to a <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> using the PNRP Namespace Provider API protocol.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.PeerNameResolver" /> class.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted(System.Net.PeerToPeer.ResolveCompletedEventArgs)">
      <summary>Returns peer resolution data after the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /> event is raised.</summary>
      <param name="e">The <see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /> object that contains the data returned by the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /> event.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged(System.Net.PeerToPeer.ResolveProgressChangedEventArgs)">
      <summary>Returns peer resolution progress data when the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /> event is raised.</summary>
      <param name="e">
        <see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /> object that contains peer name resolution progress information returned by the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /> event.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName)">
      <summary>Resolves the specified <see cref="T:System.Net.PeerToPeer.PeerName" /> in all clouds known to the calling peer.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> that contains all peer name records (represented as <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> objects) associated with the specified peer name. For unsecured peer names, the same <see cref="T:System.Net.PeerToPeer.PeerName" /> can be registered by different users in the same <see cref="T:System.Net.PeerToPeer.Cloud" />, and associated with different endpoints.</returns>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerName" /> parameter is set to null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The peer name specified cannot be resolved. </exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Int32)">
      <summary>Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> objects.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> whose size is less than or equal to <paramref name="maxRecords" /> entries. This collection contains peer name records associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> that was resolved.</returns>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="maxRecords">The maximum number of <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> objects to obtain from all <see cref="T:System.Net.PeerToPeer.Cloud" /> objects for the supplied <paramref name="peerName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerName" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxRecords" /> parameter is less than or equal to zero.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The supplied peer name cannot be resolved.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud)">
      <summary>Resolves the specified <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> in the specified <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> that contains all peer name records (represented as <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> objects) associated with the specified peer name. For unsecured peer names, the same <see cref="T:System.Net.PeerToPeer.PeerName" /> can be registered by different users in the same <see cref="T:System.Net.PeerToPeer.Cloud" />, and associated with different endpoints.</returns>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="cloud">The <see cref="T:System.Net.PeerToPeer.Cloud" /> in which to resolve the peer name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerName" /> parameter is set to null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The supplied peer name cannot be resolved. </exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.Resolve(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32)">
      <summary>Resolves the specified <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> in the specified <see cref="T:System.Net.PeerToPeer.Cloud" />, returning no more than the specified number of <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> objects. </summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> whose size is less than or equal to <paramref name="maxRecords" /> entries. This collection contains peer name records associated with the <see cref="T:System.Net.PeerToPeer.PeerName" /> that was resolved.</returns>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="cloud">The <see cref="T:System.Net.PeerToPeer.Cloud" /> in which to resolve the <paramref name="peerName" />.</param>
      <param name="maxRecords">The maximum number of peer name record objects to obtain from the specified cloud for the specified <paramref name="peerName" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerName" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxRecords" /> parameter is less than or equal to zero.  </exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The supplied peer name cannot be resolved.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Int32,System.Object)">
      <summary>Begins an asynchronous peer name resolution operation for the specified <see cref="T:System.Net.PeerToPeer.PeerName" /> in all clouds known to the calling peer, returning no more than <paramref name="maxRecords" /> entries for the peer name.</summary>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="maxRecords">The maximum number of records to obtain for the Peer Name.</param>
      <param name="userState">A user-defined object that contains information about the resolve operation.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the <paramref name="peerName" /> and <paramref name="userState" /> parameters are set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxRecords" /> parameter is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Int32,System.Object)">
      <summary>Begins an asynchronous peer name resolution operation for the specified <see cref="T:System.Net.PeerToPeer.PeerName" /> in the specified <see cref="T:System.Net.PeerToPeer.Cloud" />.  The resolution operation will resolve no more than <paramref name="maxRecords" /> entries for the specified peer name.</summary>
      <param name="peerName">The <paramref name="peerName" /> to resolve.</param>
      <param name="cloud">The <paramref name="cloud" /> in which to resolve <paramref name="peerName" />.</param>
      <param name="maxRecords">The maximum number of records to obtain from <paramref name="cloud" /> for <paramref name="peerName" />.</param>
      <param name="userState">A user-defined object that contains information about the peer name resolution operation. </param>
      <exception cref="T:System.ArgumentNullException">One or both of the <paramref name="peerName" /> and <paramref name="userState" /> parameters are set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="maxRecords" /> parameter is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Net.PeerToPeer.Cloud,System.Object)">
      <summary>Begins an asynchronous peer name resolution operation for the specified <see cref="T:System.Net.PeerToPeer.PeerName" /> in the specified <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="cloud">The <see cref="T:System.Net.PeerToPeer.Cloud" /> in which to resolve the <paramref name="peerName" />.</param>
      <param name="userState">A user-defined <see cref="T:System.Object" /> that contains information about the peer name resolution operation.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the <paramref name="peerName" /> and <paramref name="userState" /> parameters are set to null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync(System.Net.PeerToPeer.PeerName,System.Object)">
      <summary>Begins an asynchronous peer name resolution operation for the specified <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> in all clouds known to the calling peer.</summary>
      <param name="peerName">The <see cref="T:System.Net.PeerToPeer.PeerName" /> to resolve.</param>
      <param name="userState">A user-defined object that contains state information about the peer name resolution operation.</param>
      <exception cref="T:System.ArgumentNullException">One or both of the <paramref name="peerName" /> and <paramref name="userState" /> parameters are set to null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerNameResolver.ResolveAsyncCancel(System.Object)">
      <summary>Cancels the specified asynchronous peer name resolution request. </summary>
      <param name="userState">The object provided to the <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> method instance which started the resolve operation. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userState" /> parameters cannot be null.</exception>
    </member>
    <member name="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted">
      <summary>The <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /> event is signaled when a peer name resolution request for a specific <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> has completed.  </summary>
    </member>
    <member name="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged">
      <summary>This event is signaled whenever a <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object is found in response to a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation for a specific <see cref="T:System.Net.PeerToPeer.PeerName" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerNameType">
      <summary>Defines the type of <see cref="T:System.Net.PeerToPeer.PeerName" /> to create. A peer name is either secured or unsecured. A secured peer name provides a proof of ownership of the name. An unsecured peer name has no identity associated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.PeerNameType.Secured">
      <summary>Create a secured <see cref="T:System.Net.PeerToPeer.PeerName" />  using the identity of current user.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PeerNameType.Unsecured">
      <summary>Create an unsecured <see cref="T:System.Net.PeerToPeer.PeerName" />  using the identity of current user.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.PeerToPeerException">
      <summary>Represents the exceptions that are thrown when an error is raised by the Peer-to-Peer Infrastructure.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> class with serialized data.</summary>
      <param name="info">Reference to the object that holds the data needed to deserialize the object.</param>
      <param name="context">Context that provides the means for deserializing the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> class with the supplied message string.</summary>
      <param name="message">The error message that provides the reason for the exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> class with the supplied message string and exception. </summary>
      <param name="message"></param>
      <param name="innerException">The exception instance that caused the current <see cref="T:System.Exception" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the peer object.</summary>
      <param name="info">Contains the information required to serialize the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PeerToPeerException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> instance. </summary>
      <param name="info">Contains the information required to serialize the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> instance.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.PeerToPeerException" /> instance.</param>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermission">
      <summary>Specifies the values that are used in <see cref="N:System.Net.PeerToPeer" /> object permissions. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> class with the supplied initial permission state.</summary>
      <param name="state">One of the values in the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Copy">
      <summary>Creates and returns an identical copy of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" />.</summary>
      <returns>An object with an IPermission interface, whose instance contains a copy of the current instance of <see cref="T:System.Net.PeerToPeer.PnrpPermission" />. </returns>
      <exception cref="T:System.ArgumentException">The parameter is not a valid <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> element.The parameter's version number is not supported. </exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="e">The XML encoding to use to reconstruct the permission. </param>
      <exception cref="T:System.ArgumentException">The parameter is not a valid <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> element.The parameter's version number is not supported. </exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> and the specified permission.</summary>
      <returns>A new permission that represents the intersection of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> and the specified permission. This new permission is a null reference (Nothing in Visual Basic) if the intersection is empty. </returns>
      <param name="target">A permission to <see cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" /> with the current permission. It must be of the same type as the current permission.</param>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> is a subset of the specified permission.</summary>
      <returns>True if the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> is a subset of the specified permission; otherwise, false. </returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission. </param>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted">
      <summary>Returns a value specifying whether the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> is unrestricted.</summary>
      <returns>True if the current permission is unrestricted; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.ToXml">
      <summary>Creates an XML encoding of the <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> and its current state.</summary>
      <returns>A <see cref="T:System.Security.SecurityElement" /> object that contains an XML encoding of the permission, including any state information. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> and the specified permission.</summary>
      <returns>A new permission that represents the <see cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" /> of the current <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> to be applied to code using declarative security.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.IPermission" />.</summary>
      <returns>A new <see cref="T:System.Security.IPermission" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpScope">
      <summary>Specifies the different scopes of a PNRP cloud. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.All">
      <summary>All IP addresses are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud" />. There is no difference between any scope and all scopes.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.Global">
      <summary>The scope is global; all valid IP addresses are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.SiteLocal">
      <summary>The scope is site-local; only IP addresses defined for the site are allowed to register with the PNRP.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.LinkLocal">
      <summary>The scope is link-local; only IP addresses defined for the local area subnet are allowed to register with the PNRP <see cref="T:System.Net.PeerToPeer.Cloud" />.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.ResolveCompletedEventArgs">
      <summary>Used in conjunction with the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted" /> event, which is signaled when a resolve request for a specific <see cref="T:System.Net.PeerToPeer.PeerName" /> has completed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.ResolveCompletedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecordCollection,System.Exception,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.ResolveCompletedEventArgs" /> class.</summary>
      <param name="peerNameRecordCollection">The collection associated with the peer name that was resolved.</param>
      <param name="error">Returns an exception if an error occurred. </param>
      <param name="canceled"></param>
      <param name="userToken">The user token specified when a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation was started. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.ResolveCompletedEventArgs.PeerNameRecordCollection">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> object to resolve.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.PeerNameRecordCollection" /> object to resolve is the one found in response to a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation on a specific <see cref="T:System.Net.PeerToPeer.PeerName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs">
      <summary>Used in conjunction with signaling the <see cref="E:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged" /> event.  It is signaled whenever a <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object is found in response to a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation on a specific <see cref="T:System.Net.PeerToPeer.PeerName" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.ResolveProgressChangedEventArgs.#ctor(System.Net.PeerToPeer.PeerNameRecord,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.ResolveProgressChangedEventArgs" /> class.</summary>
      <param name="peerNameRecord"></param>
      <param name="userToken">The unique user state object suppliedwhen a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation was started. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.ResolveProgressChangedEventArgs.PeerNameRecord">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> object to resolve.</summary>
      <returns>The peer name record object found in response to a <see cref="Overload:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync" /> operation on a specific <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" />.Unless explicitly specified, the default value for all properties is null for reference types and zero (0) for properties of type int.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.PeerApplication.ApplicationChanged" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs.PeerApplication">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the event was raised.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance that was updated.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs.PeerChangeType">
      <summary>Gets the type of change to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> that occurred.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> enumeration value that specifies the type of change that was performed on the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs.PeerContact">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs.PeerEndPoint">
      <summary>Gets the endpoint for which <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> information has changed.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> that contains the endpoint for which application information has changed. Unless explicitly specified, the default value for all properties is null for reference types and zero (0) for properties of type int.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.ContactManager">
      <summary>Represents a collection of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> objects which persist in a Windows Address Book.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.AddContact(System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Adds the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
      <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance to add to <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />. </param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> specified by <paramref name="peerContact" /> already exists.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerContact" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The specified <paramref name="peerContact" /> has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> specified by <paramref name="peerContact" /> could not be reconstituted from its serialized XML format.Unable to add the local peer to the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> instance being constructed.</exception>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.ApplicationChanged">
      <summary>Raised whenever a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)">
      <summary>Creates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />.</returns>
      <param name="peerNearMe">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to associate with the new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerNearMe" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The contact manager of the remote peer passed in <paramref name="peerNearMe" /> could not be reached, or the contact could not be read from it.The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance passed in <paramref name="peerNearMe" /> has no endpoints set on it.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)">
      <summary>Creates a contact instance for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</summary>
      <param name="peerNearMe">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to associate with the new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</param>
      <param name="userToken">A user-defined <see cref="T:System.Object" /> that contains information about the <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactAsync(System.Net.PeerToPeer.Collaboration.PeerNearMe,System.Object)" /> operation. It will be passed to the callback of the asynchronous operation for identification.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="userToken" /> already exists and is in use.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerNearMe" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance has no endpoints set on it.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactCompleted">
      <summary>Raised whenever a <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContact(System.Net.PeerToPeer.Collaboration.PeerNearMe)" /> method has completed.</summary>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact(System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Removes the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
      <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to remove from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerContact" /> is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact(System.Net.PeerToPeer.PeerName)">
      <summary>Removes the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the specified <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the local peer.</summary>
      <param name="peerName">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to remove from the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> could not be found in the contact manager.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerName" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has had <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.Dispose" /> previously called on it and cannot be used for future operations.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="Overload:System.Net.PeerToPeer.Collaboration.ContactManager.DeleteContact" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContact(System.Net.PeerToPeer.PeerName)">
      <summary>Returns the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object for the specified <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the supplied <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</returns>
      <param name="peerName">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerName" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Contact not found in <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.Unable to obtain the contact for the supplied <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts">
      <summary>Returns a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection" /> that contains all contacts within the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the remote peer.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection" /> that contains all contacts within the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> of the remote peer. If the contact manager is empty, then a collection of size zero (0) is returned.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> in this peer contact collection.</exception>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ContactManager.LocalContact">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> representing the local peer.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance representing the local peer. </returns>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.NameChanged">
      <summary>Raised whenever the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.ObjectChanged">
      <summary>Raised whenever an object within a contactâs registered <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> objects has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> object has been disposed.</exception>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.PresenceChanged">
      <summary>Raised whenever the presence status of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.ContactManager.SubscriptionListChanged">
      <summary>Raised when the list of subscribed contacts changes.</summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ContactManager.SynchronizingObject">
      <summary>When this property value is set, all events not fired as the result of an asynchronous operation will have the associated event handlers called back on the thread that created the specific <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject" />.</summary>
      <returns>Object that implements the <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> interface and is used by instances of this type for event handler synchronization on the thread that created it.</returns>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Updates the data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <param name="peerContact">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to be updated.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> not found in <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerContact" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.UpdateContact(System.Net.PeerToPeer.Collaboration.PeerContact)" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.ContactManager.CreateContactCompleted" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.CreateContactCompletedEventArgs.PeerContact">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> for which the event was raised.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.InviteCompletedEventArgs">
      <summary>Provides qualifying information to a callback method when an <see cref="E:System.Net.PeerToPeer.Collaboration.Peer.InviteCompleted" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.InviteCompletedEventArgs.InviteResponse">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> to an invitation operation.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> to the invitation. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.NameChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.PeerEndPoint.NameChanged" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.NameChangedEventArgs.Name">
      <summary>Gets the new <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name" /> for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>Gets the new <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name" /> for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.NameChangedEventArgs.PeerContact">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.NameChangedEventArgs.PeerEndPoint">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> associated with the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> associated with the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.PeerObject.ObjectChanged" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs.PeerChangeType">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> that specifies the type of change that has occurred to a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> or <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> that specifies the type of change that has occurred. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs.PeerContact">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> for which object information has changed.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on which <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> information has changed.  If the endpoint is not associated with a contact, null is returned. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs.PeerEndPoint">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> for which object information has changed.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on which <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> information has changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs.PeerObject">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> that has been added, deleted or updated.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> that has been added, deleted, or updated. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.Peer">
      <summary>This class represents a remote peer. </summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> type. </summary>
      <param name="serializationInfo">Reference to the object that holds the data needed to deserialize this instance.</param>
      <param name="streamingContext">Context that provides the means for deserializing the data. Also referred to as the source of the serialized data.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.Equals(System.Net.PeerToPeer.Collaboration.Peer)">
      <summary>Performs a case-sensitive comparison of the current <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> and the specified peer.</summary>
      <returns>Returns true if the supplied <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> instance has the same <see cref="P:System.Net.PeerToPeer.Collaboration.Peer.PeerEndPoints" /> as this peer instance, otherwise false. This method also returns false if the peer parameter is null.</returns>
      <param name="other">A <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> instance to compare to this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the target <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" />. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.GetObjects">
      <summary>Gets the collection of data objects from a local cache.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> collection for the peer or endpoint specified by this instance.</returns>
      <exception cref="T:System.InvalidOperationException">The caller is not subscribed to the endpoint or has not yet called <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" />.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The method is unable to complete due to an error in the underlying Peer Collaboration infrastructure.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.GetObjects(System.Guid)">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object associated with the supplied <see cref="T:System.Guid" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object associated with the supplied <see cref="T:System.Guid" />. If an object is not found, a collection of size zero (0) is returned.</returns>
      <param name="objectId">The <see cref="T:System.Guid" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object to be retrieved from the collection</param>
      <exception cref="T:System.ArgumentNullException">The object ID is null.</exception>
      <exception cref="T:System.InvalidOperationException">The caller is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> or has not yet called <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> against it.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred when getting object information from the peer.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.GetPresenceInfo(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Gets the available presence information for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>Returns a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> object which contains presence information for an available endpoint if it is available; otherwise it is null.</returns>
      <param name="peerEndPoint">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> for which to retrieve presence information.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="peerEndPoint" /> does not contain a valid endpoint.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerEndPoint" /> is null.</exception>
      <exception cref="T:System.ObjectDisposedException">This object has been disposed and cannot be used in current peer operations.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred while retrieving presence information from the peer.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.Invite">
      <summary>Sends an invitation to a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> to start a specific <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer that received the invitation. </returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred during the invitation process.The currently executing application is not registered with the Peer Collaboration infrastructure.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.Invite(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[])">
      <summary>Sends an invitation to a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> to start a specific <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer that received the invitation.</returns>
      <param name="applicationToInvite">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the invitation is sent.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.  The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <exception cref="T:System.ArgumentException">The application is not registered for collaboration.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="invitationData" /> is larger than 16,384 bytes.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred during the invitation process.The currently executing application is not registered with the peer collaboration infrastructure.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[],System.Object)">
      <summary>Begins an asynchronous invitation operation which sends an invitation to a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> to start a specific <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <param name="applicationToInvite">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the invitation is sent.</param>
      <param name="message">A message to send to the remote peer along with the application invitation. The maximum size of this message is 255 Unicode characters.</param>
      <param name="invitationData">A user defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation for identification. This required parameter must be unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentException">The application is not registered with the collaboration infrastructure.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userToken" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="invitationData" /> is larger than 16,384 bytes.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred during the invitation process.The currently executing application is not registered with the collaboration infrastructure.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.InviteAsync(System.Object)">
      <summary>Begins an asynchronous invitation operation which sends an invitation to a <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> to start a specific <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation for identification. This required parameter must be unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userToken" /> is null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An error occurred during the invitation process.The currently executing application is not registered with the collaboration infrastructure. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.InviteAsyncCancel(System.Object)">
      <summary>Cancels the invitation that was sent with the <see cref="M:System.Net.PeerToPeer.Collaboration.Peer.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[],System.Object)" /> method. </summary>
      <param name="userToken">User defined object to pass to the callback of the <see cref="M:System.Net.PeerToPeer.Collaboration.Peer.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[],System.Object)" /> operation for identification. This required parameter must be unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userToken" /> parameter cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">An asynchronous invitation is not outstanding.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.Peer.InviteCompleted">
      <summary>Raised when the invitation process for a remote peer has completed.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.Peer.IsOnline">
      <summary>Gets a value specifying if the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> is currently 'online'.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> is online at any of the endpoints associated with it; otherwise false. Unless specified, the default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.OnInviteCompleted(System.Net.PeerToPeer.Collaboration.InviteCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.Peer.InviteCompleted" /> event.</summary>
      <param name="e">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> object containing the event data to be passed to delegates associated with the <see cref="E:System.Net.PeerToPeer.Collaboration.Peer.InviteCompleted" /> event.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.Peer.PeerEndPoints">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" />.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.Peer.SynchronizingObject">
      <summary>When this property value is set, all events not fired as the result of an asynchronous operation will have the associated event handlers called back on the thread that created the specific <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject" />.</summary>
      <returns>Object that implements the <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> interface and is used by instances of this type for event handler synchronization on the thread that created it. </returns>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class instance with the data required to serialize the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance. A derived type must call the base type <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.Peer.ToString">
      <summary>Returns a <see cref="T:System.String" /> representing the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" />.</summary>
      <returns>
        <see cref="T:System.String" /> representing the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerApplication">
      <summary>Represents an application that is available for use with the Peer Collaboration infrastructure.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> type.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.#ctor(System.Guid,System.String,System.Byte[],System.String,System.String,System.Net.PeerToPeer.Collaboration.PeerScope)">
      <summary>Initializes a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance with the supplied application ID, description, scope, and data elements.</summary>
      <param name="id">A user-specified <see cref="T:System.Guid" /> used to identify the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</param>
      <param name="description">A <see cref="T:System.String" /> description of the peer application.</param>
      <param name="data">A binary data object to associate with the peer application, such as a small image.</param>
      <param name="path">The local file system path to the peer application.</param>
      <param name="commandLineArgs">Command-line arguments for starting the peer application.</param>
      <param name="peerScope">The scope in which the application will be registered for peer collaboration.</param>
      <exception cref="T:System.ArgumentException">Length of the binary data object cannot be less than one or greater than 16k.<paramref name="id" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> type with the data required for serialization.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</param>
      <param name="streamingContext">The serialization destination associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</param>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerApplication.ApplicationChanged">
      <summary>This event is raised whenever a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> is added, updated or deleted by a remote peer on a subscribed endpoint.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.CommandLineArgs">
      <summary>Gets or sets command-line parameters to use when initiating a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>
        <see cref="T:System.String" /> that represents application-specific command-line parameters to use when initiating the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Data">
      <summary>Gets or sets data associated with the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance.</summary>
      <returns>Array of <see cref="T:System.Byte" /> data that contain a binary object to associate with the peer application. This is commonly a small image or XML blob. </returns>
      <exception cref="T:System.ArgumentException">The size of this binary data object is either less than 0 or greater than 4,096 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Description">
      <summary>Gets or sets a Unicode <see cref="T:System.String" /> that describes the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>
        <see cref="T:System.String" /> value that describes the application. Unless specified, the default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.Dispose">
      <summary>Releases resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.Equals(System.Net.PeerToPeer.Collaboration.PeerApplication)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance provided has matching data, else false. This method also returns false if <paramref name="other" /> is null. </returns>
      <param name="other">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> to the specified <see cref="T:System.Object" />.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> is equal to the specified object instance, else false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Object" /> has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects are considered equal.</summary>
      <returns>Returns true if the specified objects have the same globally unique application <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> and <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Description" />, else false.</returns>
      <param name="objA">The first <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />    to compare.</param>
      <param name="objB">The second <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.GetHashCode">
      <summary>Returns the hash code for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance.</summary>
      <returns>A 32-bit signed integer hash code used to compare instances of this type.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id">
      <summary>Gets or sets the user-defined <see cref="T:System.Guid" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <returns>
        <see cref="T:System.Guid" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance. Unless specified, the default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.OnApplicationChanged(System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerApplication.ApplicationChanged" /> event.</summary>
      <param name="appChangedArgs">The <see cref="T:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs" /> object that contains data to be passed to delegates for the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerApplication.ApplicationChanged" /> event.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Path">
      <summary>Gets or sets the path that designates where the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> executable file resides on the local file system.</summary>
      <returns>
        <see cref="T:System.String" /> that represents the file path. Unless explicitly specified, the default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.PeerScope">
      <summary>Gets or sets the scope in which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> is registered for collaboration.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" /> object that specifies the scope in which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> will collaborate. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplication.SynchronizingObject">
      <summary>When this property value is set, all events not fired as the result of an asynchronous operation will have the associated event handlers called back on the thread that created the specific <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject" />.</summary>
      <returns>Object that implements the <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> interface and is used by instances of this type for event handler synchronization on the thread that created it.</returns>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data required to serialize the target <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplication.ToString">
      <summary>Returns a string that contains the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> and <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Description" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance.</summary>
      <returns>A string that contains the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> and <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Description" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance, separated by a space.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection">
      <summary>Represents a container for <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> elements. An instance of this type is returned by the <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" /> static method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerApplication)">
      <summary>Inserts a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> element into the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> at the specified index or key.</summary>
      <param name="index">The zero-based index of the element to replace</param>
      <param name="item">The new value for the element at the specified index</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection.SetItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerApplication)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection.ToString">
      <summary>Returns a <see cref="T:System.String" /> representing the current value of each <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object, separated by commas.</summary>
      <returns>A <see cref="T:System.String" /> representing the current value of each <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" />, separated by commas.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo">
      <summary>Represents the launch information required by a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> that has initiated in response to a peer collaboration invitation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo.Data">
      <summary>Gets or sets application-defined binary data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> invitation.</summary>
      <returns>An array of bytes that containing the data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> invitation. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo.Message">
      <summary>Get or set a message associated with the response to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> invitation. </summary>
      <returns>A text message associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> invitation. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo.PeerApplication">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the invitation was sent. </summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> invitation was sent. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo.PeerContact">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> that sent the invitation.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> that sent the invitation. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo.PeerEndPoint">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> from which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> invitation was sent.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> from which the invitation was sent. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType">
      <summary>Specifies the type of registration to perform for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> or <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> registration.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType.CurrentUser">
      <summary>The application or object is being registered only for the user associated with the calling peer</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType.AllUsers">
      <summary>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" />  or <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> is being registered for all peers of the application host</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerChangeType">
      <summary>Specifies the type of change that occurred for a peer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerChangeType.Added">
      <summary>A peer object, endpoint or application has been added.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerChangeType.Deleted">
      <summary>A peer object, endpoint or application has been deleted.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerChangeType.Updated">
      <summary>A peer object, endpoint or application has been updated.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration">
      <summary>Interacts with the Peer Collaboration infrastructure. Many of the core collaboration scenarios begin with this class.</summary>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.ApplicationLaunchInfo">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo" /> object that contains information needed when an application is started due to a collaboration request from a remote peer.</summary>
      <returns>If the application was started due to an invitation, a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationLaunchInfo" /> object that contains both information about the peer that sent the application invitation and the invitation itself is returned; otherwise, null is returned.  The default value for this property is null.</returns>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.ContactManager">
      <summary>Gets the persistent store that contains all <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> objects for remote peers.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> object that contains all peer contact objects for remote peers. The default value for this property is null.</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.DeleteObject(System.Net.PeerToPeer.Collaboration.PeerObject)">
      <summary>Deregisters a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> associated with the calling peer.</summary>
      <param name="peerObject">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to deregister. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerObject" /> parameter cannot be null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.DeleteObject(System.Net.PeerToPeer.Collaboration.PeerObject)" /> operation.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.GetLocalRegisteredApplications">
      <summary>Gets all <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects that are registered on the local machine.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> that contains all applications that are registered on the local machine. If an application is not found, a collection of size zero (0) is returned.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate the application registered to this peer. Please make sure that all applications have valid registry values.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.GetLocalRegisteredApplications(System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType)">
      <summary>Gets a collection of all <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects that are registered on the local machine for the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType" />.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> that contains all applications of the specified <paramref name="type" /> that are registered on the local machine. If an application is not found, a collection of size zero (0) is returned.</returns>
      <param name="type">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType" /> to return for the specified application.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="type" /> parameter is not set to a known value in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType" /> enumeration.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate the application registered to this peer. Please make sure that all applications have valid registry values.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.GetLocalSetObjects">
      <summary>Obtains all <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances registered by the calling peer with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> infrastructure on this machine.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> which contains all the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances registered by the calling peer with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> infrastructure on the local machine.If registered <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances are not discovered on the local machine, a collection of size zero (0) is returned.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate all available <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.GetPeersNearMe">
      <summary>Returns a collection of all the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> endpoints currently signed in on the network subnet of the calling peer.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection" /> that contains all the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> endpoints currently signed into the 'Near Me' scope. If peers are not discovered on the subnet, a collection of size zero (0) is returned.</returns>
      <exception cref="T:System.InvalidOperationException">The peer is not signed in to the 'Near Me' scope.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">An invalid value was returned when this method attempted to enumerate all known People Near Me endpoints.</exception>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalApplicationChanged">
      <summary>Raised when a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> for the local peer on the local host has changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalEndPointName">
      <summary>Gets or sets the name of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> associated with the calling peer.</summary>
      <returns>
        <see cref="T:System.String" /> that contains the name associated with the calling peer's endpoint (provided as the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name" /> property). The default value for this property is null.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to set <see cref="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalEndPointName" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalNameChanged">
      <summary>Raised when the name of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on the local host for the local peer has changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalObjectChanged">
      <summary>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> for the local peer on the local host has changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalPresenceChanged">
      <summary>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> of the local peer on the local host has changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalPresenceInfo">
      <summary>Gets or sets the presence for the calling peer within the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> infrastructure.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> that contains presence information for the calling peer that has registered for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> session. </returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> cannot specify null</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus" /> is offlineUnable to set  <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /></exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.RegisterApplication(System.Net.PeerToPeer.Collaboration.PeerApplication,System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType)">
      <summary>Registers the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for a collaboration session with the calling peer.</summary>
      <param name="application">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which to register the calling peer within the associated scope (global, local, and link-local).</param>
      <param name="type">The type of registration to perform.  The application may be registered for just the calling peer or for all peers using the machine.</param>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Path" /> property on the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object passed to <paramref name="application" /> is null.The peer application instance provided has the same globally unique <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> as an application which is already registered.  The existing registration must be unregistered before a new application can be registered with the provided identifier.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> and <paramref name="type" /> parameters cannot be null.  Both parameters must be specified.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The type parameter is not set to a known value in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType" /> enumeration.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.RegisterApplication(System.Net.PeerToPeer.Collaboration.PeerApplication,System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType)" /> operation cannot be completed until the caller has signed-in to the infrastructure.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SetObject(System.Net.PeerToPeer.Collaboration.PeerObject)">
      <summary>Registers a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> associated with the calling peer.</summary>
      <param name="peerObject">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to register. </param>
      <exception cref="T:System.ArgumentException">Object already registered</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> cannot be null.<see cref="P:System.Net.PeerToPeer.Collaboration.PeerObject.Id" /> cannot be null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SetObject(System.Net.PeerToPeer.Collaboration.PeerObject)" /> operation could not be completed.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignIn(System.Net.PeerToPeer.Collaboration.PeerScope)">
      <summary>Signs the peer into the collaboration infrastructure with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" />.</summary>
      <param name="peerScope">The scope the peer is using to join the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> activity.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="peerScope" /> is set to <see cref="F:System.Net.PeerToPeer.Collaboration.PeerScope.None" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="peerScope" /> parameter contains an invalid enumeration value.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignIn(System.Net.PeerToPeer.Collaboration.PeerScope)" /> operation could not be completed.</exception>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignInScope">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" /> to which the calling peer can publish presence, capability and object information.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" /> object that specifies the scope in which the calling peer will participate. The default value for this property is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignOut(System.Net.PeerToPeer.Collaboration.PeerScope)">
      <summary>Signs the peer out of the specified scope. </summary>
      <param name="peerScope">Scope enumeration specified by <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="peerScope" /> parameter contains an invalid enumeration value.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignOut(System.Net.PeerToPeer.Collaboration.PeerScope)" /> operation could not be completed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SynchronizingObject">
      <summary>Gets or sets the event handler callback object for all event handlers.</summary>
      <returns>An object with <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> implemented on it, to be used for application thread synchronization. The default value for this property is null. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.UnregisterApplication(System.Net.PeerToPeer.Collaboration.PeerApplication,System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType)">
      <summary>Deregisters the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> infrastructure.</summary>
      <param name="application">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> to deregister for the calling peer.</param>
      <param name="type">The type of deregistration to perform for either the calling peer or for all peers that exist on the machine.</param>
      <exception cref="T:System.ArgumentException">The globally unique <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the specified application does not exist or is empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="application" /> or <paramref name="type" /> parameter is set to null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="type" /> parameter is not set to a known value in <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType" />.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The  <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.UnregisterApplication(System.Net.PeerToPeer.Collaboration.PeerApplication,System.Net.PeerToPeer.Collaboration.PeerApplicationRegistrationType)" /> operation could not be completed.</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission">
      <summary>Specifies the values that define or are used in <see cref="N:System.Net.PeerToPeer.Collaboration" /> object permissions. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" />. The initial <see cref="T:System.Security.Permissions.PermissionState" /> for this instance is passed when the constructor is called.</summary>
      <param name="state">One of the values in the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy">
      <summary>Creates and returns a copy of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" />.</summary>
      <returns>A <see cref="T:System.Object" /> that contains a copy of the current instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)">
      <summary>Represents the XML object model for encoding security objects. </summary>
      <param name="e">The XML encoding to use to reconstruct the permission.</param>
      <exception cref="T:System.ArgumentException">The parameter is not a valid permission element.The parameter does not contain a valid type or class.The parameter's version number is not supported. </exception>
      <exception cref="T:System.ArgumentNullException">The parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> and the specified <paramref name="target" /> permission.</summary>
      <returns>A new permission that represents the intersection of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> and the specified <paramref name="target" /> permission. This new permission is a null reference (Nothing in Visual Basic) if the intersection is empty. </returns>
      <param name="target">Permission to <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)" /> with the current permission. It must be of the same type as the current permission.</param>
      <exception cref="T:System.ArgumentException">The target parameter is not a null reference (Nothing in Visual Basic) and is not an instance of the same class as the current permission. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> is a subset of the specified <paramref name="target" /> permission.</summary>
      <returns>True if the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> is a subset of the specified permission; otherwise, false. </returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
      <exception cref="T:System.ArgumentException">The parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted">
      <summary>Returns a value specifying whether the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> is unrestricted.</summary>
      <returns>True if the current permission is unrestricted; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml">
      <summary>Creates an XML encoding of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> and its current state.</summary>
      <returns>An XML encoding of the permission, including any state information. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> and the specified <paramref name="target" /> permission.</summary>
      <returns>A new permission that represents the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)" /> of the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> and the specified permission.</returns>
      <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
      <exception cref="T:System.ArgumentException">The parameter is a null reference (Nothing in Visual Basic). </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute">
      <summary>Allows security actions for <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> to be applied to code using declarative security. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute" /> class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />.</summary>
      <param name="action">Specifies a <see cref="T:System.Security.Permissions.SecurityAction" /> value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.CreatePermission">
      <summary>Creates and returns a new <see cref="T:System.Security.IPermission" />.</summary>
      <returns>A new <see cref="T:System.Security.IPermission" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerContact">
      <summary>Represents a peer for which a user has retrieved extended information.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>No public constructor is defined for this class.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</param>
      <param name="streamingContext">The serialization destination associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</param>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerContact.ApplicationChanged">
      <summary>This event is raised whenever an application associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.Credentials">
      <summary>Gets or sets the X509Certificate (public key) for the peer identified by this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</summary>
      <returns>The X509Certificate (public key) for the peer identified by this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance. The default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.DisplayName">
      <summary>Gets or sets a string which represents the display name of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>
        <see cref="T:System.String" /> which represents the display name of this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. Unless explicitly specified, the default value for all properties is null for reference types.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object.</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.EmailAddress">
      <summary>Gets or sets the email address associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>
        <see cref="T:System.Net.Mail.MailAddress" /> object that contains the email address associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Equals(System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance provided has matching data, else false.</returns>
      <param name="other">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance to the specified object.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance provided has matching data, else false. This method also returns false if the passed parameter is null.</returns>
      <param name="obj">Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance to the specified object.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instances are considered equal. </summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instances provided have matching data, else false.</returns>
      <param name="objA">The first <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.FromXml(System.String)">
      <summary>Creates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance based on provided XML data.</summary>
      <returns>A string that represents the XML object model for encoding the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</returns>
      <param name="peerContactXml">The XML encoding used to reconstruct the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. </param>
      <exception cref="T:System.ArgumentNullException">Parameter cannot be null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.FromXml(System.String)" /> operationParameter is not a valid <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)" /> object.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications">
      <summary>Retrieves the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects that were registered by the remote peer into the local cache.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> from the local cache. If associated applications are not found for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />, a collection of size zero (0) is returned.</returns>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications(System.Guid)">
      <summary>Gets the collection of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects with the specified <see cref="T:System.Guid" /> from the local cache. </summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> from the local cache. If no applications are found with the specified <paramref name="applicationId" />, a collection of size zero (0) is returned.</returns>
      <param name="applicationId">The <see cref="T:System.Guid" /> of the peer application to be retrieved.</param>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. If applications are not associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />, a collection of size zero (0) is returned.</returns>
      <param name="peerEndPoint">Contains endpoint information associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications(System.Net.PeerToPeer.Collaboration.PeerEndPoint,System.Guid)">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" /> associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>The collection of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> objects associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. If applications identified by the ID are not found for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />, or if the ID for the endpoint is null or invalid, a collection of size zero (0) is returned.</returns>
      <param name="peerEndPoint">The endpoint associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplicationCollection" />.</param>
      <param name="applicationId">Contains application information associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetApplications" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetHashCode">
      <summary>Returns the hash code for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <param name="info">Holds the serialized data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object.</param>
      <param name="context">Contains the destination for the serialized stream associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetObjects(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> registered by the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> and stored in the local cache.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. If no applications are associated with the endpoint, a collection of size zero (0) is returned.</returns>
      <param name="peerEndPoint">The endpoint from which to retrieve objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="Overload:System.Net.PeerToPeer.Collaboration.PeerContact.GetObjects" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.GetObjects(System.Net.PeerToPeer.Collaboration.PeerEndPoint,System.Guid)">
      <summary>Gets the collection of peer objects registered by the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> and registered in the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> identified by the specified <see cref="T:System.Guid" />.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> associated with the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. If no applications are associated with the endpoint, a collection of size zero (0) is returned.</returns>
      <param name="peerEndPoint">The endpoint from which to retrieve objects.</param>
      <param name="objectId">The <see cref="T:System.Guid" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to be retrieved.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The calling peer is not subscribed to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.The calling peer has not yet called the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> method.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="Overload:System.Net.PeerToPeer.Collaboration.PeerContact.GetObjects" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Invite">
      <summary>Sends an invitation to join into peer collaboration sponsored by the sender.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer who received the invitation. </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the current application does not exist.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Invite(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[])">
      <summary>Sends the specified invitation to join into the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> sponsored by the sender.  </summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer who received the invitation.</returns>
      <param name="applicationToInvite">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> for which the invitation is sent.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.</param>
      <param name="invitationData">A user-defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the current application does not exist or is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Invite(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Sends an invitation to a specific endpoint to join into peer collaboration with the sender of the invitation. </summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer endpoint who received the invitation. </returns>
      <param name="peerEndPoint">The endpoint to receive the invitation.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.Invite" /> operation.The currently executing application is not registered with the peer collaboration infrastructure.<see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.EndPoint" /> specified by <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Invite(System.Net.PeerToPeer.Collaboration.PeerEndPoint,System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[])">
      <summary>Sends the specified invitation to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> to join into the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> application sponsored by the sender.</summary>
      <returns>A <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> from the peer who received the invitation. </returns>
      <param name="peerEndPoint">The endpoint or remote peer to which to send the invitation.</param>
      <param name="applicationToInvite">The application for which the invitation is sent.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.  The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user-defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <exception cref="T:System.ArgumentException">Endpoint in <paramref name="PeerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object cannot be empty.<see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> and <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> objects cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the current application does not exist or is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[],System.Object)">
      <summary>Begins an asynchronous invitation operation for the specified peer endpoints to join the specified collaboration <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> sponsored by the sender of the invitation.</summary>
      <param name="applicationToInvite">The application for which the invitation is sent.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.  The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user-defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation. Also used to identify the asynchronous operation for cancellation. This parameter must be specified and is unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="UserToken" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Guid" /> for the current application does not exist or is empty.Endpoint collection is empty or null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerEndPoint,System.Object)">
      <summary>Begins an asynchronous invitation operation for the specified peer endpoint to join a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> application sponsored by the sender of the invitation. The invitation is identified using the specified <see cref="T:System.Object" />.</summary>
      <param name="peerEndPoint">The endpoint or remote peer to which to send the invitation.</param>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation. Also used to identify the asynchronous operation for cancellation. This parameter must be specified and is unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="UserToken" /> cannot be null.Endpoint in <paramref name="peerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="peerEndPoint" /> object cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Guid" /> for the current application does not exist or is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerEndPoint,System.String,System.Byte[],System.Net.PeerToPeer.Collaboration.PeerApplication,System.Object)">
      <summary>Begins an asynchronous invitation operation for the specified <paramref name="peerEndPoint" /> to join the specified collaboration <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> sponsored by the sender of the invitation.</summary>
      <param name="peerEndPoint">The endpoint or remote peer to which to send the invitation.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.  The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user defined data blob to associate with the invitation.  Its size can be no more than 16,384 bytes.</param>
      <param name="applicationToInvite">The application for which the invitation is sent.</param>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation. Also used to identify the asynchronous operation for cancellation. This parameter must be specified and is unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="UserToken" /> cannot be null.Endpoint specified by <paramref name="peerEndPoint" /> cannot be null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> and <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> objects cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the current application does not exist or is empty.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.InviteAsync(System.Object)">
      <summary>Begins an asynchronous invitation operation for an endpoint to join a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> application sponsored by the sender of the invitation. The invitation is identified using the specified <see cref="T:System.Object" />.</summary>
      <param name="userToken">User-defined object to pass to the callback of the asynchronous operation. Also used to identify the asynchronous operation for cancellation. This parameter must be specified and is unique across all asynchronous invitation operations in progress.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="UserToken" /> cannot be null.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="P:System.Net.PeerToPeer.Collaboration.PeerApplication.Id" /> for the current application does not exist or is empty.<see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> cannot be null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.IsSubscribed">
      <summary>Gets or sets a value specifying whether the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> is subscribed or unsubscribed to an endpoint. Alternatively, this property gets or sets a value specifying whether the current peer host or hosting application has subscribed or unsubscribed to this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>True if this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> is subscribed to this endpoint, false if the contact has not subscribed or has unsubscribed.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.Nickname">
      <summary>Gets or sets a string which represents the <paramref name="Nickname" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>
        <see cref="T:System.String" /> which represents the nickname of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. The default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerContact.ObjectChanged">
      <summary>This event is signaled whenever a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> has changed.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnApplicationChanged(System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.ApplicationChanged" /> event.</summary>
      <param name="appChangedArgs">The <see cref="T:System.Net.PeerToPeer.Collaboration.ApplicationChangedEventArgs" /> object to be passed to delegates associated with the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.ApplicationChanged" /> event.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnObjectChanged(System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.ObjectChanged" /> event when a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> is added, updated or removed by a remote peer.</summary>
      <param name="objChangedArgs">Type of object change specified by <see cref="T:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs" />.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnPresenceChanged(System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.PresenceChanged" /> event when the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> of a peer has changed.</summary>
      <param name="presenceChangedArgs">The <see cref="T:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs" /> object to be passed to delegates associated with the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.PresenceChanged" /> event.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.OnSubscribeCompleted(System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs)">
      <summary>Raises the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeCompleted" /> event. </summary>
      <param name="e">The <see cref="T:System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs" /> or <see cref="T:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs" /> object associated with the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeCompleted" /> event.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerEndPoints">
      <summary>Gets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> associated with this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> collection associated with this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. The default value for this property is null.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.PeerName">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.PeerName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>
        <see cref="T:System.String" /> which represents the <see cref="T:System.Net.PeerToPeer.PeerName" /> of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />. Unless explicitly specified, the default value for all properties is null for reference types.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerContact.PresenceChanged">
      <summary>This event is raised whenever the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> has changed its presence status.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe">
      <summary>Subscribes the calling peer to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />, and as a result, the peer will receive any future <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> events associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <exception cref="T:System.InvalidOperationException">The calling peer is not signed in to People Near Me.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.Subscribe" /> operation. Failure may be due to an inability to establish a TCP connection to the peer.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeAllowed">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> is exposed to the collaboration events associated with the peer or application that has ownership of the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" /> in which this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object resides.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.SubscriptionType" /> enumeration value that specifies whether this <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> is exposed to collaboration events belonging to the peer host or hosting application. Unless explicitly specified, the default value for all properties is null for reference types.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeAsync(System.Object)">
      <summary>Asynchronously subscribes the calling peer to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />, and as a result, the peer will receive any future <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> events associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <param name="userToken">A user-defined <see cref="T:System.Object" /> that contains information about the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeAsync(System.Object)" /> operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="UserToken" /> cannot be null.</exception>
      <exception cref="T:System.InvalidOperationException">The calling peer is not signed in to People Near Me.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Duplicate <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeAsync(System.Object)" /> identifier.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeCompleted">
      <summary>Raised when a subscription operation has completed.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.DisplayName" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <returns>
        <see cref="T:System.String" /> representation of the <see cref="P:System.Net.PeerToPeer.Collaboration.PeerContact.DisplayName" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.ToXml">
      <summary>Serializes the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> to an XML string for persistent storage or network transfer.</summary>
      <returns>An XML encoding of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">Unable to complete <see cref="M:System.Net.PeerToPeer.Collaboration.PeerContact.ToXml" /> operation.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContact.Unsubscribe">
      <summary>Removes a subscription to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> and as a result the calling peer no longer receives <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaboration" /> events associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />.</summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection">
      <summary>Represents a container for <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> elements. An instance of this type is returned by the <see cref="M:System.Net.PeerToPeer.Collaboration.ContactManager.GetContacts" /> static method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContactCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Inserts a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> element into the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContactCollection" /> at the specified index or key.</summary>
      <param name="index">The zero-based index of the element to replace</param>
      <param name="item">The new value for the element at the specified index</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> provided is null</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContactCollection.SetItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerContact)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> provided is null</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerContactCollection.ToString">
      <summary>Returns a Unicode <see cref="T:System.String" /> representing the current value of each <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />, separated by commas.</summary>
      <returns>Unicode <see cref="T:System.String" /> representing the current value of each <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" />, separated by commas.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint">
      <summary>Represents the location of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />, or <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> instance specified with a unique network address configuration by describing the current instance of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> or <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> within the Peer-to-Peer Collaboration Infrastructure.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.#ctor">
      <summary>Generates a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.#ctor(System.Net.IPEndPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> class with the peer-associated endpoint contained in <see cref="T:System.Net.IPEndPoint" />.</summary>
      <param name="endPoint">The endpoint associated with the peer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.#ctor(System.Net.IPEndPoint,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> class with the peer-associated endpoint contained in <see cref="T:System.Net.IPEndPoint" /> and a string specifying <paramref name="endPointName" />.</summary>
      <param name="endPoint">The endpoint associated with the peer.</param>
      <param name="endPointName">Specifies the name associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="endPoint" /> argument specifies null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="endPoint" /> specified is not a valid IPv6 endpoint.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance with the associated parameters required for serialization.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</param>
      <param name="streamingContext">The serialization destination associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.EndPoint">
      <summary>Gets or sets the <see cref="T:System.Net.IPEndPoint" /> that contains the IP address associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <returns>IP address associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The specified <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.EndPoint" /> endpoint is not a valid IPv6 endpoint.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Equals(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance provided has matching data, else false.</returns>
      <param name="other">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> to the specified <see cref="T:System.Object" />.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> is equal to the specified object instance, else false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to test for equality.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> objects are considered equal.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instances provided have matching data, else false.</returns>
      <param name="objA">The first <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />    to compare.</param>
      <param name="objB">The second <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.GetHashCode">
      <summary>Returns the hash code for a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <returns>A 32-bit signed integer hash code used to compare instances of this type.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class instance with the data required to serialize the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance. A derived type must call the base type <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.Name">
      <summary>Gets or sets a <see cref="T:System.String" /> that represents a displayed name for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <returns>
        <see cref="T:System.String" /> representing the display name of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerEndPoint.NameChanged">
      <summary>Signaled when the name associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object changes.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.OnNameChanged(System.Net.PeerToPeer.Collaboration.NameChangedEventArgs)">
      <summary>Called when a change occurs to the <paramref name="PeerName" /> specified by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <param name="nameChangedArgs">Specifies the type of change that has occurred to the <paramref name="PeerName" />.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject">
      <summary>When this property value is set, all events not fired as the result of an asynchronous operation will have the associated event handlers called back on the thread that created the specific <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.SynchronizingObject" />.</summary>
      <returns>Object that implements the <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> interface and is used by instances of this type for event handler synchronization on the thread that created it.</returns>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance with the data obtained from the serialized source.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPoint.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> instance.</summary>
      <returns>
        <see cref="T:System.String" /> representing a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection">
      <summary>Represents a container for elements of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object. An instance of this type is returned by the <see cref="T:System.Net.PeerToPeer.Collaboration.Peer" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection.Equals(System.Net.PeerToPeer.Collaboration.PeerEndPointCollection)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> to the specified object.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> is equal to the object specified.</returns>
      <param name="other"> The object to compare against.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Inserts a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> element into the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> at the specified index or key.</summary>
      <param name="index">The zero-based index of the element to replace</param>
      <param name="item">The new value for the element at the specified index</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection.SetItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> element at the specified index.</summary>
      <param name="index"> The zero-based index of the element to replace</param>
      <param name="item">The new value for the element at the specified index</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection.ToString">
      <summary>Returns a <see cref="T:System.String" /> representing the current value for each instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />, separated by commas.</summary>
      <returns>Unicode <see cref="T:System.String" /> representing the current value of each instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse">
      <summary>Represents a response received from a remote peer to an invitation sent via the <see cref="M:System.Net.PeerToPeer.Collaboration.Peer.Invite" /> or <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Invite" /> method.</summary>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse.PeerInvitationResponseType">
      <summary>Gets or sets the response to the invitation from the remote peer specified by <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType" /> class.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType" /> object containing the response from an invitation to a remote peer.</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType">
      <summary>Specifies the responses a local peer can receive from an application driven collaboration invitation requests.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType.Declined">
      <summary>The peer declined the invitation request.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType.Accepted">
      <summary>The peer accepted the invitation request.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType.Expired">
      <summary>The invitation request has expired.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerNearMe">
      <summary>Represents a peer located by the "People Near Me" infrastructure.  </summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance with the associated parameters required for serialization.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />.</param>
      <param name="streamingContext">The serialization destination associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.AddToContactManager">
      <summary>Generates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> from the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object and associates it with the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</returns>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The Collaboration infrastructure has failed to create and associate a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> with the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.AddToContactManager(System.String,System.String,System.Net.Mail.MailAddress)">
      <summary>Generates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> with the associated descriptive parameters from the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object and associates it with the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object associated with a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> containing descriptive parameters.</returns>
      <param name="displayName">The display name assigned to the newly created contact.</param>
      <param name="nickname">The <paramref name="nickname" /> to assign to the newly created contact.</param>
      <param name="emailAddress">
        <see cref="T:System.Net.Mail.MailAddress" /> object that specifies the email address to assign to the newly created contact.</param>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The Collaboration infrastructure has failed to create or update a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> with the <see cref="T:System.Net.PeerToPeer.Collaboration.ContactManager" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.CreateFromPeerEndPoint(System.Net.PeerToPeer.Collaboration.PeerEndPoint)">
      <summary>Generates a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object from the provided <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />. </returns>
      <param name="peerEndPoint">
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object that specifies the endpoint associated with the peer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="peerEndPoint" /> is null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The referenced <see cref="P:System.Net.PeerToPeer.Collaboration.PeerEndPoint.EndPoint" /> specifies null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Equals(System.Net.PeerToPeer.Collaboration.PeerNearMe)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance provided has matching data, else false.</returns>
      <param name="other">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance to test for equality.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> argument is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance to the specified object.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance provided has matching data, else false.</returns>
      <param name="obj">The object to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instances are considered equal.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instances provided have matching data, else false.</returns>
      <param name="objA">The first <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <returns>A 32-bit signed integer hash code used to compare instances of this type.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />. A derived type must call the base type <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> method.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.InternalRefreshData(System.Object)">
      <summary>Initiates a network operation to retrieve the application, object and presence data specific to a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <param name="state">Specifies the application, object, and presence data relevant to a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance. </param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Invite">
      <summary>Sends an invitation to join a peer collaboration application to a remote peer.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> object containing the relevant <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType" /> value specified by the remote peer.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> specified by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> is null or has a value count of '0' associated endpoints.A <see cref="T:System.Guid" /> has not been associated with the current peer-to-peer application.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.Invite(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[])">
      <summary>Sends an invitation to join a peer collaboration application to a remote peer that includes data that describes or specifies the application invite.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponse" /> object containing the relevant <see cref="T:System.Net.PeerToPeer.Collaboration.PeerInvitationResponseType" /> value specified by the remote peer.</returns>
      <param name="applicationToInvite">Specifies the relevant Peer Collaboration application represented by a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> instance.</param>
      <param name="message">A message to send to the remote peer along with the application invitation.  The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user defined data blob to associate with the invitation.  Size is limited to 16K (16,384 bytes).</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="applicationToInvite" /> argument specifies null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The <paramref name="applicationToInvite" /> argument specifies an empty <see cref="T:System.Guid" />.The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> specified by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPointCollection" /> is null or has a value count of '0' associated endpoints.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.InviteAsync(System.Net.PeerToPeer.Collaboration.PeerApplication,System.String,System.Byte[],System.Object)">
      <summary>Receives an invitation response from a peer regarding an invitation to a peer collaboration application.</summary>
      <param name="applicationToInvite">Specifies the relevant Peer Collaboration application information represented by a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object.</param>
      <param name="message">A message to send to the remote peer along with the application invitation. The message can be no more than 255 Unicode characters.</param>
      <param name="invitationData">A user defined data blob to associate with the invitation.  Size is limited to 16K.</param>
      <param name="userToken">User-defined object passed to the callback of the asynchronous operation for identification. This required parameter must be unique across all asynchronous invitation operations still in-progress.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="applicationToInvite" /> argument specifies an empty <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="userToken" /> argument specifies null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.InviteAsync(System.Object)">
      <summary>Receives an invitation response from a peer regarding joining a peer collaboration application.</summary>
      <param name="userToken">User-defined object passed to the callback of the asynchronous operation for identification. This required parameter must be unique across all asynchronous invitation operations still in-progress.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object has been disposed.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="userToken" /> argument specifies null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">This <see cref="T:System.Net.PeerToPeer.Collaboration.PeerApplication" /> object does not specify a valid <see cref="T:System.Guid" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerNearMe.Nickname">
      <summary>Gets or sets a <see cref="T:System.String" /> representing the Nickname of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</summary>
      <returns>
        <see cref="T:System.String" /> that represents the Nickname of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.OnRefreshDataCompleted(System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs)">
      <summary>Signals the <see cref="E:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataCompleted" /> event.</summary>
      <param name="e">Event data contained in a <see cref="T:System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs" /> instance.</param>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerNearMe.PeerNearMeChanged">
      <summary>Signaled when a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance is found, no longer available, or the associated <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object information has changed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData">
      <summary>Initiates a network operation to retrieve the application, object and presence data specific to a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataAsync(System.Object)">
      <summary>Initiates a network operation to retrieve the application, object and presence data specific to a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <param name="userToken">User-specified state object that is passed to the delegate when this method completes the operation.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userToken" /> argument specifies null.</exception>
      <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">The prior <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataAsync(System.Object)" /> call has not yet completed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataCompleted">
      <summary>Signaled when the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshData" /> or <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataAsync(System.Object)" /> operation for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance is completed.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance with the data obtained from the serialized source.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.ToString">
      <summary>Returns <see cref="T:System.String" /> that represents a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance.</summary>
      <returns>
        <see cref="T:System.String" /> representing the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerNearMeChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.PeerNearMe.PeerNearMeChanged" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerNearMeChangedEventArgs.PeerChangeType">
      <summary>Gets the type of change to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object that has occurred.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> object that specifies the type of change to the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> instance that occurred.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerNearMeChangedEventArgs.PeerNearMe">
      <summary>Gets the instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> that has changed.</summary>
      <returns>The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object that has changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection">
      <summary>Represents a container for elements of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object. An instance of this type is returned by the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.GetPeersNearMe" /> static method.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerNearMe)">
      <summary>Inserts a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> element into the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection" /> at the specified index or key.</summary>
      <param name="index">The zero-based index in which the element resides.</param>
      <param name="item">The new value for the element in the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection.SetItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerNearMe)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> element at the specified index.</summary>
      <param name="index">The zero-based index in which the element resides.</param>
      <param name="item">The new value for the element in the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerNearMeCollection.ToString">
      <summary>Returns a string representation of the current value for each instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />, separated by commas.</summary>
      <returns>Unicode string representing the current value for each instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerObject">
      <summary>Represents a new instance of the PeerObject class with an auto-generated <see cref="T:System.Guid" />.  </summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.#ctor">
      <summary>Initializes a new default instance of the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.#ctor(System.Guid,System.Byte[],System.Net.PeerToPeer.Collaboration.PeerScope)">
      <summary>Initializes a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance with the associated scope and data. </summary>
      <param name="Id">The user-defined identifier for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</param>
      <param name="data">A data blob that contains information about the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />. This parameter is limited a size that is less than or equal to 16K.</param>
      <param name="peerScope">Specifies the scope in which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> is to be registered. </param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to this method is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance with the associated parameters required for serialization.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</param>
      <param name="streamingContext">The serialization destination associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerObject.Data">
      <summary>Gets or sets descriptive data associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance for a Peer Collaboration application.</summary>
      <returns>Descriptive data (such as text or a small image) associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance has been disposed.</exception>
      <exception cref="T:System.ArgumentException">One of the arguments provided to this method is not valid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.Dispose">
      <summary>Releases all resources utilized by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> and optionally releases the managed resources.</summary>
      <param name="disposing">Set to true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.Equals(System.Net.PeerToPeer.Collaboration.PeerObject)">
      <summary>Compares a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance provided has matching data, else false.</returns>
      <param name="other">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance specified by <paramref name="other" /> has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.Equals(System.Object)">
      <summary>Compares the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to the specified object.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />instance provided has matching data, else false.</returns>
      <param name="obj"> The object to test for equality.</param>
      <exception cref="T:System.ObjectDisposedException">The object specified by <paramref name="obj" /> has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.Equals(System.Object,System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances are considered equal.</summary>
      <returns>Returns true if the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instances provided have matching data, else false.</returns>
      <param name="objA">The first <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to compare.</param>
      <param name="objB">The second <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> to compare.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance.</summary>
      <returns>A 32-bit signed integer hash code used to compare instances of this type.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the specified <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerObject.Id">
      <summary>Gets or sets a <see cref="T:System.Guid" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance.</summary>
      <returns>
        <see cref="T:System.Guid" /> associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Net.PeerToPeer.Collaboration.PeerObject.ObjectChanged">
      <summary>Signaled when a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.OnObjectChanged(System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs)">
      <summary>Signaled when a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance with the specified ID is added, updated or removed by a remote peer. </summary>
      <param name="objChangedArgs">Type of object change specified by <see cref="T:System.Net.PeerToPeer.Collaboration.ObjectChangedEventArgs" />.</param>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerObject.PeerScope">
      <summary>Gets or sets the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerScope" /> in which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance is registered.</summary>
      <returns>PeerScope that specifies the scope in which the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> is registered.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerObject.SynchronizingObject">
      <summary>Gets or sets the object used to marshal the event handler calls that are issued as a result of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance change.</summary>
      <returns>Object with an implementation of the <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> interface. This object is used for event handler synchronization.</returns>
      <exception cref="T:System.ObjectDisposedException">The calling object has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the current <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance with the data obtained from the serialized source.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination for the serialization.</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObject.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance.</summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance has been disposed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection">
      <summary>Represents a container for elements of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObjectCollection.InsertItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerObject)">
      <summary>Inserts a new <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> element into the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObjectCollection" /> at the specified index or key.</summary>
      <param name="index">The zero-based index in which the element resides.</param>
      <param name="item">The new value for the element in the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObjectCollection.SetItem(System.Int32,System.Net.PeerToPeer.Collaboration.PeerObject)">
      <summary>Replaces the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" /> element at the specified index.</summary>
      <param name="index">The zero-based index in which the element resides.</param>
      <param name="item">The new value for the element in the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> argument is null.</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerObjectCollection.ToString">
      <summary>Returns a string representation of the current value for each instance of <see cref="T:System.Net.PeerToPeer.Collaboration.PeerObject" />, separated by commas.</summary>
      <returns>String representing the current value for each instance of PeerObject, separated by commas.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo">
      <summary>Represents the presence information of a peer.</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo.#ctor">
      <summary>Initializes a new default instance of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo.#ctor(System.Net.PeerToPeer.Collaboration.PeerPresenceStatus,System.String)">
      <summary>Initializes an instance of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> object that includes a Unicode string describing the presence status the local peer.</summary>
      <param name="presenceStatus"> Status of the Peer.</param>
      <param name="description"> Description of the presence state.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo.DescriptiveText">
      <summary>Gets or sets a Unicode string further describing the presence status for the local peer.</summary>
      <returns>Unicode string describing the presence status of a peer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo.PresenceStatus">
      <summary>Gets or sets the presence status of the local peer. </summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus" /> enumeration that specifies the presence status of a peer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus">
      <summary>Specifies the presence status of a peer.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.Offline">
      <summary>Specifies that the peer is Offline.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.OutToLunch">
      <summary>Specifies that the peer is currently "Out to Lunch" and unable to respond.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.Away">
      <summary>Specifies that the peer is "Away" and unable to respond.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.BeRightBack">
      <summary>Specifies that the peer has stepped away from the application and will participate soon.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.Idle">
      <summary>Specifies that the peer is idling.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.Busy">
      <summary>Specifies that the peer is "Busy" and does not wish to be disturbed.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.OnThePhone">
      <summary>Specifies that the peer is currently on the phone and does not wish to be disturbed.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerPresenceStatus.Online">
      <summary>Specifies that the peer is actively participating in the Peer Collaboration network.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerScope">
      <summary>Specifies the current network scope of a peer.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerScope.None">
      <summary>Specifies that a peer not sign-in to a Peer Collaboration scope. Passing this value to the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaboration.SignIn(System.Net.PeerToPeer.Collaboration.PeerScope)" /> method generates no result.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerScope.NearMe">
      <summary>Specifies sign-in to the 'NearMe' scope. This scope facilitates connections to all peers on the same subnet via Peer Collaboration Methods.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerScope.Internet">
      <summary>Specifies sign-in to the 'Internet' scope. This scope facilitates connections with all contacts in the Contact Manager.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.PeerScope.All">
      <summary>Specifies sign-in to the 'NearMe' scope and 'Internet' scope.</summary>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.ContactManager.PresenceChanged" /> or <see cref="E:System.Net.PeerToPeer.Collaboration.PeerCollaboration.LocalPresenceChanged" /> event occurs.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs.PeerChangeType">
      <summary>Specifies the type of change that has occurred to the presence status of a peer.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> object containing data that specifies the type of change that has occurred to the presence status of a peer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs.PeerContact">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> on which the presence information has changed. </summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object associated with the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on which the presence information has changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs.PeerEndPoint">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on which the presence information has changed.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> on which the presence information has changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.PresenceChangedEventArgs.PeerPresenceInfo">
      <summary>Specifies the changed presence information of a <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> as well as a string provided by <see cref="T:System.Net.PeerToPeer.Collaboration.PeerPresenceInfo" /> describing the updated presence status.</summary>
      <returns>Changed presence information for <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> and a string describing the updated presence status.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs">
      <summary>Provides qualifying information to the <see cref="M:System.Net.PeerToPeer.Collaboration.PeerNearMe.OnRefreshDataCompleted(System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs)" /> method when <see cref="E:System.Net.PeerToPeer.Collaboration.PeerNearMe.RefreshDataCompleted" /> events occur.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.RefreshDataCompletedEventArgs.PeerEndPoint">
      <summary>Specifies the updated <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" />.</summary>
      <returns>The updated <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object containing the endpoint data of a peer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.PeerContact.SubscribeCompleted" /> event is signaled.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs.PeerContact">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> for which the subscription was requested. </summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object for which a subscription was requested.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.SubscribeCompletedEventArgs.PeerNearMe">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> for which the subscription is requested. </summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerNearMe" /> object for which a subscription was requested.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs">
      <summary>Provides qualifying information to a callback method when a <see cref="E:System.Net.PeerToPeer.Collaboration.ContactManager.SubscriptionListChanged" /> event is signaled.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs.PeerChangeType">
      <summary>Specifies the type of change that has occurred.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerChangeType" /> enumeration that specifies the type of change performed on the Subscription List.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs.PeerContact">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> for which the Subscription List was changed.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerContact" /> object for which the Subscription List was changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Net.PeerToPeer.Collaboration.SubscriptionListChangedEventArgs.PeerEndPoint">
      <summary>Specifies the <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> for which the subscription notification was received.</summary>
      <returns>
        <see cref="T:System.Net.PeerToPeer.Collaboration.PeerEndPoint" /> object for which the Subscription List was changed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.SubscriptionType">
      <summary>Specifies if a remote peer subscribed to the local peer can receive event notifications.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.SubscriptionType.Blocked">
      <summary>Specifies that a remote peer can subscribe to the local peer, but will not receive event notifications.</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.Collaboration.SubscriptionType.Allowed">
      <summary>Specifies that a remote peer can subscribe to the local peer as well as receive event notifications.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.Activation.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Activation</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.ServiceHostingEnvironment">
      <summary>Provides information about the current hosting environment in which  services are running. </summary>
    </member>
    <member name="P:System.ServiceModel.ServiceHostingEnvironment.AspNetCompatibilityEnabled">
      <summary>Gets a value that indicates whether this service is running in the context of the ASP.NET HTTP application pipeline.</summary>
      <returns>true if ASP.NET compatibility is enabled for the current AppDomain; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.ServiceModel.ServiceHostingEnvironment.EnsureServiceAvailable(System.String)">
      <summary>Ensures that a service is activated at the provided virtual path.</summary>
      <param name="virtualPath">The virtual path to the service.</param>
      <exception cref="T:System.ServiceModel.EndpointNotFoundException">A service at given virtual path cannot be found.</exception>
      <exception cref="T:System.ServiceModel.ServiceActivationException">The service fails to activate successfully.</exception>
      <exception cref="T:System.InvalidOperationException">The service is not running in the hosted environment.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="virtualPath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="virtualPath" /> is an absolute URI or not valid.</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceHostingEnvironment.MultipleSiteBindingsEnabled">
      <summary>Gets or sets a value that specifies whether multiple site bindings are allows for the service host.</summary>
      <returns>true if multiple site bindings are enables, otherwise false.</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.HostedTransportConfiguration">
      <summary>Provides transport-specific configuration for transport implementations hosted in Windows Process Activation Service (WAS).</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.HostedTransportConfiguration.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.HostedTransportConfiguration" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Activation.HostedTransportConfiguration.GetBaseAddresses(System.String)">
      <summary>When overridden in a derived class, retrieves the base address of the host.</summary>
      <returns>The <see cref="T:System.Uri" /> that contains the base address of the host.</returns>
      <param name="virtualPath">The virtual path to the service.</param>
    </member>
    <member name="T:System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute">
      <summary>Specifies which build provider is used for server XAML (.xamlx) documents.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.ServiceActivationBuildProviderAttribute" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activation.ServiceBuildProvider">
      <summary>Defines a set of properties and methods for generating source code within the ASP.NET build environment. This class is the  implementation of <see cref="T:System.Web.Compilation.BuildProvider" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.ServiceBuildProvider" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activation.ServiceBuildProvider.CodeCompilerType">
      <summary>Represents the compiler type used by a build provider to generate source code for a custom file type.</summary>
      <returns>A read-only compiler type that represents the code generator, code compiler, and compiler settings used to build source code for the virtual path.</returns>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates source code for the virtual path of the build provider, and adds the source code to a specified assembly builder.</summary>
      <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceBuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)">
      <summary>Generates a string to be persisted in the compiled assembly.</summary>
      <returns>A string to be persisted in the build environment.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value that indicates actions required when a virtual path is built.</summary>
      <returns>The actions required after the virtual path is built within the ASP.NET build environment.</returns>
      <param name="results">The compilation results for the build provider's virtual path.</param>
    </member>
    <member name="P:System.ServiceModel.Activation.ServiceBuildProvider.VirtualPathDependencies">
      <summary>Represents a collection of virtual paths that must be built before the build provider generates code.</summary>
      <returns>The virtual paths that this instance of the build provider is dependent on.</returns>
    </member>
    <member name="T:System.ServiceModel.Activation.ServiceHostFactory">
      <summary>Factory that provides instances of <see cref="T:System.ServiceModel.ServiceHost" /> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.ServiceHostFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
      <summary>Creates a <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses and initializes it with specified data.</summary>
      <returns>A <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses.</returns>
      <param name="constructorString">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase" /> instance being constructed by the factory. </param>
      <param name="baseAddresses">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseAddress" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">There is no hosting context provided or <paramref name="constructorString" /> is null or empty.</exception>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
      <summary>Creates a <see cref="T:System.ServiceModel.ServiceHost" /> for a specified type of service with a specific base address. </summary>
      <returns>A <see cref="T:System.ServiceModel.ServiceHost" /> for the type of service specified with a specific base address.</returns>
      <param name="serviceType">Specifies the type of service to host. </param>
      <param name="baseAddresses">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</param>
    </member>
    <member name="T:System.ServiceModel.Activation.ServiceRoute">
      <summary>Enables the creation of service routes over HTTP in support of REST scenarios.</summary>
    </member>
    <member name="M:System.ServiceModel.Activation.ServiceRoute.#ctor(System.String,System.ServiceModel.Activation.ServiceHostFactoryBase,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.ServiceRoute" /> class with the specified route prefix, service host factory, and service type.</summary>
      <param name="routePrefix">The route prefix.</param>
      <param name="serviceHostFactory">An instance of the <see cref="T:System.ServiceModel.Activation.ServiceHostFactory" /> class.</param>
      <param name="serviceType">The service type.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory">
      <summary>A factory that provides instances of <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory.CreateServiceHost(System.String,System.Uri[])">
      <summary>Creates a new service host. </summary>
      <returns>A service host base instance.</returns>
      <param name="constructorString">The name of the XAML file that defines the workflow service or the service type.</param>
      <param name="baseAddresses">A list of addresses that serves as a reference point for other addresses.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory.CreateWorkflowServiceHost(System.Activities.Activity,System.Uri[])">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class using the specified <see cref="T:System.Activities.Activity" /> and base addresses.</summary>
      <returns>A workflow service host instance.</returns>
      <param name="activity">The workflow definition.</param>
      <param name="baseAddresses">A list of addresses that serves as a reference point for other addresses.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Activation.WorkflowServiceHostFactory.CreateWorkflowServiceHost(System.ServiceModel.Activities.WorkflowService,System.Uri[])">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class with the specified <see cref="T:System.ServiceModel.Activities.WorkflowService" /> and base addresses.</summary>
      <returns>A workflow service host instance.</returns>
      <param name="service">The workflow service that becomes the host.</param>
      <param name="baseAddresses">A list of addresses that serves as a reference point for other addresses.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.Channels.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Channels</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement">
      <summary>The binding element that specifies the message encoding as a stream of bytes and has the option to specify the character encoding.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.#ctor(System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement" /> class with the specified quota.</summary>
      <param name="quota">The constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel factory stack on the client that creates a specified type of channel for a specified context.</summary>
      <returns>A channel factory of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The binding context for the channel.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds the channel listener on the service that accepts a specified type of channel for a specified context.</summary>
      <returns>A channel listener of type <paramref name="TChannel" /> for the specified context.</returns>
      <param name="context">The binding context for the listener.</param>
      <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the current binding can build a factory for a specified type of channel and context.</summary>
      <returns>true if the specified channel factory stack can be built on the service; otherwise, false.</returns>
      <param name="context">The binding context for the channel.</param>
      <typeparam name="TChannel">The type of channel the channel factory produces.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the current binding can build a listener for a specified type of channel and context.</summary>
      <returns>true if the specified channel listener stack can be built on the service; otherwise, false.</returns>
      <param name="context">The binding context for the listener.</param>
      <typeparam name="TChannel">The type of channel the channel listener accepts.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.Clone">
      <summary>Creates a new <see cref="T:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement" /> object initialized from the current one.</summary>
      <returns>A binding element with property values equal to those of the current element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>Creates a factory for byte stream message encoders that employ the SOAP and WS-Addressing versions and the character encoding specified by the current encoding binding element.</summary>
      <returns>The message encoder factory that this binding element creates.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.MessageVersion">
      <summary>Gets or sets the SOAP message and WS-Addressing versions that are used or expected.</summary>
      <returns>The message version that is used or expected.</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.ReaderQuotas">
      <summary>Gets or sets constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element.</summary>
      <returns>The complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following remarks section.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.ShouldSerializeMessageVersion">
      <summary>Returns a value that indicates whether the <see cref="P:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.MessageVersion" /> property has changed from its default value and should be serialized.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.ShouldSerializeReaderQuotas">
      <summary>Returns a value that indicates whether the <see cref="P:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.ReaderQuotas" /> property has changed from its default value and should be serialized.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement.ReaderQuotas" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement">
      <summary>Enables construction of a configuration element that defines the settings for a byte stream message encoding element.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the content of a specified binding element to the current <see cref="T:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement" /> object.</summary>
      <param name="bindingElement">The binding element whose settings are to be applied to this configuration element.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement.BindingElementType">
      <summary>Gets the type of the <see cref="T:System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement" />.</summary>
      <returns>A configuration element type.</returns>
    </member>
    <member name="M:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the content from the specified configuration section to the current <see cref="T:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement" /> object.</summary>
      <param name="from">The content being copied.</param>
    </member>
    <member name="P:System.ServiceModel.Configuration.ByteStreamMessageEncodingElement.ReaderQuotas">
      <summary>Gets a <see cref="T:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement" /> configuration element that defines the constraints on the complexity of SOAP messages, which can be processed by endpoints configured with this encoding.</summary>
      <returns>A configuration element.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.Discovery.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Discovery</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.Discovery.AnnouncementClient">
      <summary>Used by services to send discovery announcement messages. Clients can use the discovery mechanism, specifically the corresponding <see cref="T:System.ServiceModel.Discovery.AnnouncementService" /> class to listen and act on the announcement messages. An announcement message contains information about the service such as its fully-qualified contract name, any scopes that the service is operating in as well as any custom metadata the service wants to send. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.#ctor(System.ServiceModel.Discovery.AnnouncementEndpoint)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" /> class with the specified <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" />.</summary>
      <param name="announcementEndpoint">The announcement endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" /> class with the specified endpoint configuration.</summary>
      <param name="endpointConfigurationName">The name of the endpoint configuration to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOffline(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Causes an offline announcement message (Bye) to be sent with the specified endpoint discovery metadata.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOfflineAsync(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Causes an offline announcement message (Bye) to be sent asynchronously with the specified endpoint discovery metadata.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOfflineAsync(System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.Object)">
      <summary>Causes an offline announcement message (Bye) to be sent asynchronously with the specified endpoint discovery metadata and user-defined state.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOfflineCompleted">
      <summary>Occurs when an asynchronous offline announcement (Bye) completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOnline(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Causes an online announcement message (Hello) to be sent asynchronously.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOnlineAsync(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Causes an online announcement (Hello) message to be sent asynchronously with the specified endpoint discovery metadata.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOnlineAsync(System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.Object)">
      <summary>Causes an online announcement (Hello) message to be sent asynchronously with the specified endpoint discovery metadata and user-defined state.</summary>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.AnnounceOnlineCompleted">
      <summary>Occurs when an asynchronous online announcement (Hello) completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.BeginAnnounceOffline(System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Causes an offline announcement (Bye) message to be sent asynchronously with the specified endpoint discovery metadata and user-defined state. The specified <see cref="T:System.AsyncCallback" /> is called when the operation completes.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> instance.</returns>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.BeginAnnounceOnline(System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Causes an online announcement (Hello) message to be sent asynchronously with the specified endpoint discovery metadata and user-defined state. The specified <see cref="T:System.AsyncCallback" /> is called when the operation completes.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> instance.</returns>
      <param name="discoveryMetadata">The endpoint discovery metadata.</param>
      <param name="callback">The <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.ChannelFactory">
      <summary>Gets the channel factory associated with the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.ChannelFactory" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.ClientCredentials">
      <summary>Gets the client credentials associated with the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ClientCredentials" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.Close">
      <summary>Closes the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.EndAnnounceOffline(System.IAsyncResult)">
      <summary>Waits for a pending asynchronous offline announcement to complete.</summary>
      <param name="result">A reference to the pending asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.EndAnnounceOnline(System.IAsyncResult)">
      <summary>Waits for a pending asynchronous online announcement to complete.</summary>
      <param name="result">A reference to the pending asynchronous operation.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.Endpoint">
      <summary>Gets the <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> associated with the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.InnerChannel">
      <summary>Gets the inner channel associated with the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
      <returns>An <see cref="T:System.ServiceModel.IClientChannel" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.MessageSequenceGenerator">
      <summary>Gets or sets the message sequence generator associated with the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.Open">
      <summary>Opens the <see cref="T:System.ServiceModel.Discovery.AnnouncementClient" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#IDisposable#Dispose"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Abort"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Close"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)"></member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Closed"></member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Closing"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)"></member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Faulted"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Open"></member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)"></member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Opened"></member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#Opening"></member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementClient.System#ServiceModel#ICommunicationObject#State"></member>
    <member name="T:System.ServiceModel.Discovery.AnnouncementEndpoint">
      <summary>A standard endpoint that is used by services to send announcement messages. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementEndpoint.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementEndpoint.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> class with the specified binding and address.</summary>
      <param name="binding">The binding.</param>
      <param name="address">The address.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> class that supports the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" />.</summary>
      <param name="discoveryVersion">The discovery version to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> class that supports the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> with the specified binding and address.</summary>
      <param name="discoveryVersion">The discovery version to use.</param>
      <param name="binding">The binding to use.</param>
      <param name="address">The address of the endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementEndpoint.DiscoveryVersion">
      <summary>Gets the discovery version this announcement endpoint supports.</summary>
      <returns>A  <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementEndpoint.MaxAnnouncementDelay">
      <summary>Gets or sets the maximum announcement delay.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> instance that contains the maximum announcement delay.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.AnnouncementEventArgs">
      <summary>Used to pass announcement event arguments.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementEventArgs.EndpointDiscoveryMetadata">
      <summary>Gets the service metadata sent by the service as part of its announcement message from this <see cref="T:System.ServiceModel.Discovery.AnnouncementEventArgs" /> instance.</summary>
      <returns>The discoverable service metadata.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.AnnouncementEventArgs.MessageSequence">
      <summary>Gets the discovery message sequence from this <see cref="T:System.ServiceModel.Discovery.AnnouncementEventArgs" /> instance.</summary>
      <returns>The discovery message sequence.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.AnnouncementService">
      <summary>A self-hosted implementation of the announcement service. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementService" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementService" /> class with the specified length of the duplicate message history.</summary>
      <param name="duplicateMessageHistoryLength">The maximum number of message hashes used by the transport for identifying duplicate messages. The default value is 0.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementService.OfflineAnnouncementReceived">
      <summary>Occurs when an offline announcement (Bye) message is received,</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.OnBeginOfflineAnnouncement(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Starts the processing of incoming offline announcement (Bye) messages.</summary>
      <returns>The status of the pending asynchronous request.</returns>
      <param name="messageSequence">The position of this message in the sequence for the current notification.</param>
      <param name="endpointDiscoveryMetadata">An object that provides endpoint metadata, for example scopes, listen URI, contract names, and endpoint address.</param>
      <param name="callback">The method to call when the asynchronous operation is complete.</param>
      <param name="state">Infrastructure-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.OnBeginOnlineAnnouncement(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Starts the processing of incoming online announcement (Hello) messages.</summary>
      <returns>The status of the pending asynchronous request.</returns>
      <param name="messageSequence">The position of this message in the sequence for the current notification.</param>
      <param name="endpointDiscoveryMetadata">An object that provides endpoint metadata, for example scopes, listen URI, contract names, and endpoint address.</param>
      <param name="callback">The method to call when the asynchronous operation is complete.</param>
      <param name="state">Infrastructure-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.OnEndOfflineAnnouncement(System.IAsyncResult)">
      <summary>Users that inherit from <see cref="T:System.ServiceModel.Discovery.AnnouncementService" /> to implement a custom announcement listener service must override this method and begin to process incoming offline announcement (Bye) messages here.</summary>
      <param name="result">An asynchronous result returned by the corresponding <see cref="M:System.ServiceModel.Discovery.DiscoveryProxyBase.OnBeginOnlineAnnouncement(System.ServiceModel.Discovery.AnnouncementMessage,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.AnnouncementService.OnEndOnlineAnnouncement(System.IAsyncResult)">
      <summary>Users that inherit from <see cref="T:System.ServiceModel.Discovery.AnnouncementService" /> to implement a custom announcement listener service must override this method and begin to process incoming offline announcement (Bye) messages here.</summary>
      <param name="result">An asynchronous result returned by the corresponding <see cref="M:System.ServiceModel.Discovery.DiscoveryProxyBase.OnBeginOnlineAnnouncement(System.ServiceModel.Discovery.AnnouncementMessage,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.AnnouncementService.OnlineAnnouncementReceived">
      <summary>Occurs when an online announcement (Hello) is received.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryClient">
      <summary>Allows you to discover available services. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.#ctor(System.ServiceModel.Discovery.DiscoveryEndpoint)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" /> class.</summary>
      <param name="discoveryEndpoint">The discovery endpoint to use when sending discovery messages.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" /> class with the specified endpoint configuration.</summary>
      <param name="endpointConfigurationName">The endpoint configuration name to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.CancelAsync(System.Object)">
      <summary>Cancels a pending asynchronous operation.</summary>
      <param name="userState">A user specified state object that is passed to the <see cref="M:System.ServiceModel.Discovery.DiscoveryClient.FindAsync" /> method or one of the <see cref="M:System.ServiceModel.Discovery.DiscoveryClient.ResolveAsync" /> methods. It identifies the pending asynchronous operation to cancel.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClient.ChannelFactory">
      <summary>Gets the channel factory for the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" />.</summary>
      <returns>A channel factory.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClient.ClientCredentials">
      <summary>Gets the client credentials for the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" />.</summary>
      <returns>The client credentials for the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.Close">
      <summary>Closes the discovery client.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClient.Endpoint">
      <summary>Gets the endpoint used to send discovery messages.</summary>
      <returns>The endpoint used to send discovery messages.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.Find(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Sends a request to find services that match the specified criteria.</summary>
      <returns>The discoverable metadata of the matching service endpoints.</returns>
      <param name="criteria">The criteria for finding services.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.FindAsync(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Begins an asynchronous find operation with the specified criteria.</summary>
      <param name="criteria">The criteria for finding services.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.FindAsync(System.ServiceModel.Discovery.FindCriteria,System.Object)">
      <summary>Begins an asynchronous find operation with the specified criteria and user defined state object.</summary>
      <param name="criteria">The criteria for finding services.</param>
      <param name="userState">A user specified object to identify the asynchronous find operation.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.FindCompleted">
      <summary>Occurs when the entire find operation completes.</summary>
    </member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.FindProgressChanged">
      <summary>Occurs every time the client receives a response from a particular service. </summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClient.InnerChannel">
      <summary>The channel used to send discovery messages.</summary>
      <returns>The channel used to send discovery messages. </returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.Open">
      <summary>Opens the <see cref="T:System.ServiceModel.Discovery.DiscoveryClient" />.</summary>
    </member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.ProxyAvailable">
      <summary>Occurs when a multicast suppression message is received from a discovery proxy in response to the find or resolve operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.Resolve(System.ServiceModel.Discovery.ResolveCriteria)">
      <summary>Begins an asynchronous resolve operation with the specified criteria.</summary>
      <returns>The discoverable metadata of the service endpoint at the specified address, or null if no service endpoint is found at the specified address.</returns>
      <param name="criteria">The criteria for matching a service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.ResolveAsync(System.ServiceModel.Discovery.ResolveCriteria)">
      <summary>Begins an asynchronous resolve operation with the specified criteria.</summary>
      <param name="criteria">The criteria for matching a service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.ResolveAsync(System.ServiceModel.Discovery.ResolveCriteria,System.Object)">
      <summary>Begins an asynchronous resolve operation with the specified criteria and user-defined state object.</summary>
      <param name="criteria">The criteria for matching a service endpoint.</param>
      <param name="userState">A user specified object to identify the asynchronous resolve operation.</param>
    </member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.ResolveCompleted">
      <summary>Occurs when an asynchronous resolve operation is completed.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#IDisposable#Dispose">
      <summary>An implementation of the <see cref="M:System.IDisposible.Dispose" /> method.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Abort"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Close"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)"></member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Closed"></member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Closing"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)"></member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Faulted"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Open"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)"></member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Opened"></member>
    <member name="E:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#Opening"></member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClient.System#ServiceModel#ICommunicationObject#State"></member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryClientBindingElement">
      <summary>A binding element that can be added to a  client application to take advantage of the Discovery client channel. The Discovery client channel allows a  client application to access a discoverable service without knowing the endpoint address in advance. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClientBindingElement" /> class with default values.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.#ctor(System.ServiceModel.Discovery.DiscoveryEndpointProvider,System.ServiceModel.Discovery.FindCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClientBindingElement" /> class with the specified endpoint provider and service finding criteria.</summary>
      <param name="discoveryEndpointProvider">An object that gets a discovery endpoint.</param>
      <param name="findCriteria">An object that contains the information required to search for a service provider.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Initializes a channel factory for producing channels of a specific type from the binding context.</summary>
      <returns>The channel factory of the specified type initialized from the binding context.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of channel factory to create.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Building a channel listener is not supported by the Discovery client channel. This method can be overridden to initialize a channel listener to accept channels of a specified type from the binding context.</summary>
      <returns>The channel listener of the specified type initialized from the context.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of channel listener to create.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the current binding can build a channel factory stack on the client.</summary>
      <returns>true if the specified channel factory stack can be built on the client; otherwise false.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of channel for which the factory is being tested.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Because building a channel listener is not supported by the Discovery client channel, this method always returns false. It may be extended to return a value that indicates whether the binding element can build a listener for a specific type of channel.</summary>
      <returns>true if the <see cref="T:System.ServiceModel.Channels.IChannelListener`1" /> of the specified type can be built by the binding element, otherwise false.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of channel the listener accepts.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.Clone">
      <summary>Creates a copy of the binding element.</summary>
      <returns>A copy of the binding element.</returns>
    </member>
    <member name="F:System.ServiceModel.Discovery.DiscoveryClientBindingElement.DiscoveryEndpointAddress">
      <summary>A static temporary address that acts as a placeholder until the actual service address is resolved. </summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClientBindingElement.DiscoveryEndpointProvider">
      <summary>Gets the discovery endpoint provider.</summary>
      <returns>The endpoint provider.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryClientBindingElement.FindCriteria">
      <summary>Gets or sets the find criteria.</summary>
      <returns>The find criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryClientBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns an object of the requested type, if present in the binding stack.</summary>
      <returns>An object of the specified type if present, otherwise null.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of object to retrieve.</typeparam>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryEndpoint">
      <summary>A standard discovery endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpoint.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpoint.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> class with the specified binding and endpoint address.</summary>
      <param name="binding">The binding.</param>
      <param name="endpointAddress">The endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.ServiceModel.Discovery.ServiceDiscoveryMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> class with the specified discovery version and mode.</summary>
      <param name="discoveryVersion">An enumerated value representing one of the versions of the WS-Discovery protocols.</param>
      <param name="discoveryMode">An enumerated value representing one of the modes used to send discovery messages.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.ServiceModel.Discovery.ServiceDiscoveryMode,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> class with the specified discovery version, mode, binding, and endpoint address.</summary>
      <param name="discoveryVersion">An enumerated value representing one of the versions of the WS-Discovery protocols.</param>
      <param name="discoveryMode">An enumerated value representing one of the modes used to send discovery messages.</param>
      <param name="binding">The binding elements that specify the protocols, transports, and message encoders used for communication between clients and services.</param>
      <param name="endpointAddress">The unique address of the discovery endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryEndpoint.DiscoveryMode">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryMode" /> for the endpoint.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMode" /> enumeration values.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryEndpoint.DiscoveryVersion">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> for the endpoint.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> enumeration values.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryEndpoint.MaxResponseDelay">
      <summary>Gets or sets the maximum <see cref="T:System.Timespan" /> within which all of the ProbeMatches for a service that respond to a probe operation are sent.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> instance that contains the maximum time span within which all of the ProbeMatches for a service that respond to a probe operation are sent. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryEndpointProvider">
      <summary>Provides a discovery endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpointProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpointProvider" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryEndpointProvider.GetDiscoveryEndpoint">
      <summary>Gets the discovery endpoint.</summary>
      <returns>The discovery endpoint.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryMessageSequence">
      <summary>Represents the AppSequence header defined in the WS-Discovery protocol. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.CanCompareTo(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Gets a value that indicates whether the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance is comparable to the current <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>true if the two discovery message sequences are comparable; otherwise false.</returns>
      <param name="other">The discovery message sequence to compare.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.CompareTo(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Compares the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance with the current <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>0 if the two discovery message sequences are equal, a negative number if the message number of <paramref name="other" /> is greater than the message number of the current discovery sequence.</returns>
      <param name="other">The discovery message sequence to compare.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.Equals(System.Object)">
      <summary>Determines if the specified object is equal to the current <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>true if the specified object is equal to the current discovery message sequence.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.Equals(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Determines if the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance is comparable to the current <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>true if the two discovery message sequences are comparable; otherwise, false.</returns>
      <param name="other">The discovery message sequence to compare.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.GetHashCode">
      <summary>Gets a hash code for the current <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>A hash code value.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryMessageSequence.InstanceId">
      <summary>Gets the instance ID.</summary>
      <returns>The instance ID.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryMessageSequence.MessageNumber">
      <summary>Gets the message number.</summary>
      <returns>The message number.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.op_Equality(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Determines if two specified instances of <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> are equal.</summary>
      <returns>true if the two discovery message sequence instances are equal; otherwise false.</returns>
      <param name="messageSequence1">A discovery message sequence.</param>
      <param name="messageSequence2">A discovery message sequence.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.op_Inequality(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Determines if two specified instances of <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> are not equal.</summary>
      <returns>true if the two discovery message sequence instances are not equal; otherwise false.</returns>
      <param name="messageSequence1">A discovery message sequence.</param>
      <param name="messageSequence2">A discovery message sequence.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryMessageSequence.SequenceId">
      <summary>Gets the sequence ID.</summary>
      <returns>The sequence ID.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequence.ToString">
      <summary>Creates a string representation of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>The discovery message sequence.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator">
      <summary>A helper class that creates <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator.#ctor(System.Int64,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" /> class with the specified instance ID and sequence ID.</summary>
      <param name="instanceId">The instance ID.</param>
      <param name="sequenceId">The sequence ID.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator.Next">
      <summary>Creates the next <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> object.</summary>
      <returns>The next <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryOperationContextExtension">
      <summary>An operation context extension used to make various configuration items available to the discovery runtime.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryOperationContextExtension.DiscoveryMode">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryMode" />.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryMode" /> enumeration values.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryOperationContextExtension.DiscoveryVersion">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" />.</summary>
      <returns>The discovery version.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryOperationContextExtension.MaxResponseDelay">
      <summary>Gets a <see cref="T:System.TimeSpan" /> that specifies the maximum response delay.</summary>
      <returns>The maximum response delay.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryOperationContextExtension.System#ServiceModel#IExtension{T}#Attach(System.ServiceModel.OperationContext)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryOperationContextExtension.System#ServiceModel#IExtension{T}#Detach(System.ServiceModel.OperationContext)"></member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryProxy">
      <summary>An abstract base class used to implement a discovery proxy.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryProxy" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.#ctor(System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryProxy" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" />.</summary>
      <param name="messageSequenceGenerator">The message sequence generator.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.#ctor(System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryProxy" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" /> and duplicate message history length.</summary>
      <param name="messageSequenceGenerator">The message sequence generator.</param>
      <param name="duplicateMessageHistoryLength">The maximum number of message hashes used by the transport for identifying duplicate messages. The default value is 0.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.BeginShouldRedirectFind(System.ServiceModel.Discovery.FindCriteria,System.AsyncCallback,System.Object)">
      <summary>Override this method to allow the discovery proxy to send out multicast suppression messages when it receives a multicast find request.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="resolveCriteria">The resolve criteria that describes the service to find.</param>
      <param name="callback">The callback delegate to call when the operation has completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.BeginShouldRedirectResolve(System.ServiceModel.Discovery.ResolveCriteria,System.AsyncCallback,System.Object)">
      <summary>Override this method to allow the discovery proxy to send out multicast suppression messages when it receives a multicast resolve request.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="findCriteria">The find criteria that describes the service to find.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.EndShouldRedirectFind(System.IAsyncResult,System.Collections.ObjectModel.Collection{System.ServiceModel.Discovery.EndpointDiscoveryMetadata}@)">
      <summary>Override this method to handle the completion of sending the multicast suppression message for find requests.</summary>
      <returns>true if the find operation should be redirected, otherwise false.</returns>
      <param name="result">A reference to the completed asynchronous operation.</param>
      <param name="redirectionEndpoints">A collection of endpoint discovery metadata that describes the redirection endpoints.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.EndShouldRedirectResolve(System.IAsyncResult,System.Collections.ObjectModel.Collection{System.ServiceModel.Discovery.EndpointDiscoveryMetadata}@)">
      <summary>Override this method to handle the completion of sending the multicast suppression message for resolve requests.</summary>
      <returns>true if the resolve operation should be redirected, otherwise false.</returns>
      <param name="result">A reference to the completed asynchronous operation.</param>
      <param name="redirectionEndpoints">A collection of endpoint discovery metadata that describes the redirection endpoints.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnBeginFind(System.ServiceModel.Discovery.FindRequestContext,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle a find operation.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="findRequestContext">The find request context that describes the service to discover.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnBeginOfflineAnnouncement(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle an offline announcement message.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="messageSequence">The discovery message sequence.</param>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnBeginOnlineAnnouncement(System.ServiceModel.Discovery.DiscoveryMessageSequence,System.ServiceModel.Discovery.EndpointDiscoveryMetadata,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle an online announcement message.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="messageSequence">The discovery message sequence.</param>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnBeginResolve(System.ServiceModel.Discovery.ResolveCriteria,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle a resolve operation.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="resolveCriteria">The resolve criteria that describes the service to discover.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnEndFind(System.IAsyncResult)">
      <summary>Override this method to handle the completion of a find operation.</summary>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnEndOfflineAnnouncement(System.IAsyncResult)">
      <summary>Override this method to handle the completion of an offline announcement message.</summary>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnEndOnlineAnnouncement(System.IAsyncResult)">
      <summary>Override this method to handle the completion of an online announcement message.</summary>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryProxy.OnEndResolve(System.IAsyncResult)">
      <summary>Override this method to handle the completion of a resolve operation.</summary>
      <returns>Endpoint discovery metadata for the resolved service.</returns>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryService">
      <summary>An abstract base class used to implement a discovery service.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryService" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.#ctor(System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryService" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" />.</summary>
      <param name="discoveryMessageSequenceGenerator">The discovery message sequence generator.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.#ctor(System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryService" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator" /> and duplicate message history length.</summary>
      <param name="discoveryMessageSequenceGenerator">The discovery message sequence generator.</param>
      <param name="duplicateMessageHistoryLength">The maximum number of message hashes used by the transport for identifying duplicate messages. The default value is 0.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.OnBeginFind(System.ServiceModel.Discovery.FindRequestContext,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle a find operation.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="findRequestContext">The find request context that describes the service to discover.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.OnBeginResolve(System.ServiceModel.Discovery.ResolveCriteria,System.AsyncCallback,System.Object)">
      <summary>Override this method to handle a resolve operation.</summary>
      <returns>A reference to the pending asynchronous operation.</returns>
      <param name="resolveCriteria">The find request context that describes the service to discover.</param>
      <param name="callback">The callback delegate to call when the operation is completed.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.OnEndFind(System.IAsyncResult)">
      <summary>Override this method to handle the completion of a find operation.</summary>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryService.OnEndResolve(System.IAsyncResult)">
      <summary>Override this method to handle the completion of a resolve operation.</summary>
      <returns>The endpoint discovery metadata that describes the resolved service.</returns>
      <param name="result">A reference to the completed asynchronous operation.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryServiceExtension">
      <summary>An abstract WCF extension class for specifying a custom discovery service or for getting the published endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryServiceExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryServiceExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryServiceExtension.GetDiscoveryService">
      <summary>Override this method to return your custom <see cref="T:System.ServiceModel.Discovery.DiscoveryService" /> implementation.</summary>
      <returns>A custom discovery service implementation.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryServiceExtension.PublishedEndpoints">
      <summary>Gets a read-only collection of published endpoints.</summary>
      <returns>A read-only collection of published endpoints.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryServiceExtension.System#ServiceModel#IExtension{T}#Attach(System.ServiceModel.ServiceHostBase)"></member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryServiceExtension.System#ServiceModel#IExtension{T}#Detach(System.ServiceModel.ServiceHostBase)"></member>
    <member name="T:System.ServiceModel.Discovery.DiscoveryVersion">
      <summary>Specifies the version of the WS-Discovery protocol to use.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.AdhocAddress">
      <summary>Gets the address to which ad hoc discovery messages are sent.</summary>
      <returns>The discovery address.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryVersion.FromName(System.String)">
      <summary>Gets the specified discovery version.</summary>
      <returns>The discovery version.</returns>
      <param name="name">The name of the discovery version requested.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.MessageVersion">
      <summary>Gets the message version.</summary>
      <returns>The message version.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.Name">
      <summary>Gets the name of the discovery version.</summary>
      <returns>The discovery version name.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.Namespace">
      <summary>Gets the discovery version namespace.</summary>
      <returns>The discovery version namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.DiscoveryVersion.ToString">
      <summary>Creates a string representation of the WS-Discovery protocol version.</summary>
      <returns>The WS-Discovery protocol version.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.WSDiscovery11">
      <summary>Gets the 1.1 version of the WS-Discovery protocol. </summary>
      <returns>The 1.1 version of the WS-Discovery protocol.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.WSDiscoveryApril2005">
      <summary>Gets the April 2005 version of the WS-Discovery protocol.</summary>
      <returns>The April 2005 version of the WS-Discovery protocol.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DiscoveryVersion.WSDiscoveryCD1">
      <summary>Gets the Committee Draft 1 version of the WS-Discovery protocol.</summary>
      <returns>The Committee Draft 1 version of the WS-Discovery protocol.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.DynamicEndpoint">
      <summary>An endpoint that uses WS-Discovery to find the endpoint address dynamically at runtime.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.DynamicEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DynamicEndpoint" /> class with the specified <see cref="T:System.ServiceModel.Description.ContractDescription" /> and <see cref="T:System.ServiceModel.Channels.Binding" />.</summary>
      <param name="contract">The contract.</param>
      <param name="binding">The binding.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.DynamicEndpoint.DiscoveryEndpointProvider">
      <summary>Gets or sets an object that provides a discovery endpoint.</summary>
      <returns>A discovery endpoint provider.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.DynamicEndpoint.FindCriteria">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> used to search for a service.</summary>
      <returns>The find criteria.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.EndpointDiscoveryBehavior">
      <summary>Controls the content of the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> returned by a discovery endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryBehavior" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.ContractTypeNames">
      <summary>Gets the contract type names associated with the endpoint.</summary>
      <returns>The contract type names associated with the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.Enabled">
      <summary>Gets or sets a value that controls the discoverability of the associated endpoint.</summary>
      <returns>true if the endpoint is enabled, otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.Extensions">
      <summary>Gets the extensions associated with the endpoint.</summary>
      <returns>A collection of extensions associated with the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.Scopes">
      <summary>Gets the scopes associated with the endpoint.</summary>
      <returns>A collection of scopes. </returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="bindingParameters">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="clientRuntime">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
      <param name="endpointDispatcher">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Not implemented.</summary>
      <param name="endpoint">Not implemented.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata">
      <summary>Contains the metadata for a discoverable service.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.Address">
      <summary>Gets or sets the endpoint address for the endpoint the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance describes.</summary>
      <returns>The endpoint address for the service endpoint the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance describes.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.ContractTypeNames">
      <summary>Gets a collection of contract type names implemented by the service described by the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" />.</summary>
      <returns>A collection of contract type names.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.Extensions">
      <summary>Gets the extensions associated with this <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A collection of extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.FromServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> from a <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</returns>
      <param name="endpoint">A service endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.FromServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> class using the specified service endpoint and endpoint dispatcher.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</returns>
      <param name="endpoint">The endpoint.</param>
      <param name="endpointDispatcher">The endpoint dispatcher.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.ListenUris">
      <summary>Gets the listen URIs for the service described by this <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A collection of listen URIs.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.Scopes">
      <summary>Gets the scopes associated with this <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A collection of absolute URIs.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.EndpointDiscoveryMetadata.Version">
      <summary>Gets or sets the version of the published <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" />.</summary>
      <returns>The version of the published <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.FindCompletedEventArgs">
      <summary>Arguments for the <see cref="E:System.ServiceModel.Discovery.DiscoveryClient.FindCompleted" /> event.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCompletedEventArgs.Result">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.FindResponse" /> returned by the find operation.</summary>
      <returns>The results of the find operation.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.FindCriteria">
      <summary>Represents the criteria to use when searching for services.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.FindCriteria" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> class with the specified name of a contract type.</summary>
      <param name="contractType">The name of the contract type to search for. </param>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.ContractTypeNames">
      <summary>Gets the collection of contract type names to search for.</summary>
      <returns>The contract type names to search for.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.CreateMetadataExchangeEndpointCriteria">
      <summary>Creates metadata exchange endpoint criteria to use when searching for services.</summary>
      <returns>The endpoint criteria to use to find services.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.CreateMetadataExchangeEndpointCriteria(System.Collections.Generic.IEnumerable{System.Xml.XmlQualifiedName})">
      <summary>Creates an object that contains metadata exchange endpoint criteria derived from the specified collection of XML qualified names.</summary>
      <returns>The endpoint criteria to use to find services.</returns>
      <param name="contractTypeNames">A collection of enumerations that represent contract type names.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.CreateMetadataExchangeEndpointCriteria(System.Type)">
      <summary>Creates an object that contains metadata exchange endpoint criteria derived from the specified contract type.</summary>
      <returns>The endpoint criteria to use to find services.</returns>
      <param name="contractType">A type of service contract.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.Duration">
      <summary>Gets or sets a <see cref="T:System.Timespan" /> that specifies the find operation time-out period.</summary>
      <returns>The time-out period of the find operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.Extensions">
      <summary>Gets a collection of extensions in the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> instance.</summary>
      <returns>The XML extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindCriteria.IsMatch(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Determines whether a set of criteria matches the service described by the specified <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>true if the service matches the criteria, otherwise false.</returns>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata that describes the service in question.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.MaxResults">
      <summary>Gets or sets the maximum number of responses required from the find operation.</summary>
      <returns>The maximum number of response required from the find operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.ScopeMatchBy">
      <summary>Gets or sets a URI that specifies how scopes are matched.</summary>
      <returns>The URI that specifies how scopes are matched.</returns>
    </member>
    <member name="F:System.ServiceModel.Discovery.FindCriteria.ScopeMatchByExact">
      <summary>Specifies that scopes are matched by using a case-sensitive comparison (http://schemas.xmlsoap.org/ws/2004/10/discovery/strcmp0) as defined by the WS-Discovery Specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.FindCriteria.ScopeMatchByLdap">
      <summary>Specifies that scopes are matched by using the LDAP method (http://schemas.xmlsoap.org/ws/2004/10/discovery/ldap) as defined by the WS-Discovery Specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.FindCriteria.ScopeMatchByNone">
      <summary>Specifies that scopes are ignored as defined by the WS-Discovery Specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.FindCriteria.ScopeMatchByPrefix">
      <summary>Specifies that scopes are matched using the prefix method (http://schemas.xmlsoap.org/ws/2004/10/discovery/rfc2396) as defined by the WS-Discovery Specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.FindCriteria.ScopeMatchByUuid">
      <summary>Specifies that scopes are matched by using the UUID method (http://schemas.xmlsoap.org/ws/2004/10/discovery/uuid) as defined by the WS-Discovery Specification.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindCriteria.Scopes">
      <summary>Gets a collection of absolute URIs that represents scopes used to search for a service.</summary>
      <returns>A collection of absolute URIs used to search for a service.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.FindProgressChangedEventArgs">
      <summary>Arguments for the <see cref="E:System.ServiceModel.Discovery.DiscoveryClient.FindProgressChanged" /> event. </summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindProgressChangedEventArgs.EndpointDiscoveryMetadata">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance associated with the current ongoing find operation.</summary>
      <returns>The endpoint discovery metadata.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindProgressChangedEventArgs.MessageSequence">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance associated with the current ongoing find operation.</summary>
      <returns>The discovery message sequence. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.FindRequestContext">
      <summary>Represents a find request sent by a client.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindRequestContext.#ctor(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.FindRequestContext" /> class using the specified <see cref="T:System.ServiceModel.Discovery.FindCriteria" />.</summary>
      <param name="criteria">The find criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindRequestContext.AddMatchingEndpoint(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Enables the discovery service to send results back to the client as they are received.</summary>
      <param name="matchingEndpoint">The endpoint discovery metadata to send back to the client.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindRequestContext.Criteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> associated with the <see cref="T:System.ServiceModel.Discovery.FindRequestContext" /> sent by the client. </summary>
      <returns>The find criteria sent by the client.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindRequestContext.OnAddMatchingEndpoint(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Called after the user adds an endpoint to the <see cref="T:System.ServiceModel.Discovery.FindRequestContext" /> by calling <see cref="M:System.ServiceModel.Discovery.FindRequestContext.AddMatchingEndpoint(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)" />.</summary>
      <param name="matchingEndpoint">The endpoint discovery metadata to send back to the client.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.FindResponse">
      <summary>Represents the response from a find request.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.FindResponse.Endpoints">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> for the discoverable services that matched the find request.</summary>
      <returns>A collection of endpoint discovery metadata.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.FindResponse.GetMessageSequence(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> associated with the specified <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" />.</summary>
      <returns>The discovery message sequence.</returns>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.ResolveCompletedEventArgs">
      <summary>Arguments for the <see cref="E:System.ServiceModel.Discovery.DiscoveryClient.ResolveCompleted" /> event.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveCompletedEventArgs.Result">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.ResolveResponse" /> returned by the resolve operation.</summary>
      <returns>The results of the resolve operation.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.ResolveCriteria">
      <summary>Represents the criteria to use when resolving a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.ResolveCriteria.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.ResolveCriteria.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> class with the specified <see cref="T:System.ServiceModel.EndpointAddress" />.</summary>
      <param name="address">The endpoint address.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveCriteria.Address">
      <summary>The endpoint address of the service to resolve.</summary>
      <returns>The endpoint address.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveCriteria.Duration">
      <summary>Gets or sets a <see cref="T:System.Timespan" /> that specifies a time span within which the resolve operation must complete before timing out.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveCriteria.Extensions">
      <summary>Gets a collection of extensions in the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> instance.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> instance that contains the XML extensions.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.ResolveResponse">
      <summary>Represents the response from a resolve request.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveResponse.EndpointDiscoveryMetadata">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> that matched the resolve request.</summary>
      <returns>The endpoint discovery metadata.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.ResolveResponse.MessageSequence">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> associated with the <see cref="T:System.ServiceModel.Discovery.ResolveResponse" />.</summary>
      <returns>The discovery message sequence.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior">
      <summary>This class controls the discoverability of service endpoints.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.ServiceDiscoveryBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.ServiceDiscoveryBehavior.AnnouncementEndpoints">
      <summary>Gets a collection of announcement endpoints. Use this collection to specify the endpoints to use for sending announcement messages.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1" /> instance that contains a collection of announcement endpoints.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.ServiceDiscoveryBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters((System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host for the service.</param>
      <param name="endpoints">The endpoints exposed by the service.</param>
      <param name="bindingParameters">The binding parameters to be configured to support the service behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.ServiceDiscoveryBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior((System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host for the service.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.ServiceDiscoveryBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host for the service.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.ServiceDiscoveryMode">
      <summary>Specifies the discovery mode to use.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.ServiceDiscoveryMode.Adhoc">
      <summary>The ad hoc discovery mode.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.ServiceDiscoveryMode.Managed">
      <summary>The managed discovery mode.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint">
      <summary>A standard endpoint that is used by services to send announcement messages over a UDP binding. This endpoint inherits from <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> and similarly has a fixed contract and supports two discovery versions. In addition it has a fixed UDP binding and a default address value as specified in the WS-Discovery specifications (WS-Discovery April 2005 or WS-Discovery version 1.1). Therefore, in the simplest case you do not have to specify any of these values when you create an <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> and add it to a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> class that is configured to use the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" />.</summary>
      <param name="discoveryVersion">The version of the WS-Discovery protocol to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> that is configured to use the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> and multicast address.</summary>
      <param name="discoveryVersion">The version of the WS-Discovery protocol to use.</param>
      <param name="multicastAddress">The multicast address to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> that is configured to use the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> and multicast address.</summary>
      <param name="discoveryVersion">The version of the WS-Discovery protocol to use.</param>
      <param name="multicastAddress">The multicast address to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> class with the specified multicast address.</summary>
      <param name="multicastAddress">The multicast address.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> class with the specified multicast address.</summary>
      <param name="multicastAddress">The multicast address.</param>
    </member>
    <member name="F:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.DefaultIPv4MulticastAddress">
      <summary>The default UDP multicast address for IPv4.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.DefaultIPv6MulticastAddress">
      <summary>The default UDP multicast address for IPv6.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.MulticastAddress">
      <summary>Gets or sets the endpointâs multicast address.</summary>
      <returns>A <see cref="T:System.Uri" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpAnnouncementEndpoint.TransportSettings">
      <summary>Gets the UDP transport settings associated with the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> instance.</summary>
      <returns>The UDP transport settings.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint">
      <summary>A standard endpoint that is pre-configured for discovery operations over a UDP multicast binding. This endpoint inherits from <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> and similarly has a fixed contract and supports two WS-Discovery protocol versions. In addition, it has a fixed UDP binding and a default address as specified in the WS-Discovery specifications (WS-Discovery April 2005 or WS-Discovery V1.1).</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" />.</summary>
      <param name="discoveryVersion">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> and multicast address.</summary>
      <param name="discoveryVersion">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to use.</param>
      <param name="multicastAddress">The multicast address for the UDP discovery endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor(System.ServiceModel.Discovery.DiscoveryVersion,System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class with the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> and multicast address.</summary>
      <param name="discoveryVersion">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to use.</param>
      <param name="multicastAddress">A <see cref="T:System.Uri" /> with the multicast address. </param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class with the specified multicast address.</summary>
      <param name="multicastAddress">The multicast address.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.#ctor(System.Uri)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class with the specified multicast address.</summary>
      <param name="multicastAddress">The multicast address.</param>
    </member>
    <member name="F:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.DefaultIPv4MulticastAddress">
      <summary>The default UDP multicast address for IPv4.</summary>
    </member>
    <member name="F:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.DefaultIPv6MulticastAddress">
      <summary>The default UDP multicast address for IPv6.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.MulticastAddress">
      <summary>Gets or sets the multicast address.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the multicast address.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpDiscoveryEndpoint.TransportSettings">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.UdpTransportSettings" /> instance associated with the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" />.</summary>
      <returns>The UDP transport settings for the endpoint.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.UdpTransportSettings">
      <summary>Enables you to set UDP transport settings.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.DuplicateMessageHistoryLength">
      <summary>Gets or sets a value that specifies the maximum number of message hashes used by the transport for identifying duplicate messages.</summary>
      <returns>The maximum number of message hashes to use.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size of any buffer pools used by the transport.</summary>
      <returns>The maximum buffer pool size.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxMulticastRetransmitCount">
      <summary>Gets or sets a value that specifies the maximum number of times a multicast message should be retransmitted (In addition to the first send).</summary>
      <returns>The maximum number of times a multicast message is retransmitted.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxPendingMessageCount">
      <summary>Gets or sets a value that specifies the maximum number of messages that have been received but not yet removed from the input queue for an individual channel instance.</summary>
      <returns>The number of messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size of a message that can be processed by the binding.</summary>
      <returns>The maximum size of a message.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxUnicastRetransmitCount">
      <summary>Gets or sets a value that specifies the maximum number of times a unicast message should be retransmitted (in addition to the first send).</summary>
      <returns>The maximum number of times a unicast message is retransmitted.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.MulticastInterfaceId">
      <summary>Gets or sets a value that uniquely identifies the network adapter that is used when sending and receiving multicast messages.</summary>
      <returns>The network adapter identifier. </returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.SocketReceiveBufferSize">
      <summary>Gets or sets the receive buffer size on the underlying WinSock socket.</summary>
      <returns>The receive buffer size. </returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.UdpTransportSettings.TimeToLive">
      <summary>Gets or sets a value that specifies the number of network segment hops that a multicast packet can traverse.</summary>
      <returns>The number of network segment hops. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.AnnouncementChannelEndpointElementCollection">
      <summary>Represents a container for <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementChannelEndpointElementCollection.#ctor">
      <summary>Creates a new instance of <see cref="T:System.ServiceModel.Discovery.Configuration.AnnouncementChannelEndpointElementCollection" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointCollectionElement">
      <summary>Represents a container for <see cref="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement" /> configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of <see cref="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointCollectionElement" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement">
      <summary>Defines a configuration element for an announcement endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>When called or overridden by a derived class, creates and initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" /> class that uses the contract description of the current Discovery protocol version.</summary>
      <returns>An announcement endpoint. </returns>
      <param name="contractDescription">Not used. </param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.DiscoveryVersion">
      <summary>Gets or sets the version of the WS-Discovery specification that the announcement endpoint supports.</summary>
      <returns>The WS-Discovery version.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.EndpointType">
      <summary>Gets the type of the announcement endpoint.</summary>
      <returns>The type of the announcement endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.InitializeFrom(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> into an <see cref="T:System.ServiceModel.Discovery.AnnouncementEndpoint" />.</summary>
      <param name="endpoint">The service endpoint object to convert.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.MaxAnnouncementDelay">
      <summary>Gets or sets the maximum delay a service is required to wait before sending announcement messages. </summary>
      <returns>The maximum delay.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to an announcement endpoint.</summary>
      <param name="endpoint">The service endpoint to which announcement configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not used.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to an announcement endpoint.</summary>
      <param name="endpoint">The service endpoint to which announcement configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not used.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" />.</summary>
      <param name="channelEndpointElement">The channel endpoint element to initialize and validate. </param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" />.</summary>
      <param name="serviceEndpointElement">The service endpoint element to initialize and validate. </param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement.Properties">
      <summary>When called or overridden in a derived class, gets a collection of the configuration settings contained in the <see cref="T:System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement" /> instance. </summary>
      <returns>A collection of configuration settings. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement">
      <summary>Represents a workflow element that identifies by name the workflow service contract being searched for.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement" /> class using the specified contract type name and namespace name.</summary>
      <param name="name">The type name of a workflow service contract.</param>
      <param name="ns">The namespace name of the workflow service contract.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement.Name">
      <summary>Gets or sets the name of the contract type.</summary>
      <returns>An alphanumeric name.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement.Namespace">
      <summary>Gets or sets the namespace of the contract type.</summary>
      <returns>An alphanumeric name.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElementCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElement" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ContractTypeNameElementCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.ContractTypeNameElementCollection" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement">
      <summary>Represents a configuration element that enables a client application to automatically search for a discoverable workflow service and find its address at runtime.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Adds the criteria from the specified binding element to the current <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement" />.</summary>
      <param name="bindingElement">An element that builds the channel factories and channel listeners for various types of channels that are used to process outgoing and incoming messages.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.BindingElementType">
      <summary>Gets the type of the <see cref="T:System.ServiceModel.Discovery.DiscoveryClientBindingElement" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the content of the specified <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> to the current configuration element.</summary>
      <param name="from">The <see cref="T:System.ServiceModel.Configuration.ServiceModelExtensionElement" /> to be copied.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.DiscoveryEndpoint">
      <summary>Gets a <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> that enables a client application to automatically search for a discoverable workflow service and find its address at runtime.</summary>
      <returns>A channel endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryClientElement.FindCriteria">
      <summary>Gets a <see cref="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement" /> that supplies a set of criteria used by a client application to search for a discovery workflow service.</summary>
      <returns>A find criteria element.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement">
      <summary>Provides the configuration element whose settings enable a client application to automatically search for a discoverable workflow service and find its address at runtime.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement.DiscoveryEndpoint">
      <summary>Gets a <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" /> that enables a client application to automatically search for a discoverable workflow service and find its address at runtime.</summary>
      <returns>A channel endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement.FindCriteria">
      <summary>Gets a <see cref="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement" /> that supplies a set of criteria used by a client application to search for a discovery workflow service.</summary>
      <returns>A find criteria element.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointCollectionElement">
      <summary>Represents a container for <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement" /> configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointCollectionElement" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement">
      <summary>Defines a configuration element for a discovery endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>When called or overridden by a derived class, creates and initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> class that uses the default Discovery protocol version and mode.</summary>
      <returns>A discovery endpoint. </returns>
      <param name="contractDescription">Not implemented.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.DiscoveryMode">
      <summary>Gets or sets the discovery mode that the discovery endpoint uses. </summary>
      <returns>The discovery mode.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.DiscoveryVersion">
      <summary>Gets or sets the version of the WS-Discovery specification that the discovery should use.</summary>
      <returns>The WS-Discovery version.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.EndpointType">
      <summary>When called or overridden by a derived class, gets the type of the discovery endpoint.</summary>
      <returns>The type of the endpoint. </returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.InitializeFrom(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Initializes a <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" /> from a given endpoint.</summary>
      <param name="endpoint">The service endpoint object to convert.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.MaxResponseDelay">
      <summary>Gets or sets the maximum amount of delay that the service can introduce between ProbeMatches while sending response to the client. </summary>
      <returns>The maximum response delay.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, applies the ConfigurationProperties on the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" />.</summary>
      <param name="endpoint">A service endpoint to which the discovery configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented. </param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, applies the ConfigurationProperties on the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryEndpoint" />.</summary>
      <param name="endpoint">A service endpoint to which the discovery configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not Implemented. </param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates a specified instance of <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" />. </summary>
      <param name="channelEndpointElement">The channel endpoint element to initialize and validate. </param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" />. </summary>
      <param name="serviceEndpointElement">The service endpoint element to initialize and validate. </param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement.Properties">
      <summary>When called or overridden by a derived class, gets a collection of the configuration settings contained in the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement" /> instance. </summary>
      <returns>A collection of configuration settings. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter">
      <summary>Provides functionality to change a WS-Discovery protocol version to another type.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether it is possible to change the given <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to the type of this converter and using the specified context and culture information.</summary>
      <returns>true if it is possible to change the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to the type of this converter; otherwise, false.</returns>
      <param name="context">Type descriptor format information that assists in the conversion of a <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to another type.</param>
      <param name="sourceType">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object that is changed to the type of this converter.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether it is possible to change the given <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to the specified type and using the specified context and culture information.</summary>
      <returns>true if it is possible to change the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to the specified type; otherwise, false.</returns>
      <param name="context">Type descriptor format information that assists in the conversion of a <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to another type.</param>
      <param name="destinationType">The type to which the <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object is changed.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to the type of this converter, using the specified context and culture information.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> that has been changed to the type of this converter.</returns>
      <param name="context">Type descriptor format information that assists in the conversion of a <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to another type.</param>
      <param name="culture">The culture information to use in the type conversion.</param>
      <param name="value">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to change.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to the specified type, using the specified context and culture information.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> that has been changed to the specified type.</returns>
      <param name="context">Type descriptor format information that assists in the conversion of a <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object to another type.</param>
      <param name="culture">The culture information to use in the type conversion.</param>
      <param name="value">The <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> to change.</param>
      <param name="destinationType">The type to which the <see cref="T:System.ServiceModel.Discovery.DiscoveryVersion" /> object is being changed.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DynamicEndpointCollectionElement">
      <summary>Represents a workflow configuration element that provides a collection of endpoints that each contain information to enable an application to function as a client program that can search for, find, and use a workflow service during runtime.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DynamicEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DynamicEndpointCollectionElement" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.DynamicEndpointElement">
      <summary>Represents a configuration element that provides information to enable an application to function as a client program that can search for, find, and use a workflow service during runtime.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.DynamicEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.DynamicEndpointElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.DynamicEndpointElement.DiscoveryClientSettings">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement" /> that contains the settings needed by an application to participate in the service discovery process as a client.</summary>
      <returns>An element that contains discovery settings required by a client application.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement">
      <summary>A configuration element that controls the discovery functionality of an endpoint. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.BehaviorType">
      <summary>Gets the behavior type associated with the <see cref="T:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement" />.</summary>
      <returns>The behavior type. </returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.ContractTypeNames">
      <summary>Gets the contract type names associated with the endpoint.</summary>
      <returns>The contract type names associated with the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.Enabled">
      <summary>Gets or sets a value that indicates the discoverability of this endpoint.</summary>
      <returns>true if the discoverability of this endpoint is enabled, otherwise false. </returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.Extensions">
      <summary>Gets the extensions associated with the <see cref="T:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement" />.</summary>
      <returns>The extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement.Scopes">
      <summary>Gets a collection of scopes for this endpoint.</summary>
      <returns>A collection of scopes associated with this endpoint.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement">
      <summary>Manages a configuration element that contains a set of criteria used by a client application to search for workflow services over a network or the Internet.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.ContractTypeNames">
      <summary>Gets a collection of configuration elements that contain the names of workflow service contract types.</summary>
      <returns>A collection of elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.Duration">
      <summary>Gets or sets the maximum time to wait for replies from services on a network or the Internet.</summary>
      <returns>A timespan object the defines the waiting period.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.Extensions">
      <summary>Gets the <see cref="T:System.ServiceModel.Configuration.XmlElementElementCollection" /> object that provide extensions for a <see cref="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement" />.</summary>
      <returns>A collection of elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.MaxResults">
      <summary>Gets or sets the maximum number of replies to wait for, from services on a network or the Internet. </summary>
      <returns>A maximum number.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.ScopeMatchBy">
      <summary>Gets or sets a URI that designates the name and location of a service that is being searched for and against which members of the <see cref="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.Scopes" /> collection are matched.</summary>
      <returns>The URI of a service application.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.FindCriteriaElement.Scopes">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Discovery.Configuration.FindCriteriaElement" /> objects that contain absolute URIs that are used during a find operation to locate a specific service or services.</summary>
      <returns>A collection of elements that contain URIs.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.ScopeElement">
      <summary>Represents a scope URI for an endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ScopeElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.ScopeElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.ScopeElement.Scope">
      <summary>Gets or sets the scope URI.</summary>
      <returns>The scope URI.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.ScopeElementCollection">
      <summary>A configuration element that contains a collection of scope elements. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ScopeElementCollection.#ctor">
      <summary>Creates a new instance of the <see cref="M:System.ServiceModel.Discovery.Configuration.ScopeElementCollection.#ctor" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement">
      <summary>Represents a configuration element that controls the discoverability of a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement.AnnouncementEndpoints">
      <summary>Gets a collection of announcement endpoints.</summary>
      <returns>A <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElementCollection" /> that contains announcement endpoints.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement.BehaviorType">
      <summary>Gets the type of behavior.</summary>
      <returns>The type of the behavior.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointCollectionElement">
      <summary>Represents a container for <see cref="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement" /> configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of <see cref="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointCollectionElement" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement">
      <summary>Defines a configuration element for a UDP announcement endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.#ctor">
      <summary>Creates a new instance of <see cref="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>When called or overridden by a derived class, creates and initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" /> class that uses the contract description of the current Discovery protocol version and mode.</summary>
      <returns>A UDP announcement endpoint.</returns>
      <param name="contractDescription">Not implemented.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.EndpointType">
      <summary>When called or overridden by a derived class, gets the type of the UDP announcement endpoint.</summary>
      <returns>The type of the UDP announcement endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.InitializeFrom(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> into a <see cref="T:System.ServiceModel.Discovery.UdpAnnouncementEndpoint" />.</summary>
      <param name="endpoint">The service endpoint object to convert.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.MaxAnnouncementDelay">
      <summary>Gets or sets the maximum delay a service is required to wait before sending announcement messages.</summary>
      <returns>The maximum delay.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.MulticastAddress">
      <summary>Gets or sets the <see cref="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.MulticastAddress" /> property of a UDP announcement endpoint element.</summary>
      <returns>A URI address.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a UDP announcement endpoint.</summary>
      <param name="endpoint">The service endpoint to which UDP announcement configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a UDP announcement endpoint.</summary>
      <param name="endpoint">The service endpoint to which UDP announcement configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" />.</summary>
      <param name="channelEndpointElement">The channel endpoint element to initialize and validate.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" />.</summary>
      <param name="serviceEndpointElement">The service endpoint element to initialize and validate.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.Properties">
      <summary>When called or overridden by a derived class, gets a collection of the configuration settings contained in a <see cref="T:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement" /> instance.</summary>
      <returns>A collection of configuration settings.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement.TransportSettings">
      <summary>Gets the binding settings of a UDP transport configuration element.</summary>
      <returns>A UDP configuration element.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointCollectionElement">
      <summary>Represents a container for <see cref="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement" /> configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointCollectionElement" />.</summary>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement">
      <summary>Defines a configuration element for a UDP discovery endpoint.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>When called or overridden by a derived class, creates and initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" /> class that uses the contract description of the current Discovery protocol version and mode.</summary>
      <returns>A UDP discovery endpoint.</returns>
      <param name="contractDescription">Not implemented.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.DiscoveryMode">
      <summary>Gets or sets the discovery mode that is used by the discovery endpoint.</summary>
      <returns>The discovery mode.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.EndpointType">
      <summary>When called or overridden by a derived class, gets the type of the UDP discovery endpoint.</summary>
      <returns>The type of the discovery endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.InitializeFrom(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> into a <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint" />.</summary>
      <param name="endpoint">The service endpoint object to convert.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.MaxResponseDelay">
      <summary>Gets or sets the maximum <see cref="T:System.Timespan" /> within which all of the ProbeMatches for a service that respond to a probe operation are sent..</summary>
      <returns>The maximum delay.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.MulticastAddress">
      <summary>Gets or sets the <see cref="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.MulticastAddress" /> property of a UDP discovery endpoint element.</summary>
      <returns>An IP address.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a UDP discovery endpoint.</summary>
      <param name="endpoint">The service endpoint to which the configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a UDP discovery endpoint.</summary>
      <param name="endpoint">The service endpoint to which the configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ChannelEndpointElement" />.</summary>
      <param name="channelEndpointElement">The channel endpoint element to initialize and validate.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified instance of a <see cref="T:System.ServiceModel.Configuration.ServiceEndpointElement" />.</summary>
      <param name="serviceEndpointElement">The service endpoint element to initialize and validate.</param>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.Properties">
      <summary>When called or overridden by a derived class, gets a collection of the configuration settings contained in the <see cref="T:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement" /> instance.</summary>
      <returns>A collection of configuration settings.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement.TransportSettings">
      <summary>Gets the binding settings of a UDP transport configuration element.</summary>
      <returns>A UDP configuration element.</returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement">
      <summary>Allows you to set the settings of a UDP transport. </summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.DuplicateMessageHistoryLength">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.DuplicateMessageHistoryLength" /> property in a UDP transport configuration element.</summary>
      <returns>The maximum number of message hashes used by the transport to identify duplicate messages.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxBufferPoolSize">
      <summary>Gets or sets a maximum allotment of memory for the process of reading and writing pages of data into memory from the disk.</summary>
      <returns>A number that indicates the size of a buffer pool.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxMulticastRetransmitCount">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxMulticastRetransmitCount" /> property in a UDP transport configuration element.</summary>
      <returns>The maximum number of times a multicast message can be retransmitted.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxPendingMessageCount">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxPendingMessageCount" /> property in a UDP transport configuration element.</summary>
      <returns>The maximum number of messages that are received but not yet removed from the input queue for an individual channel instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxReceivedMessageSize">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxReceivedMessageSize" /> property in a UDP transport configuration element.</summary>
      <returns>The maximum size for a message that can be processed by the binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MaxUnicastRetransmitCount">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.MaxUnicastRetransmitCount" /> property in a UDP transport configuration element.</summary>
      <returns>The maximum number of times a unicast message can be retransmitted.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.MulticastInterfaceId">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.MulticastInterfaceId" /> property in a UDP transport configuration element.</summary>
      <returns>The network adapter that is used when sending and receiving multicast traffic on multi-honed machines.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.SocketReceiveBufferSize">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.UdpTransportSettings.SocketReceiveBufferSize" /> property in a UDP transport configuration element.</summary>
      <returns>The receive buffer size on the underlying WinSock socket.</returns>
    </member>
    <member name="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.TimeToLive">
      <summary>Gets or sets the value of the <see cref="P:System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement.TimeToLive" /> property in a UDP transport configuration element.</summary>
      <returns>The number of network segment hops that a multicast packet can traverse. </returns>
    </member>
    <member name="T:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11">
      <summary>Represents the AppSequence header defined in version 1.1 of the WS-Discovery Protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.FromDiscoveryMessageSequence(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11" /> class from the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11" /> instance.</returns>
      <param name="discoveryMessageSequence">The discovery message sequence.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.GetSchema">
      <summary>Gets the schema for the AppSequence header as defined in version 1.1 of the WS-Discovery protocol.</summary>
      <returns>The schema for the AppSequence header.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for the AppSequence header as defined in version 1.1 of the WS-Discovery protocol and adds it to the specified schema set if the schema set does not already contain the schema.</summary>
      <returns>The XML-qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a discovery message sequence from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.ToDiscoveryMessageSequence">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> class from the current <see cref="T:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11">
      <summary>Contains the metadata for a discoverable service based on version 1.1 of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.FromEndpointDiscoveryMetadata(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> class with the specified <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> instance.</returns>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.GetSchema">
      <summary>Gets the schema for endpoint discovery metadata for version 1.1 of the WS-Discovery protocol.</summary>
      <returns>The XML qualified name of the schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for endpoint discovery metadata for version 1.1 of the WS-Discovery protocol and adds it to the specified schema set if it is not already present.</summary>
      <returns>The XML qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.ReadXml(System.Xml.XmlReader)">
      <summary>Reads an <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.ToEndpointDiscoveryMetadata">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> associated with this <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes a <see cref="T:System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.Version11.FindCriteria11">
      <summary>Represents the criteria to use when searching for services using version 1.1 of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.FromFindCriteria(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.Version11.FindCriteria11" /> using the specified <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> instance.</summary>
      <returns>A new<see cref="T:System.ServiceModel.Discovery.Version11.FindCriteria11" /> instance.</returns>
      <param name="findCriteria">The find criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.GetSchema">
      <summary>Gets the find criteria schema.</summary>
      <returns>The find criteria schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the find criteria schema from the specified <see cref="T:System.Xml.Schema.XmlSchemaSet" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.Version11.FindCriteria11" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.ToFindCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> associated with this <see cref="T:System.ServiceModel.Discovery.Version11.FindCriteria11" /> instance.</summary>
      <returns>The find criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.FindCriteria11.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Discovery.Version11.FindCriteria11" /> to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11">
      <summary>Represents the criteria to use when resolving a service using version 1.1 of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.FromResolveCriteria(System.ServiceModel.Discovery.ResolveCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11" /> using the specified <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11" /> instance.</returns>
      <param name="resolveCriteria">The resolve criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.GetSchema">
      <summary>Gets the resolve criteria schema.</summary>
      <returns>The resolve criteria schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the find criteria schema from the specified <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.ToResolveCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> associated with this <see cref="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11" /> instance.</summary>
      <returns>The resolve criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.Version11.ResolveCriteria11.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes a <see cref="T:System.ServiceModel.Discovery.Version11.ResolveCriteria11" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005">
      <summary>Represents the AppSequence header defined in the April 2005 version of the WS-Discovery Protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.FromDiscoveryMessageSequence(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005" /> class from the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005" /> instance.</returns>
      <param name="discoveryMessageSequence">The discovery message sequence.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.GetSchema">
      <summary>Gets the schema for the AppSequence header for the April 2005 version of the WS-Discovery protocol.</summary>
      <returns>The schema for the AppSequence header.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for the AppSequence header for the April 2005 version of the WS-Discovery protocol and adds it to the specified schema set if the schema set does not already contain the schema.</summary>
      <returns>The XML qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a discovery message sequence from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.ToDiscoveryMessageSequence">
      <summary>Initializes a new instance of the  <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> class from the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005" /> to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005">
      <summary>Contains the metadata for a discoverable service based on the April 2005 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.FromEndpointDiscoveryMetadata(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005" /> with the specified <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005" /> instance.</returns>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.GetSchema">
      <summary>Gets the schema for endpoint discovery metadata for the April 2005 version of the WS-Discovery protocol.</summary>
      <returns>A <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for endpoint discovery metadata for the April 2005 version of the WS-Discovery protocol and adds it to the specified schema set if it is not already present.</summary>
      <returns>The XML qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005" /> instance from XML.</summary>
      <param name="reader">The XML reader to read.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.ToEndpointDiscoveryMetadata">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> associated with this <see cref="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the current <see cref="T:System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005" /> instance to XML.</summary>
      <param name="writer">The XML writer.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005">
      <summary>Represents the criteria to use when searching for services using the April 2005 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.FromFindCriteria(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005" /> class with the specified <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005" /> instance.</returns>
      <param name="findCriteria">The find criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.GetSchema">
      <summary>Gets the schema of find criteria for the April 2005 version of the WS-Discovery protocol.</summary>
      <returns>The schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema of find criteria for the April 2005 version of the WS-Discovery protocol and adds it to the specified schema set if it is not already present.</summary>
      <returns>The XML qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.ReadXml(System.Xml.XmlReader)">
      <summary>Reads an instance of <see cref="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005" /> from the specified XML reader.</summary>
      <param name="reader">The XML reader.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.ToFindCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> associated with this <see cref="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005" /> instance.</summary>
      <returns>The find criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the current <see cref="T:System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005" /> instance to XML.</summary>
      <param name="writer">The XML writer.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005">
      <summary>Represents the criteria to use when resolving a service using the April 2005 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.FromResolveCriteria(System.ServiceModel.Discovery.ResolveCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005" /> class with the specified <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005" /> instance.</returns>
      <param name="resolveCriteria">The resolve criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.GetSchema">
      <summary>Gets the XML schema for resolve criteria defined in the April 2005 version of the WS-Discovery protocol.</summary>
      <returns>The XML schema of resolve criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the XML schema for resolve criteria defined in the April 2005 version of the WS-Discovery protocol and adds it to the specified <see cref="T:System.Xml.Schema.XmlSchemaSet" /> instance.</summary>
      <returns>The XML qualified name of the schema. </returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005" /> instance from XML.</summary>
      <param name="reader">The XML reader.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.ToResolveCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> instance associated with the current <see cref="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005" /> instance.</summary>
      <returns>The resolve criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the current <see cref="T:System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005" /> instance to XML.</summary>
      <param name="writer">The XML writer.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1">
      <summary>Represents the AppSequence header defined in the Committee Draft 1 version of the WS-Discovery Protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.FromDiscoveryMessageSequence(System.ServiceModel.Discovery.DiscoveryMessageSequence)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1" /> class from the specified <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1" /> instance.</returns>
      <param name="discoveryMessageSequence">The discovery message sequence.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.GetSchema">
      <summary>Gets the schema for the AppSequence header as defined in the Committee Draft 1 version of the WS-Discovery protocol.</summary>
      <returns>The schema for the AppSequence header.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for the AppSequence header as defined in the Committee Draft 1 version of the WS-Discovery protocol and adds it to the specified schema set if the schema set does not already contain the schema.</summary>
      <returns>The XML-qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a discovery message sequence from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.ToDiscoveryMessageSequence">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> class from the current <see cref="T:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.DiscoveryMessageSequence" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1">
      <summary>Contains the metadata for a discoverable service based on the Committee Draft 1 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.FromEndpointDiscoveryMetadata(System.ServiceModel.Discovery.EndpointDiscoveryMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> class with the specified <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> instance.</returns>
      <param name="endpointDiscoveryMetadata">The endpoint discovery metadata.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.GetSchema">
      <summary>Gets the schema for endpoint discovery metadata for the Committee Draft 1 version of the WS-Discovery protocol.</summary>
      <returns>The XML qualified name of the schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the schema for endpoint discovery metadata for the Committee Draft 1 version of the WS-Discovery protocol and adds it to the specified schema set if it is not already present.</summary>
      <returns>The XML qualified name of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.ReadXml(System.Xml.XmlReader)">
      <summary>Reads an <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.ToEndpointDiscoveryMetadata">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.EndpointDiscoveryMetadata" /> associated with this <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes a <see cref="T:System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1">
      <summary>Represents the criteria to use when searching for services using the Committee Draft 1 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.FromFindCriteria(System.ServiceModel.Discovery.FindCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1" /> using the specified <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> instance.</summary>
      <returns>A new<see cref="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1" /> instance.</returns>
      <param name="findCriteria">The find criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.GetSchema">
      <summary>Gets the find criteria schema.</summary>
      <returns>The find criteria schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the find criteria schema from the specified <see cref="T:System.Xml.Schema.XmlSchemaSet" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.ToFindCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.FindCriteria" /> associated with this <see cref="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1" /> instance.</summary>
      <returns>The find criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1" /> to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1">
      <summary>Represents the criteria to use when resolving a service using the Committee Draft 1 version of the WS-Discovery protocol.</summary>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.FromResolveCriteria(System.ServiceModel.Discovery.ResolveCriteria)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1" /> using the specified <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1" /> instance.</returns>
      <param name="resolveCriteria">The resolve criteria.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.GetSchema">
      <summary>Gets the resolve criteria schema.</summary>
      <returns>The resolve criteria schema.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.GetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets the find criteria schema from the specified <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> of the schema.</returns>
      <param name="schemaSet">The schema set.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.ReadXml(System.Xml.XmlReader)">
      <summary>Reads a <see cref="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1" /> instance from XML.</summary>
      <param name="reader">The XML reader to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.ToResolveCriteria">
      <summary>Gets the <see cref="T:System.ServiceModel.Discovery.ResolveCriteria" /> associated with this <see cref="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1" /> instance.</summary>
      <returns>The resolve criteria.</returns>
    </member>
    <member name="M:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1.WriteXml(System.Xml.XmlWriter)">
      <summary>Writes a <see cref="T:System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1" /> instance to XML.</summary>
      <param name="writer">The XML writer to write to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Runtime.Serialization.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.CollectionDataContractAttribute">
      <summary>When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> as valid, serializable collections.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference">
      <summary>Gets or sets a value that indicates whether to preserve object reference data.</summary>
      <returns>true to keep object reference data; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName">
      <summary>Gets or sets a custom name for a collection element.</summary>
      <returns>The name to apply to collection elements.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName">
      <summary>Gets or sets the custom name for a dictionary key name.</summary>
      <returns>The name to use instead of the default dictionary key name.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Name">
      <summary>Gets or sets the data contract name for the collection type.</summary>
      <returns>The data contract name for the collection type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract.</summary>
      <returns>The namespace of the data contract.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName">
      <summary>Gets or sets the custom name for a dictionary value name.</summary>
      <returns>The name to use instead of the default dictionary value name.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ContractNamespaceAttribute">
      <summary>Specifies the CLR namespace and XML namespace of the data contract. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ContractNamespaceAttribute" /> class using the supplied namespace. </summary>
      <param name="contractNamespace">The namespace of the contract.</param>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ClrNamespace">
      <summary>Gets or sets the CLR namespace of the data contract type. </summary>
      <returns>The CLR-legal namespace of a type. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ContractNamespace">
      <summary>Gets the namespace of the data contract members.</summary>
      <returns>The namespace of the data contract members.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractAttribute">
      <summary>Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. To make their type serializable, type authors must define a data contract for their type.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.IsReference">
      <summary>Gets or sets a value that indicates whether to preserve object reference data.</summary>
      <returns>true to keep object reference data using standard XML; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Name">
      <summary>Gets or sets the name of the data contract for the type.</summary>
      <returns>The local name of a data contract. The default is the name of the class that the attribute is applied to. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract for the type.</summary>
      <returns>The namespace of the contract. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractResolver">
      <summary>Provides a mechanism for dynamically mapping types to and from xsi:type representations during serialization and deserialization.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>Override this method to map the specified xsi:type name and namespace to a data contract type during deserialization.</summary>
      <returns>The type the xsi:type name and namespace is mapped to. </returns>
      <param name="typeName">The xsi:type name to map.</param>
      <param name="typeNamespace">The xsi:type namespace to map.</param>
      <param name="declaredType">The type declared in the data contract.</param>
      <param name="knownTypeResolver">The known type resolver.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>Override this method to map a data contract type to an xsi:type name and namespace during serialization.</summary>
      <returns>true if mapping succeeded; otherwise, false.</returns>
      <param name="type">The type to map.</param>
      <param name="declaredType">The type declared in the data contract.</param>
      <param name="knownTypeResolver">The known type resolver.</param>
      <param name="typeName">The xsi:type name.</param>
      <param name="typeNamespace">The xsi:type namespace.</param>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializer">
      <summary>Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, and a surrogate for custom serialization.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. The default is the value returned by the <see cref="F:System.Int32.MaxValue" /> property.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and an alternative for mapping xsi:type declarations at run time.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. The default is the value returned by the <see cref="F:System.Int32.MaxValue" /> property.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="dataContractResolver">An implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> to map xsi:type declarations to data contract types.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The root element name of the content.</param>
      <param name="rootNamespace">The namespace of the root element.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and the XML element and namespace that contain the content.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, the XML element and namespace that contains the content, and an alternative for mapping xsi:type declarations at run time.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="dataContractResolver">An implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> to map xsi:type declarations to data contract types.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two <see cref="T:System.Xml.XmlDictionaryString" /> parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
      <param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, and parameters of <see cref="T:System.Xml.XmlDictionaryString" /> that specify the XML element and namespace that contain the content.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The <see cref="T:System.Xml.XmlDictionaryString" /> that specifies the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The <see cref="T:System.Xml.XmlDictionaryString" /> that specifies the XML namespace of the root.</param>
      <param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Runtime.Serialization.DataContractResolver)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize, parameters to ignore unexpected data, whether to use non-standard XML constructs to preserve object reference data in the graph, a surrogate for custom serialization, parameters of <see cref="T:System.Xml.XmlDictionaryString" /> that specify the XML element and namespace that contains the content, and an alternative for mapping xsi:type declarations at run time.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize.</param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type upon serialization and deserialization; otherwise, false.</param>
      <param name="preserveObjectReferences">true to use non-standard XML constructs to preserve object reference data; otherwise, false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="dataContractResolver">An implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> to map xsi:type declarations to data contract types.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractResolver">
      <summary>Gets the component used to dynamically map xsi:type declarations to known contract types.</summary>
      <returns>Returns an implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> class.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.DataContractSurrogate">
      <summary>Gets a surrogate type that can extend the serialization or deserialization process.</summary>
      <returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
      <summary>Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</summary>
      <returns>true to omit the extension data; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
      <summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> constructor.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
      <summary>Gets the maximum number of items in an object graph to serialize or deserialize.</summary>
      <returns>The maximum number of items to serialize or deserialize. The default is <see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
      <summary>Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.</summary>
      <returns>true to keep the references; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value. </summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean,System.Runtime.Serialization.DataContractResolver)">
      <summary>Reads an XML document or document stream and returns the deserialized object.  The method includes a parameter to specify whether the object name is verified is validated, and a resolver for mapping xsi:type declarations at runtime.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
      <param name="reader">The XML reader used to read the content.</param>
      <param name="verifyObjectName">true  to verify the object name; otherwise, false.</param>
      <param name="dataContractResolver">An implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> to map xsi:type declarations to data contract types.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object,System.Runtime.Serialization.DataContractResolver)">
      <summary>Writes all the object data (starting XML element, content, and enclosing element) to an XML document or stream  using the specified XmlDictionaryWriter. The method includes a resolver for mapping xsi:type declarations at runtime.</summary>
      <param name="writer">An XmlDictionaryWriter used to write the content to the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <param name="dataContractResolver">An implementation of the <see cref="T:System.Runtime.Serialization.DataContractResolver" /> used to map xsi:type declarations to known data contracts.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.DataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue">
      <summary>Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized. </summary>
      <returns>true if the default value for a member should be generated in the serialization stream; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.IsRequired">
      <summary>Gets or sets a value that instructs the serialization engine that the member must be present when reading or deserializing.</summary>
      <returns>true, if the member is required; otherwise, false.</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">the member is not present.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Name">
      <summary>Gets or sets a data member name. </summary>
      <returns>The name of the data member. The default is the name of the target that the attribute is applied to. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Order">
      <summary>Gets or sets the order of serialization and deserialization of a member.</summary>
      <returns>The numeric order of serialization or deserialization.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EnumMemberAttribute">
      <summary>Specifies that the field is an enumeration member and should be serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.EnumMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.EnumMemberAttribute.Value">
      <summary>Gets or sets the value associated with the enumeration member the attribute is applied to.</summary>
      <returns>The value associated with the enumeration member.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExportOptions">
      <summary>Represents the options that can be set for an <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ExportOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ExportOptions" /> class.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.ExportOptions.DataContractSurrogate">
      <summary>Gets or sets a serialization surrogate. </summary>
      <returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> interface that can be used to customize how an XML schema representation is exported for a specific type. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ExportOptions.KnownTypes">
      <summary>Gets the collection of types that may be encountered during serialization or deserialization. </summary>
      <returns>A KnownTypes collection that contains types that may be encountered during serialization or deserialization. XML schema representations are exported for all the types specified in this collection by the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" />.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ExtensionDataObject">
      <summary>Stores data from a versioned data contract that has been extended by adding new members. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.IDataContractSurrogate">
      <summary>Provides the methods needed to substitute one type for another by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> during serialization, deserialization, and export and import of XML schema documents (XSD). </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)">
      <summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
      <returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
      <param name="memberInfo">A <see cref="T:System.Reflection.MemberInfo" /> that describes the member. </param>
      <param name="dataContractType">A <see cref="T:System.Type" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)">
      <summary>During schema export operations, inserts annotations into the schema for non-null return values. </summary>
      <returns>An object that represents the annotation to be inserted into the XML schema definition. </returns>
      <param name="clrType">The CLR type to be replaced. </param>
      <param name="dataContractType">The data contract type to be annotated. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)">
      <summary>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type. </summary>
      <returns>The <see cref="T:System.Type" /> to substitute for the <paramref name="type" /> value. This type must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</returns>
      <param name="type">The CLR type <see cref="T:System.Type" /> to substitute. </param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)">
      <summary>During deserialization, returns an object that is a substitute for the specified object.</summary>
      <returns>The substituted deserialized object. This object must be of a type that is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</returns>
      <param name="obj">The deserialized object to be substituted.</param>
      <param name="targetType">The <see cref="T:System.Type" /> that the substituted object should be assigned to. </param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})">
      <summary>Sets the collection of known types to use for serialization and deserialization of the custom data objects. </summary>
      <param name="customDataTypes">A <see cref="T:System.Collections.ObjectModel.Collection`1" />  of <see cref="T:System.Type" /> to add known types to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)">
      <summary>During serialization, returns an object that substitutes the specified object. </summary>
      <returns>The substituted object that will be serialized. The object must be serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. For example, it must be marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute or other mechanisms that the serializer recognizes.</returns>
      <param name="obj">The object to substitute. </param>
      <param name="targetType">The <see cref="T:System.Type" /> that the substituted object should be assigned to.</param>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)">
      <summary>During schema import, returns the type referenced by the schema.</summary>
      <returns>The <see cref="T:System.Type" /> to use for the referenced type.</returns>
      <param name="typeName">The name of the type in schema.</param>
      <param name="typeNamespace">The namespace of the type in schema.</param>
      <param name="customData">The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)">
      <summary>Processes the type that has been generated from the imported schema.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that contains the processed type.</returns>
      <param name="typeDeclaration">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to process that represents the type declaration generated during schema import.</param>
      <param name="compileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains the other code generated during schema import.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.IExtensibleDataObject">
      <summary>Provides a data structure to store extra data encountered by the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> during deserialization of a type marked with the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData">
      <summary>Gets or sets the structure that contains extra data.</summary>
      <returns>An <see cref="T:System.Runtime.Serialization.ExtensionDataObject" /> that contains data that is not recognized as belonging to the data contract.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IgnoreDataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is not part of a data contract and is not serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.IgnoreDataMemberAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.ImportOptions">
      <summary>Represents the options that can be set on an <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ImportOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ImportOptions" /> class.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.CodeProvider">
      <summary>Gets or sets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance that provides the means to check whether particular options for a target language are supported.</summary>
      <returns>A <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> that provides the means to check whether particular options for a target language are supported.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.DataContractSurrogate">
      <summary>Gets or sets a data contract surrogate that can be used to modify the code generated during an import operation. </summary>
      <returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> interface that handles schema import. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.EnableDataBinding">
      <summary>Gets or sets a value that specifies whether types in generated code should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface.</summary>
      <returns>true if the generated code should implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.GenerateInternal">
      <summary>Gets or sets a value that specifies whether generated code will be marked internal or public.</summary>
      <returns>true if the code will be marked internal; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.GenerateSerializable">
      <summary>Gets or sets a value that specifies whether generated data contract classes will be marked with the <see cref="T:System.SerializableAttribute" /> attribute in addition to the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute.</summary>
      <returns>true to generate classes with the <see cref="T:System.SerializableAttribute" /> applied; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ImportXmlType">
      <summary>Gets or sets a value that determines whether all XML schema types, even those that do not conform to a data contract schema, will be imported.</summary>
      <returns>true to import all schema types; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.Namespaces">
      <summary>Gets a dictionary that contains the mapping of data contract namespaces to the CLR namespaces that must be used to generate code during an import operation.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IDictionary`2" /> that contains the namespace mappings. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ReferencedCollectionTypes">
      <summary>Gets a collection of types that represents data contract collections that should be referenced when generating code for collections, such as lists or dictionaries of items.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the referenced collection types.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.ImportOptions.ReferencedTypes">
      <summary>Gets a <see cref="T:System.Collections.Generic.IList`1" /> containing types referenced in generated code. </summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> that contains the referenced types. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.InvalidDataContractException">
      <summary>The exception that is thrown when the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> or <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> encounters an invalid data contract during serialization and deserialization. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains data needed to serialize and deserialize an object. </param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies user context during serialization and deserialization.</param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message. </summary>
      <param name="message">A description of the error. </param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message and inner exception. </summary>
      <param name="message">A description of the error. </param>
      <param name="innerException">The original <see cref="T:System.Exception" />. </param>
    </member>
    <member name="T:System.Runtime.Serialization.KnownTypeAttribute">
      <summary>Specifies types that should be recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> when serializing or deserializing a given type. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the name of a method that returns an <see cref="T:System.Collections.IEnumerable" /> of known types.</summary>
      <param name="methodName">The name of the method that returns an <see cref="T:System.Collections.IEnumerable" /> of types used when serializing or deserializing data.</param>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the specified type. </summary>
      <param name="type">The <see cref="T:System.Type" /> that is included as a known type when serializing or deserializing data.</param>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that will return a list of types that should be recognized during serialization or deserialization. </summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the method on the type defined by the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.Type">
      <summary>Gets the type that should be recognized during serialization or deserialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
      <returns>The <see cref="T:System.Type" /> that is used during serialization or deserialization. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.NetDataContractSerializer">
      <summary>Serializes and deserializes an instance of a type into XML stream or document using the supplied .NET Framework types. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with the supplied streaming context data. </summary>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains context data.</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with the supplied context data; in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data is ignored, the assembly loading method, and a surrogate selector.</summary>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains context data.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
      <param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> enumeration value that specifies a method for locating and loading assemblies.</param>
      <param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.ISurrogateSelector" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> value is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with the supplied XML root element and namespace.</summary>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.String,System.String,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with the supplied context data and root name and namespace; in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data is ignored, the assembly loading method, and a surrogate selector.</summary>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains context data.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
      <param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> enumeration value that specifies a method for locating and loading assemblies.</param>
      <param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to handle the legacy type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> value is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with two parameters of type <see cref="T:System.Xml.XmlDictionaryString" /> that contain the root element and namespace used to specify the content.</summary>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.#ctor(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Runtime.Serialization.StreamingContext,System.Int32,System.Boolean,System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.ISurrogateSelector)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer" /> class with the supplied context data, and root name and namespace (as <see cref="T:System.Xml.XmlDictionaryString" />  parameters); in addition, specifies the maximum number of items in the object to be serialized, and parameters to specify whether extra data found is ignored, assembly loading method, and a surrogate selector.</summary>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains context data.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. </param>
      <param name="ignoreExtensionDataObject">true to ignore the data supplied by an extension of the type; otherwise, false.</param>
      <param name="assemblyFormat">A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> enumeration value that specifies a method for locating and loading assemblies.</param>
      <param name="surrogateSelector">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to handle the legacy type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxItemsInObjectGraph" /> value is less than 0.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.AssemblyFormat">
      <summary>Gets a value that specifies a method for locating and loading assemblies.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> enumeration value that specifies a method for locating and loading assemblies.</returns>
      <exception cref="T:System.ArgumentException">The value being set does not correspond to any of the <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> values. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.Binder">
      <summary>Gets or sets an object that controls class loading.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used with the current formatter.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.Context">
      <summary>Gets or sets the object that enables the passing of context data that is useful while serializing or deserializing.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the context data.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.Deserialize(System.IO.Stream)">
      <summary>Deserializes an XML document or stream into an object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the XML to deserialize.</param>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.IgnoreExtensionDataObject">
      <summary>Gets a value that specifies whether data supplied by an extension of the object is ignored.</summary>
      <returns>true to ignore the data supplied by an extension of the type; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned on an object that can be deserialized using the specified reader.</summary>
      <returns>true, if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> that contains the XML to read.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="reader" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlReader" /> is positioned on an object that can be deserialized using the specified reader.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that contains the XML to read.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="reader" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.MaxItemsInObjectGraph">
      <summary>Gets the maximum number of items allowed in the object to be serialized.</summary>
      <returns>The maximum number of items allowed in the object. The default is <see cref="F:System.Int32.MaxValue" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object; also checks whether the object data conforms to the name and namespace used to create the serializer.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream or document.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace used to construct the serializer; false to skip the verification.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="reader" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="reader" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object; also checks whether the object data conforms to the name and namespace used to create the serializer.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace used to construct the serializer; false to skip the verification.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="reader" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes the specified object graph using the specified writer.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to serialize with.</param>
      <param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
    </member>
    <member name="P:System.Runtime.Serialization.NetDataContractSerializer.SurrogateSelector">
      <summary>Gets or sets an object that assists the formatter when selecting a surrogate for serialization.</summary>
      <returns>An <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> for selecting a surrogate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="writer" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.ArgumentNullException">the <paramref name="writer" /> is set to null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object containing the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML content.</param>
      <param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML content.</param>
      <param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML element.</param>
      <param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.NetDataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML element.</param>
      <param name="graph">The object to serialize. All child objects of this root object are automatically serialized.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of object to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.XmlObjectSerializer">
      <summary>Provides the base class used to serialize objects as XML streams or documents. This class is abstract.</summary>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader can read the data; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream or document.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader is positioned over the starting element; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
      <summary>Reads the XML stream or document with a <see cref="T:System.IO.Stream" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object; it also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML document or stream.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the content to the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">the type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">there is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">the maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Runtime.Serialization.XmlSerializableServices">
      <summary>Contains methods for reading and writing XML. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>Generates a default schema type given the specified type name and adds it to the specified schema set.</summary>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to add the generated schema type to.</param>
      <param name="typeQName">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the type name to assign the schema to. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="typeQName" /> argument is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.ReadNodes(System.Xml.XmlReader)">
      <summary>Reads a set of XML nodes from the specified reader and returns the result.</summary>
      <returns>An array of type <see cref="T:System.Xml.XmlNode" />. </returns>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> used for reading.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="xmlReader" /> argument is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">While reading, a null node was encountered.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlSerializableServices.WriteNodes(System.Xml.XmlWriter,System.Xml.XmlNode[])">
      <summary>Writes the supplied nodes using the specified writer.</summary>
      <param name="xmlWriter">An <see cref="T:System.Xml.XmlWriter" /> used for writing.</param>
      <param name="nodes">An array of type <see cref="T:System.Xml.XmlNode" /> to write.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="xmlWriter" /> argument is null.</exception>
    </member>
    <member name="T:System.Runtime.Serialization.XPathQueryGenerator">
      <summary>When given a class representing a data contract, and metadata representing a member of the contract, produces an XPath query for the member.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Text.StringBuilder,System.Xml.XmlNamespaceManager@)">
      <summary>Creates an XPath from a data contract using the specified contract data type, array of metadata elements, the top level element, and namespaces.</summary>
      <returns>
        <see cref="T:System.String" />The XPath generated from the type and member data.</returns>
      <param name="type">The type that represents a data contract.</param>
      <param name="pathToMember">The metadata, generated using the <see cref="M:System.Type.GetMember" /> method of the <see cref="T:System.Type" /> class, that points to the specific data member used to generate the query.</param>
      <param name="rootElementXpath">The top level element in the xpath.</param>
      <param name="namespaces">The XML namespaces and their prefixes found in the data contract.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XPathQueryGenerator.CreateFromDataContractSerializer(System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)">
      <summary>Creates an XPath from a data contract using the specified data contract type, array of metadata elements, and namespaces..</summary>
      <returns>
        <see cref="T:System.String" />The XPath generated from the type and member data.</returns>
      <param name="type">The type that represents a data contract.</param>
      <param name="pathToMember">The metadata, generated using the <see cref="M:System.Type.GetMember" /> method of the <see cref="T:System.Type" /> class, that points to the specific data member used to generate the query.</param>
      <param name="namespaces">The XML namespaces and their prefixes found in the data contract.</param>
    </member>
    <member name="T:System.Runtime.Serialization.XsdDataContractExporter">
      <summary>Allows the transformation of a set of .NET Framework types that are used in data contracts into an XML schema file (.xsd). </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> class with the specified set of schemas. </summary>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to be exported. </param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported. </summary>
      <returns>true if the types can be exported; otherwise, false.</returns>
      <param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1" />   of <see cref="T:System.Reflection.Assembly" /> that contains the assemblies with the types to export.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})">
      <summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a <see cref="T:System.Collections.Generic.ICollection`1" /> can be exported. </summary>
      <returns>true if the types can be exported; otherwise, false.</returns>
      <param name="types">A <see cref="T:System.Collections.Generic.ICollection`1" />   that contains the specified types to export.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)">
      <summary>Gets a value that indicates whether the specified common language runtime (CLR) type can be exported. </summary>
      <returns>true if the type can be exported; otherwise, false. </returns>
      <param name="type">The <see cref="T:System.Type" /> to export. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})">
      <summary>Transforms the types contained in the specified collection of assemblies. </summary>
      <param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1" />   (of <see cref="T:System.Reflection.Assembly" />) that contains the types to export.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">An <see cref="T:System.Reflection.Assembly" /> in the collection is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})">
      <summary>Transforms the types contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> passed to this method.</summary>
      <param name="types">A  <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Type" />) that contains the types to export.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">A type in the collection is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)">
      <summary>Transforms the specified .NET Framework type into an XML schema definition language (XSD) schema. </summary>
      <param name="type">The <see cref="T:System.Type" /> to transform into an XML schema. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)">
      <summary>Returns the top-level name and namespace for the <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the top-level name and namespace for this <see cref="T:System.Type" />, which is written to the stream when writing this object. </returns>
      <param name="type">The <see cref="T:System.Type" /> to query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)">
      <summary>Returns the XML schema type for the specified type.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> that contains the XML schema. </returns>
      <param name="type">The type to return a schema for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)">
      <summary>Returns the contract name and contract namespace for the <see cref="T:System.Type" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the contract name of the type and its namespace.</returns>
      <param name="type">The <see cref="T:System.Type" /> that was exported. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Options">
      <summary>Gets or sets an <see cref="T:System.Runtime.Serialization.ExportOptions" /> that contains options that can be set for the export operation. </summary>
      <returns>An <see cref="T:System.Runtime.Serialization.ExportOptions" /> that contains options used to customize how types are exported to schemas.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractExporter.Schemas">
      <summary>Gets the collection of exported XML schemas. </summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas transformed from the set of common language runtime (CLR) types after calling the <see cref="Overload:System.Runtime.Serialization.XsdDataContractExporter.Export" /> method.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.XsdDataContractImporter">
      <summary>Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code. </param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
      <summary>Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />. </summary>
      <returns>true if the schemas can be transformed to data contract types; otherwise, false. </returns>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">A data contract involved in the import is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
      <summary>Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <returns>true if the schemas can be transformed; otherwise, false. </returns>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</param>
      <param name="typeNames">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">A data contract involved in the import is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
      <summary>Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</summary>
      <returns>true if the element can be imported; otherwise, false.</returns>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</param>
      <param name="element">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="element" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">A data contract involved in the import is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />. </summary>
      <returns>true if the schemas can be transformed to data contract types; otherwise, false.</returns>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations. </param>
      <param name="typeName">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">A data contract involved in the import is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
      <summary>Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
      <summary>Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</returns>
      <param name="typeName">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
      <summary>Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</returns>
      <param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</param>
      <param name="element">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
      <summary>Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</returns>
      <param name="typeName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
      <summary>Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />. </summary>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
      <summary>Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</param>
      <param name="typeNames">A <see cref="T:System.Collections.Generic.ICollection`1" />  (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
      <summary>Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</returns>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</param>
      <param name="element">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
      <summary>Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="schemas">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations. </param>
      <param name="typeName">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
      <summary>Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation. </summary>
      <returns>A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection">
      <summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DataContractSerializerSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DataContractSerializerSection.DeclaredTypes">
      <summary>Gets a collection of types added to the <see cref="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes" /> property.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection" /> that contains the known types.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement">
      <summary>Handles the XML elements used to add known types that are used for serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> class with the specified type name.</summary>
      <param name="typeName">The name of the type that requires a collection of known types.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.KnownTypes">
      <summary>Gets the collection of known types.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection" /> that contains the known types.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElement.Type">
      <summary>Gets or sets the name of the declared type that requires a collection of known types.</summary>
      <returns>The name of the declared type.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection">
      <summary>Handles the XML elements used to configure XML serialization using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Add(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>Adds the specified configuration element.</summary>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> to add.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Clear">
      <summary>Clears the collection of all items.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Contains(System.String)">
      <summary>Returns a value if the collection contains the item specified by its type name.</summary>
      <returns>true if the collection contains the specified item; otherwise, false.</returns>
      <param name="typeName">The name of the configuration element to search for.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>Returns the index of the specified configuration element.</summary>
      <returns>The index of the specified configuration element; otherwise, -1.</returns>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> to find.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.Int32)">
      <summary>Returns the configuration element specified by its index.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> specified by its index.</returns>
      <param name="index">The index of the element to access.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Item(System.String)">
      <summary>Returns the item specified by its key.</summary>
      <returns>The configuration element specified by its key.</returns>
      <param name="typeName">The name of the type (that functions as a key) to return.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.Runtime.Serialization.Configuration.DeclaredTypeElement)">
      <summary>Removes the specified configuration element from the collection.</summary>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.DeclaredTypeElement" /> to remove.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.Remove(System.String)">
      <summary>Removes the configuration element specified by its key.</summary>
      <param name="typeName">The type name (that functions as a key) of the configuration element to remove.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the configuration element at the specified index.</summary>
      <param name="index">The index of the configuration element to remove.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.ParameterElement">
      <summary>Handles the XML elements used to configure XML serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> class with the specified index.</summary>
      <param name="index">Specifies a position in the collection of parameters.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> class with the specified type name.</summary>
      <param name="typeName">The name of the parameter's type.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Index">
      <summary>Gets or sets the position of the generic known type.</summary>
      <returns>The position of the parameter in the containing generic declared type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Parameters">
      <summary>Gets the collection of parameters.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" /> that contains all parameters.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElement.Type">
      <summary>Gets or sets the type name of the parameter of the generic known type.</summary>
      <returns>The type name of the parameter.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.ParameterElementCollection">
      <summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Add(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>Adds an element to the collection of parameter elements.</summary>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> element to add to the collection.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Clear">
      <summary>Removes all members of the collection.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.CollectionType">
      <summary>Gets the type of the parameters collection in configuration.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> that contains the type of the parameters collection in configuration.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Contains(System.String)">
      <summary>Gets or sets a value specifying whether the named type is found in the collection.</summary>
      <returns>true if the element is present; otherwise, false.</returns>
      <param name="typeName">The name of the type to find.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.IndexOf(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>Gets the position of the specified element in the collection.</summary>
      <returns>The position of the specified element.</returns>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> element to find.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.ParameterElementCollection.Item(System.Int32)">
      <summary>Gets or sets the element in the collection at the specified position.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> from the collection.</returns>
      <param name="index">The position of the element in the collection to get or set.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.Remove(System.Runtime.Serialization.Configuration.ParameterElement)">
      <summary>Removes the specified element from the collection.</summary>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.ParameterElement" /> to remove.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.ParameterElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified position.</summary>
      <param name="index">The position of the element to remove.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup">
      <summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.SerializationSectionGroup.DataContractSerializer">
      <summary>Gets the <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" /> used to set up the known types collection.</summary>
      <returns>The <see cref="T:System.Runtime.Serialization.Configuration.DataContractSerializerSection" /> used for the serialization configuration section.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.SerializationSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>Gets the serialization configuration section for the specified configuration.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.SerializationSectionGroup" /> that represents the configuration section.</returns>
      <param name="config">A <see cref="T:System.Configuration.Configuration" /> that represents the configuration to retrieve.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.TypeElement">
      <summary>Handles the XML elements used to configure serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> class with the specified type name. </summary>
      <param name="typeName">The name of the type that uses known types.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Index">
      <summary>Gets or sets the position of the element.</summary>
      <returns>The position of the element.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Parameters">
      <summary>Gets a collection of parameters.</summary>
      <returns>A <see cref="T:System.Runtime.Serialization.Configuration.ParameterElementCollection" /> that contains the parameters for the type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElement.Type">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Configuration.TypeElementCollection">
      <summary>Handles the XML elements used to configure the known types used for serialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Configuration.TypeElementCollection" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Add(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>Adds the specified element to the collection.</summary>
      <param name="element">A <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> that represents the known type to add.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Clear">
      <summary>Removes all members of the collection.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.CollectionType">
      <summary>Gets the collection of elements that represents the types using known types.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> that contains the element objects.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.IndexOf(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>Returns the position of the specified element.</summary>
      <returns>The position of the specified element.</returns>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> to find in the collection.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Configuration.TypeElementCollection.Item(System.Int32)">
      <summary>Returns a specific member of the collection by its position.</summary>
      <returns>The element at the specified position.</returns>
      <param name="index">The position of the item to return.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.Remove(System.Runtime.Serialization.Configuration.TypeElement)">
      <summary>Removes the specified element from the collection.</summary>
      <param name="element">The <see cref="T:System.Runtime.Serialization.Configuration.TypeElement" /> to remove.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Configuration.TypeElementCollection.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified position.</summary>
      <param name="index">The position in the collection from which to remove the element.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies a list of known types that may be present in the object graph, the maximum number of graph items to serialize or deserialize, whether to ignore unexpected data or emit type information, and a surrogate for custom serialization.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content. </param>
      <param name="maxItemsInObjectGraph">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
      <param name="ignoreExtensionDataObject">true to ignore the <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> interface upon serialization and ignore unexpected data upon deserialization; otherwise, false. The default is false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="alwaysEmitTypeInformation">true to emit type information; otherwise, false. The default is false.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter, with a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize. The default is "root".</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root name of the XML element, a list of known types that may be present in the object graph, the maximum number of graph items to serialize or deserialize, whether to ignore unexpected data or emit type information, and a surrogate for custom serialization.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize. The default is "root".</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. The default is the value returned by the <see cref="F:System.Int32.MaxValue" /> property.</param>
      <param name="ignoreExtensionDataObject">true to ignore the <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> interface upon serialization and ignore unexpected data upon deserialization; otherwise, false. The default is false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="alwaysEmitTypeInformation">true to emit type information; otherwise, false. The default is false.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type <see cref="T:System.Xml.XmlDictionaryString" />, with a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that is serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content. </param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type},System.Int32,System.Boolean,System.Runtime.Serialization.IDataContractSurrogate,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root name of the XML element, a list of known types that may be present in the object graph, the maximum number of graph items to serialize or deserialize, whether to ignore unexpected data or emit type information, and a surrogate for custom serialization.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
      <param name="maxItemsInObjectGraph">The maximum number of items in the graph to serialize or deserialize. The default is the value returned by the <see cref="F:System.Int32.MaxValue" /> property.</param>
      <param name="ignoreExtensionDataObject">true to ignore the <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> interface upon serialization and ignore unexpected data upon deserialization; otherwise, false. The default is false.</param>
      <param name="dataContractSurrogate">An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> to customize the serialization process.</param>
      <param name="alwaysEmitTypeInformation">true to emit type information; otherwise, false. The default is false.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractSurrogate">
      <summary>Gets a surrogate type that is currently active for a given <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> instance. Surrogates can extend the serialization or deserialization process.</summary>
      <returns>An implementation of the <see cref="T:System.Runtime.Serialization.IDataContractSurrogate" /> class.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary>Gets a value that specifies whether unknown data is ignored on deserialization and whether the <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> interface is ignored on serialization.</summary>
      <returns>true to ignore unknown data and <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned over an XML element that represents an object the serializer can deserialize from.</summary>
      <returns>true if the reader is positioned correctly; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream mapped from JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is positioned correctly; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> constructor.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary>Gets the maximum number of items in an object graph that the serializer serializes or deserializes in one read or write call.</summary>
      <returns>The maximum number of items to serialize or deserialize. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to be read.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>Reads the XML document mapped from JSON (JavaScript Object Notation) with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document mapped from JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML document mapped from JSON with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document mapped from JSON.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, false to skip the verification. The default is true.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML document mapped from JSON (JavaScript Object Notation) with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML document mapped from JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads an XML document mapped from JSON with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML document mapped from JSON.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, false, which skips the verification. The default is true.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the closing XML element to an XML document, using an <see cref="T:System.Xml.XmlDictionaryWriter" />, which can be mapped to JavaScript Object Notation (JSON).</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document to map to JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the closing XML element to an XML document, using an <see cref="T:System.Xml.XmlWriter" />, which can be mapped to JavaScript Object Notation (JSON).</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document mapped to JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that is written to.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream to map to JSON.</param>
      <param name="graph">The object that contains the data to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document to map to JSON.</param>
      <param name="graph">The object that contains the data to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> to write to.</param>
      <param name="graph">The object to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write to.</param>
      <param name="graph">The object to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>Specifies the interface for initializing a JavaScript Object Notation (JSON) reader when reusing them to read from a particular stream or buffer.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified buffer that contains JSON-encoded data.</summary>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> used by the reader.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified stream that contains JSON-encoded data.</summary>
      <param name="stream">The input <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> used by the reader.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">Delegate to call when the reader is closed.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.</summary>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> to which the writer writes.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding of the output stream.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>Produces instances of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <see cref="T:System.Xml.XmlDictionaryWriter" /> that can map an XML Infoset to JSON and write JSON-encoded data to a stream. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">Number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader. If null is specified as the value, the reader attempts to auto-detect the encoding.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data. </param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed. The default value is null.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">Number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data. </param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can process JavaScript Object Notation (JSON) data.</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data. </param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</returns>
      <param name="stream">The input <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the reader. If null is specified as the value, the reader attempts to auto-detect the encoding.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data. </param>
      <param name="onClose">The <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> delegate to call when the reader is closed.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JavaScript Object Notation (JSON).</returns>
      <param name="stream">The input <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> used to prevent Denial of Service attacks when reading untrusted data. </param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream based on an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise false. The default value is true.</param>
    </member>
    <member name="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
      <summary>Contains properties and methods that when implemented by a <see cref="T:System.Xml.XmlDictionaryWriter" />, allows processing of XML fragments.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments. </summary>
      <returns>true if this <see cref="T:System.Xml.XmlDictionaryWriter" /> can process XML fragments; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
      <summary>Ends the processing of an XML fragment.</summary>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
      <summary>Starts the processing of an XML fragment.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="generateSelfContainedTextFragment">If true, any namespaces declared outside the fragment is declared again if used inside of it; if false the namespaces are not declared again.</param>
    </member>
    <member name="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes an XML fragment to the underlying stream of the writer.</summary>
      <param name="buffer">The buffer to write to.</param>
      <param name="offset">The starting position from which to write in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes to be written to the <paramref name="buffer" />.</param>
    </member>
    <member name="T:System.Xml.IStreamProvider">
      <summary>An interface that can be implemented by classes providing streams.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IStreamProvider.GetStream">
      <summary>Gets a stream.</summary>
      <returns>A <see cref="T:System.IO.Stream" />.</returns>
    </member>
    <member name="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
      <summary>Releases a stream to output.</summary>
      <param name="stream">The stream being released.</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryReaderInitializer">
      <summary>Provides methods for reinitializing a binary reader to read a new document.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes the binary reader using the given input buffer.</summary>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">Starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">Number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <param name="onClose">Delegate to call when the reader is closed.</param>
    </member>
    <member name="M:System.Xml.IXmlBinaryReaderInitializer.SetInput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Reinitializes the binary reader using the given input stream.</summary>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <param name="onClose">Delegate to call when the reader is closed.</param>
    </member>
    <member name="T:System.Xml.IXmlBinaryWriterInitializer">
      <summary>Specifies implementation requirements for XML binary writers that derive from this interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlBinaryWriterInitializer.SetOutput(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary>Specifies initialization requirements for XML binary writers that implement this method.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryWriterSession" /> to use.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="T:System.Xml.IXmlDictionary">
      <summary>An interface that defines the contract that an Xml dictionary must implement to be used by <see cref="T:System.Xml.XmlDictionaryReader" /> and <see cref="T:System.Xml.XmlDictionaryWriter" /> implementations.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if key is in the dictionary, otherwise false.</returns>
      <param name="key">Key to look up.</param>
      <param name="result">If <paramref name="key" /> is defined, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if value is in the dictionary, otherwise false.</returns>
      <param name="value">String value being checked for.</param>
      <param name="result">The corresponding <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary, otherwise false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">The matching <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
    </member>
    <member name="T:System.Xml.IXmlMtomReaderInitializer">
      <summary>Specifies implementation requirements for XML MTOM readers that derive from this interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Specifies initialization requirements for XML MTOM readers that read a buffer.</summary>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encodings">The possible character encodings of the input.</param>
      <param name="contentType">The Content-Type of the message. Can be null if the MIME type is present in the document being read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply to the reader.</param>
      <param name="maxBufferSize">The maximum allowed size of the buffer.</param>
      <param name="onClose">The delegate to use when an onClose event happens.</param>
    </member>
    <member name="M:System.Xml.IXmlMtomReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Specifies initialization requirements for XML MTOM readers that read a stream.</summary>
      <param name="stream">The stream from which to read.</param>
      <param name="encodings">The possible character encodings of the stream.</param>
      <param name="contentType">The Content-Type of the message. Can be null if the MIME type is present in the document being read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply to the reader.</param>
      <param name="maxBufferSize">The maximum allowed size of the buffer.</param>
      <param name="onClose">The delegate to use when an onClose event happens.</param>
    </member>
    <member name="T:System.Xml.IXmlMtomWriterInitializer">
      <summary>When implemented by an MTOM writer, this interface ensures initialization for an MTOM writer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlMtomWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>When implemented by an MTOM writer, initializes an MTOM writer.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="maxSizeInBytes">The maximum number of bytes that are buffered in the writer.</param>
      <param name="startInfo">An attribute in the ContentType SOAP header, set to "Application/soap+xml".</param>
      <param name="boundary">The MIME boundary string.</param>
      <param name="startUri">The URI for MIME section.</param>
      <param name="writeMessageHeaders">If true, write message headers.</param>
      <param name="ownsStream">If true, the stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="T:System.Xml.IXmlTextReaderInitializer">
      <summary>Specifies implementation requirements for XML text readers that derive from this interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Specifies initialization requirements for XML text readers that read a buffer.</summary>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
    </member>
    <member name="M:System.Xml.IXmlTextReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Specifies initialization requirements for XML text readers that read a stream.</summary>
      <param name="stream">The stream from which to read.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
    </member>
    <member name="T:System.Xml.IXmlTextWriterInitializer">
      <summary>Specifies implementation requirements for XML text writers that derive from this interface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.IXmlTextWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Specifies initialization requirements for XML text writers that implement this method.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="T:System.Xml.OnXmlDictionaryReaderClose">
      <summary>delegate for a callback method when closing the reader.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> that fires the OnClose event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.UniqueId">
      <summary>A unique identifier optimized for Guids.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor">
      <summary>Creates a new instance of this class with a new, unique Guid.</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
      <summary>Creates a new instance of this class using a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid" /> provides less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
      <summary>Creates a new instance of this class starting from an offset within a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <param name="offset">Offset position within the byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " />and<paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Creates a new instance of this class starting from an offset within a char using a specified number of entries.</summary>
      <param name="chars">A char array that represents a <see cref="T:System.Guid" />.</param>
      <param name="offset">Offset position within the char array that represents a <see cref="T:System.Guid" />.</param>
      <param name="count">Number of array entries to use, starting from <paramref name="offset" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> less than zero or greater than the length of the array minus <paramref name="offset" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="count" /> equals zero.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
      <summary>Creates a new instance of this class using a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.String)">
      <summary>Creates a new instance of this class using a string.</summary>
      <param name="value">A string used to generate the <see cref="T:System.Xml.UniqueId" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">Length of<paramref name=" value" /> is zero.</exception>
    </member>
    <member name="P:System.Xml.UniqueId.CharArrayLength">
      <summary>Gets the length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>The length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.Equals(System.Object)">
      <summary>Tests whether an object equals this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>true if the object equals this <see cref="T:System.Xml.UniqueId" />; otherwise false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Xml.UniqueId.GetHashCode">
      <summary>Creates a hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>An integer hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.UniqueId.IsGuid">
      <summary>Indicates whether the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />.</summary>
      <returns>true if the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />; otherwise false.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for equality of two <see cref="T:System.Xml.UniqueId" />s.</summary>
      <returns>true if the two <see cref="T:System.Xml.UniqueId" />s are equal, or are both null; false if they are not equal, or if only one of them is null.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for inequality of two <see cref="T:System.Xml.UniqueId" />s.</summary>
      <returns>true if the overridden equality operator returns false; otherwise false.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
      <summary>Puts the <see cref="T:System.Xml.UniqueId" /> value into a char array.</summary>
      <returns>Number of entries in the char array filled by the <see cref="T:System.Xml.UniqueId" /> value.</returns>
      <param name="chars">The char array.</param>
      <param name="offset">Position in the char array to start inserting the <see cref="T:System.Xml.UniqueId" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " />and<paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.ToString">
      <summary>Displays the <see cref="T:System.Xml.UniqueId" /> value in string format.</summary>
      <returns>A string representation of the <see cref="T:System.Xml.UniqueId" /> value.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Byte[],System.Int32)">
      <summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId" /> as a <see cref="T:System.Guid" /> and store it in the given byte array at the specified offest.</summary>
      <returns>true if the value stored in this instance of <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />; otherwise false.</returns>
      <param name="buffer">byte array that will contain the <see cref="T:System.Guid" />.</param>
      <param name="offset">Position in the byte array to start inserting the <see cref="T:System.Guid" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer " />and<paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.TryGetGuid(System.Guid@)">
      <summary>Tries to get the value of the <see cref="T:System.Xml.UniqueId" /> as a <see cref="T:System.Guid" />.</summary>
      <returns>true if the UniqueId represents a <see cref="T:System.Guid" />; otherwise false.</returns>
      <param name="guid">The <see cref="T:System.Guid" /> if successful; otherwise <see cref="F:System.Guid.Empty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer " />and<paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryReaderSession">
      <summary>Enables optimized strings to be managed in a dynamic way.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.#ctor">
      <summary>Creates an instance of this class.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryString" /> from the input parameters and adds it to an internal collection</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryString" />.</returns>
      <param name="id">The key value.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="id" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="id" /> already exists.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.Clear">
      <summary>Clears the internal collection of all contents.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains an entry matching a key.</summary>
      <returns>true if an entry matching the <paramref name="key" /> was found; otherwise false.</returns>
      <param name="key">The key to search on.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains an entry matching a value.</summary>
      <returns>true if an entry matching the <paramref name="value" /> was found; otherwise false.</returns>
      <param name="value">The value to search for.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks whether the internal collection contains an entry matching a value.</summary>
      <returns>true if an entry matching the <paramref name="value" /> was found; otherwise false.</returns>
      <param name="value">The value to search for.</param>
      <param name="result">The <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.XmlBinaryWriterSession">
      <summary>Enables using a dynamic dictionary to compress common strings that appear in a message and maintain state.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.#ctor">
      <summary>Creates an instance of this class.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.Reset">
      <summary>Clears out the internal collections.</summary>
    </member>
    <member name="M:System.Xml.XmlBinaryWriterSession.TryAdd(System.Xml.XmlDictionaryString,System.Int32@)">
      <summary>Tries to add an <see cref="T:System.Xml.XmlDictionaryString" /> to the internal collection.</summary>
      <returns>true, unless an exception was thrown.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> to add.</param>
      <param name="key">The key of the <see cref="T:System.Xml.XmlDictionaryString" /> that was successfully added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An entry with key = <paramref name="key" /> already exists.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionary">
      <summary>Implements a dictionary used to optimize 's XML reader/writer implementations.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor">
      <summary>Creates an empty <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
      <summary>Creates a <see cref="T:System.Xml.XmlDictionary" /> with an initial capacity.</summary>
      <param name="capacity">The initial size of the dictionary.</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.Add(System.String)">
      <summary>Adds a string to the <see cref="T:System.Xml.XmlDictionary" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" /> that was added.</returns>
      <param name="value">String to add to the dictionary.</param>
    </member>
    <member name="P:System.Xml.XmlDictionary.Empty">
      <summary>Gets a static empty <see cref="T:System.Xml.IXmlDictionary" />.</summary>
      <returns>A static empty <see cref="T:System.Xml.IXmlDictionary" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if key is in the dictionary, otherwise false.</returns>
      <param name="key">Key to look up.</param>
      <param name="result">If <paramref name="key" /> is defined, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise null.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if value is in the dictionary, otherwise false.</returns>
      <param name="value">String value being checked for.</param>
      <param name="result">The corresponding <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary, otherwise false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">The matching <see cref="T:System.Xml.XmlDictionaryString" />, if found; otherwise null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XmlDictionaryReader">
      <summary>An abstract class that the  derives from to do serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.#ctor">
      <summary>Creates an instance of this class. Invoked only by its derived classes.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>Returns false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <param name="onClose">Delegate to be called when the reader is closed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the buffer length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero or greater than the buffer length minus the offset.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="quotas" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">
        <see cref="T:System.Xml.XmlDictionary" /> to use.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="session">
        <see cref="T:System.Xml.XmlBinaryReaderSession" /> to use.</param>
      <param name="onClose">Delegate to be called when the reader is closed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read .NET Binary XML Format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="quotas">The quotas that apply to this operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> from an existing <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="reader">An instance of <see cref="T:System.Xml.XmlReader" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encoding">The possible character encoding of the input.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encodings">The possible character encodings of the input.</param>
      <param name="contentType">The Content-Type MIME type of the message.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encodings">The possible character encodings of the input.</param>
      <param name="contentType">The Content-Type MIME type of the message.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply to the reader.</param>
      <param name="maxBufferSize">The maximum allowed size of the buffer.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encodings">The possible character encodings of the input.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="encoding">The possible character encoding of the stream.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="encodings">The possible character encodings of the stream.</param>
      <param name="contentType">The Content-Type MIME type of the message.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.String,System.Xml.XmlDictionaryReaderQuotas,System.Int32,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="encodings">The possible character encodings of the stream.</param>
      <param name="contentType">The Content-Type MIME type of the message.</param>
      <param name="quotas">The MIME type of the message.</param>
      <param name="maxBufferSize">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply to the reader.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateMtomReader(System.IO.Stream,System.Text.Encoding[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> that reads XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="encodings">The possible character encodings of the stream.</param>
      <param name="quotas">The quotas to apply to this reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> object that specifies the encoding properties to apply.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The quotas applied to the reader.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="quotas">The quotas applied to the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> object that specifies the encoding properties to apply.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> to apply.</param>
      <param name="onClose">The delegate to be called when the reader is closed.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="quotas">The quotas applied to the reader.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
      <summary>This method is not yet implemented.</summary>
      <exception cref="T:System.NotSupportedException">Always.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>When overridden in a derived class, gets the value of an attribute.</summary>
      <returns>The value of the attribute.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetNonAtomizedNames(System.String@,System.String@)">
      <summary>Gets non-atomized names.</summary>
      <param name="localName">The local name.</param>
      <param name="namespaceUri">The namespace for the local <paramref name="localName" />.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The string array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The <see cref="T:System.Xml.XmlDictionaryString" /> array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches local name of the current node; otherwise false.</returns>
      <param name="localName">The local name of the current node.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches local name of the current node; otherwise false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches namespace of the current node; otherwise false.</returns>
      <param name="namespaceUri">The namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches namespace of the current node; otherwise false.</returns>
      <param name="namespaceUri">Namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
      <summary>Checks whether the reader is positioned at the start of an array. This class returns false, but derived classes that have the concept of arrays might return true.</summary>
      <returns>true if the reader is positioned at the start of an array node; otherwise false.</returns>
      <param name="type">Type of the node, if a valid node; otherwise null.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the first tag is a start tag or empty element tag and if the local name and namespace URI match those of the current node.</summary>
      <returns>true if the first tag in the array is a start tag or empty element tag and matches <paramref name="localName" /> and <paramref name="namespaceUri" />; otherwise false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
      <summary>Tests whether the current node is a text node.</summary>
      <returns>true if the node type is <see cref="F:System.Xml.XmlNodetype.Text" />, <see cref="F:System.Xml.XmlNodetype.Whitespace" />, <see cref="F:System.Xml.XmlNodetype.SignificantWhitespace" />, <see cref="F:System.Xml.XmlNodetype.CDATA" />, or <see cref="F:System.Xml.XmlNodetype.Attribute" />; otherwise false.</returns>
      <param name="nodeType">Type of the node being tested.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
      <summary>Tests whether the current content node is a start element or an empty element.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
      <summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element matches the given argument.</summary>
      <param name="name">The <see cref="P:System.Xml.XmlReader.Name" /> property of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
      <summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element matches the given arguments.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the current content node is a start element or an empty element and if the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element matches the given argument.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.Quotas">
      <summary>Gets the quota values that apply to the current instance of this class.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that applies to the current instance of this class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The local name of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The umber of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes type into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The number of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Converts a node's content to a specified type.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the value to be returned.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string. This value can be a null reference.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>A byte array that contains the Base64 decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than the MaxArrayLength quota for this reader.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <param name="maxByteArrayContentLength">The maximum array length.</param>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <paramref name="maxByteArrayContentLength" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the content into a char array.</summary>
      <returns>Number of characters read.</returns>
      <param name="chars">The array into which the characters are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of characters to put in the array.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
      <summary>Converts a node's content to decimal.</summary>
      <returns>The decimal representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
      <summary>Converts a node's content to float.</summary>
      <returns>The float representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
      <summary>Converts a node's content to guid.</summary>
      <returns>The guid representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
      <summary>Converts a node's content to a qualified name representation.</summary>
      <param name="localName">The <see cref="P:System.Xml.XmlReader.LocalName" /> part of the qualified name (out parameter).</param>
      <param name="namespaceUri">The <see cref="P:System.Xml.XmlReader.NamespaceURI" /> part of the qualified name (out parameter).</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
      <summary>Converts a node's content to a string.</summary>
      <returns>Node content in string representation.</returns>
      <param name="maxStringContentLength">The maximum string length.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of strings to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in<paramref name=" strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of <see cref="T:System.Xml.XmlDictionaryString" /> objects to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in<paramref name=" strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
      <summary>Converts a node's content to <see cref="T:System.TimeSpan" />.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
      <summary>Converts a node's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
      <summary>Converts a node's content to a array of Base64 bytes.</summary>
      <returns>The node's content represented as an array of Base64 bytes.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
      <summary>Converts a node's content to an array of BinHex bytes.</summary>
      <returns>The node's content represented as an array of BinHex bytes.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
      <summary>Converts an element's content to a <see cref="T:System.Boolean" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
      <summary>Converts an element's content to a <see cref="T:System.DateTime" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
      <summary>Converts an element's content to a <see cref="T:System.Decimal" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
      <summary>Converts an element's content to a <see cref="T:System.Double" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
      <summary>Converts an element's content to a floating point number (<see cref="T:System.Single" />).</summary>
      <returns>The node's content represented as a floating point number (<see cref="T:System.Single" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
      <summary>Converts an element's content to a <see cref="T:System.Guid" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
      <summary>Converts an element's content to an integer (<see cref="T:System.Int32" />).</summary>
      <returns>The node's content represented as an integer (<see cref="T:System.Int32" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
      <summary>Converts an element's content to a long integer (<see cref="T:System.Int64" />).</summary>
      <returns>The node's content represented as a long integer (<see cref="T:System.Int64" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
      <summary>Converts an element's content to a <see cref="T:System.String" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
      <summary>Converts an element's content to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
      <summary>Converts an element's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
      <summary>Checks whether the current node is an element and advances the reader to the next node.</summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> returns false.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
      <summary>Checks whether the current node is an element with the given <paramref name="name" /> and advances the reader to the next node.</summary>
      <param name="name">The qualified name of the element.</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> returns false.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
      <summary>Checks whether the current node is an element with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> and advances the reader to the next node.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> returns false.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the current node is an element with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> and advances the reader to the next node.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)" /> returns false.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the current node is an element with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> and advances the reader to the next node.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString">
      <summary>Reads the contents of the current node into a string.</summary>
      <returns>A string that contains the contents of the current node.</returns>
      <exception cref="T:System.InvalidOperationException">Unable to read the contents of the current node.</exception>
      <exception cref="T:System.Xml.XmlException">Maximum allowed string length exceeded.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadString(System.Int32)">
      <summary>Reads the contents of the current node into a string with a given maximum length.</summary>
      <returns>A string that contains the contents of the current node.</returns>
      <param name="maxStringContentLength">Maximum allowed string length.</param>
      <exception cref="T:System.InvalidOperationException">Unable to read the contents of the current node.</exception>
      <exception cref="T:System.Xml.XmlException">Maximum allowed string length exceeded.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Not implemented.</summary>
      <returns>Not implemented.</returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not yet implemented.</summary>
      <param name="stream">The stream to read from.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="count">Returns 0, unless overridden in a derived class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="length">Returns 0, unless overridden in a derived class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="localName">Returns null, unless overridden in a derived class..</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="namespaceUri">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="value">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotas">
      <summary>Contains configurable quota values for XmlDictionaryReaders.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.#ctor">
      <summary>Creates a new instance of this class.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReaderQuotas.CopyTo(System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Sets the properties on a passed-in quotas instance, based on the values in this instance.</summary>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> instance to which to copy values.</param>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for the passed in instance.</exception>
      <exception cref="T:System.ArgumentNullException">Passed in target<paramref name=" quotas" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
      <summary>Gets an instance of this class with all properties set to maximum values.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> with properties set to <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
      <summary>Gets and sets the maximum allowed array length.</summary>
      <returns>The maximum allowed array length. The default is 16384.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
      <summary>Gets and sets the maximum allowed bytes returned for each read.</summary>
      <returns>The maximum allowed bytes returned for each read. The default is 4096.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
      <summary>Gets and sets the maximum nested node depth.</summary>
      <returns>The maximum nested node depth. The default is 32;</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value and quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value is less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
      <summary>Gets and sets the maximum characters allowed in a table name.</summary>
      <returns>The maximum characters allowed in a table name. The default is 16384.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
      <summary>Gets and sets the maximum string length returned by the reader.</summary>
      <returns>The maximum string length returned by the reader. The default is 8192.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionaryString">
      <summary>Represents an entry stored in a <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
      <summary>Creates an instance of this class.</summary>
      <param name="dictionary">The <see cref="T:System.Xml.IXmlDictionary" /> containing this instance.</param>
      <param name="value">The string that is the value of the dictionary entry.</param>
      <param name="key">The integer that is the key of the dictionary entry.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="key" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> / 4.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Dictionary">
      <summary>Represents the <see cref="T:System.Xml.IXmlDictionary" /> passed to the constructor of this instance of <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>The <see cref="T:System.Xml.IXmlDictionary" /> for this dictionary entry.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Empty">
      <summary>Gets an <see cref="T:System.Xml.XmlDictionaryString" /> representing the empty string.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryString" /> representing the empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Key">
      <summary>Gets the integer key for this instance of the class. </summary>
      <returns>The integer key for this instance of the class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.ToString">
      <summary>Displays a text representation of this object.</summary>
      <returns>The string value for this instance of the class.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Value">
      <summary>Gets the string value for this instance of the class. </summary>
      <returns>The string value for this instance of the class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XmlDictionaryWriter">
      <summary>An abstract class that the  derives from to do serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.#ctor">
      <summary>Creates an instance of this class. Invoked only by its derived classes because this class is abstract.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes  binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes  binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes  binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryWriterSession" /> to use.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes  binary XML format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream from which to read.</param>
      <param name="dictionary">The <see cref="T:System.Xml.XmlDictionary" /> to use as the shared dictionary.</param>
      <param name="session">The <see cref="T:System.Xml.XmlBinaryWriterSession" /> to use.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> from an existing <see cref="T:System.Xml.XmlWriter" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="writer">An instance of <see cref="T:System.Xml.XmlWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="maxSizeInBytes">The maximum number of bytes that are buffered in the writer.</param>
      <param name="startInfo">An attribute in the ContentType SOAP header.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateMtomWriter(System.IO.Stream,System.Text.Encoding,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes XML in the MTOM format.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="maxSizeInBytes">The maximum number of bytes that are buffered in the writer.</param>
      <param name="startInfo">The content-type of the MIME part that contains the Infoset.</param>
      <param name="boundary">The MIME boundary in the message.</param>
      <param name="startUri">The content-id URI of the MIME part that contains the Infoset.</param>
      <param name="writeMessageHeaders">If true, write message headers.</param>
      <param name="ownsStream">If true, the stream is closed by the writer when done; otherwise false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML. </summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the output.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes text XML.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The character encoding of the stream.</param>
      <param name="ownsStream">If true, stream is closed by the writer when done; otherwise false.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
      <summary>This method is not yet implemented. </summary>
      <exception cref="T:System.NotSupportedException">Method is not implemented yet.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not yet implemented. </summary>
      <param name="stream">The stream to write to.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">Method is not implemented yet.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes values from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the data.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of values to write from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="prefix">The prefix of the attribute.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the XmlReader; otherwise if true, use default attributes; otherwise false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the <see cref="T:System.Xml.XmlReader" />; otherwise false.If true, use default attributes; otherwise false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name of the qualified name.</param>
      <param name="namespaceUri">The namespace URI of the qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified local name, and namespace URI.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start tag and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start tag and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
      <summary>Writes the given text content.</summary>
      <param name="value">The text to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the text node that an <see cref="T:System.Xml.XmlDictionaryReader" /> is currently positioned on.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> to get the text value from.</param>
      <param name="isAttribute">Specifies whether the reader is positioned on an attribute value or element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
      <summary>Writes a <see cref="T:System.Guid" /> value.</summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
      <summary>Writes a <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.IStreamProvider)">
      <summary>Writes a value from an <see cref="T:System.Xml.IStreamProvider" />.</summary>
      <param name="value">The <see cref="T:System.Xml.IStreamProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="value" /> returns a null stream object.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
      <summary>Writes a Unique Id value.</summary>
      <param name="value">The Unique Id value to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
      <summary>Writes a <see cref="T:System.Xml.XmlDictionaryString" /> value.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> value.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>Writes a standard XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes an XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.Activities.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Activities</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.CorrelationActionMessageFilter">
      <summary>Provides a XAML-friendly implementation of a <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> that filters on a single action.</summary>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.CorrelationActionMessageFilter.Action">
      <summary>Gets or sets the action for the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</summary>
      <returns>The action for the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</returns>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> is equal to the specified <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</summary>
      <returns>true if the specified <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> is equal to the current <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> to compare with the current <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</param>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> instance.</summary>
      <returns>The hash code for the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>Determines whether the specified messageâs action matches the <see cref="P:System.ServiceModel.CorrelationActionMessageFilter.Action" /> of this <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</summary>
      <returns>true if the action matches; otherwise, false.</returns>
      <param name="message">The message to compare.</param>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Determines whether the action of the message contained by the specified message buffer matches the <see cref="P:System.ServiceModel.CorrelationActionMessageFilter.Action" /> of this <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</summary>
      <returns>true if the action matches; otherwise, false.</returns>
      <param name="messageBuffer">The message buffer that contains the message to compare.</param>
    </member>
    <member name="M:System.ServiceModel.CorrelationActionMessageFilter.ToString">
      <summary>Returns a <see cref="T:System.String" /> representation of the <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</summary>
      <returns>The current <see cref="T:System.ServiceModel.CorrelationActionMessageFilter" />.</returns>
    </member>
    <member name="T:System.ServiceModel.CorrelationQuery">
      <summary>Represents a <see cref="P:System.ServiceModel.CorrelationQuery.Where" /> clause and a <see cref="P:System.ServiceModel.CorrelationQuery.Select" /> clause that identify the unique characteristics of a message so that it can be routed to the correct instance.</summary>
    </member>
    <member name="M:System.ServiceModel.CorrelationQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.CorrelationQuery" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.CorrelationQuery.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.ServiceModel.CorrelationQuery" /> is equal to the specified object.</summary>
      <returns>true if the current <see cref="T:System.ServiceModel.CorrelationQuery" /> is equal to the specified object; otherwise, false.</returns>
      <param name="other">The object to compare.</param>
    </member>
    <member name="M:System.ServiceModel.CorrelationQuery.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.ServiceModel.CorrelationQuery" />.</summary>
      <returns>The hash code for the current <see cref="T:System.ServiceModel.CorrelationQuery" />.</returns>
    </member>
    <member name="P:System.ServiceModel.CorrelationQuery.Select">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.MessageQuerySet" /> that contains the elements in the message that compose the instance key that uniquely identifies the message.</summary>
      <returns>The <see cref="T:System.ServiceModel.MessageQuerySet" /> that contains the elements in the message that compose the instance key that uniquely identifies the message.</returns>
    </member>
    <member name="P:System.ServiceModel.CorrelationQuery.SelectAdditional">
      <summary>Gets a collection of clauses, each of which defines the set of elements in the message that make up an associated key.</summary>
      <returns>A collection of clauses, each of which defines the set of elements in the message that make up an associated key.</returns>
    </member>
    <member name="P:System.ServiceModel.CorrelationQuery.Where">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> that defines the set of messages for which this query applies.</summary>
      <returns>The message filter that defines the set of messages for which this query applies.</returns>
    </member>
    <member name="T:System.ServiceModel.Endpoint">
      <summary>Represents an endpoint declared in XAML.</summary>
    </member>
    <member name="M:System.ServiceModel.Endpoint.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Endpoint" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Endpoint.AddressUri">
      <summary>Gets or sets the endpointâs URI.</summary>
      <returns>The <see cref="T:System.Uri" /> for the endpoint..</returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.BehaviorConfigurationName">
      <summary>Gets or sets the behavior configuration name.</summary>
      <returns>The behavior configuration name.</returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.Binding">
      <summary>Gets or sets the binding for the endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.Binding" /> for the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Endpoint.GetAddress">
      <summary>Gets the address of the endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Endpoint.GetAddress(System.ServiceModel.ServiceHostBase)">
      <summary>Gets the address of the endpoint using the specified <see cref="T:System.ServiceModel.ServiceHostBase" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointAddress" /> of the endpoint.</returns>
      <param name="host">The <see cref="T:System.ServiceModel.ServiceHostBase" /> instance to use.</param>
    </member>
    <member name="P:System.ServiceModel.Endpoint.Headers">
      <summary>Gets the address headers collection for the endpoint.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Channels.AddressHeader" /> derived instances. </returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.Identity">
      <summary>Gets or sets the endpoint identity for the endpoint.</summary>
      <returns>The <see cref="T:System.ServiceModel.EndpointIdentity" /> for the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.ListenUri">
      <summary>Gets or sets the listen URI for the endpoint.</summary>
      <returns>A <see cref="T:System.Uri" /> containing the listen URI for the endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.Name">
      <summary>Gets or sets the endpoint name.</summary>
      <returns>A <see cref="T:System.String" /> containing the endpointâs name.</returns>
    </member>
    <member name="P:System.ServiceModel.Endpoint.ServiceContractName">
      <summary>Gets or sets the service contract name.</summary>
      <returns>The service contract name.</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointIdentityExtension">
      <summary>A markup extension for the <see cref="T:System.ServiceModel.EndpointIdentity" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentityExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointIdentityExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentityExtension.#ctor(System.ServiceModel.EndpointIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.EndpointIdentityExtension" /> class with the specified <see cref="T:System.ServiceModel.EndpointIdentity" />.</summary>
      <param name="identity">The endpoint identity.</param>
    </member>
    <member name="P:System.ServiceModel.EndpointIdentityExtension.ClaimResource">
      <summary>Gets or sets the claim resource.</summary>
      <returns>An <see cref="T:System.Object" /> containing the claim resource.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointIdentityExtension.ClaimRight">
      <summary>Gets or sets the claim right.</summary>
      <returns>A <see cref="T:System.String" /> containing the claim right.</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointIdentityExtension.ClaimType">
      <summary>Gets or sets the claim type.</summary>
      <returns>A <see cref="T:System.String" /> containing the claim type.</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointIdentityExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides an <see cref="T:System.ServiceModel.EndpointIdentity" /> for the specified <see cref="T:System.IdentityModel.Claims.Claim" />.</summary>
      <returns>An <see cref="T:System.Object" /> containing the value.</returns>
      <param name="serviceProvider">This parameter is currently ignored.</param>
    </member>
    <member name="T:System.ServiceModel.MessageQuerySet">
      <summary>A set of <see cref="T:System.ServiceModel.MessageQuery" /> objects and an associated string parameter.  A correlation hash (<see cref="T:System.ServiceModel.InstanceKey" />) is computed from the results of the <see cref="T:System.ServiceModel.MessageQuery" /> objects as well as the associated strings.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageQuerySet.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageQuerySet" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.MessageQuerySet.#ctor(System.ServiceModel.Dispatcher.MessageQueryTable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.MessageQuerySet" /> class with the specified <see cref="T:System.ServiceModel.Dispatcher.MessageQueryTable`1" />.</summary>
      <param name="queryTable">The message query table.</param>
    </member>
    <member name="M:System.ServiceModel.MessageQuerySet.GetMessageQueryTable">
      <summary>Gets the message query table associated with the current <see cref="T:System.ServiceModel.MessageQuerySet" /> instance.</summary>
      <returns>The message query table.</returns>
    </member>
    <member name="P:System.ServiceModel.MessageQuerySet.Name">
      <summary>Gets or sets the name of the <see cref="T:System.ServiceModel.MessageQuerySet" /> instance.</summary>
      <returns>The name of the message query set.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.CallbackCorrelationInitializer">
      <summary>Initializes the associated <see cref="P:System.ServiceModel.Activities.CorrelationInitializer.CorrelationHandle" /> with a callback correlation.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.CallbackCorrelationInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.CallbackCorrelationInitializer" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.ChannelCacheSettings">
      <summary>Represents settings that define operational characteristics of a channel cache.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ChannelCacheSettings.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.ChannelCacheSettings" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.ChannelCacheSettings.IdleTimeout">
      <summary>Gets the maximum interval of time for which the object can remain idle in the cache before being disposed.</summary>
      <returns>An interval of time.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ChannelCacheSettings.LeaseTimeout">
      <summary>Gets the interval of time after which an object is removed from the cache.</summary>
      <returns>An interval of time.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ChannelCacheSettings.MaxItemsInCache">
      <summary>Gets the maximum number of objects that can be in the cache.</summary>
      <returns>A maximum number of objects.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.ContextCorrelationInitializer">
      <summary>Initializes the associated <see cref="P:System.ServiceModel.Activities.CorrelationInitializer.CorrelationHandle" /> with a.NET Context Exchange-based correlation, subject to the <see cref="T:System.ServiceModel.Channels.ContextExchangeMechanism" /> specified.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ContextCorrelationInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ContextCorrelationInitializer" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.CorrelationHandle">
      <summary>Associates activities together in a correlation by representing a particular shared <see cref="T:System.ServiceModel.Channels.InstanceKey" /> or transient context in the workflow. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationHandle.OnInitialize(System.Activities.HandleInitializationContext)">
      <summary>Registers the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> with the workflow runtime.</summary>
      <param name="context">The initialization environment.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationHandle.OnUninitialize(System.Activities.HandleInitializationContext)">
      <summary>Unregisters the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> with the workflow runtime.</summary>
      <param name="context">The initialization environment of the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" />.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.CorrelationInitializer">
      <summary>An abstract base class for correlation initializers that are used to tell the runtime what protocol is being used for the correlation.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.CorrelationInitializer.CorrelationHandle">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> argument for the correlation initializer.</summary>
      <returns>The correlation handle argument.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.CorrelationScope">
      <summary>Provides implicit <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> management for child messaging activities.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.CorrelationScope" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.CorrelationScope.Body">
      <summary>Gets or sets the activityâs execution logic.</summary>
      <returns>The activityâs execution logic.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationScope.CacheMetadata(System.Activities.NativeActivityMetadata)">
      <summary>Builds and validates a description of the activityâs arguments, variables, child activities, and activity delegates.</summary>
      <param name="metadata">The activityâs metadata that encapsulates the activityâs arguments, variables, child activities, and activity delegates.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.CorrelationScope.CorrelatesWith">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> used by the child messaging activities.</summary>
      <returns>The correlation handle used by the child messaging activities.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationScope.Execute(System.Activities.NativeActivityContext)">
      <summary>Called by the workflow runtime to execute the <see cref="T:System.ServiceModel.Activities.CorrelationScope" /> activity.</summary>
      <param name="context">The current native activity execution context.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.CorrelationScope.ShouldSerializeCorrelatesWith">
      <summary>Indicates whether the <see cref="P:System.ServiceModel.Activities.CorrelationScope.CorrelatesWith" /> property should be serialized. </summary>
      <returns>true if the <see cref="P:System.ServiceModel.Activities.CorrelationScope.CorrelatesWith" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.DurableInstancingOptions">
      <summary>Used mainly to associate a concrete implementation of the <see cref="T:System.Runtime.Persistence.InstanceStore" /> such as <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> with a workflow service host. This class is also used to add instance owner metadata.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.DurableInstancingOptions.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Adds write-only metadata for an instance to the host.</summary>
      <param name="writeOnlyValues">The write-only values. These values are optional when loading an instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.DurableInstancingOptions.AddInstanceOwnerValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
      <summary>Adds metadata for an instance owner to the host. This method may   be called before the workflow host is opened.</summary>
      <param name="readWriteValues">The read-write metadata.</param>
      <param name="writeOnlyValues">The write-only values. These values are optional when loading an instance.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.DurableInstancingOptions.InstanceStore">
      <summary>Refers to a concrete implementation of the <see cref="T:System.Runtime.Persistence.InstanceStore" /> class such as <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" />.</summary>
      <returns>A concrete implementation of the <see cref="T:System.Runtime.Persistence.InstanceStore" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.InitializeCorrelation">
      <summary>Initializes correlation without sending or receiving a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.InitializeCorrelation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.InitializeCorrelation" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.InitializeCorrelation.Correlation">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Activities.CorrelationHandle" /> that references the correlation.</summary>
      <returns>The correlation handle.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.InitializeCorrelation.CorrelationData">
      <summary>Gets or sets a dictionary of correlation data that relates messages to this workflow instance.</summary>
      <returns>A dictionary of correlation data.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.IReceiveMessageCallback">
      <summary>Implements a callback to be executed when a service message is received by the <see cref="T:System.ServiceModel.Activities.Receive" /> and <see cref="T:System.ServiceModel.Activities.ReceiveParameters" /> activities.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.IReceiveMessageCallback.OnReceiveMessage(System.ServiceModel.OperationContext,System.Activities.ExecutionProperties)">
      <summary>Executed when a service message is received.</summary>
      <param name="operationContext">The operation context under which the message received.</param>
      <param name="activityExecutionProperties">The set of execution properties available within the workflow. </param>
    </member>
    <member name="T:System.ServiceModel.Activities.ISendMessageCallback">
      <summary>Implements a callback that is called just before a message is sent on the wire by the <see cref="T:System.ServiceModel.Activities.Send" /> or <see cref="T:System.ServiceModel.Activities.SendParameters" /> activities. executed when a service message is sent.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ISendMessageCallback.OnSendMessage(System.ServiceModel.OperationContext)">
      <summary>Executed when a service message is sent.</summary>
      <param name="operationContext">The operationâs context under which the message is being sent.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.IWorkflowInstanceManagement">
      <summary>Represents a service contract that defines a set of operations that allow you to control workflow instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Abandon(System.Guid,System.String)">
      <summary>Attempts to abandon the specified workflow instance.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to abandon.</param>
      <param name="reason">The reason for abandoning the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginAbandon(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the specified workflow instance.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to abandon.</param>
      <param name="reason">The reason for abandoning the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous abandon operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginCancel(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to cancel the specified workflow instance.</summary>
      <returns>An <see cref="T:System.IasyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to cancel.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous cancel operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginRun(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to run the specified workflow instance.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to run.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous run operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginSuspend(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to suspend the specified workflow instance.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to suspend.</param>
      <param name="reason">The reason to suspend the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous suspend operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTerminate(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to terminate the specified workflow instance.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous terminate operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedCancel(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous cancel operation in a transaction.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to cancel.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous cancel operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedRun(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that runs a workflow instance within a transaction.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to run.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous run operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedSuspend(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that suspends the specified workflow instance.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to suspend.</param>
      <param name="reason">The reason to suspend the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous suspend operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedTerminate(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that terminates a workflow instance within a transaction.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous terminate operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedUnsuspend(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that resumes the specified workflow instance within a transaction.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to unsuspend.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous unsuspend operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginUnsuspend(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that resumes the specified workflow instance.</summary>
      <returns>The <see cref="T:System.IAsyncResult" />.</returns>
      <param name="instanceId">The GUID identifier of the workflow instance to resume.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">An object, specified by the application, that contains state information associated with the asynchronous unsuspend operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Cancel(System.Guid)">
      <summary>Cancels the specified workflow instance.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to cancel.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndAbandon(System.IAsyncResult)">
      <summary>Completes an asynchronous abandon operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginAbandon(System.Guid,System.String,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndCancel(System.IAsyncResult)">
      <summary>Completes an asynchronous cancel operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginCancel(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndRun(System.IAsyncResult)">
      <summary>Completes an asynchronous run operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginRun(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndSuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous suspend operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginSuspend(System.Guid,System.String,System.AsyncCallback,System.Object)" /> operation</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTerminate(System.IAsyncResult)">
      <summary>Completes an asynchronous terminate operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTerminate(System.Guid,System.String,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTransactedCancel(System.IAsyncResult)">
      <summary>Completes an asynchronous transacted cancel operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedCancel(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTransactedRun(System.IAsyncResult)">
      <summary>Completes an asynchronous transacted run operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedRun(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTransactedSuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous transacted suspend operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedSuspend(System.Guid,System.String,System.AsyncCallback,System.Object)" /> method. </param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTransactedTerminate(System.IAsyncResult)">
      <summary>Completes an asynchronous transacted terminate operation. </summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedTerminate(System.Guid,System.String,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndTransactedUnsuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous transacted unsuspend operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginTransactedUnsuspend(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.EndUnsuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous unsuspend operation.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.BeginUnsuspend(System.Guid,System.AsyncCallback,System.Object)" /> method. </param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Run(System.Guid)">
      <summary>Starts executing the specified workflow instance.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to run.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Suspend(System.Guid,System.String)">
      <summary>Suspends the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="reason">The reason for suspending the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Terminate(System.Guid,System.String)">
      <summary>Terminates the specified workflow instance.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.TransactedCancel(System.Guid)">
      <summary>Cancels the specified workflow instance within a transaction.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to cancel.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.TransactedRun(System.Guid)">
      <summary>Runs the specified workflow instance within a transaction.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to run.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.TransactedSuspend(System.Guid,System.String)">
      <summary>Suspends the specified workflow instance within a transaction.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to suspend.</param>
      <param name="reason">The reason the workflow instance is suspended.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.TransactedTerminate(System.Guid,System.String)">
      <summary>Terminates the specified workflow instance within a transaction.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.TransactedUnsuspend(System.Guid)">
      <summary>Resumes the specified workflow instance within a transaction.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to resume.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.IWorkflowInstanceManagement.Unsuspend(System.Guid)">
      <summary>Resumes the specified workflow instance.</summary>
      <param name="instanceId">The GUID identifier of the workflow instance to resume.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.QueryCorrelationInitializer">
      <summary>Initializes the associated <see cref="P:System.ServiceModel.Activities.CorrelationInitializer.CorrelationHandle" /> based on the results of the <see cref="P:System.ServiceModel.Activities.QueryCorrelationInitializer.MessageQuerySet" /> when the message is sent or received.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.QueryCorrelationInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.QueryCorrelationInitializer" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.QueryCorrelationInitializer.MessageQuerySet">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.MessageQuerySet" /> that is used to perform the <see cref="T:System.ServiceModel.Channels.CorrelationKey" /> calculation.</summary>
      <returns>The <see cref="T:System.ServiceModel.MessageQuerySet" /> that is used to perform the <see cref="T:System.ServiceModel.Channels.CorrelationKey" /> calculation.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Receive">
      <summary>An activity that receives a message.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Receive.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Receive" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.Action">
      <summary>Gets or sets the value of the action header of the message.</summary>
      <returns>The action URI of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.CanCreateInstance">
      <summary>Gets or sets a value that indicates whether a new workflow instance is created to process the message if the message does not correlate to an existing workflow instance..</summary>
      <returns>true if a new workflow instance is created to process the message, otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.Content">
      <summary>Gets or sets the data to receive. The content can be either a <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> or a <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" />.</summary>
      <returns>The data to receive.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.CorrelatesOn">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.MessageQuerySet" /> used to query the message to extract correlation data.</summary>
      <returns>A set of message queries used to extract correlation data from the incoming message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.CorrelatesWith">
      <summary>Gets or sets a correlation handle that is used to route the message to the appropriate workflow instance.</summary>
      <returns>The correlation handle.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.CorrelationInitializers">
      <summary>Gets a collection of correlation initializers that initialize query-based, context, callback context, or request-reply correlations with a <see cref="T:System.ServiceModel.Activities.Send" /> activity runs.</summary>
      <returns>A collection of correlation initializers.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.KnownTypes">
      <summary>Gets a collection of known types for the operation.</summary>
      <returns>A collection of known types.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.OperationName">
      <summary>Gets or sets the name of the operation implemented by the <see cref="T:System.ServiceModel.Activities.Receive" />.</summary>
      <returns>The name of the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.ProtectionLevel">
      <summary>Gets or sets a value that indicates the protection level for the operation.</summary>
      <returns>The protection level for the operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.SerializerOption">
      <summary>Gets or sets a value that specifies the serializer to use for this operation.</summary>
      <returns>The serializer to use.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Receive.ServiceContractName">
      <summary>Gets or sets the name of the service contract.</summary>
      <returns>The service contract name.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Receive.ShouldSerializeCorrelatesOn">
      <summary>Returns a value that indicates whether the <see cref="P:System.ServiceModel.Activities.Receive.CorrelatesOn" /> property has changed from its default value and should be serialized.</summary>
      <returns>true if the <see cref="P:System.ServiceModel.Activities.Receive.CorrelatesOn" /> property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.ReceiveContent">
      <summary>An abstract base class for classes that represent the data received by a workflow service.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveContent.Create(System.Activities.OutArgument)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> instance with the specified message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" />instance.</returns>
      <param name="message">The message.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveContent.Create(System.Activities.OutArgument,System.Type)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> instance with the specified message and message type.</summary>
      <returns>A  <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> instance.</returns>
      <param name="message">The message.</param>
      <param name="declaredMessageType">The message type.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveContent.Create(System.Collections.Generic.IDictionary{System.String,System.Activities.OutArgument})">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> instance with the specified parameters.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> instance.</returns>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.ReceiveMessageContent">
      <summary>A class used to receive a <see cref="T:System.ServiceModel.Message" /> or a message contract type within a workflow service.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveMessageContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveMessageContent.#ctor(System.Activities.OutArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> class with the specified message.</summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveMessageContent.#ctor(System.Activities.OutArgument,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> class with the specified message and message type.</summary>
      <param name="message">The message.</param>
      <param name="declaredMessageType">The message type.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveMessageContent.DeclaredMessageType">
      <summary>Gets or sets the declared message type.</summary>
      <returns>The declared message type.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveMessageContent.Message">
      <summary>Gets or sets the message received.</summary>
      <returns>The received message.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveMessageContent.ShouldSerializeDeclaredMessageType">
      <summary>Gets a boolean value that determines if the message should be serialized as the declared message type.</summary>
      <returns>true if the message should be serialized as the declared message type; otherwise false.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.ReceiveParametersContent">
      <summary>Enables receiving data to or from a workflow service in the form of parameters.<see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> is interoperable with regular WCF clients and services. The <see cref="P:System.ServiceModel.Activities.ReceiveParametersContent.Parameters" /> collection is similar to the argment declaration on a C# method signature.The <see cref="P:System.ServiceModel.Activities.ReceiveParametersContent.Parameters" /> collection cannot contain arguments marked with <see cref="T:System.ServiceModel.MessageContractAttribute" />, or of type <see cref="System.ServiceModel.Channels.Message" />. Please use <see cref="T:System.ServiceModel.Activities.ReceiveMessageContent" /> for these types of data.This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveParametersContent.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveParametersContent.#ctor(System.Collections.Generic.IDictionary{System.String,System.Activities.OutArgument})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveParametersContent" /> class with the specified parameters.</summary>
      <param name="parameters">A collection of key-value pairs with the keys containing the parameter names and the values containing the arguments.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveParametersContent.Parameters">
      <summary>Modifies the parameters collection.</summary>
      <returns>A collection of key-value pairs with the keys containing the parameter names and the values containing the arguments.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.ReceiveReply">
      <summary>An activity that receives a message as part of a request/reply message exchange pattern on the client side.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.ReceiveReply.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.ReceiveReply" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveReply.Action">
      <summary>Gets or sets the value of the action header of the message.</summary>
      <returns>The action of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveReply.Content">
      <summary>Gets or sets the content received by the T:System.ServiceModel.Activities.ReceiveReply activity</summary>
      <returns>The content received.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveReply.CorrelationInitializers">
      <summary>Gets a collection of correlation initializers.</summary>
      <returns>A collection of correlation initializers.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.ReceiveReply.Request">
      <summary>Gets or sets a reference to the <see cref="T:System.ServiceModel.Activities.Send" /> activity paired with this <see cref="T:System.ServiceModel.Activites.ReceiveReply" /> activity.</summary>
      <returns>The send activity.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.RequestReplyCorrelationInitializer">
      <summary>Initializes the associated <see cref="P:System.ServiceModel.Activities.CorrelationInitializer.CorrelationHandle" /> based on the <see cref="T:System.ServiceModel.Channels.RequestContext" /> that is created for the two-way operation.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.RequestReplyCorrelationInitializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.RequestReplyCorrelationInitializer" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.Send">
      <summary>An activity that sends a message to a service. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Send.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Send" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.Action">
      <summary>Gets or sets the value of the action header of the message being sent. </summary>
      <returns>The action of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.Content">
      <summary>Gets or sets the content sent by the <see cref="T:System.ServiceModel.Activities.Send" /> activity.</summary>
      <returns>The content to send.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.CorrelatesWith">
      <summary>Gets or sets a correlation handle that is used to route the message to the appropriate workflow instance.</summary>
      <returns>The correlation handle.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.CorrelationInitializers">
      <summary>Gets a collection of correlation initializers.</summary>
      <returns>A collection of correlation initializers.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.Endpoint">
      <summary>Gets or sets the endpoint to send messages to.</summary>
      <returns>The endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.EndpointAddress">
      <summary>Gets or sets the address of the endpoint to send messages to.</summary>
      <returns>The endpoint address.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.EndpointConfigurationName">
      <summary>Gets or sets the name of the endpoint configuration.</summary>
      <returns>The endpoint configuration name.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.KnownTypes">
      <summary>Gets a collection of the known types for the service operation to be called.</summary>
      <returns>A collection of known types.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.OperationName">
      <summary>Gets or sets the name of the service operation to be called.</summary>
      <returns>The name of the service operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.ProtectionLevel">
      <summary>Gets or sets a value that indicates the protection level for the message.</summary>
      <returns>The protection level for the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.SerializerOption">
      <summary>Gets or sets a value that specifies the serializer to use when sending a message.</summary>
      <returns>The serializer to use for this operation.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.ServiceContractName">
      <summary>The name of the contract the service to be called implements.</summary>
      <returns>The name of the service contract.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Send.TokenImpersonationLevel">
      <summary>Gets or sets a value that indicates the token impersonation level allowed for the receiver of the message.</summary>
      <returns>The token impersonation level.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.SendContent">
      <summary>An abstract base class for classes that represent the data sent to a workflow service.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendContent.Create(System.Activities.InArgument)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> instance with the specified message.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> instance.</returns>
      <param name="message">The data to send.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.SendContent.Create(System.Activities.InArgument,System.Type)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> instance with the specified message and message type.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> instance.</returns>
      <param name="message">The data to send.</param>
      <param name="declaredMessageType">The data type that will appear in the service description and WSDL. It must be either the same as the argument type of the message or its base type.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.SendContent.Create(System.Collections.Generic.IDictionary{System.String,System.Activities.InArgument})">
      <summary>Creates a new <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> instance with the specified parameters.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> instance.</returns>
      <param name="parameters">A collection of name/value pairs with the keys containing the parameter names and the values containing the arguments.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.SendMessageChannelCache">
      <summary>Represents an extension that enables the customization of the cache sharing levels, the settings of the channel factory cache, and the settings of the channel cache for workflows that send messages to service endpoints using <see cref="T:System.ServiceModel.Activities.Send" /> messaging activities.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageChannelCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageChannelCache" /> class with default factory cache and channel cache settings.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageChannelCache.#ctor(System.ServiceModel.Activities.ChannelCacheSettings,System.ServiceModel.Activities.ChannelCacheSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageChannelCache" /> class with custom factory cache and channel cache settings.</summary>
      <param name="factorySettings">The cache settings for cached channel factories.</param>
      <param name="channelSettings">The cache settings for cached channels.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageChannelCache.#ctor(System.ServiceModel.Activities.ChannelCacheSettings,System.ServiceModel.Activities.ChannelCacheSettings,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageChannelCache" /> class with custom factory cache settings, custom channel cache settings, and a value that indicates whether to turn caching on.</summary>
      <param name="factorySettings">The cache settings for cached channel factories.</param>
      <param name="channelSettings">The cache settings for cached channels.</param>
      <param name="allowUnsafeCaching">true to turn caching on; otherwise, false.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.SendMessageChannelCache.AllowUnsafeCaching">
      <summary>Gets or sets a value that indicates whether to turn caching on.</summary>
      <returns>true to turn caching on; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendMessageChannelCache.ChannelSettings">
      <summary>Gets or sets the settings of the channel cache.</summary>
      <returns>The settings of the channel cache.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageChannelCache.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.ServiceModel.Activities.SendMessageChannelCache" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.SendMessageChannelCache.FactorySettings">
      <summary>Gets or sets the settings of the channel factory cache.</summary>
      <returns>The settings of the channel factory cache.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.SendMessageContent">
      <summary>A class used to send a single item (message) to or from a workflow service. The item can be a built-in type such as primitive types, <see cref="T:System.ServiceModel.Channels.Message" />, or <see cref="T:System.Xml.Linq.XElement" />; or an application-defined data contract, message contract, or XML serializable type.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageContent.#ctor(System.Activities.InArgument)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> class with the specified data to send.</summary>
      <param name="message">The data to send.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageContent.#ctor(System.Activities.InArgument,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendMessageContent" /> class with the specified message and message type.</summary>
      <param name="message">The data to send.</param>
      <param name="declaredMessageType">The data type that appears on the service description. It must be the same type as <paramref name="message" /> or any base type of <paramref name="message" />.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.SendMessageContent.DeclaredMessageType">
      <summary>Gets or sets the declared message type.</summary>
      <returns>The declared message type.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendMessageContent.Message">
      <summary>Gets or sets the data to send.</summary>
      <returns>The data to send.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.SendMessageContent.ShouldSerializeDeclaredMessageType">
      <summary>Gets a value that indicates whether the <see cref="P:System.ServiceModel.Activities.SendMessageContent.DeclaredMessateType" /> property should be XAML-serialized.</summary>
      <returns>true if the property should be serialized; otherwise false.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.SendParametersContent">
      <summary>Enables sending data to or from a workflow service in the form of parameters.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendParametersContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendParametersContent.#ctor(System.Collections.Generic.IDictionary{System.String,System.Activities.InArgument})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> class with the specified parameters.</summary>
      <param name="parameters">A collection of key-value pairs with the keys containing the parameter names and the values containing the arguments. </param>
    </member>
    <member name="P:System.ServiceModel.Activities.SendParametersContent.Parameters">
      <summary>Gets or sets the workflow service operation parameters.</summary>
      <returns>A collection of key-value pairs with the keys containing the parameter names and the values containing the arguments. </returns>
    </member>
    <member name="T:System.ServiceModel.Activities.SendReply">
      <summary>An activity that sends the reply message as part of a request/response message exchange pattern on the service side.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.SendReply.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.SendReply" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.SendReply.Action">
      <summary>Gets or sets the value of the action header of the message.</summary>
      <returns>The action URI of the message.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendReply.Content">
      <summary>Gets or sets the content sent by the <see cref="T:System.ServiceModel.Activities.SendReply" /> activity.</summary>
      <returns>The content to send.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendReply.CorrelationInitializers">
      <summary>Gets a collection of correlation initializers.</summary>
      <returns>A collection of correlation initializers.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendReply.PersistBeforeSend">
      <summary>Gets or sets a value that specifies whether the workflow service instance should be persisted before sending the message.</summary>
      <returns>true if the workflow service should be persisted before sending the message;otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.SendReply.Request">
      <summary>Gets or sets a reference to the <see cref="T:System.ServiceModel.Activities.Receive" /> activity paired with this <see cref="T:System.ServiceModel.Activities.SendReply" /> activity. </summary>
      <returns>A receive activity.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.SerializerOption">
      <summary>A class that represents the types of serializers available.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.SerializerOption.DataContractSerializer">
      <summary>Specifies that the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> should be used when serializing.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.SerializerOption.XmlSerializer">
      <summary>Specifies that the <see cref="T:System.Runtime.Serialization.XMLSerializer" /> should be used when serializing.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.TransactedReceiveScope">
      <summary>An activity that enables you to flow a transaction into a workflow or dispatcher created server side transactions.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.TransactedReceiveScope.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.TransactedReceiveScope.Body">
      <summary>Gets or sets the <see cref="T:System.Activities.Activity" /> that makes up the body of the <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> activity. </summary>
      <returns>The body of the transacted receive scope.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.TransactedReceiveScope.Request">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Activities.Receive" /> activity associated with this <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" /> activity.</summary>
      <returns>The receive activity associated with the transacted receive scope.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.TransactedReceiveScope.Variables">
      <summary>Gets the collection of <see cref="T:System.Activities.Variables" /> associated with this <see cref="T:System.ServiceModel.Activities.TransactedReceiveScope" />.</summary>
      <returns>The variables associated with the transacted receive scope.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowControlClient">
      <summary>Allows a client to send control operations to a workflow service hosted with <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor(System.ServiceModel.Activities.WorkflowControlEndpoint)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class with the specified <see cref="T:System.ServiecModel.Activities.WorkflowControlEndpoint" />.</summary>
      <param name="workflowEndpoint">The workflow control endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class with the specified binding, and <see cref="T:System.ServiecModel.Activities.WorkflowControlEndpoint" />.</summary>
      <param name="binding">The binding.</param>
      <param name="remoteAddress">The workflow control endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class with the specified endpoint configuration.</summary>
      <param name="endpointConfigurationName">The configuration to use.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class with the specified endpoint configuration and <see cref="T:System.ServiceModel.EndpointAddress" />.</summary>
      <param name="endpointConfigurationName">The endpoint configuration.</param>
      <param name="remoteAddress">The endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlClient" /> class with the specified endpoint configuration and endpoint address.</summary>
      <param name="endpointConfigurationName">The endpoint configuration.</param>
      <param name="remoteAddress">The endpoint address.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Abandon(System.Guid)">
      <summary>Abandons the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to abandon.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Abandon(System.Guid,System.String)">
      <summary>Abandons the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="reason">The reason to abandon the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.AbandonAsync(System.Guid)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance.</summary>
      <param name="instanceId">The workflows instance to abandon.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.AbandonAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance with the specified user-defined data.</summary>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.AbandonAsync(System.Guid,System.String)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance with the specified reason.</summary>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="reason">The reason to abandon the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.AbandonAsync(System.Guid,System.String,System.Object)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance with the specified reason and user-defined data.</summary>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="reason">The reason to abandon the workflow instance.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.AbandonCompleted">
      <summary>Occurs when an asynchronous abandon operation completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginAbandon(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance.</summary>
      <returns>The asynchronous abandon operation.</returns>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginAbandon(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that abandons the specified workflow instance.</summary>
      <returns>The asynchronous abandon operation.</returns>
      <param name="instanceId">The workflow instance to abandon.</param>
      <param name="reason">The reason to abandon the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginCancel(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that cancels the specified workflow instance.</summary>
      <returns>The asynchronous cancel operation.</returns>
      <param name="instanceId">The workflow instance to cancel.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginRun(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that runs the specified workflow instance.</summary>
      <returns>The asynchronous run operation.</returns>
      <param name="instanceId">The workflow instance to run.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginSuspend(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that suspends the specified operation.</summary>
      <returns>The asynchronous suspend operation.</returns>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginSuspend(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that suspends the specified operation.</summary>
      <returns>The asynchronous suspend operation.</returns>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="reason">The reason the workflow instance is suspended.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginTerminate(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that terminates a workflow instance.</summary>
      <returns>The asynchronous terminate operation.</returns>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginTerminate(System.Guid,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that terminates a workflow instance.</summary>
      <returns>The asynchronous terminate operation.</returns>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.BeginUnsuspend(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation that unsuspends a workflow instance.</summary>
      <returns>The asynchronous unsuspend operation.</returns>
      <param name="instanceId">The workflow instance to unsuspend.</param>
      <param name="callback">The asynchronous callback delegate that receives the notification of the asynchronous operation completion.</param>
      <param name="state">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Cancel(System.Guid)">
      <summary>Cancels the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to cancel.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.CancelAsync(System.Guid)">
      <summary>Begins an asynchronous operation that cancels the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to cancel.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.CancelAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous operation that cancels the specified workflow instance with the specified user-defined data.</summary>
      <param name="instanceId">The workflow instance to cancel.</param>
      <param name="userState">The user-defined data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.CancelCompleted">
      <summary>Occurs when an asynchronous cancel operation completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndAbandon(System.IAsyncResult)">
      <summary>Completes an asynchronous abandon operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="Overload:System.ServiceModel.Activities.WorkflowControlClient.BeginAbandon" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndCancel(System.IAsyncResult)">
      <summary>Completes an asynchronous cancel operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.ServiceModel.Activities.WorkflowControlClient.BeginCancel(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndRun(System.IAsyncResult)">
      <summary>Completes an asynchronous run operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.ServiceModel.Activities.WorkflowControlClient.BeginRun(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndSuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous suspend operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="Overload:System.ServiceModel.Activities.WorkflowControlClient.BeginSuspend" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndTerminate(System.IAsyncResult)">
      <summary>Completes an asynchronous terminate operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="Overload:System.ServiceModel.Activities.WorkflowControlClient.BeginTerminate" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.EndUnsuspend(System.IAsyncResult)">
      <summary>Completes an asynchronous unsuspend operation.</summary>
      <param name="result">The asynchronous result returned by a call to the <see cref="M:System.ServiceModel.Activities.WorkflowControlClient.BeginUnsuspend(System.Guid,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Run(System.Guid)">
      <summary>Runs the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to run.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.RunAsync(System.Guid)">
      <summary>Begins an asynchronous operation that runs the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to run.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.RunAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous operation that runs the specified workflow instance with the user-defined state data.</summary>
      <param name="instanceId">The workflow instance to run.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.RunCompleted">
      <summary>Occurs when an asynchronous run operation completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Suspend(System.Guid)">
      <summary>Suspends the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Suspend(System.Guid,System.String)">
      <summary>Suspends the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="reason">The reason to suspend the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.SuspendAsync(System.Guid)">
      <summary>Begins an asynchronous suspend operation </summary>
      <param name="instanceId">The workflow instance to suspend.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.SuspendAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous suspend operation with the specified workflow instance ID and user-defined state data.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.SuspendAsync(System.Guid,System.String)">
      <summary>Begins an asynchronous suspend operation with the specified workflow instance ID and reason.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="reason">The reason to suspend the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.SuspendAsync(System.Guid,System.String,System.Object)">
      <summary>Begins an asynchronous suspend operation with the specified workflow instance ID, reason, and user-defined state data.</summary>
      <param name="instanceId">The workflow instance to suspend.</param>
      <param name="reason">The reason to suspend the workflow instance.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.SuspendCompleted">
      <summary>Occurs when an asynchronous suspend operation completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Terminate(System.Guid)">
      <summary>Terminates the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Terminate(System.Guid,System.String)">
      <summary>Terminates the specified workflow instance with the specified reason.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.TerminateAsync(System.Guid)">
      <summary>Begins an asynchronous operation that terminates the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.TerminateAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous operation that terminates the specified workflow instance with the specified user-defined data.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.TerminateAsync(System.Guid,System.String)">
      <summary>Begins an asynchronous operation that terminates the specified workflow instance with the specified reason.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.TerminateAsync(System.Guid,System.String,System.Object)">
      <summary>Begins an asynchronous operation that terminates the specified workflow instance with the specified reason and user-defined data.</summary>
      <param name="instanceId">The workflow instance to terminate.</param>
      <param name="reason">The reason to terminate the workflow instance.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.TerminateCompleted">
      <summary>Occurs when an asynchronous terminate operation completes.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.Unsuspend(System.Guid)">
      <summary>Unsuspends the specified workflow instance.</summary>
      <param name="instanceId">The workflow instance to unsuspend.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.UnsuspendAsync(System.Guid)">
      <summary>Begins an asynchronous unsuspend operation.</summary>
      <param name="instanceId">The workflow instance to unsuspend.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlClient.UnsuspendAsync(System.Guid,System.Object)">
      <summary>Begins an asynchronous unsuspend operation with the specified user-defined state data.</summary>
      <param name="instanceId">The workflow instance to unsuspend.</param>
      <param name="userState">The user-defined state data.</param>
    </member>
    <member name="E:System.ServiceModel.Activities.WorkflowControlClient.UnsuspendCompleted">
      <summary>Occurs when an asynchronous unsuspend operation completes.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowControlEndpoint">
      <summary>A standard endpoint that enables you to call control operations on workflow instances. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlEndpoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlEndpoint" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowControlEndpoint.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowControlEndpoint" /> class with the specified binding and <see cref="T:System.ServiceModel.EndpointAddress" />.</summary>
      <param name="binding">The binding.</param>
      <param name="address">The endpoint address.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowCreationContext">
      <summary>Represents a context that is set up during workflow activation using the workflow hosting endpoint to handle arguments, and receive workflow completion notification.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowCreationContext.#ctor">
      <summary>Initiates a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowCreationContext" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowCreationContext.CreateOnly">
      <summary>Gets or sets a value that indicates if the workflow instance should be suspended or run after creation..</summary>
      <returns>true if the workflow instance is suspended after it is created ; false if the workflow is run after it is created.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowCreationContext.IsCompletionTransactionRequired">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.ServiceModel.Activities.WorkflowCreationContext.OnBeginWorkflowCompleted(System.Activities.ActivityInstanceState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)" /> method is called in a transaction..</summary>
      <returns>true if a completion transaction is required; otherwise, false.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowCreationContext.OnAbort">
      <summary>Aborts the <see cref="T:System.ServiceModel.Activities.WorkflowCreationContext" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowCreationContext.OnBeginWorkflowCompleted(System.Activities.ActivityInstanceState,System.Collections.Generic.IDictionary{System.String,System.Object},System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to perform workflow instance completion notification. This method is called when the workflow instance associated with this <see cref="T:System.ServiceModel.Activities.WorkflowCreationContext" /> completes. Derived classes can override this operation to perform custom actions on workflow instance completion.
</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="completionState">The state of the workflow instance.</param>
      <param name="workflowOutputs">A collection of key/value pairs that contain output generated by the workflow instance.</param>
      <param name="terminationException">If present, an error that caused the workflow to terminate.</param>
      <param name="timeout">The time interval during which the asynchronous operation must complete.</param>
      <param name="callback">The location in an application to which control returns when the asynchronous operation completes.</param>
      <param name="state">User-defined state.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowCreationContext.OnEndWorkflowCompleted(System.IAsyncResult)">
      <summary>Completes an asynchronous operation that notifies workflow instance completion associated with this <see cref="T:System.ServiceModel.Activities.WorkflowCreationContext" />.</summary>
      <param name="result">The status of the asynchronous operation.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowCreationContext.WorkflowArguments">
      <summary>Gets the arguments passed to the newly created workflow instance.</summary>
      <returns>A dictionary of key/value pair arguments to the workflow instance.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowHostingEndpoint">
      <summary>An abstract implementation of <see cref="T:System.ServiceModel.ServiceEndpoint" />. Derive from this class to expose contracts that support workflow creation and bookmark resumption. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingEndpoint.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpoint" /> class with the specified contract type.</summary>
      <param name="contractType">The type of the contract that defines the basic message exchange patterns for a workflow hosting operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingEndpoint.#ctor(System.Type,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpoint" /> class with the specified contract type, binding, and endpoint address.</summary>
      <param name="contractType">The service contract for the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowHostingEndpoint.CorrelationQueries">
      <summary>Gets a collection of CorrelationQuery instances .</summary>
      <returns>A collection of correlation queries.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingEndpoint.OnGetCreationContext(System.Object[],System.ServiceModel.OperationContext,System.Guid,System.ServiceModel.Activities.WorkflowHostingResponseContext)">
      <summary> Override to create a new<see cref="T:System.ServiceModel.Activities.WorkflowCreationContext" /> instance.</summary>
      <returns>A workflow creation context object.</returns>
      <param name="inputs">The inputs to the service operation.</param>
      <param name="operationContext">Provides the execution context of the service operation invoked.</param>
      <param name="instanceId">The instance ID of the workflow instance being created.</param>
      <param name="responseContext">The <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpointResponseContext" /> object that can be used to send replies back to the message source for a request/reply contract.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingEndpoint.OnGetInstanceId(System.Object[],System.ServiceModel.OperationContext)">
      <summary>Override to return the instance ID for the workflow instance being created.</summary>
      <returns>The instance ID for the newly created workflow instance.</returns>
      <param name="inputs">The inputs to the service operation.</param>
      <param name="operationContext">The operation context of the service operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingEndpoint.OnResolveBookmark(System.Object[],System.ServiceModel.OperationContext,System.ServiceModel.Activities.WorkflowHostingResponseContext,System.Object@)">
      <summary>Override to return a bookmark to be resumed on the workflow instance. </summary>
      <returns>A bookmark.</returns>
      <param name="inputs">The inputs to the service operation.</param>
      <param name="operationContext">The execution context of the service operation being invoked.</param>
      <param name="responseContext">The <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpointResponseContext" /> object that can be used to send replies back to the message source for a request/reply contract.</param>
      <param name="value">A value to be passed back to the workflow instance when the bookmark is resumed </param>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowHostingResponseContext">
      <summary>This class is used in conjunction with the <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpoint" /> class. It is used for sending the response for a request/reply contract supported by a <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpoint" /> implementation.c</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowHostingResponseContext.SendResponse(System.Object,System.Object[])">
      <summary>Sends response to a message sent to the <see cref="T:System.ServiceModel.Activities.WorkflowHostingEndpoint" />.</summary>
      <param name="returnValue">The return value of the operation.</param>
      <param name="outputs">The out arguments of the operation.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowService">
      <summary>Enables you to create, configure, and access the properties of a workflow service.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowService" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowService.AllowBufferedReceive">
      <summary>Gets or sets a value that indicates whether the workflow service has buffered receive processing enabled for incoming messages.</summary>
      <returns>true if the workflow service has buffered receive processing enabled for incoming messages; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowService.Body">
      <summary>Gets or sets the activity tree for this workflow service.</summary>
      <returns>The activity tree for this workflow service.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowService.ConfigurationName">
      <summary>Gets or sets the workflow service configuration name.</summary>
      <returns>The workflow service configuration name.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowService.Endpoints">
      <summary>Gets the collection of endpoints of this workflow service.</summary>
      <returns>The collection of endpoints of this workflow service.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowService.GetWorkflowRoot">
      <summary>Returns the root of the activity tree.</summary>
      <returns>The root of the activity tree.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowService.Name">
      <summary>Gets or sets the name of the workflow service as an <see cref="T:System.Xml.Linq.XName" /> object.</summary>
      <returns>The name of the workflow service.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.WorkflowServiceHost">
      <summary>Provides a host for workflows. Supports features like messaging activities, multi-instancing, and configuration. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.#ctor(System.Activities.Activity,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class using the specified activity and base addresses.</summary>
      <param name="activity">The root activity of the workflow service.</param>
      <param name="baseAddresses">An array of  base addresses for the workflow service.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.#ctor(System.Object,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class using the specified service object and base addresses.</summary>
      <param name="serviceImplementation">The root activity of the workflow service to be hosted.</param>
      <param name="baseAddresses">An array of base addresses for the workflow service.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.#ctor(System.ServiceModel.Activities.WorkflowService,System.Uri[])">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.WorkflowServiceHost" /> class using the specified service definition and collection of base addresses.</summary>
      <param name="serviceDefinition">The workflow service to host.</param>
      <param name="baseAddresses">An array of base addresses for the hosted workflow service.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowServiceHost.Activity">
      <summary>Gets the root activity of the hosted workflow service. </summary>
      <returns>The root activity of the hosted workflow service.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Adds a service endpoint to the workflow service host.</summary>
      <param name="endpoint">The service endpoint to add.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)">
      <summary>Adds a service endpoint to the workflow service host using the specified contract, binding, and address.</summary>
      <returns>A service endpoint.</returns>
      <param name="implementedContract">The service contract exposed by the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint..</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)">
      <summary>Adds a service endpoint to the workflow service host using the specified contract, binding, endpoint address, and listen URI.</summary>
      <returns>A service endpoint.</returns>
      <param name="implementedContract">The service contract exposed by the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.</param>
      <param name="listenUri">The address at which the service endpoint listens for incoming messages.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)">
      <summary>Adds a service endpoint to the workflow service host using the specified contract, binding, and address.</summary>
      <returns>A service endpoint.</returns>
      <param name="implementedContract">The service contract exposed by the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)">
      <summary>Adds a service endpoint to the workflow service host using the specified contract, binding, endpoint address, and listen URI.</summary>
      <returns>A service endpoint.</returns>
      <param name="implementedContract">The contract exposed by the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.l</param>
      <param name="listenUri">The address at which the service endpoint listens for incoming messages.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.Xml.Linq.XName,System.ServiceModel.Channels.Binding,System.String,System.Uri,System.String)">
      <summary>Adds a service endpoint to the workflow service host using the specified contract, binding, endpoint address, listen URI, and behavior configuration name.</summary>
      <returns>A service endpoint.</returns>
      <param name="serviceContractName">The contract exposed by the endpoint</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.</param>
      <param name="listenUri">The address at which the service endpoint listens for incoming messages.</param>
      <param name="behaviorConfigurationName">The endpoint behavior configuration name. </param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.AddServiceEndpoint(System.Xml.Linq.XName,System.ServiceModel.Channels.Binding,System.Uri,System.Uri,System.String)">
      <summary>Adds a service endpoint to the workflow service host using the specified implemented contract, binding, endpoint address, listen URI, and a behavior configuration name.</summary>
      <returns>A service endpoint.</returns>
      <param name="serviceContractName">The contract exposed by the endpoint.</param>
      <param name="binding">The binding for the endpoint.</param>
      <param name="address">The address of the endpoint.</param>
      <param name="listenUri">The address at which the service endpoint listens for incoming messages.</param>
      <param name="behaviorConfigurationName">The behavior configuration name.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
      <summary>Creates a service description of the hosted workflow service using the specified key/value pair collection of address, binding, contract and behavior service endpoint information.</summary>
      <returns>A service for the hosted workflow service.</returns>
      <param name="implementedContracts">A collection of key/value pairs that contains the contract description for the hosted workflow service.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowServiceHost.DurableInstancingOptions">
      <summary>Gets the <see cref="T:System.ServiceModel.Activities.DurableInstancingOptions" /> associated with the workflow service host. </summary>
      <returns>The durable instancing options.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.InitializeRuntime">
      <summary>Initializes the runtime for the workflow service host.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnAbort">
      <summary>Aborts the workflow service host.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation invoked when the workflow service host is closed.</summary>
      <returns>A reference to the asynchronous close operation.</returns>
      <param name="timeout">The period of time the asynchronous close operation has to complete before timing out.</param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous close operation. </param>
      <param name="state">User-define state data that is associated with the asynchronous close operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation invoked when the workflow service host is opened.</summary>
      <returns>A reference to the asynchronous operation.</returns>
      <param name="timeout">The period of time the asynchronous open operation has to complete before timing out.</param>
      <param name="callback">The asynchronous callback delegate that receives notification of the completion of the asynchronous open operation.</param>
      <param name="state">User-define state data that is associated with the asynchronous open operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnClose(System.TimeSpan)">
      <summary>Closes down the hosted service, including the channel dispatchers and associated instance contexts and listeners.</summary>
      <param name="timeout">The period of time the close operation has to complete before timing out.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnEndClose(System.IAsyncResult)">
      <summary>Completes an asynchronous operation invoked when the workflow service host is closed.</summary>
      <param name="result">A reference to the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnEndOpen(System.IAsyncResult)">
      <summary>Completes an asynchronous operation invoked when the workflow service host is opened.</summary>
      <param name="result">A reference to the asynchronous operation.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.WorkflowServiceHost.OnOpen(System.TimeSpan)">
      <summary>Opens the channel dispatchers.</summary>
      <param name="timeout">The period of time the open operation has to complete before timing out.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.WorkflowServiceHost.WorkflowExtensions">
      <summary>Gets a <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager" /> object to add or remove extensions to the workflow service instance.</summary>
      <returns>workflow instance extension manager.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.BufferedReceiveElement">
      <summary>Defines the configuration element that controls the buffering of data received from the client by the workflow service operation. This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.BufferedReceiveElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.BufferedReceiveElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.BufferedReceiveElement.BehaviorType">
      <summary>Gets the behavior type of the service element that controls the workflow runtime buffering of messages received from a client instance of workflow.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.BufferedReceiveElement.MaxPendingMessagesPerChannel">
      <summary>Gets or sets the maximum number of messages which can be buffered for a communications channel during a workflow service operation.</summary>
      <returns>An integer.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.ChannelSettingsElement">
      <summary>Enables assigning values to the settings of a channel listener configuration element in a workflow service application. This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.ChannelSettingsElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.ChannelSettingsElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.ChannelSettingsElement.IdleTimeout">
      <summary>Gets or sets the maximum interval of time for which the object can remain idle in the cache before being disposed..</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.ChannelSettingsElement.LeaseTimeout">
      <summary>Gets or sets the interval of time after which an object will be removed from the cache.</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.ChannelSettingsElement.MaxItemsInCache">
      <summary>Gets or sets the maximum number of objects that can be in the cache.</summary>
      <returns>An integer representing a maximum number.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement">
      <summary>Creates and maintains the <see cref="T:System.ServiceModel.Activities.Description.EtwTrackingBehavior" /> sub-element in the service behaviors section of a Sql workflow configuration file.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement.BehaviorType">
      <summary>Gets the type of the <see cref="T:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement" /> instance.</summary>
      <returns>The type of an event tracking behavior element.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement.CreateBehavior">
      <summary>Returns a new instance of the <see cref="T:System.ServiceModel.Activities.Description.EtwTrackingBehavior" /> class.</summary>
      <returns>An instance of an event tracking behavior object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement.ProfileName">
      <summary>Gets the tracking profile name parameter for the event tracking behavior element.</summary>
      <returns>A string profile name.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement.Properties">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> of the current event tracking behavior element.</summary>
      <returns>A collection of configuration properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.FactorySettingsElement">
      <summary>Enables assigning values to the settings of a channel factory configuration element in a workflow service application. This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.FactorySettingsElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.FactorySettingsElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.FactorySettingsElement.IdleTimeout">
      <summary>Gets or sets the maximum interval of time for which the object can remain idle in a workflow cache before being disposed.</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.FactorySettingsElement.LeaseTimeout">
      <summary>Gets or sets the interval of time after which an object will be removed from a workflow cache.</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.FactorySettingsElement.MaxItemsInCache">
      <summary>Gets or sets the maximum number of objects that can be in a workflow cache.</summary>
      <returns>An integer representing a maximum number.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement">
      <summary>Creates and maintains the sub-element that configures use of the <see cref="T:System.ServiceModel.Activities.SendMessageChannelCache" />, in the service behaviors section of a Sql workflow configuration file. This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement.#ctor">
      <summary>Creates a  new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement.AllowUnsafeCaching">
      <summary>Gets a value indicating whether the cache associated with an instance of workflow is turned on or off. </summary>
      <returns>true if the workflow instance cache is turned on; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement.BehaviorType">
      <summary>Gets or sets the type of the <see cref="T:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement" />.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement.ChannelSettings">
      <summary>Gets or sets the settings to configure the channels that listen for incoming messages in a workflow service host.</summary>
      <returns>A workflow configuration element that handles listener channel settings. </returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement.FactorySettings">
      <summary>Gets or sets the settings to configure the channels that send messages in a workflow service host.</summary>
      <returns>A workflow configuration element that handles factory channel settings. </returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement">
      <summary>Creates and maintains the <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> sub-element of the service behaviors section of a Sql workflow configuration file.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.BehaviorType">
      <summary>Gets the type of a <see cref="T:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior" /> object.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.ConnectionString">
      <summary>Gets or sets the connection string to the database server.</summary>
      <returns>A string that contains information about the connection to the instance store database.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.ConnectionStringName">
      <summary>Gets or sets a named connection string to the database server.</summary>
      <returns>A string name that represents a connection to a database server.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.CreateBehavior">
      <summary>Returns a new object of type <see cref="T:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior" /> that contains property settings for a <see cref="T:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement" />.</summary>
      <returns>An generic object that contains workflow configuration element property settings.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.HostLockRenewalPeriod">
      <summary>Gets or sets the time period in which the host must renew the lock on an instance.</summary>
      <returns>A timespan object that represents the lock renewal period.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.InstanceCompletionAction">
      <summary>Gets or sets whether workflow instance data is kept in the persistence store after the workflow instance completes or if it is deleted at that point.</summary>
      <returns>An enumeration of the actions that can occur when an instance completes.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.InstanceEncodingOption">
      <summary>Gets or sets the optional property that specifies how compression is used for instance data.</summary>
      <returns>An option that determines the manner in which data compression is performed, if at all.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.InstanceLockedExceptionAction">
      <summary>Gets or sets the action that occurs in response to an exception that is thrown when a workflow instance is locked.</summary>
      <returns>An action response to an exception thrown.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement.RunnableInstancesDetectionPeriod">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.RunnableInstancesDetectionPeriod" /> property. Specifies the time period after which the SQL Workflow Instance Store runs a detection task to detect any runnable or activatable workflow instances in the persistence database after the previous detection cycle. </summary>
      <returns>Returns the time interval.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointCollectionElement">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement" /> objects in a workflow control configuration element.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointCollectionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointCollectionElement" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement">
      <summary>Defines a workflow control endpoint element for a workflow configuration file.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.Address">
      <summary>Gets or sets the URI address for the control endpoint.</summary>
      <returns>A string containing the URI address.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.Binding">
      <summary>Gets or sets the binding for the control endpoint.</summary>
      <returns>A string containing the control endpoint binding.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.BindingConfiguration">
      <summary>Gets or sets the binding configuration for the control endpoint.</summary>
      <returns>A string containing the binding configuration for the endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.CreateServiceEndpoint(System.ServiceModel.Description.ContractDescription)">
      <summary>Returns a new <see cref="T:System.ServiceModel.Activities.WorkflowControlEndpoint" />.</summary>
      <returns>A workflow control service endpoint .</returns>
      <param name="contractDescription">Not used.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.EndpointType">
      <summary>When called or overridden by a derived class, gets the type of the workflow control endpoint.</summary>
      <returns>The type of endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a workflow control endpoint.</summary>
      <param name="endpoint">The service endpoint to which control configuration settings are applied.</param>
      <param name="channelEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.OnApplyConfiguration(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, converts the specified <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> to a workflow control endpoint.</summary>
      <param name="endpoint">The service endpoint to which control configuration settings are applied.</param>
      <param name="serviceEndpointElement">Not implemented.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ChannelEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified channel endpoint element.</summary>
      <param name="channelEndpointElement">The channel endpoint element to initialize and validate.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.OnInitializeAndValidate(System.ServiceModel.Configuration.ServiceEndpointElement)">
      <summary>When called or overridden by a derived class, initializes and validates the specified service endpoint element.</summary>
      <param name="serviceEndpointElement">The service endpoint element to initialize and validate.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement.Properties">
      <summary>Gets a collection of properties for the control endpoint element.</summary>
      <returns>A collection of configuration properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.WorkflowIdleElement">
      <summary>Handles the properties of the workflow definition idle element. The idle element defines the process that is followed when the workflow instance goes into an idle state. This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowIdleElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.WorkflowIdleElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowIdleElement.BehaviorType">
      <summary>Gets whether the workflow instance only unloads from memory or is persisted when the workflow instance becomes idle.</summary>
      <returns>An object that represents a type of behavior.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowIdleElement.TimeToPersist">
      <summary>Gets or sets the period of time allotted for persisting the workflow instance.</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowIdleElement.TimeToUnload">
      <summary>Gets or sets the period of time allotted for unloading the workflow instance.</summary>
      <returns>A timespan object.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement">
      <summary>Adds the <see cref="T:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior" /> to the service host.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.WorlkflowInstanceManagementElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement.AuthorizedWindowsGroup">
      <summary>Gets or sets the Windows group of users authorized to use the workflow instance control endpoint.</summary>
      <returns>The Windows group of users authorized to use the workflow instance control endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement.BehaviorType">
      <summary>Gets the type of the behavior associated with this configuration element.</summary>
      <returns>The type of behavior associated with this configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement.CreateBehavior">
      <summary>Creates the <see cref="T:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior" /> behavior.</summary>
      <returns>The workflow instance management behavior..</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement.Properties">
      <summary>Gets the collection of properties associated with this configuration element.</summary>
      <returns>The properties associated with this configuration element.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement">
      <summary>Handles the properties of an unhandled exception that occurs during a workflow service operation.  This is a sealed class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement.Action">
      <summary>Gets or sets the process that is invoked when the unhandled exception occurs.</summary>
      <returns>An action.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement.BehaviorType">
      <summary>Gets the type of the unhandled exception behavior.</summary>
      <returns>A type object.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior">
      <summary>A service behavior that enables your service to use buffered receive processing. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <param name="endpoints">The endpoints exposed by the service.</param>
      <param name="bindingParameters">The binding parameters required to implement the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior.MaxPendingMessagesPerChannel">
      <summary>Gets or sets a value that specifies the maximum number of pending messages allowed for each channel.</summary>
      <returns>The maximum number of pending messages.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.EtwTrackingBehavior">
      <summary>A service behavior that allows a service to utilize ETW tracking using an <see cref="T:System.Activities.Tracking.EtwTrackingParticipant" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.EtwTrackingBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Activities.Description.EtwTrackingBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.EtwTrackingBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">The service endpoints.</param>
      <param name="bindingParameters">Custom objects required to implement the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.EtwTrackingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /></summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.EtwTrackingBehavior.ProfileName">
      <summary>Gets or sets the name of the <see cref="T:System.Activities.Tracking.TrackingProfile" /> associated with this behavior.</summary>
      <returns>The name of the <see cref="T:System.Activities.Tracking.TrackingProfile" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.EtwTrackingBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior">
      <summary>A service behavior that allows you to configure the <see cref="T:System.Activities.DurableInstancing.SqlWorkflowInstanceStore" /> feature, which supports persisting state information for workflow service instances into an SQL Server 2005 or SQL Server 2008 database.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior" /> class using the connection string passed as a parameter.</summary>
      <param name="connectionString">A connection string that refers to a SQL Server persistence database.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>An implementation of the AddBindingParameters method of the <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> interface, which allows you to pass custom data to binding elements to support contract implementation.</summary>
      <param name="serviceDescription">The service description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">The service endpoints.</param>
      <param name="bindingParameters">Custom objects to which binding elements have access.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the ApplyDispatchBehavior method of the <see cref="T:System.ServiceModel.Description.IServiceBehavior" /> interface that allows you to change run-time property values or insert custom extension objects such as error handlers, message or parameter inspectors, security extensions, and other custom extension objects.</summary>
      <param name="serviceDescription">Description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.ConnectionString">
      <summary>Gets the connection string used to connect to persistence database.</summary>
      <returns>The connection string.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.HostLockRenewalPeriod">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.HostLockRenewalPeriod" />. This property specifies the interval within which a host must renew its lock on an instance before the lock expires. If the host does not renew the lock in the specified time period, the instance is unlocked and another host can obtain the lock on the instance.</summary>
      <returns>The specified time period before the instance is unlocked.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.InstanceCompletionAction">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceCompletionAction" /> property. This property specifies whether the instance state information is kept in the persistence database after the instance is completed.</summary>
      <returns>true if the instance state information is kept in the persistence database; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.InstanceEncodingOption">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceEncodingOption" /> property. This property specifies whether the instance state information is compressed using the GZip algorithm before the information is saved in the persistence store.</summary>
      <returns>true if the instance state information is compressed using the GZip algorithm; otherwise false.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.InstanceLockedExceptionAction">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.InstanceLockedExceptionAction" /> property. This property specifies what action a service host should take when it receives an <see cref="T:System.Runtime.Persistence.InstanceLockedException" /> when the host tries to lock an instance because the instance is currently locked by another host. </summary>
      <returns>The action a service host should take when receiving a <see cref="T:System.Runtime.Persistence.InstanceLockedException" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.Promote(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XName},System.Collections.Generic.IEnumerable{System.Xml.Linq.XName})">
      <summary>Promotes properties that can be used in queries. The promoted properties are the properties that you can use in queries to retrieve instances. These property can be of simple type (int32, string, bool and so on), which is represented by a variant or binary.</summary>
      <param name="name">Name of the promotion. </param>
      <param name="promoteAsSqlVariant">The names of variables that must be promoted as variants. </param>
      <param name="promoteAsBinary">The names of variables that must be promoted as binary data. Binary data is typically used to store tracking information.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.RunnableInstancesDetectionPeriod">
      <summary>Gets or sets the <see cref="P:System.Activities.DurableInstancing.SqlWorkflowInstanceStore.RunnableInstancesDetectionPeriod" /> property. Specifies the time period after which the SQL Workflow Instance Store runs a detection task to detect any runnable or activatable workflow instances in the persistence database after the previous detection cycle. </summary>
      <returns>Returns the value of the time interval.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Inspects the service host and the service description to confirm that the service can run successfully. </summary>
      <param name="serviceDescription">The description of the service.</param>
      <param name="serviceHostBase">The host for the service.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute">
      <summary>An attribute thatcan be applied to a service contract to enable workflow service model dispatch behavior. This attribute ensures that appropriate dispatch components are created..</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute" /> class. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Configures binding elements to support the workflow contract behavior.</summary>
      <param name="contractDescription">The contract description.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="bindingParameters">The objects that the binding elements require to support the workflow contract behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across a contract.</summary>
      <param name="contractDescription">The contract description for which the extension is intended.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="clientRuntime">The client runtime.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
      <summary>Implements a modification or extension of the client across a contract.</summary>
      <param name="contractDescription">The contract description.</param>
      <param name="endpoint">The endpoint.</param>
      <param name="dispatchRuntime">The dispatch runtime that controls service execution.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Validates that the contract and endpoint are compatible with the behavior.</summary>
      <param name="contractDescription">The contract description.</param>
      <param name="endpoint">The endpoint.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowIdleBehavior">
      <summary>A service behavior that controls when idle workflow instances are unloaded and persisted.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowIdleBehavior" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <param name="endpoints">The endpoints exposed by the service.</param>
      <param name="bindingParameters">The binding parameters required to implement the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.TimeToPersist">
      <summary>Gets or sets a value that specifies the <see cref="T:System.TimeSpan" /> that occurs between the time the workflow becomes idle and is persisted.</summary>
      <returns>The time span used to determine when a workflow is persisted.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.TimeToUnload">
      <summary>Gets or sets a value that specifies the <see cref="T:System.TimeSpan" /> that occurs between the time workflow becomes idle and is unloaded.</summary>
      <returns>The time span used to determine when a workflow is unloaded.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior">
      <summary>A behavior that adds a workflow control endpoint with a fixed configuration to the service host.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <param name="endpoints">The service endpoints.</param>
      <param name="bindingParameters">The binding parameters.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="F:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.ControlEndpointAddress">
      <summary>The fixed workflow control relative endpoint address. This address is appended to the base address of the service to create the control endpoint address.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.HttpControlEndpointBinding">
      <summary>Gets the binding for the workflow instance control endpoint when the HTTP protocol is used.</summary>
      <returns>The binding for the workflow instance control endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.NamedPipeControlEndpointBinding">
      <summary>Gets the binding for the workflow instance control endpoint when the net.pipe protocol is used.</summary>
      <returns>The binding for the workflow instance control endpoint.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>An implementation of the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)method" />.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior.WindowsGroup">
      <summary>Gets or sets the Windows group of users authorized to use the workflow instance control endpoint.</summary>
      <returns>The Windows group of users authorized to use the workflow instance control endpoint.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction">
      <summary>An enumeration that specifies the action to perform when an unhandled exception occurs within a workflow.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction.Abandon">
      <summary>Abandons the workflow instance.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction.Cancel">
      <summary>Cancels the workflow instance.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction.Terminate">
      <summary>Terminates the workflow instance. The instance state is <see cref="T:System.Activities.Hosting.WorkflowInstanceState.Complete" />.</summary>
    </member>
    <member name="F:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction.AbandonAndSuspend">
      <summary>Abandons the workflow instance and marks the last persisted state as suspended. If there is no last persisted instance can be found, the workflow instance is aborted.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior">
      <summary>A service behavior that enables you to specify the action to take when an unhandled exception occurs within a workflow service.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior.Action">
      <summary>Specifies the action to take when an unhandled exception occurs.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
      <param name="endpoints">The endpoints exposed by the service.</param>
      <param name="bindingParameters">The binding parameters required to implement the behavior.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description.</param>
      <param name="serviceHostBase">The service host.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord">
      <summary>Contains the tracking record sent to a tracking participant by the run-time tracking infrastructure when a message is received by a workflow service instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord.#ctor(System.ServiceModel.Activities.Tracking.ReceiveMessageRecord)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord" /> class using the specified <see cref="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord" /> instance.</summary>
      <param name="record">The tracking information.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord" /> class using the specified name.</summary>
      <param name="name">The name of the tracking record.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord" />.</summary>
      <returns>A copy of <see cref="T:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord.E2EActivityId">
      <summary>Gets the receiving end-to-end activity ID associated with this record.</summary>
      <returns>The activity ID.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.ReceiveMessageRecord.MessageId">
      <summary>Gets the message ID of the message associated with this record.</summary>
      <returns>The message ID.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.SendMessageRecord">
      <summary>Contains the tracking record sent to a tracking participant by the run-time tracking infrastructure when a message is sent by a workflow service instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.SendMessageRecord.#ctor(System.ServiceModel.Activities.Tracking.SendMessageRecord)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.SendMessageRecord" /> class using the specified <see cref="T:System.ServiceModel.Activities.Tracking.SendMessageRecord" /> instance.</summary>
      <param name="record">The tracking information.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.SendMessageRecord.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.SendMessageRecord" /> class using the specified name.</summary>
      <param name="name">The name of the tracking record.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.SendMessageRecord.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Activities.Tracking.SendMessageRecord" />.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Activities.Tracking.SendMessageRecord" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.SendMessageRecord.E2EActivityId">
      <summary>Gets the sending end-to-end activity ID associated with this record.</summary>
      <returns>The end-to-end activity ID.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement.ActivityName">
      <summary>Gets or sets the name of the activity to filter <see cref="T:System.Activities,Tracking.ActivityScheduledRecord" /> instances on. The default value is "*" (all).</summary>
      <returns>The name of the activity.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement.ChildActivityName">
      <summary>Gets or sets the name of the child activity to filter <see cref="T:System.Activities,Tracking.ActivityScheduledRecord" /> instances on. The default value is "*" (all). </summary>
      <returns>The name of the child activity.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement.NewTrackingQuery">
      <summary>Creates the <see cref="T:System.Activities.Tracking.ActivityScheduledQuery" />. </summary>
      <returns>The activity-scheduled query.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement.Properties">
      <summary>Gets the properties contained in this configuration element.</summary>
      <returns>The properties contained in this configuration element.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElementCollection">
      <summary>A configuration element that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.ActivityStateQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.ActivityName">
      <summary>Gets or sets the name of the activity to filter <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> instances on. </summary>
      <returns>The name of the activity.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.Arguments">
      <summary>Gets an <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection" /> that contains the variables to filter <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> on.</summary>
      <returns>The collection of arguments.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.NewTrackingQuery">
      <summary>Creates a new <see cref="T:System.Activities.Tracking.ActivityStateQuery" />.</summary>
      <returns>The activity state query.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties of the configuration element.</summary>
      <returns>The configuration element properties.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.States">
      <summary>Gets a <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection" /> that contains the states to filter <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> on.</summary>
      <returns>The collection of states. </returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement.Variables">
      <summary>Gets a <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection" /> that contains the variables to filter <see cref="T:System.Activities.Tracking.ActivityStateRecord" /> on.</summary>
      <returns>The collection of variables.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> elements that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement">
      <summary>A configuration element that represents an annotation that is added to an emitted tracking record.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement.ElementKey">
      <summary>Gets a key that uniquely identifies the annotation.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement.Name">
      <summary>Gets or sets the name of the annotation.</summary>
      <returns>The name of the annotation.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties for the configuration element.</summary>
      <returns>The collection of properties.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement.Value">
      <summary>Gets or sets the value of the annotation.</summary>
      <returns>The value of the annotation.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElementCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> elements that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.AnnotationElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement">
      <summary>A configuration element that represents an argument .</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement.ElementKey">
      <summary>Gets a key that uniquely identifies the argument.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement.Name">
      <summary>Gets or sets the name of the argument.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement.Properties">
      <summary>Gets the collection of properties</summary>
      <returns>The <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> of properties for the element.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection">
      <summary>A configuration element that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.BookmarkResumptionQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement.Name">
      <summary>Gets or sets the name of the bookmark.</summary>
      <returns>The bookmark name.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement.NewTrackingQuery">
      <summary>Creates the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQuery" />. </summary>
      <returns>The bookmark resumption query.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties associated with this element.</summary>
      <returns>A collection of properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElementCollection">
      <summary>A configuration element that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.TrackingCancelRequestedQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement.ActivityName">
      <summary>Gets or sets the name of the activity to subscribe for the <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> from the specified activity that issued the cancel request.</summary>
      <returns>The activity name to subscribe for <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> on.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement.ChildActivityName">
      <summary>Gets or sets the name of the child activity to subscribe for the <see cref="T:System.Activities.Tracking.CancelRequestedRecord" /> activity name to be canceled.</summary>
      <returns>The name of the child activity to subscribe for <see cref="T:System.Activities.Tracking.CancelRequestedRecord" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement.NewTrackingQuery">
      <summary>Creates a new <see cref="T:System.Activities.Tracking.CancelRequestedQuery" />.</summary>
      <returns>A <see cref="T:System.Activities.Tracking.CancelRequestedQuery" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties associated with this element.</summary>
      <returns>A collection of properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElementCollection">
      <summary>A configuration element that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.CustomTrackingQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement.ActivityName">
      <summary>Gets or sets the name of the activity to filter <see cref="T:System.Activities.Tracking.CustomTrackingRecord" /> instances on. The default value is â*â (all).</summary>
      <returns>The name of the activity to filter on.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement.Name">
      <summary>Gets or sets the name of the activity for which to query for tracking records.</summary>
      <returns>The activity name.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement.NewTrackingQuery">
      <summary>Creates a new <see cref="T:System.Activities.Tracking.CustomTrackingQuery" />.</summary>
      <returns>A new <see cref="T:System.Activities.Tracking.CustomTrackingQuery" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties associated with this element.</summary>
      <returns>The property collection.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection">
      <summary>A configuration element that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.FaultPropagationQuery" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement.FaultHandlerActivityName">
      <summary>Gets or sets the name of the activity that handles the fault that is used to subscribe for <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> instances. </summary>
      <returns>The activity name to filter on.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement.FaultSourceActivityName">
      <summary>Gets or sets the name of the activity that generates the fault that is used to subscribe for <see cref="T:System.Activities.Tracking.FaultPropagationRecord" /> instances. </summary>
      <returns>The activity name to filter on.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement.NewTrackingQuery">
      <summary>Creates a new <see cref="T:System.Activities.Tracking.FaultPropagationQuery" /> instance.</summary>
      <returns>The fault propagation query.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement.Properties">
      <summary>Gets the <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties associated with this element.</summary>
      <returns>The property collection.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElementCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> elements that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.TrackingProfile" /> and is used for adding a profile through the behavior element.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.ElementKey">
      <summary>Gets a key that uniquely identifies the profile.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.ImplementationVisibility">
      <summary>Gets or sets the visibility mode of the tracking profile.</summary>
      <returns>The visibility mode of the tracking profile</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.Name">
      <summary>Gets or sets the name of the tracking profile.</summary>
      <returns>The name of the tracking profile. </returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties associated with this element.</summary>
      <returns>The properties collection.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement.Workflows">
      <summary>Gets the collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement" /> elements associated with this <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement" />.</summary>
      <returns>A collection of profile workflow query elements.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElementCollection">
      <summary>A configuration element that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement" /> elements.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileElementCollection.CollectionType">
      <summary>Gets a value that specifies the type of collection contained within this element.</summary>
      <returns>One of the <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> enumeration values.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement">
      <summary>A configuration element that contains all queries for a specific workflow identified by the <see cref="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.ActivityDefinitionId" /> property.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.ActivityDefinitionId">
      <summary>Gets or sets the activity definition ID of the workflow being tracked.</summary>
      <returns>The activity definition ID</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.ActivityScheduledQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement" /> elements.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement" /> elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.ActivityStateQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement" /> elements.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.BookmarkResumptionQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement" /> elements.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement" /> elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.CancelRequestedQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement" /> elements.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement" /> elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.CustomTrackingQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement" /> elements.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.ElementKey">
      <summary>Gets a key that uniquely identifies the workflow being tracked.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.FaultPropagationQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement" /> elements.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement" /> elements. </returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.Properties">
      <summary>Gets a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> properties.</summary>
      <returns>A <see cref="T:System.Configuration.ConfigurationPropertyCollection" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement.WorkflowInstanceQueries">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement" /> elements.</summary>
      <returns>A <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElementCollection" />.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElementCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> elements that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.StateElement">
      <summary>A configuration element that specifies workflow instance state or activity instance state the user subscribes tracking information for. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.StateElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.StateElement" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.StateElement.ElementKey">
      <summary>Gets a key that uniquely identifies the element query.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.StateElement.Name">
      <summary>Gets or sets the state name to filter on.</summary>
      <returns>The state name to filter on. The default value is â*â (all).</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.StateElement.Properties">
      <summary>Gets a collection of <see cref="T:System.Configuration.ConfigurationProperty" /> properties.</summary>
      <returns>A collection of configuration properties.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection">
      <summary>A configuration element that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.StateElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1">
      <summary>The base class for all tracking configuration collections.</summary>
      <typeparam name="TConfigurationElement">The type of configuration element.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.Add(`0)">
      <summary>Adds an element into the collection.</summary>
      <param name="element">The element to add.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.Clear">
      <summary>Clears the contents of the collection.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.CollectionType">
      <summary>Gets or sets the collection type.</summary>
      <returns>One of the <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> enumeration values.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.CreateNewElement">
      <summary>Creates a new element.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for the specified configuration element.</summary>
      <returns>The element key.</returns>
      <param name="element">The configuration element.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.IndexOf(`0)">
      <summary>Gets the index of the specified configuration element.</summary>
      <returns>The zero-based index of the configuration element.</returns>
      <param name="element">The configuration element.</param>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.Item(System.Int32)">
      <summary>Gets the element as the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The index of the element to retrieve.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.Remove(`0)">
      <summary>Removes the specified configuration element.</summary>
      <param name="element">The configuration element to remove.</param>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the configuration element at the specified index.</summary>
      <param name="index">The index of the configuration element to remove.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement">
      <summary>The base class for tracking configuration elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement.ElementKey">
      <summary>Gets a key that uniquely identifies the configuration element.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement.GetStringPairKey(System.String,System.String)">
      <summary>Merges the two specified strings.</summary>
      <returns>A string that contains both strings.</returns>
      <param name="value1">The first string.</param>
      <param name="value2">The second string.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.TrackingQuery" /> instance when specifying a tracking profile.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.Annotations">
      <summary>Gets a collection of annotations associated with the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement" />.</summary>
      <returns>A collection of annotations.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.ElementKey">
      <summary>A key that uniquely identifies the tracking query.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.NewTrackingQuery">
      <summary>Override this method to create a query instance and set properties not inherited by derived classes.</summary>
      <returns>A <see cref="T:System.Activities.Tracking.TrackingQuery" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.Properties">
      <summary>Gets the collection of properties.</summary>
      <returns>The collection of properties for the element.</returns>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement.UpdateTrackingQuery(System.Activities.Tracking.TrackingQuery)">
      <summary>Override this method to set the properties that a derived class may inherit. </summary>
      <param name="trackingQuery">The tracking query.</param>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection">
      <summary>A configuration section for specifying tracking settings.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection.Profiles">
      <summary>Gets a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.ProfileElement" /> elements.</summary>
      <returns>A collection of elements.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection.Properties">
      <summary>Gets the collection of properties.</summary>
      <returns>The collection of properties for the element.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.TrackingSection.TrackingProfiles">
      <summary>Gets a collection of <see cref="T:System.Activities.Tracking.TrackingProfile" /> objects.</summary>
      <returns>A collection of <see cref="T:System.Activities.Tracking.TrackingProfile" /> objects.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElement">
      <summary>A configuration element that specifies the variables to be extracted from an activity. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.VariableElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.VariableElement.ElementKey">
      <summary>Gets a key that uniquely identifies the variable query.</summary>
      <returns>The element key.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.VariableElement.Name">
      <summary>Gets or sets the name of the variable to be extracted.</summary>
      <returns>The variable name.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.VariableElement.Properties">
      <summary>Gets the collection of properties.</summary>
      <returns>The collection of properties for the element.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection">
      <summary>A configuration element that contains a collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection.ElementName">
      <summary>Gets the configuration element name.</summary>
      <returns>The configuration element name.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement">
      <summary>A configuration element that represents a <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" />. </summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement.NewTrackingQuery">
      <summary>Creates a new <see cref="T:System.Activities.Tracking.WorkflowInstanceQuery" /> instance.</summary>
      <returns>A new workflow instance query.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement.Properties">
      <summary>Gets the collection of properties.</summary>
      <returns>The collection of properties for the element.</returns>
    </member>
    <member name="P:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement.States">
      <summary>The workflow states that the query filters on.</summary>
      <returns>The states to filter on.</returns>
    </member>
    <member name="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElementCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement" /> elements that contains <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement" /> elements.</summary>
    </member>
    <member name="M:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElementCollection" /> class.</summary>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.EndpointIdentityConverter">
      <summary>Converts an <see cref="T:System.ServiceModel.EndpointIdentity" /> instance to the specified type.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.EndpointIdentityConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.EndpointIdentityConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.EndpointIdentityConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that determines whether the converter can convert an <see cref="T:System.ServiceModel.EndpointIdentity" /> instance to the specified type.</summary>
      <returns>true if the converter can perform the conversion requested; otherwise false.</returns>
      <param name="context">A type descriptor context that provides a format context.</param>
      <param name="destinationType">The type you want to convert to.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.EndpointIdentityConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the given object to the specified type, using the specified context and culture information.</summary>
      <returns>The converted value.</returns>
      <param name="context">A <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The culture information. If null is passed, the current culture is assumed.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the <paramref name="value" /> parameter to.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter">
      <summary>A WCF-specific implementation of a <see cref="T:System.Xml.Linq.XName" /> type converter that does not require <see cref="T:System.Xml.Linq.XName" /> instances to specify a namespace.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this converter can convert an object of one type to an <see cref="T:System.Xml.Linq.XName" />. </summary>
      <returns>true if the converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The type descriptor context</param>
      <param name="sourceType">The type to convert from.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this converter can convert an <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</summary>
      <returns>true if the converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The type descriptor context.</param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified value to a <see cref="T:System.Xml.Linq.XName" /> instance.</summary>
      <returns>The converted value.</returns>
      <param name="context">The type descriptor context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The object to convert.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="context">The type descriptor context.</param>
      <param name="culture">The current culture.</param>
      <param name="value">The value to convert.</param>
      <param name="destinationType">The type to convert the value to.</param>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension">
      <summary>A XAML markup extension for the <see cref="T:System.ServiceModel.SpnEndpointIdentity" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.SpnEndpointIdentityExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension.#ctor(System.ServiceModel.SpnEndpointIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.SpnEndpointIdentityExtension" /> class.</summary>
      <param name="identity">The service principal name (SPN) endpoint identity.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides the object that the markup extension represents. </summary>
      <returns>The object that the markup extension represents.</returns>
      <param name="serviceProvider">The service provider.</param>
    </member>
    <member name="P:System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension.SpnName">
      <summary>Gets or sets the service principle name.</summary>
      <returns>The service principle name.</returns>
    </member>
    <member name="T:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension">
      <summary>A XAML markup extension for the <see cref="T:System.ServiceModel.UpnEndpointIdentity" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension.#ctor(System.ServiceModel.UpnEndpointIdentity)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension" /> class with the specified <see cref="T:System.ServiceModel.UpnEndpointIdentity" />.</summary>
      <param name="identity">The User Principal Name (UPN) endpoint identity.</param>
    </member>
    <member name="M:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides the object that the markup extension represents.</summary>
      <returns>The object that the markup extension represents.</returns>
      <param name="serviceProvider">The service provider.</param>
    </member>
    <member name="P:System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension.UpnName">
      <summary>Gets or sets the user principle name.</summary>
      <returns>The user principle name.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.WasHosting.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>System.ServiceModel.WasHosting</name>
	</assembly>
	<members />
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.ServiceMoniker40.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.ServiceMoniker40</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.ServiceMoniker40.ServiceMoniker40"></member>
    <member name="M:System.ServiceModel.ServiceMoniker40.ServiceMoniker40.#ctor"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.ServiceModel.Routing.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Routing</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.Dispatcher.EndpointNameMessageFilter">
      <summary>Represents a query that tests whether a message was received on an endpoint with a name that matches the specified name.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointNameMessageFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.EndpointNameMessageFilter" /> class with a specified name against which to test a message.</summary>
      <param name="endpointName">The endpointName against which messages are tested</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointNameMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>Tests whether a message satisfies the specified endpoint name.</summary>
      <returns>true if the Message object satisfies the endpoint name specified in the filter; otherwise, false.</returns>
      <param name="message">The message object to check.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.EndpointNameMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Tests whether a buffered message satisfies the specified endpoint name.</summary>
      <returns>true if the Message object satisfies the endpoint name specified in the filter; otherwise, false.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to check.</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.StrictAndMessageFilter">
      <summary>Represents a query that tests whether a message satisfies both specified <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.StrictAndMessageFilter.#ctor(System.ServiceModel.Dispatcher.MessageFilter,System.ServiceModel.Dispatcher.MessageFilter)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Dispatcher.StrictAndMessageFilter" /> class sing the specified <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects.</summary>
      <param name="filter1">A <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> object.</param>
      <param name="filter2">A <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> object.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.StrictAndMessageFilter.CreateFilterTable``1">
      <summary>Creates a new <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" />.</returns>
      <typeparam name="TFilterData">The type of data associated with the filter.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.StrictAndMessageFilter.Match(System.ServiceModel.Channels.Message)">
      <summary>Tests whether a message matches both of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects specified in this filter.</summary>
      <returns>true if the message matches both message filters; otherwise, false.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to test.</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.StrictAndMessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)">
      <summary>Tests whether a buffered message matches both of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> objects specified in this filter.</summary>
      <returns>true if the message contained in the buffer matches both message filters; otherwise, false.</returns>
      <param name="buffer">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> to test.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.IDuplexSessionRouter">
      <summary>Defines the interface required to process messages from duplex session channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An asynchronous result that can be used to poll or wait for results, or both; this value is also required when invoking <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The message to be processed.</param>
      <param name="callback">An asynchronous callback delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The asynchronous result returned by the call to <see cref="M:System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.IRequestReplyRouter">
      <summary>Defines the interface required to process messages from request-reply channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An asynchronous result that can be used to poll or wait for results, or both; this value is also required when invoking <see cref="M:System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)" />.</returns>
      <param name="message">The message to be processed.</param>
      <param name="callback">An asynchronous callback delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <returns>The reply.</returns>
      <param name="result">The asynchronous result returned by the call to <see cref="M:System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.ISimplexDatagramRouter">
      <summary>Defines the interface required for processing messages from simplex datagram.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The message to be processed.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The asynchronous result returned by the call to <see cref="M:System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.ISimplexSessionRouter">
      <summary>Defines the interface required to process messages from simplex session channels.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An asynchronous result that can be used to poll or wait for results, or both; this value is also required when invoking <see cref="M:System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The message to be processed.</param>
      <param name="callback">An asynchronous callback delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The asynchronous result returned by the call to <see cref="M:System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.RoutingBehavior">
      <summary>Defines the routing behavior, which is used to configure the destination endpoints, filters and filtering options to be used during routing.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingBehavior.#ctor(System.ServiceModel.Routing.RoutingConfiguration)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.RoutingBehavior" /> class.</summary>
      <param name="routingConfiguration">The routing configuration.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingBehavior.GetContractForDescription(System.ServiceModel.Description.ContractDescription)">
      <summary>Gets the contract type for the specified <see cref="T:System.ServiceModel.Description.ContractDescription" />.</summary>
      <returns>The type of the specified <see cref="T:System.ServiceModel.Description.ContractDescription" />.</returns>
      <param name="description">The contract description to get the type of.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
      <param name="endpoints">The service endpoints.</param>
      <param name="bindingParameters">Custom objects to which binding elements have access.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
      <summary>Implements the <see cref="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" /> method to support the behavior.</summary>
      <param name="serviceDescription">The service description of the service.</param>
      <param name="serviceHostBase">The host of the service.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.RoutingConfiguration">
      <summary>Defines the configuration information used by <see cref="T:System.ServiceModel.Routing.RoutingExtension" />.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingConfiguration.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.RoutingConfiguration" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingConfiguration.#ctor(System.ServiceModel.Dispatcher.MessageFilterTable{System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ServiceEndpoint}},System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.RoutingConfiguration" /> class using the specified <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> and routeOnHeadersOnly parameter.</summary>
      <param name="filterTable">The message filter table to use for this configuration.</param>
      <param name="routeOnHeadersOnly">true if the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> can only examine message headers; otherwise, false. The default is true.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.RoutingConfiguration.FilterTable">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Dispatcher.MessageFilterTable`1" /> used by this configuration.</summary>
      <returns>The message filter table.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.RoutingConfiguration.RouteOnHeadersOnly">
      <summary>Gets or sets a value that indicates whether the filter can examine the message body.</summary>
      <returns>true if the filter can only examine message headers; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.RoutingConfiguration.SoapProcessingEnabled">
      <summary>Gets or sets a value that indicates whether messages should be processed between SOAP <see cref="T:System.ServiceModel.Channels.MessageVersion" />s. </summary>
      <returns>true if messages should be processed; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.RoutingExtension">
      <summary>Provides run-time access to the routing service to allow dynamic modification of the routing configuration.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingExtension.ApplyConfiguration(System.ServiceModel.Routing.RoutingConfiguration)">
      <summary>Applies a new <see cref="T:System.ServiceModel.Routing.RoutingConfiguration" /> to a running instance of the routing service.</summary>
      <param name="routingConfiguration">The routing configuration to be applied.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingExtension.System#ServiceModel#IExtension{T}#Attach(System.ServiceModel.ServiceHostBase)">
      <summary>Called when the runtime attaches the extension to an instance of the <see cref="T:System.ServiceModel.ServiceHostBase" /> class. For internal use only.</summary>
      <param name="owner">The service host base.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingExtension.System#ServiceModel#IExtension{T}#Detach(System.ServiceModel.ServiceHostBase)">
      <summary>Called when the runtime detaches the extension from an instance of the <see cref="T:System.ServiceModel.ServiceHostBase" /> class. For internal use only.</summary>
      <param name="owner">The service host base.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.RoutingService">
      <summary>Defines the routing service, which is responsible for routing messages between endpoints based on filter criteria.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#IDisposable#Dispose"></member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IDuplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /></param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#EndProcessRequest(System.IAsyncResult)" />.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#EndProcessRequest(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.Message" /> that contains the reply.</returns>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#IRequestReplyRouter#BeginProcessRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /></param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexDatagramRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>Initiates the asynchronous processing of the message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that can be used to poll or wait for results, or both; this value is also needed when invoking <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#EndProcessMessage(System.IAsyncResult)" />.</returns>
      <param name="message">The <see cref="T:System.ServiceModel.Channels.Message" /> to be processed.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that is invoked when the message processing has completed.</param>
      <param name="state">A user-defined state object that is passed to the callback procedure.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#EndProcessMessage(System.IAsyncResult)">
      <summary>Finishes asynchronous execution of message processing.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> returned by the call to <see cref="M:System.ServiceModel.Routing.RoutingService.System#ServiceModel#Routing#ISimplexSessionRouter#BeginProcessMessage(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.SoapProcessingBehavior">
      <summary>Defines the client endpoint behavior used to marshal messages between different binding types and message versions.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.SoapProcessingBehavior.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.SoapProcessingBehavior" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.SoapProcessingBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Adds new binding elements to an endpoint.</summary>
      <param name="endpoint">The service endpoint to apply the binding elements to.</param>
      <param name="bindingParameters">The binding parameter collection to apply to the endpoint.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.SoapProcessingBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Applies the specified endpoint behavior to the client.</summary>
      <param name="endpoint">The service endpoint to apply to the client.</param>
      <param name="clientRuntime">The runtime on the client.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.SoapProcessingBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Applies the specified endpoint behavior to the endpoint dispatcher.</summary>
      <param name="endpoint">The service endpoint to apply to the client.</param>
      <param name="endpointDispatcher">The endpoint dispatcher.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.SoapProcessingBehavior.ProcessMessages">
      <summary>Gets or sets a value that indicates whether messages should be processed.</summary>
      <returns>true if messages should be marshaled; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.SoapProcessingBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Validates the service endpoint.</summary>
      <param name="endpoint">The service endpoint to validate.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection">
      <summary>Represents a configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.Add(System.ServiceModel.Routing.Configuration.BackupEndpointElement)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> to the collection.</summary>
      <param name="element">The backup endpoint element to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for the specified configuration element.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.Name">
      <summary>Gets or sets the name used to identify this collection of elements in the configuration file.</summary>
      <returns>The name of the collection.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointCollection.Remove(System.ServiceModel.Routing.Configuration.BackupEndpointElement)">
      <summary>Removes the first occurrence of <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> from the collection.</summary>
      <param name="element">The backup element to remove from the collection.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement">
      <summary>Represents a configuration element that defines a backup endpoint element.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupEndpointElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.BackupEndpointElement.EndpointName">
      <summary>Gets or sets the name used to identify this endpoint in the configuration file.</summary>
      <returns>The name.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.BackupListCollection">
      <summary>Represents the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.BackupListCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.Add(System.ServiceModel.Routing.Configuration.BackupEndpointCollection)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" /> to the collection.</summary>
      <param name="element">The backup endpoint to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for the specified configuration element.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.BackupListCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" /> with the specified index.</summary>
      <returns>A backup endpoint that matches the specified key.</returns>
      <param name="name">The key of the element to be accessed.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.BackupListCollection.Remove(System.ServiceModel.Routing.Configuration.BackupEndpointCollection)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointCollection" /> from the collection.</summary>
      <param name="element">The backup endpoint from the collection.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterElement">
      <summary>Represents a configuration element that defines a filter element. This element is used to define the type of filter, as well as any supporting data or parameters required by the filter.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.CustomType">
      <summary>Gets or sets the fully-qualified type name of the custom type to be used as a filter.</summary>
      <returns>The fully-qualified type.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.Filter1">
      <summary>Gets or sets the filter1 data of this configuration element. This value is only used when <see cref="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType" /> is set to And.</summary>
      <returns>The filter1 value of this element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.Filter2">
      <summary>Gets or sets the filter2 data of this configuration element. This value is only used when <see cref="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType" /> is set to AND.</summary>
      <returns>The filter2 value of this element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterData">
      <summary>Gets or sets the filter data of this configuration element.</summary>
      <returns>The filter data of this element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.FilterType">
      <summary>Gets or sets the <see cref="T:System.ServiceModel.Routing.Configuration.FilterType" /> of this configuration element.</summary>
      <returns>The filter type of this element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElement.Name">
      <summary>Gets or sets the name of this configuration element.</summary>
      <returns>The unique name of this configuration element.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterElementCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.FilterElementCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.Add(System.ServiceModel.Routing.Configuration.FilterElement)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> to the collection.</summary>
      <param name="element">The filter element to add.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Returns the key of the specified <see cref="T:System.Configuration.ConfigurationElement" /> element within the collection.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)">
      <summary>Gets a value that indicates whether the element can be removed.</summary>
      <returns>true if the element can be removed; otherwise, false.</returns>
      <param name="element">The configuration element to check for removability.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the element is read-only.</summary>
      <returns>true if the element is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElementCollection.Item(System.Int32)">
      <summary>Gets an element from the collection with a specified index.</summary>
      <returns>The element in the collection that has the specified index.</returns>
      <param name="index">The index of the element to be retrieved from the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterElementCollection.Item(System.String)">
      <summary>Gets an element from the collection with a specified key.</summary>
      <returns>The element in the collection that matches the specified key.</returns>
      <param name="name">The key of the element to be retrieved from the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterElementCollection.Remove(System.ServiceModel.Routing.Configuration.FilterElement)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> from the collection.</summary>
      <param name="element">The element to be removed from the collection.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterTableCollection">
      <summary>Represents the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.Add(System.ServiceModel.Routing.Configuration.FilterTableEntryCollection)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection" /> to the collection.</summary>
      <param name="element">The filter table entry to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for the specified configuration element.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableCollection.Item(System.String)">
      <summary>Gets the <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection" /> with the specified index.</summary>
      <returns>A filter table entry that matches the specified key.</returns>
      <param name="name">The key of the element to be accessed.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableCollection.Remove(System.ServiceModel.Routing.Configuration.FilterTableEntryCollection)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection" /> from the collection.</summary>
      <param name="element">The filter table entry to remove from the collection.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection">
      <summary>Represents the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.Add(System.ServiceModel.Routing.Configuration.FilterTableEntryElement)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> to the collection.</summary>
      <param name="element">The filter table entry to be added.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Gets the element key for the specified configuration element.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.Name">
      <summary>Gets or sets the name of this configuration element.</summary>
      <returns>The unique name of this configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryCollection.Remove(System.ServiceModel.Routing.Configuration.FilterTableEntryElement)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> from the collection.</summary>
      <param name="element">The filter table entry to remove from the collection.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement">
      <summary>Represents a configuration element that defines a filter table entry element. This element contains the association between filters, endpoints and backup endpoints and is used to determine which filter is used to route the message.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.FilterTableEntryElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableEntryElement.BackupList">
      <summary>Gets or sets a value that specifies a reference to a backup endpoints element.</summary>
      <returns>A reference to a backup endpoints element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableEntryElement.EndpointName">
      <summary>Gets or sets a value that specifies a reference to a client endpoint that sends messages if the associated message filter matches the message.</summary>
      <returns>A key to a client endpoint.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableEntryElement.FilterName">
      <summary>Gets or sets a value that specifies a reference to the filter element.</summary>
      <returns>A key to the filter element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.FilterTableEntryElement.Priority">
      <summary>Gets or sets a value that specifies the priority of this entry.</summary>
      <returns>The priority of this entry. The default value is 0.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.FilterType">
      <summary>Specifies the type of filter to use when routing messages.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.Action">
      <summary>Use <see cref="T:System.ServiceModel.Dispatcher.ActionMessageFilter" /> to filter on an action.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.EndpointAddress">
      <summary>Use <see cref="T:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter" /> with <see cref="P:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter.IncludeHostNameInComparison" /> set to false to filter on the address.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.PrefixEndpointAddress">
      <summary>Use <see cref="T:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter" /> with <see cref="P:System.ServiceModel.Dispatcher.PrefixEndpointAddressMessageFilter.IncludeHostNameInComparison" /> set to false to filter on the address using longest prefix matching.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.And">
      <summary>Use <see cref="T:System.ServiceModel.Dispatcher.StrictAndMessageFilter" /> to filter on two message filters, ANDed together.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.Custom">
      <summary>Use a user-defined filter.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.EndpointName">
      <summary>Use the <see cref="T:System.ServiceModel.Dispatcher.EndpointNameMessageFilter" /> to filter on the name of the service endpoint.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.MatchAll">
      <summary>Use the <see cref="T:System.ServiceModel.Dispatcher.MatchAllMessageFilter" /> to match all messages.</summary>
    </member>
    <member name="F:System.ServiceModel.Routing.Configuration.FilterType.XPath">
      <summary>Use the <see cref="T:System.ServiceModel.Dispatcher.XPathMessageFilter" /> to filter on an XPath expression.</summary>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.NamespaceElement">
      <summary>Represents a configuration element that defines the namespace element. This contains namespaces to namespace prefix mappings that can then be used in XPath filters.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" />.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.NamespaceElement.Namespace">
      <summary>Gets or sets the namespace for this configuration element.</summary>
      <returns>The namespace of this element.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.NamespaceElement.Prefix">
      <summary>Gets or sets the namespace prefix for this configuration element.</summary>
      <returns>The namespace prefix of this element.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.NamespaceElementCollection">
      <summary>Represents a collection of <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" /> instances.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElementCollection" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.Add(System.ServiceModel.Routing.Configuration.NamespaceElement)">
      <summary>Adds a new <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" /> to the collection.</summary>
      <param name="element">The namespace element to add.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.Clear">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.CreateNewElement">
      <summary>Creates a new <see cref="T:System.Configuration.ConfigurationElement" />.</summary>
      <returns>A new configuration element.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>Returns the key of the specified namespace element.</summary>
      <returns>The key for the specified configuration element.</returns>
      <param name="element">The configuration element to return the key for.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.Item(System.Int32)">
      <summary>Gets an element from the collection with a specified index.</summary>
      <returns>The namespace element in the collection that has the specified index.</returns>
      <param name="index">The index of the element to be retrieved from the collection.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.Item(System.String)">
      <summary>Gets an element from the collection with a specified key.</summary>
      <returns>The namespace element in the collection that matches the specified key.</returns>
      <param name="name">The key of the element to be retrieved from the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.NamespaceElementCollection.Remove(System.ServiceModel.Routing.Configuration.NamespaceElement)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" /> from the collection.</summary>
      <param name="element">The namespace element to be removed.</param>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.RoutingExtensionElement">
      <summary>Represents a configuration element that contains sub-elements that specify the routing behavior.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.RoutingExtensionElement.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.ServiceModel.Routing.Configuration.RoutingExtensionElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingExtensionElement.BehaviorType">
      <summary>Gets the type of behavior.</summary>
      <returns>The behavior type.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingExtensionElement.FilterTableName">
      <summary>Gets or sets the name of the filter table used by this routing service for routing messages.</summary>
      <returns>The name of the filter table.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingExtensionElement.RouteOnHeadersOnly">
      <summary>Gets or sets a value that indicates whether the filter is allowed to access only the message headers or the message headers and message body.</summary>
      <returns>true if the filter can only access header values; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingExtensionElement.SoapProcessingEnabled">
      <summary>Gets or sets a value that indicates whether SOAP processing should occur.</summary>
      <returns>true if messages should be marshaled; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.RoutingSection">
      <summary>Represents a collection of elements that are used to configure routing.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.RoutingSection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.RoutingSection" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingSection.BackupLists">
      <summary>Gets the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> objects.</summary>
      <returns>A collection that defines the configuration section that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.BackupEndpointElement" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.RoutingSection.CreateFilterTable(System.String)">
      <summary>Creates a filter table using the specified name.</summary>
      <returns>A filter table with the specified name.</returns>
      <param name="name">The name of the filter table to create.</param>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingSection.Filters">
      <summary>Gets the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" /> objects.</summary>
      <returns>A collection that defines the configuration section that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterElement" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingSection.FilterTables">
      <summary>Gets the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> objects.</summary>
      <returns>A collection that defines the configuration section that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.FilterTableEntryElement" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.RoutingSection.NamespaceTable">
      <summary>Gets the configuration element that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" /> objects.</summary>
      <returns>A collection that defines the configuration section that contains a collection of <see cref="T:System.ServiceModel.Routing.Configuration.NamespaceElement" /> objects.</returns>
    </member>
    <member name="T:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement">
      <summary>Represents a configuration element that defines the SOAP processing endpoint behavior.</summary>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement" /> class.</summary>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement.BehaviorType">
      <summary>Gets the type of the behavior.</summary>
      <returns>The type of the behavior.</returns>
    </member>
    <member name="M:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement.CreateBehavior">
      <summary>Creates a new SOAP processing behavior element based on the current configuration settings.</summary>
      <returns>The behavior.</returns>
    </member>
    <member name="P:System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement.ProcessMessages">
      <summary>Gets or sets a value that indicates whether messages should be marshaled between SOAP message versions.</summary>
      <returns>true if messages should be marshaled; otherwise, false. The default is true.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Security.xml ===
ï»¿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.CryptographicAttributeObject">
      <summary>Contains a type and a collection of values associated with that type.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObject.#ctor(System.Security.Cryptography.Oid)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> class using an attribute represented by the specified <see cref="T:System.Security.Cryptography.Oid" /> object.</summary>
      <param name="oid">The attribute to store in this <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObject.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedDataCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> class using an attribute represented by the specified <see cref="T:System.Security.Cryptography.Oid" /> object and the set of values associated with that attribute represented by the specified <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> collection.</summary>
      <param name="oid">The attribute to store in this <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object.</param>
      <param name="values">The set of values associated with the attribute represented by the <paramref name="oid" /> parameter.</param>
      <exception cref="T:System.InvalidOperationException">The collection contains duplicate items. </exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObject.Oid">
      <summary>Gets the <see cref="T:System.Security.Cryptography.Oid" /> object that specifies the object identifier for the attribute.</summary>
      <returns>The object identifier for the attribute.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObject.Values">
      <summary>Gets the <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> collection that contains the set of values that are associated with the attribute.</summary>
      <returns>The set of values that is associated with the attribute.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicAttributeObjectCollection">
      <summary>Contains a set of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> objects.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.#ctor(System.Security.Cryptography.CryptographicAttributeObject)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> class, adding a specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> to the collection.</summary>
      <param name="attribute">A <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object that is added to the collection.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.Add(System.Security.Cryptography.AsnEncodedData)">
      <summary>Adds the specified <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object to the collection.</summary>
      <returns>true if the method returns the zero-based index of the added item; otherwise, false.</returns>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.Add(System.Security.Cryptography.CryptographicAttributeObject)">
      <summary>Adds the specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object to the collection.</summary>
      <returns>true if the method returns the zero-based index of the added item; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">The specified item already exists in the collection.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.CopyTo(System.Security.Cryptography.CryptographicAttributeObject[],System.Int32)">
      <summary>Copies the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection to an array of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> objects.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> objects that the collection is copied to.</param>
      <param name="index">The zero-based index in <paramref name="array" /> to which the collection is to be copied.</param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">null was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectCollection.Count">
      <summary>Gets the number of items in the collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.GetEnumerator">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectEnumerator" /> object for the collection.</summary>
      <returns>true if the method returns a <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectEnumerator" /> object that can be used to enumerate the collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized, or thread safe.</summary>
      <returns>true if access to the collection is thread safe; otherwise false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object at the specified index in the collection.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object at the specified index.</returns>
      <param name="index">An <see cref="T:System.Int32" /> value that represents the zero-based index of the <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object to retrieve.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.Remove(System.Security.Cryptography.CryptographicAttributeObject)">
      <summary>Removes the specified <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object from the collection.</summary>
      <param name="attribute">The <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attribute" /> is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectCollection.SyncRoot">
      <summary>Gets an <see cref="T:System.Object" /> object used to synchronize access to the collection.</summary>
      <returns>An <see cref="T:System.Object" /> object used to synchronize access to the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of this <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection to an <see cref="T:System.Array" /> array, starting at a particular index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> array that is the destination of the elements copied from this <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" />. The <see cref="T:System.Array" /> array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicAttributeObjectEnumerator">
      <summary>Provides enumeration functionality for the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectEnumerator.Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object from the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object that represents the current cryptographic attribute in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectEnumerator.MoveNext">
      <summary>Advances the enumeration to the next <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</summary>
      <returns>true if the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object; false if the enumerator is at the end of the enumeration.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicAttributeObjectEnumerator.Reset">
      <summary>Resets the enumeration to the first <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CryptographicAttributeObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the current <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object from the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeObject" /> object that represents the current cryptographic attribute in the <see cref="T:System.Security.Cryptography.CryptographicAttributeObjectCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DataProtectionScope">
      <summary>Specifies the scope of the data protection to be applied by the <see cref="M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)" /> method.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DataProtectionScope.CurrentUser">
      <summary>The protected data is associated with the current user. Only threads running under the current user context can unprotect the data.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DataProtectionScope.LocalMachine">
      <summary>The protected data is associated with the machine context. Any process running on the computer can unprotect data. This enumeration value is usually used in server-specific applications that run on a server where untrusted users are not allowed access.</summary>
    </member>
    <member name="T:System.Security.Cryptography.MemoryProtectionScope">
      <summary>Specifies the scope of memory protection to be applied by the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method.</summary>
    </member>
    <member name="F:System.Security.Cryptography.MemoryProtectionScope.SameProcess">
      <summary>Only code running in the same process as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method can unprotect memory.</summary>
    </member>
    <member name="F:System.Security.Cryptography.MemoryProtectionScope.CrossProcess">
      <summary>All code in any process can unprotect memory that was protected using the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method.</summary>
    </member>
    <member name="F:System.Security.Cryptography.MemoryProtectionScope.SameLogon">
      <summary>Only code running in the same user context as the code that called the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method can unprotect memory.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ProtectedData">
      <summary>Provides methods for protecting and unprotecting data. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
      <summary>Protects the <paramref name="userData" /> parameter and returns a byte array.</summary>
      <returns>A byte array representing the encrypted data.</returns>
      <param name="userData">A byte array containing data to protect. </param>
      <param name="optionalEntropy">An additional byte array used to encrypt the data. </param>
      <param name="scope">One of the <see cref="T:System.Security.Cryptography.DataProtectionScope" /> values. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="userData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic protection failed.</exception>
      <exception cref="T:System.NotSupportedException">The operating system does not support this method. </exception>
      <exception cref="T:System.OutOfMemoryException">The system ran out of memory while encrypting the data.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.DataProtectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ProtectData" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
      <summary>Unprotects the <paramref name="encryptedData" /> parameter and returns a byte array.</summary>
      <returns>A byte array representing the unprotected data.</returns>
      <param name="encryptedData">A byte array containing data encrypted using the <see cref="M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)" /> method. </param>
      <param name="optionalEntropy">An additional byte array used to encrypt the data. </param>
      <param name="scope">One of the <see cref="T:System.Security.Cryptography.DataProtectionScope" /> values. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="encryptedData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic protection failed.</exception>
      <exception cref="T:System.NotSupportedException">The operating system does not support this method. </exception>
      <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.DataProtectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnprotectData" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Cryptography.ProtectedMemory">
      <summary>Provides methods for protecting and unprotecting memory. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)">
      <summary>Protects the specified data and returns a byte array.</summary>
      <param name="userData">The byte array containing data in memory to protect. The array must be a multiple of 16 bytes. </param>
      <param name="scope">One of the enumeration values that specifies the scope of memory protection. </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="userData" /> must be 16 bytes in length or in multiples of 16 bytes. </exception>
      <exception cref="T:System.NotSupportedException">The operating system does not support this method. This method can be used only with the Windows 2000 or later operating systems. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userData " />is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.DataProtectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ProtectMemory" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.ProtectedMemory.Unprotect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)">
      <summary>Unprotects data in memory that was protected using the <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> method.</summary>
      <param name="encryptedData">The byte array in memory to unencrypt. </param>
      <param name="scope">One of the enumeration values that specifies the scope of memory protection. </param>
      <exception cref="T:System.NotSupportedException">The operating system does not support this method. This method can be used only with the Windows 2000 or later operating systems. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encryptedData " />is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="encryptedData " />is empty.-or-This call was not implemented.-or-NTSTATUS contains an error.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.DataProtectionPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnprotectMemory" />
      </PermissionSet>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class defines the algorithm used for a cryptographic operation.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class by using a set of default parameters. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class with the specified algorithm identifier.</summary>
      <param name="oid">An object identifier for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.#ctor(System.Security.Cryptography.Oid,System.Int32)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> class with the specified algorithm identifier and key length.</summary>
      <param name="oid">An object identifier for the algorithm.</param>
      <param name="keyLength">The length, in bits, of the key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.KeyLength" /> property sets or retrieves the key length, in bits. This property is not used for algorithms that use a fixed key length.</summary>
      <returns>An int value that represents the key length, in bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Oid" /> property sets or retrieves the <see cref="T:System.Security.Cryptography.Oid" />  object that specifies the object identifier for the algorithm.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid" /> object that represents the algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.AlgorithmIdentifier.Parameters" /> property sets or retrieves any parameters required by the algorithm.</summary>
      <returns>An array of byte values that specifies any parameters required by the algorithm.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.CmsRecipient">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> class defines the recipient of a CMS/PKCS #7 message.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)" /> constructor constructs an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> class by using the specified recipient identifier type and recipient certificate.</summary>
      <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the type of the identifier of the recipient.</param>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the recipient certificate.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipient.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> constructor constructs an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> class by using the specified recipient certificate.</summary>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the recipient certificate.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipient.Certificate">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipient.Certificate" /> property retrieves the certificate associated with the recipient.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that holds the certificate associated with the recipient.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipient.RecipientIdentifierType">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipient.RecipientIdentifierType" /> property retrieves the type of the identifier of the recipient.</summary>
      <returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the type of the identifier of the recipient.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> class represents a set of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> objects. <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> implements the <see cref="T:System.Collections.ICollection" /> interface. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.CmsRecipient)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.CmsRecipient)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> class and adds the specified recipient.</summary>
      <param name="recipient">An instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> class that represents the specified CMS/PKCS #7 recipient.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> class and adds recipients based on the specified subject identifier and set of certificates that identify the recipients.</summary>
      <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the type of subject identifier.</param>
      <param name="certificates">An <see cref="T:System.Security.Cryptography.X509certificates.X509Certificate2Collection" /> collection that contains the certificates that identify the recipients.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Add(System.Security.Cryptography.Pkcs.CmsRecipient)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Add(System.Security.Cryptography.Pkcs.CmsRecipient)" /> method adds a recipient to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>If the method succeeds, the method returns an <see cref="T:System.Int32" /> value that represents the zero-based position where the recipient is to be inserted.If the method fails, it throws an exception.</returns>
      <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object that represents the recipient to add to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="recipient" /> is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Array,System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Array,System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection to an array.</summary>
      <param name="array">An <see cref="T:System.Array" /> object to which the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not large enough to hold the specified elements.-or-<paramref name="array" /> does not contain the proper number of dimensions.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of elements in <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Security.Cryptography.Pkcs.CmsRecipient[],System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.CopyTo(System.Security.Cryptography.Pkcs.CmsRecipient[],System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection to a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> array.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> objects where the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index for the array of <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> objects in <paramref name="array" /> to which the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not large enough to hold the specified elements.-or-<paramref name="array" /> does not contain the proper number of dimensions.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is outside the range of elements in <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Count">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Count" /> property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of items in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.IsSynchronized">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.IsSynchronized" /> property retrieves whether access to the collection is synchronized, or thread safe. This property always returns false, which means that the collection is not thread safe.</summary>
      <returns>A <see cref="T:System.Boolean" /> value of false, which means that the collection is not thread safe.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Item(System.Int32)" /> property retrieves the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object at the specified index in the collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object at the specified index.</returns>
      <param name="index">An <see cref="T:System.Int32" /> value that represents the index in the collection. The index is zero based.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Remove(System.Security.Cryptography.Pkcs.CmsRecipient)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.Remove(System.Security.Cryptography.Pkcs.CmsRecipient)" /> method removes a recipient from the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object that represents the recipient to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="recipient" /> is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.SyncRoot">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientCollection.SyncRoot" /> property retrieves an <see cref="T:System.Object" /> object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Object" /> object that is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientCollection.System.Collections.IEnumerable.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection. <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator" /> implements the <see cref="T:System.Collections.IEnumerator" /> interface. </summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object that represents the current recipient in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.MoveNext">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.MoveNext" /> method advances the enumeration to the next <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>true if the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object; false if the enumeration moved past the last item in the enumeration.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Reset">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.Reset" /> method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.System#Collections#IEnumerator#Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsRecipientEnumerator.System.Collections.IEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object that represents the current recipient in the <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.CmsSigner">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class provides signing functionality.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class by using a default subject identifier type.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.CspParameters)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class with the specified cryptographic service provider (CSP) parameters. <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.CspParameters)" /> is useful when you know the specific CSP and private key to use for signing.</summary>
      <param name="parameters">A <see cref="T:System.Security.Cryptography.CspParameters" />  object that represents the set of CSP parameters to use.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class with the specified subject identifier type.</summary>
      <param name="signerIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the signer identifier type.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.X509Certificates.X509Certificate2)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class with the specified signer identifier type and signing certificate.</summary>
      <param name="signerIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the signer identifier type.</param>
      <param name="certificate">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the signing certificate.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.CmsSigner.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> class with the specified signing certificate.</summary>
      <param name="certificate">An    <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the signing certificate.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate" /> property sets or retrieves the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the signing certificate.</summary>
      <returns>An  <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the signing certificate.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificates">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificates" /> property retrieves the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that contains certificates associated with the message to be signed.  </summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that represents the collection of  certificates associated with the message to be signed.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.DigestAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.DigestAlgorithm" /> property sets or retrieves the <see cref="T:System.Security.Cryptography.Oid" /> that represents the hash algorithm used with the signature.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid" /> object that represents the hash algorithm used with the signature.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.IncludeOption">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.IncludeOption" /> property sets or retrieves the option that controls whether the root and entire chain associated with the signing certificate are included with the created CMS/PKCS #7 message.</summary>
      <returns>A member of the <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" /> enumeration that specifies how much of the X509 certificate chain should be included in the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object. The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.IncludeOption" /> property can be one of the following <see cref="T:System.Security.Cryptography.X509Certificates.X509IncludeOption" /> members.NameValueMeaning<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.None" />0The certificate chain is not included.<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.ExcludeRoot" />1The certificate chain, except for the root certificate, is included.<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.EndCertOnly" />2Only the end certificate is included.<see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain" />3The certificate chain, including the root certificate, is included.</returns>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.SignedAttributes">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.SignedAttributes" /> property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection of signed attributes to be associated with the resulting <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> content. Signed attributes are signed along with the specified content.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection that represents the signed attributes. If there are no signed attributes, the property is an empty collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.SignerIdentifierType">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.SignerIdentifierType" /> property sets or retrieves the type of the identifier of the signer.</summary>
      <returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the type of the identifier of the signer.</returns>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.CmsSigner.UnsignedAttributes">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.UnsignedAttributes" /> property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection of unsigned PKCS #9 attributes to be associated with the resulting <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> content. Unsigned attributes can be modified without invalidating the signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection that represents the unsigned attributes. If there are no unsigned attributes, the property is an empty collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.ContentInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> class represents the CMS/PKCS #7 ContentInfo data structure as defined in the CMS/PKCS #7 standards document. This data structure is the basis for all CMS/PKCS #7 messages.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Byte[])" /> constructor  creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> class by using an array of byte values as the data and a default <paramref name="object identifier" /> (OID) that represents the content type.</summary>
      <param name="content">An array of byte values that represents the data from which to create the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object.</param>
      <exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.#ctor(System.Security.Cryptography.Oid,System.Byte[])" />  constructor  creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> class by using the specified content type and an array of byte values as the data.</summary>
      <param name="contentType">An <see cref="T:System.Security.Cryptography.Oid" /> object that contains an <paramref name="object identifier" /> (OID) that specifies the content type of the content. This can be data, digestedData, encryptedData, envelopedData, hashedData, signedAndEnvelopedData, or signedData.  For more information, see  Remarks.</param>
      <param name="content">An array of byte values that represents the data from which to create the <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object.</param>
      <exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.ContentInfo.Content">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.ContentInfo.Content" /> property  retrieves the content of the CMS/PKCS #7 message.</summary>
      <returns>An array of byte values that represents the content data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.ContentInfo.ContentType">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.ContentInfo.ContentType" /> property  retrieves the <see cref="T:System.Security.Cryptography.Oid" />   object that contains the <paramref name="object identifier" /> (OID)  of the content type of the inner content of the CMS/PKCS #7 message.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid" />  object that contains the OID value that represents the content type.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.ContentInfo.GetContentType(System.Byte[])" /> static method  retrieves the outer content type of the encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> message represented by an array of byte values.</summary>
      <returns>If the method succeeds, the method returns an <see cref="T:System.Security.Cryptography.Oid" /> object that contains the outer content type of the specified encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> message.If the method fails, it throws an exception.</returns>
      <param name="encodedMessage">An array of byte values that represents the encoded <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> message from which to retrieve the outer content type.</param>
      <exception cref="T:System.ArgumentNullException">A null reference  was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during a cryptographic operation.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.EnvelopedCms">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class represents a CMS/PKCS #7 structure for enveloped data.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class.</summary>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class by using the specified content information as the inner content type.</summary>
      <param name="contentInfo">An instance of the <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentInfo" /> class that represents the content and its type.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class by using the specified content information and encryption algorithm. The specified content information is to be used as the inner content type.</summary>
      <param name="contentInfo">A  <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that represents the content and its type.</param>
      <param name="encryptionAlgorithm">An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> object that specifies the encryption algorithm.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class by using the specified subject identifier type and content information. The specified content information is to be used as the inner content type.</summary>
      <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the means of identifying the recipient.</param>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that represents the content and its type.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Security.Cryptography.Pkcs.AlgorithmIdentifier)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> class by using the specified subject identifier type, content information, and encryption algorithm. The specified content information is to be used as the inner content type.</summary>
      <param name="recipientIdentifierType">A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration that specifies the means of identifying the recipient.</param>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that represents the content and its type.</param>
      <param name="encryptionAlgorithm">An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> object that specifies the encryption algorithm.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Certificates">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Certificates" /> property retrieves the set of certificates associated with the enveloped CMS/PKCS #7 message.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that represents the X.509 certificates used with the enveloped CMS/PKCS #7 message. If no certificates exist, the property value is an empty collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentEncryptionAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentEncryptionAlgorithm" /> property retrieves the identifier of the algorithm used to encrypt the content.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> object that represents the algorithm identifier.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentInfo">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.ContentInfo" /> property retrieves the inner content information for the enveloped CMS/PKCS #7 message.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that represents the inner content information from the enveloped CMS/PKCS #7 message.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decode(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decode(System.Byte[])" /> method decodes the specified enveloped CMS/PKCS #7 message and resets all member variables in the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> object.</summary>
      <param name="encodedMessage">An array of byte values that represent the information to be decoded.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt" /> method decrypts the contents of the decoded enveloped CMS/PKCS #7 message. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt" /> method searches the current user and computer My stores for the appropriate certificate and private key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.StorePermission, System.Security, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Flags="CreateStore, DeleteStore, OpenStore, EnumerateCertificates" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo)" /> method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the private key associated with the certificate identified by the specified recipient information.</summary>
      <param name="recipientInfo">A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object that represents the recipient information that identifies the certificate associated with the private key to use for the decryption.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the private key associated with the certificate identified by the specified recipient information and by using the specified certificate collection.  The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method searches the specified certificate collection and the My certificate store for the proper certificate to use for the decryption.</summary>
      <param name="recipientInfo">A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object that represents the recipient information to use for the decryption.</param>
      <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that represents additional certificates to use for the decryption. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.Pkcs.RecipientInfo,System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method searches this certificate collection and the My certificate store for the proper certificate to use for the decryption.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method decrypts the contents of the decoded enveloped CMS/PKCS #7 message by using the specified certificate collection. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method searches the specified certificate collection and the My certificate store for the proper certificate to use for the decryption.</summary>
      <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that represents additional certificates to use for the decryption. The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)" /> method searches this certificate collection and the My certificate store for the proper certificate to use for the decryption.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encode">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encode" /> method encodes the contents of the enveloped CMS/PKCS #7 message and returns it as an array of byte values. Encryption must be done before encoding.</summary>
      <returns>If the method succeeds, the method returns an array of byte values that represent the encoded information.If the method fails, it throws an exception.</returns>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt" /> method encrypts the contents of the CMS/PKCS #7 message.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeTopLevelWindows" />
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.StorePermission, System.Security, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Flags="CreateStore, DeleteStore, OpenStore, EnumerateCertificates" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipient)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipient)" /> method encrypts the contents of the CMS/PKCS #7 message by using the specified recipient information.</summary>
      <param name="recipient">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" /> object that represents the recipient information.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipientCollection)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(System.Security.Cryptography.Pkcs.CmsRecipientCollection)" /> method encrypts the contents of the CMS/PKCS #7 message by using the information for the specified list of recipients. The message is encrypted by using a message encryption key with a symmetric encryption algorithm such as triple DES. The message encryption key is then encrypted with the public key of each recipient.</summary>
      <param name="recipients">A <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipientCollection" /> collection that represents the information for the list of recipients.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.RecipientInfos">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.RecipientInfos" /> property retrieves the recipient information associated with the enveloped CMS/PKCS #7 message.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection that represents the recipient information. If no recipients exist, the property value is an empty collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.UnprotectedAttributes">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.UnprotectedAttributes" /> property retrieves the unprotected (unencrypted) attributes associated with the enveloped CMS/PKCS #7 message. Unprotected attributes are not encrypted, and so do not have data confidentiality within an <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms" /> object.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection that represents the unprotected attributes. If no unprotected attributes exist, the property value is an empty collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.EnvelopedCms.Version" /> property retrieves the version of the enveloped CMS/PKCS #7 message.  </summary>
      <returns>An int value that represents the version of the enveloped CMS/PKCS #7 message.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice" /> enumeration defines the type of key used in a key agreement protocol.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice.Unknown">
      <summary>The key agreement key type is unknown.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice.EphemeralKey">
      <summary>The key agreement key is ephemeral, existing only for the duration of the key agreement protocol.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.KeyAgreeKeyChoice.StaticKey">
      <summary>The key agreement key is static, existing for an extended period of time.</summary>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" /> class defines key agreement recipient information.        Key agreement algorithms typically use the Diffie-Hellman key agreement algorithm, in which the two parties that establish a shared cryptographic key both take part in its generation and, by definition, agree on that key. This is in contrast to key transport algorithms, in which one party generates the key unilaterally and sends, or transports it, to the other party.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Date">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Date" /> property retrieves the date and time of the start of the key agreement protocol by the originator.</summary>
      <returns>A <see cref="T:System.DateTime" /> object that contains the value of the date and time of the start of the key agreement protocol by the originator.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.EncryptedKey">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.EncryptedKey" /> property retrieves the encrypted recipient keying material.</summary>
      <returns>An array of byte values that contain the encrypted recipient keying material.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.KeyEncryptionAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.KeyEncryptionAlgorithm" /> property retrieves the algorithm used to perform the key agreement.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> object that contains the value of the algorithm used to perform the key agreement.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OriginatorIdentifierOrKey">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OriginatorIdentifierOrKey" /> property retrieves information about the originator of the key agreement for key agreement algorithms that warrant it.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey" /> object that contains information about the originator of the key agreement.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OtherKeyAttribute">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.OtherKeyAttribute" /> property retrieves attributes of the keying material.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttribute" /> object that contains attributes of the keying material.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.RecipientIdentifier">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.RecipientIdentifier" /> property retrieves the identifier of the recipient.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" /> object that contains the identifier of the recipient.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo.Version" /> property retrieves the version of the key agreement recipient. This is automatically set for  objects in this class, and the value  implies that the recipient is taking part in a key agreement algorithm.</summary>
      <returns>An int  that represents the version of the  <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" />  object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo" /> class defines key transport recipient information.        Key transport algorithms typically use the RSA algorithm, in which  an originator establishes a shared cryptographic key with a recipient by generating that key and  then transporting it to the recipient. This is in contrast to key agreement algorithms, in which the two parties that will be using a cryptographic key both take part in its generation, thereby mutually agreeing to that key.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.EncryptedKey" /> property retrieves the encrypted key for this key transport recipient.</summary>
      <returns>An array of byte values that represents the encrypted key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.KeyEncryptionAlgorithm" /> property retrieves the key encryption algorithm used to encrypt the content encryption key.</summary>
      <returns> An  <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />  object that stores the key encryption algorithm identifier.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.RecipientIdentifier" /> property retrieves the subject identifier associated with the encrypted content.</summary>
      <returns>A   <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" />  object that  stores the identifier of the recipient taking part in the key transport.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo.Version" /> property retrieves the version of the key transport recipient. The version of the key transport recipient is automatically set for  objects in this class, and the value  implies that the recipient is taking part in a key transport algorithm.</summary>
      <returns>An int value that represents the version of the key transport <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject">
      <summary>Represents an attribute used for CMS/PKCS #7 and PKCS #9 operations.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> class using a specified <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object as its attribute type and value.</summary>
      <param name="asnEncodedData">An <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object that contains the PKCS #9 attribute type and value to use.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.#ctor(System.Security.Cryptography.Oid,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> class using a specified <see cref="T:System.Security.Cryptography.Oid" /> object as the attribute type and a specified ASN.1 encoded data as the attribute value.</summary>
      <param name="oid">An <see cref="T:System.Security.Cryptography.Oid" /> object that represents the PKCS #9 attribute type.</param>
      <param name="encodedData">An array of byte values that represents the PKCS #9 attribute value.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.#ctor(System.String,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> class using a specified string representation of an object identifier (OID) as the attribute type and a specified ASN.1 encoded data as the attribute value.</summary>
      <param name="oid">A <see cref="T:System.String" /> object that contains the string representation of an OID that represents the PKCS #9 attribute type.</param>
      <param name="encodedData">An array of byte values that contains the PKCS #9 attribute value.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies a PKCS #9 attribute type and value for this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> from the specified <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">An <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object that contains the PKCS #9 attribute type and value to use.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject.Oid">
      <summary>Gets an <see cref="T:System.Security.Cryptography.Oid" /> object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> object.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid" /> object that represents the type of attribute associated with this <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9AttributeObject" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9ContentType">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9ContentType" /> class defines the type of the content of a CMS/PKCS #7 message.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9ContentType.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9ContentType.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9ContentType" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9ContentType.ContentType">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9ContentType.ContentType" /> property gets an <see cref="T:System.Security.Cryptography.Oid" /> object that contains the content type.</summary>
      <returns>An  <see cref="T:System.Security.Cryptography.Oid" /> object that contains the content type.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9ContentType.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object from which to copy information.</param>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" /> class defines the description of the content of a CMS/PKCS #7 message.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.Byte[])" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" /> class by using the specified array of byte values as the encoded description of the content of a CMS/PKCS #7 message.</summary>
      <param name="encodedDocumentDescription">An array of byte values that specifies the encoded description of the CMS/PKCS #7 message.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.String)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.#ctor(System.String)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription" /> class by using the specified description of the content of a CMS/PKCS #7 message.</summary>
      <param name="documentDescription">An instance of the <see cref="T:System.String" />  class that specifies the description for the CMS/PKCS #7 message.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object from which to copy information.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.DocumentDescription">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentDescription.DocumentDescription" /> property retrieves the document description.</summary>
      <returns>A <see cref="T:System.String" /> object that contains the document description.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" /> class defines the name of a CMS/PKCS #7 message.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.Byte[])" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" /> class by using the specified array of byte values as the encoded name of the content of a CMS/PKCS #7 message.</summary>
      <param name="encodedDocumentName">An array of byte values that specifies the encoded name of the CMS/PKCS #7 message.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.String)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.#ctor(System.String)" /> constructor creates an instance of the  <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9DocumentName" /> class by using the specified name for the CMS/PKCS #7 message.</summary>
      <param name="documentName">A  <see cref="T:System.String" />   object that specifies the name for the CMS/PKCS #7 message.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object from which to copy information.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.DocumentName">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9DocumentName.DocumentName" /> property retrieves the document name.</summary>
      <returns>A <see cref="T:System.String" /> object that contains the document name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest" /> class defines the message digest of a CMS/PKCS #7 message.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from an <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object from which to copy information.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.MessageDigest">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9MessageDigest.MessageDigest" /> property retrieves the message digest.</summary>
      <returns>An array of byte values that contains the message digest.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" /> class defines the signing date and time of a signature. A <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" /> object can  be used as an authenticated attribute of a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" />  object when an authenticated date and time are to accompany a digital signature.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.Byte[])" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" /> class by using the specified array of byte values as the encoded signing date and time of the content of a CMS/PKCS #7 message.</summary>
      <param name="encodedSigningTime">An array of byte values that specifies the encoded signing date and time of the CMS/PKCS #7 message.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.DateTime)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.#ctor(System.DateTime)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.Pkcs9SigningTime" /> class by using the specified signing date and time.</summary>
      <param name="signingTime">A <see cref="T:System.DateTime" />  structure that represents the signing date and time of the signature.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>Copies information from a <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object.</summary>
      <param name="asnEncodedData">The <see cref="T:System.Security.Cryptography.AsnEncodedData" /> object from which to copy information.</param>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.SigningTime">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.Pkcs9SigningTime.SigningTime" /> property retrieves a <see cref="T:System.DateTime" /> structure that represents the date and time that the message was signed.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure that contains the date and time the document was signed.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.PublicKeyInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.PublicKeyInfo" /> class represents information associated with a public key.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm" /> property retrieves the algorithm identifier associated with the public key.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" />  object that represents the algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue" /> property retrieves the value of the encoded public component of the public key pair.</summary>
      <returns>An array of byte values  that represents the encoded public component of the public key pair.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.RecipientInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> class represents information about a CMS/PKCS #7 message recipient. The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> class is an abstract class inherited by the <see cref="T:System.Security.Cryptography.Pkcs.KeyAgreeRecipientInfo" /> and <see cref="T:System.Security.Cryptography.Pkcs.KeyTransRecipientInfo" /> classes.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.EncryptedKey" /> abstract property retrieves the encrypted recipient keying material.</summary>
      <returns>An array of byte values that contain the encrypted recipient keying material.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.KeyEncryptionAlgorithm" /> abstract property retrieves the algorithm used to perform the key establishment.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier" /> object that contains the value of the algorithm used to establish the key between the originator and recipient of the CMS/PKCS #7 message.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.RecipientIdentifier" /> abstract property retrieves the identifier of the recipient.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" /> object that contains the identifier of the recipient.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfo.Type">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Type" /> property retrieves the type of the recipient. The type of the recipient determines which of two major protocols is used to establish a key between the originator and the recipient of a CMS/PKCS #7 message.</summary>
      <returns>A value of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" /> enumeration that defines the type of the recipient.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfo.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfo.Version" /> abstract property retrieves the version of the recipient information. Derived classes automatically set this property for their objects, and the value indicates whether it is using PKCS #7 or Cryptographic Message Syntax (CMS) to protect messages. The version also implies whether the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object establishes a cryptographic key by a key agreement algorithm or a key transport algorithm.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the version of the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> class represents a collection of <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> objects. <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> implements the <see cref="T:System.Collections.ICollection" /> interface. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Array,System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Array,System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection to an array.</summary>
      <param name="array">An <see cref="T:System.Array" /> object to which  the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.RecipientInfo[],System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.RecipientInfo[],System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection to a <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> array.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> objects where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.Count">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.Count" /> property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>An int value that represents the number of items in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.IsSynchronized">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.IsSynchronized" /> property retrieves whether access to the collection is synchronized, or thread safe. This property always returns false, which means the collection is not thread safe.</summary>
      <returns>A <see cref="T:System.Boolean" /> value of false, which means the collection is not thread safe.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.Item(System.Int32)" /> property retrieves the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object at the specified index in the collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object at the specified index.</returns>
      <param name="index">An int value that represents the index in the collection. The index is zero based.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.SyncRoot">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoCollection.SyncRoot" /> property retrieves an <see cref="T:System.Object" /> object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Object" />  object used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoCollection.System.Collections.IEnumerable.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection. <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator" /> implements the <see cref="T:System.Collections.IEnumerator" /> interface. </summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object that represents the current recipient information structure in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.MoveNext">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.MoveNext" /> method advances the enumeration to the next <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>This method returns a bool that specifies whether the enumeration successfully advanced. If the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object, the method returns true. If the enumeration moved past the last item in the enumeration, it returns false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Reset">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.Reset" /> method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.System#Collections#IEnumerator#Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.RecipientInfoEnumerator.System.Collections.IEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfo" /> object that represents the current recipient information structure in the <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.RecipientInfoType">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.RecipientInfoType" /> enumeration defines the types of recipient information.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.RecipientInfoType.Unknown">
      <summary>The recipient information type is unknown.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.RecipientInfoType.KeyTransport">
      <summary>Key transport recipient information.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.RecipientInfoType.KeyAgreement">
      <summary>Key agreement recipient information.</summary>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SignedCms">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class enables signing and verifying of CMS/PKCS #7 messages. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class.</summary>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class by using the specified content information as the inner content.</summary>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> message.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class by using the specified content information as the inner content and by using the detached state.</summary>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> message.</param>
      <param name="detached">A <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object is for a detached signature. If <paramref name="detached" /> is true, the signature is detached. If <paramref name="detached" /> is false, the signature is not detached.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class by using the specified subject identifier type as the default subject identifier type for signers.</summary>
      <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> member that specifies the default subject identifier type for signers.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class by using the specified subject identifier type as the default subject identifier type for signers and content information as the inner content.</summary>
      <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> member that specifies the default subject identifier type for signers.</param>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> message.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" /> constructor creates an instance of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> class by using the specified subject identifier type as the default subject identifier type for signers, the content information as the inner content, and by using the detached state.</summary>
      <param name="signerIdentifierType">A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> member that specifies the default subject identifier type for signers.</param>
      <param name="contentInfo">A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that specifies the content information as the inner content of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> message.</param>
      <param name="detached">A <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object is for a detached signature. If <paramref name="detached" /> is true, the signature is detached. If detached is false, the signature is not detached.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignedCms.Certificates">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Certificates" /> property retrieves the certificates associated with the encoded CMS/PKCS #7 message.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> collection that represents the set of certificates for the encoded CMS/PKCS #7 message.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" /> method verifies the data integrity of the CMS/PKCS #7 message. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" /> is a specialized method used in specific security infrastructure applications in which the subject uses the <see cref="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.HashOnly" /> enumeration member when setting up a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" /> does not authenticate the author nor sender of the message because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of a CMS/PKCS #7 message, use the <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> or <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> methods.</summary>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> method verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.</summary>
      <param name="verifySignatureOnly">A <see cref="T:System.Boolean" /> value that specifies whether only the digital signatures are verified without the signers' certificates being validated. If <paramref name="verifySignatureOnly" /> is true, only the digital signatures are verified. If it is false, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException"> A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> method verifies the digital signatures on the signed CMS/PKCS #7 message by using the specified collection of certificates and, optionally, validates the signers' certificates.</summary>
      <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object that can be used to validate the certificate chain. If no additional certificates are to be used to validate the certificate chain, use <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> instead of <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />.</param>
      <param name="verifySignatureOnly">A <see cref="T:System.Boolean" /> value that specifies whether only the digital signatures are verified without the signers' certificates being validated. If <paramref name="verifySignatureOnly" /> is true, only the digital signatures are verified. If it is false, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or nonrepudiation.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature" /> method prompts the user to select a signing certificate, creates a signature, and adds the signature to the CMS/PKCS #7 message.</summary>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeTopLevelWindows" />
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.StorePermission, System.Security, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Flags="CreateStore, DeleteStore, OpenStore, EnumerateCertificates" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)" /> method creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message.</summary>
      <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object that represents the signer.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)">
      <summary>Creates a signature using the specified signer and adds the signature to the CMS/PKCS #7 message. If the value of the silent parameter is false and the <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate" /> property of the <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object specified by the signer parameter is not set to a valid certificate, this method prompts the user to select a signing certificate.</summary>
      <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object that represents the signer.</param>
      <param name="silent">false to prompt the user to select a signing certificate.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">The value of the <paramref name="silent" /> parameter is true and a signing certificate is not specified.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo" /> property retrieves the inner contents of the encoded CMS/PKCS #7 message.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> object that represents the contents of the encoded CMS/PKCS #7 message.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" /> method decodes an encoded <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> message. Upon successful decoding, the decoded information can be retrieved from the properties of the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object.</summary>
      <param name="encodedMessage">Array of byte values that represents the encoded CMS/PKCS #7 message to be decoded.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignedCms.Detached">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Detached" /> property retrieves whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object is for a detached signature.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object is for a detached signature. If this property is true, the signature is detached. If this property is false, the signature is not detached.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.Encode">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Encode" /> method encodes the information in the object into a CMS/PKCS #7 message.</summary>
      <returns>An array of byte values that represents the encoded message. The encoded message can be decoded by the <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" /> method.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Int32)">
      <summary>Removes the signature at the specified index of the <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" /> collection. </summary>
      <param name="index">The zero-based index of the signature to remove.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)" /> method removes the signature for the specified <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object.</summary>
      <param name="signerInfo">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object that represents the countersignature being removed.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" /> property retrieves the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection associated with the CMS/PKCS #7 message.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> object that represents the signer information for the CMS/PKCS #7 message.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignedCms.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Version" /> property retrieves the version of the CMS/PKCS #7 message.</summary>
      <returns>An int value that represents the CMS/PKCS #7 message version.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SignerInfo">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> class represents a signer associated with a <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> object that represents a CMS/PKCS #7 message.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.Certificate">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.Certificate" /> property retrieves the signing certificate associated with the signer information.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> object that represents the signing certificate.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="ControlEvidence, ControlPolicy" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" /> method verifies the data integrity of the CMS/PKCS #7 message signer information. <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" /> is a specialized method used in specific security infrastructure applications in which the subject uses the HashOnly member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration when setting up a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object. <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckHash" /> does not authenticate the signer information because this method does not involve verifying a digital signature. For general-purpose checking of the integrity and authenticity of CMS/PKCS #7 message signer information and countersignatures, use the <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" /> or <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> methods.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" /> method verifies the digital signature of the message and, optionally, validates the certificate.</summary>
      <param name="verifySignatureOnly">A bool value that specifies whether only the digital signature is verified. If <paramref name="verifySignatureOnly" /> is true, only the signature is verified. If <paramref name="verifySignatureOnly" /> is false, the digital signature is verified, the certificate chain is validated, and the purposes of the certificates are validated. The purposes of the certificate are considered valid if the certificate has no key usage or if the key usage supports digital signature or nonrepudiation.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> method verifies the digital signature of the message by using the specified collection of certificates and, optionally, validates the certificate.</summary>
      <param name="extraStore">An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object that can be used to validate the chain. If no additional certificates are to be used to validate the chain, use <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Boolean)" /> instead of <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />.</param>
      <param name="verifySignatureOnly">A bool value that specifies whether only the digital signature is verified. If <paramref name="verifySignatureOnly" /> is true, only the signature is verified. If <paramref name="verifySignatureOnly" /> is false, the digital signature is verified, the certificate chain is validated, and the purposes of the certificates are validated. The purposes of the certificate are considered valid if the certificate has no key usage or if the key usage supports digital signature or nonrepudiation.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <exception cref="T:System.InvalidOperationException">A method call was invalid for the object's current state.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature" /> method prompts the user to select a signing certificate, creates a countersignature, and adds the signature to the CMS/PKCS #7 message. Countersignatures are restricted to one level.</summary>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeTopLevelWindows" />
        <IPermission class="System.Security.Permissions.KeyContainerPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.StorePermission, System.Security, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" version="1" Flags="CreateStore, DeleteStore, OpenStore, EnumerateCertificates" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature(System.Security.Cryptography.Pkcs.CmsSigner)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.ComputeCounterSignature(System.Security.Cryptography.Pkcs.CmsSigner)" /> method creates a countersignature by using the specified signer and adds the signature to the CMS/PKCS #7 message. Countersignatures are restricted to one level.</summary>
      <param name="signer">A <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> object that represents the counter signer.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.CounterSignerInfos">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.CounterSignerInfos" /> property retrieves the set of counter signers associated with the signer information. </summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection that represents the counter signers for the signer information. If there are no counter signers, the property is an empty collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.DigestAlgorithm">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.DigestAlgorithm" /> property retrieves the <see cref="T:System.Security.Cryptography.Oid" /> object that represents the hash algorithm used in the computation of the signatures.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Oid" /> object that represents the hash algorithm used with the signature.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Int32)" /> method removes the countersignature at the specified index of the <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.CounterSignerInfos" /> collection.</summary>
      <param name="index">The zero-based index of the countersignature to remove.</param>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Security.Cryptography.Pkcs.SignerInfo)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfo.RemoveCounterSignature(System.Security.Cryptography.Pkcs.SignerInfo)" /> method removes the countersignature for the specified <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object.</summary>
      <param name="counterSignerInfo">A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object that represents the countersignature being removed.</param>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">A cryptographic operation could not be completed.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.SignedAttributes">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.SignedAttributes" /> property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection of signed attributes that is associated with the signer information. Signed attributes are signed along with the rest of the message content.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection that represents the signed attributes. If there are no signed attributes, the property is an empty collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.SignerIdentifier">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.SignerIdentifier" /> property retrieves the certificate identifier of the signer associated with the signer information.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" /> object that uniquely identifies the certificate associated with the signer information.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.UnsignedAttributes" /> property retrieves the <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection of unsigned attributes that is associated with the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> content. Unsigned attributes can be modified without invalidating the signature.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.CryptographicAttributeCollection" /> collection that represents the unsigned attributes. If there are no unsigned attributes, the property is an empty collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfo.Version">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfo.Version" /> property retrieves the signer information version.</summary>
      <returns>An int value that specifies the signer information version.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SignerInfoCollection">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> class represents a collection of <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> objects. <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> implements the <see cref="T:System.Collections.ICollection" /> interface. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Array,System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Array,System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection to an array.</summary>
      <param name="array">An <see cref="T:System.Array" /> object to which the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.SignerInfo[],System.Int32)">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.CopyTo(System.Security.Cryptography.Pkcs.SignerInfo[],System.Int32)" /> method copies the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection to a <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> array.</summary>
      <param name="array">An array of <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> objects where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection is to be copied.</param>
      <param name="index">The zero-based index in <paramref name="array" /> where the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection is copied.</param>
      <exception cref="T:System.ArgumentException">One of the arguments provided to a method was not valid.</exception>
      <exception cref="T:System.ArgumentNullException">A null reference was passed to a method that does not accept it as a valid argument. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.Count">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.Count" /> property retrieves the number of items in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>An int value that represents the number of items in the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.IsSynchronized">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.IsSynchronized" /> property retrieves whether access to the collection is synchronized, or thread safe. This property always returns false, which means the collection is not thread safe.</summary>
      <returns>A <see cref="T:System.Boolean" /> value of false, which means the collection is not thread safe.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.Item(System.Int32)">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.Item(System.Int32)" /> property retrieves the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object at the specified index in the collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object  at the specified index.</returns>
      <param name="index">An int value that represents the index in the collection. The index is zero based.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of an argument was outside the allowable range of values as defined by the called method.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.SyncRoot">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoCollection.SyncRoot" /> property retrieves an <see cref="T:System.Object" /> object is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>An <see cref="T:System.Object" /> object is used to synchronize access to the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoCollection.System.Collections.IEnumerable.GetEnumerator" /> method returns a <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> object for the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> object that can be used to enumerate the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> class provides enumeration functionality for the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection. <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoEnumerator" /> implements the <see cref="T:System.Collections.IEnumerator" /> interface. </summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object that represents the current signer information structure in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.MoveNext">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.MoveNext" /> method advances the enumeration to the next   <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>This method returns a bool value that specifies whether the enumeration successfully advanced. If the enumeration successfully moved to the next <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object, the method returns true. If the enumeration moved past the last item in the enumeration, it returns false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Reset">
      <summary>The <see cref="M:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.Reset" /> method resets the enumeration to the first <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.System#Collections#IEnumerator#Current">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SignerInfoEnumerator.System.Collections.IEnumerator.Current" /> property retrieves the current <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object from the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> object that represents the current signer information structure in the <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> collection.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SubjectIdentifier">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifier" /> class defines the type of the identifier of a subject, such as a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> or a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />.  The subject can be identified by the certificate issuer and serial number or the subject key.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" /> property retrieves the type of subject identifier. The subject can be identified by the certificate issuer and serial number or the subject key.</summary>
      <returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" />  enumeration that identifies the type of subject.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Value">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Value" /> property retrieves the value of the subject identifier. Use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" /> property to determine the type of subject identifier, and use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Value" /> property to retrieve the corresponding value.</summary>
      <returns>An <see cref="T:System.Object" /> object that represents the value of the subject identifier. This <see cref="T:System.Object" /> can be one of the following objects as determined by the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" /> property.<see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifier.Type" /> propertyObjectIssuerAndSerialNumber<see cref="T:System.Security.Cryptographyxml.X509IssuerSerial" />SubjectKeyIdentifier<see cref="T:System.String" /></returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey" /> class defines the type of the identifier of a subject, such as a <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> or a <see cref="T:System.Security.Cryptography.Pkcs.CmsRecipient" />.  The subject can be identified by the certificate issuer and serial number, the hash of the subject key, or the subject key. </summary>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" /> property retrieves the type of subject identifier or key. The subject can be identified by the certificate issuer and serial number, the hash of the subject key, or the subject key.</summary>
      <returns>A member of the <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType" />  enumeration that specifies the type of subject identifier.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Value">
      <summary>The <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Value" /> property retrieves the value of the subject identifier or  key. Use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" /> property to determine the type of subject identifier or key, and use the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Value" /> property to retrieve the corresponding value.</summary>
      <returns>An <see cref="T:System.Object" /> object that represents the value of the subject identifier or key. This <see cref="T:System.Object" /> can be one of the following objects as determined by the <see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" /> property.<see cref="P:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKey.Type" /> propertyObjectIssuerAndSerialNumber<see cref="T:System.Security.Cryptographyxml.X509IssuerSerial" />SubjectKeyIdentifier<see cref="T:System.String" />PublicKeyInfo<see cref="T:System.Security.Cryptography.Pkcs.PublicKeyInfo" /></returns>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType" /> enumeration defines how a subject is identified.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType.Unknown">
      <summary>The type is unknown.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType.IssuerAndSerialNumber">
      <summary>The subject is identified by the certificate issuer and serial number.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType.SubjectKeyIdentifier">
      <summary>The subject is identified by the hash of the subject key.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierOrKeyType.PublicKeyInfo">
      <summary>The subject is identified by the public key.</summary>
    </member>
    <member name="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType">
      <summary>The <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> enumeration defines the type of subject identifier.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.Unknown">
      <summary>The type of subject identifier is unknown.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber">
      <summary>The subject is identified by the certificate issuer and serial number.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.SubjectKeyIdentifier">
      <summary>The subject is identified by the hash of the subject's public key. The hash algorithm used is determined by the signature algorithm suite in the subject's certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.NoSignature">
      <summary>The subject is identified as taking part in an integrity check operation that uses only a hashing algorithm.</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2UI">
      <summary>Displays user interface dialogs that allow you to select and view X.509 certificates. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.DisplayCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Displays a dialog box that contains the properties of an X.509 certificate and its associated certificate chain.</summary>
      <param name="certificate">The X.509 certificate to display.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificate" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificate" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.DisplayCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IntPtr)">
      <summary>Displays a dialog box that contains the properties of an X.509 certificate and its associated certificate chain using a handle to a parent window.</summary>
      <param name="certificate">The X.509 certificate to display.</param>
      <param name="hwndParent">A handle to the parent window to use for the display dialog.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificate" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificate" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.Security.Cryptography.X509Certificates.X509SelectionFlag)">
      <summary>Displays a dialog box for selecting an X.509 certificate from a certificate collection.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object that contains the selected certificate or certificates.</returns>
      <param name="certificates">A collection of X.509 certificates to select from.</param>
      <param name="title">The title of the dialog box.</param>
      <param name="message">A descriptive message to guide the user.  The message is displayed in the dialog box.</param>
      <param name="selectionFlag">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" /> values that specifies whether single or multiple selections are allowed. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="selectionFlag" /> parameter is not a valid flag. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificates" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificates" /> parameter is invalid. </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.Security.Cryptography.X509Certificates.X509SelectionFlag,System.IntPtr)">
      <summary>Displays a dialog box for selecting an X.509 certificate from a certificate collection using a handle to a parent window.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> object that contains the selected certificate or certificates.</returns>
      <param name="certificates">A collection of X.509 certificates to select from.</param>
      <param name="title">The title of the dialog box.</param>
      <param name="message">A descriptive message to guide the user.  The message is displayed in the dialog box.</param>
      <param name="selectionFlag">One of the <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" /> values that specifies whether single or multiple selections are allowed. </param>
      <param name="hwndParent">A handle to the parent window to use for the display dialog box.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="selectionFlag" /> parameter is not a valid flag. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="certificates" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="certificates" /> parameter is invalid. </exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag">
      <summary>Specifies the type of selection requested using the <see cref="Overload:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection" /> method.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SelectionFlag.SingleSelection">
      <summary>A single selection. The UI allows the user to select one X.509 certificate.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SelectionFlag.MultiSelection">
      <summary>A multiple selection. The user can use the SHIFT or CRTL keys to select more than one X.509 certificate.</summary>
    </member>
    <member name="T:System.Security.Cryptography.Xml.CipherData">
      <summary>Represents the &lt;CipherData&gt; element in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherData.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class using a byte array as the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> value.</summary>
      <param name="cipherValue">The encrypted data to use for the &lt;CipherValue&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cipherValue" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property has already been set.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherData.#ctor(System.Security.Cryptography.Xml.CipherReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> class using a <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</summary>
      <param name="cipherReference">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object to use.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cipherValue" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property has already been set.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.CipherData.CipherReference">
      <summary>Gets or sets the &lt;CipherReference&gt; element.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />  property was set to null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" />  property was set more than once.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.CipherData.CipherValue">
      <summary>Gets or sets the &lt;CipherValue&gt; element.</summary>
      <returns>A byte array that represents the &lt;CipherValue&gt; element.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />  property was set to null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" />  property was set more than once.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherData.GetXml">
      <summary>Gets the XML values for the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</summary>
      <returns>A <see cref="T:System.Xml.XmlElement" /> object that represents the XML information for the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" /> property are null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherData.LoadXml(System.Xml.XmlElement)">
      <summary>Loads XML data from an <see cref="T:System.Xml.XmlElement" /> into a <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> that represents the XML data to load.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherValue" /> property and the <see cref="P:System.Security.Cryptography.Xml.CipherData.CipherReference" /> property are null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.CipherReference">
      <summary>Represents the &lt;CipherReference&gt; element in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
      <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> class using the specified Uniform Resource Identifier (URI) and transform chain information.</summary>
      <param name="uri">A Uniform Resource Identifier (URI) pointing to the encrypted data.</param>
      <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to do on the encrypted data.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherReference.GetXml">
      <summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the &lt;CipherReference&gt; element in XML encryption.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.CipherReference" /> value is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.CipherReference.LoadXml(System.Xml.XmlElement)">
      <summary>Loads XML information into the &lt;CipherReference&gt; element in XML encryption.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object that represents an XML element to use as the reference.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.DataObject">
      <summary>Represents the object element of an XML signature that holds data to be signed.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataObject.#ctor(System.String,System.String,System.String,System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> class with the specified identification, MIME type, encoding, and data.</summary>
      <param name="id">The identification to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" /> with. </param>
      <param name="mimeType">The MIME type of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />. </param>
      <param name="encoding">The encoding of the data used to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" />. </param>
      <param name="data">The data to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.DataObject" /> with. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.DataObject.Data">
      <summary>Gets or sets the data value of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
      <returns>The data of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" />.</returns>
      <exception cref="T:System.ArgumentNullException">The value used to set the property is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.DataObject.Encoding">
      <summary>Gets or sets the encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
      <returns>The type of encoding of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataObject.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
      <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.DataObject.Id">
      <summary>Gets or sets the identification of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object.</summary>
      <returns>The name of the element that contains data to be used. </returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataObject.LoadXml(System.Xml.XmlElement)">
      <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DataObject" /> state from an XML element.</summary>
      <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DataObject" /> state from. </param>
      <exception cref="T:System.ArgumentNullException">The value from the XML element is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.DataObject.MimeType">
      <summary>Gets or sets the MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object. </summary>
      <returns>The MIME type of the current <see cref="T:System.Security.Cryptography.Xml.DataObject" /> object. The default is null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.DataReference">
      <summary>Represents the &lt;DataReference&gt; element used in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
      <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DataReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DataReference" /> class using the specified Uniform Resource Identifier (URI) and a <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object.</summary>
      <param name="uri">A Uniform Resource Identifier (URI) that points to the encrypted data.</param>
      <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to do on the encrypted data.</param>
    </member>
    <member name="T:System.Security.Cryptography.Xml.DSAKeyValue">
      <summary>Represents the <see cref="T:System.Security.Cryptography.DSA" /> private key of the &lt;KeyInfo&gt; element.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DSAKeyValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> class with a new, randomly-generated <see cref="T:System.Security.Cryptography.DSA" /> public key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DSAKeyValue.#ctor(System.Security.Cryptography.DSA)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> class with the specified <see cref="T:System.Security.Cryptography.DSA" /> public key.</summary>
      <param name="key">The instance of an implementation of the <see cref="T:System.Security.Cryptography.DSA" /> class that holds the public key. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DSAKeyValue.GetXml">
      <summary>Returns the XML representation of a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> element.</summary>
      <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> element.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.DSAKeyValue.Key">
      <summary>Gets or sets the key value represented by a <see cref="T:System.Security.Cryptography.DSA" /> object.</summary>
      <returns>The public key represented by a <see cref="T:System.Security.Cryptography.DSA" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.DSAKeyValue.LoadXml(System.Xml.XmlElement)">
      <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> state from an XML element.</summary>
      <param name="value">The XML element to load the <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> state from. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter is not a valid <see cref="T:System.Security.Cryptography.Xml.DSAKeyValue" /> XML element. </exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptedData">
      <summary>Represents the &lt;EncryptedData&gt; element in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedData.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the &lt;EncryptedData&gt; element in XML encryption.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> value is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedData.LoadXml(System.Xml.XmlElement)">
      <summary>Loads XML information into the &lt;EncryptedData&gt; element in XML encryption.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object representing an XML element to use for the &lt;EncryptedData&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a &lt;CypherData&gt; node.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptedKey">
      <summary>Represents the &lt;EncryptedKey&gt; element in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.DataReference)">
      <summary>Adds a &lt;DataReference&gt; element to the &lt;ReferenceList&gt; element.</summary>
      <param name="dataReference">A <see cref="T:System.Security.Cryptography.Xml.DataReference" /> object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> property.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedKey.AddReference(System.Security.Cryptography.Xml.KeyReference)">
      <summary>Adds a &lt;KeyReference&gt; element to the &lt;ReferenceList&gt; element.</summary>
      <param name="keyReference">A <see cref="T:System.Security.Cryptography.Xml.KeyReference" /> object to add to the <see cref="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList" /> property.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedKey.CarriedKeyName">
      <summary>Gets or sets the optional &lt;CarriedKeyName&gt; element in XML encryption.</summary>
      <returns>A string that represents a name for the key value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedKey.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the &lt;EncryptedKey&gt; element in XML encryption.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> value is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedKey.LoadXml(System.Xml.XmlElement)">
      <summary>Loads the specified XML information into the &lt;EncryptedKey&gt; element in XML encryption.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> representing an XML element to use for the &lt;EncryptedKey&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <paramref name="value" /> parameter does not contain a <see cref="T:System.Security.Cryptography.Xml.CipherData" />  element.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedKey.Recipient">
      <summary>Gets or sets the optional Recipient attribute in XML encryption.</summary>
      <returns>A string representing the value of the Recipient attribute.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedKey.ReferenceList">
      <summary>Gets or sets the &lt;ReferenceList&gt; element in XML encryption.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Xml.ReferenceList" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptedReference">
      <summary>Represents the abstract base class used in XML encryption from which the <see cref="T:System.Security.Cryptography.Xml.CipherReference" />, <see cref="T:System.Security.Cryptography.Xml.KeyReference" />, and <see cref="T:System.Security.Cryptography.Xml.DataReference" /> classes derive.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class using the specified Uniform Resource Identifier (URI).</summary>
      <param name="uri">The Uniform Resource Identifier (URI) that points to the data to encrypt.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.#ctor(System.String,System.Security.Cryptography.Xml.TransformChain)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> class using the specified Uniform Resource Identifier (URI) and transform chain.</summary>
      <param name="uri">The Uniform Resource Identifier (URI) that points to the data to encrypt.</param>
      <param name="transformChain">A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms to be done on the data to encrypt.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uri" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.AddTransform(System.Security.Cryptography.Xml.Transform)">
      <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to the current transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
      <param name="transform">A <see cref="T:System.Security.Cryptography.Xml.Transform" /> object to add to the transform chain.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedReference.CacheValid">
      <summary>Gets a value that indicates whether the cache is valid.</summary>
      <returns>true if the cache is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.GetXml">
      <summary>Returns the XML representation of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents the values of the &lt;EncryptedReference&gt; element in XML encryption.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType" /> property is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedReference.LoadXml(System.Xml.XmlElement)">
      <summary>Loads an XML element into an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object that represents an XML element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedReference.ReferenceType">
      <summary>Gets or sets a reference type.</summary>
      <returns>The reference type of the encrypted data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedReference.TransformChain">
      <summary>Gets or sets the transform chain of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Xml.TransformChain" /> object that describes transforms used on the encrypted data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedReference.Uri">
      <summary>Gets or sets the Uniform Resource Identifier (URI) of an <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</summary>
      <returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.EncryptedReference" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedReference.Uri" /> property was set to null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptedType">
      <summary>Represents the abstract base class from which the classes <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> and <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> derive.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedType.AddProperty(System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Adds an &lt;EncryptionProperty&gt; child element to the &lt;EncryptedProperties&gt; element in the current <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> object in XML encryption.</summary>
      <param name="ep">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.CipherData">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.CipherData" /> value for an instance of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> class.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Xml.CipherData" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptedType.CipherData" /> property was set to null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.Encoding">
      <summary>Gets or sets the Encoding attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
      <returns>A string that describes the encoding of the encrypted data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod">
      <summary>Gets or sets the &lt;EncryptionMethod&gt; element for XML encryption.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> object that represents the &lt;EncryptionMethod&gt; element.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionProperties">
      <summary>Gets or sets the &lt;EncryptionProperties&gt; element in XML encryption.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedType.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> object.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents the &lt;EncryptedType&gt; element in XML encryption.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.Id">
      <summary>Gets or sets the Id attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
      <returns>A string of the Id attribute of the &lt;EncryptedType&gt; element.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.KeyInfo">
      <summary>Gets of sets the &lt;KeyInfo&gt; element in XML encryption.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedType.LoadXml(System.Xml.XmlElement)">
      <summary>Loads XML information into the &lt;EncryptedType&gt; element in XML encryption.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object representing an XML element to use in the &lt;EncryptedType&gt; element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> provided is null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.MimeType">
      <summary>Gets or sets the MimeType attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
      <returns>A string that describes the media type of the encrypted data.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedType.Type">
      <summary>Gets or sets the Type attribute of an <see cref="T:System.Security.Cryptography.Xml.EncryptedType" /> instance in XML encryption.</summary>
      <returns>A string that describes the text form of the encrypted data.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptedXml">
      <summary>Represents the process model for implementing XML encryption.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class using the specified XML document.</summary>
      <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.#ctor(System.Xml.XmlDocument,System.Security.Policy.Evidence)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class using the specified XML document and evidence.</summary>
      <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object used to initialize the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object.</param>
      <param name="evidence">An <see cref="T:System.Security.Policy.Evidence" /> object associated with the <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.AddKeyNameMapping(System.String,System.Object)">
      <summary>Defines a mapping between a key name and a symmetric key or an asymmetric key.</summary>
      <param name="keyName">The name to map to <paramref name="keyObject" />.</param>
      <param name="keyObject">The symmetric key to map to <paramref name="keyName" />.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyName" /> parameter is null.-or-The value of the <paramref name="keyObject" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyObject" /> parameter is not an RSA algorithm or a symmetric key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.ClearKeyNameMappings">
      <summary>Resets all key name mapping.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptData(System.Security.Cryptography.Xml.EncryptedData,System.Security.Cryptography.SymmetricAlgorithm)">
      <summary>Decrypts an &lt;EncryptedData&gt; element using the specified symmetric algorithm.</summary>
      <returns>A byte array that contains the raw decrypted plain text.</returns>
      <param name="encryptedData">The data to decrypt.</param>
      <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="encryptedData" />.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is null.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument">
      <summary>Decrypts all &lt;EncryptedData&gt; elements of the XML document that were specified during initialization of the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> class.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic key used to decrypt the document was not found. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence, ControlPolicy" />
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeTopLevelWindows" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(System.Security.Cryptography.Xml.EncryptedKey)">
      <summary>Determines the key represented by the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> element.</summary>
      <returns>A byte array that contains the key.</returns>
      <param name="encryptedKey">The <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that contains the key to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedKey" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="encryptedKey" /> parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)">
      <summary>Decrypts an &lt;EncryptedKey&gt; element using an asymmetric algorithm.</summary>
      <returns>A byte array that contains the plain text key.</returns>
      <param name="keyData">An array of bytes that represents an encrypted &lt;EncryptedKey&gt; element.</param>
      <param name="rsa">The asymmetric key used to decrypt <paramref name="keyData" />.</param>
      <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is null.-or-The value of the <paramref name="rsa" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.DecryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
      <summary>Decrypts an &lt;EncryptedKey&gt; element using a symmetric algorithm.</summary>
      <returns>A byte array that contains the plain text key.</returns>
      <param name="keyData">An array of bytes that represents an encrypted &lt;EncryptedKey&gt; element.</param>
      <param name="symmetricAlgorithm">The symmetric key used to decrypt <paramref name="keyData" />.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is null.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" /> element is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.DocumentEvidence">
      <summary>Gets or sets the evidence of the <see cref="T:System.Xml.XmlDocument" /> object from which the <see cref="T:System.Security.Cryptography.Xml.EncryptedXml" /> object is constructed.</summary>
      <returns>An <see cref="T:System.Security.Policy.Evidence" /> object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.Encoding">
      <summary>Gets or sets the encoding used for XML encryption.</summary>
      <returns>An <see cref="T:System.Text.Encoding" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Encrypts the outer XML of an element using the specified X.509 certificate.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> element that represents the encrypted XML data.</returns>
      <param name="inputElement">The XML element to encrypt.</param>
      <param name="certificate">The X.509 certificate to use for encryption.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is null.-or-The value of the <paramref name="certificate" /> parameter is null.</exception>
      <exception cref="T:System.NotSupportedException">The value of the <paramref name="certificate" /> parameter does not represent an RSA key algorithm.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.Encrypt(System.Xml.XmlElement,System.String)">
      <summary>Encrypts the outer XML of an element using the specified key in the key mapping table.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that represents the encrypted XML data.</returns>
      <param name="inputElement">The XML element to encrypt.</param>
      <param name="keyName">A key name that can be found in the key mapping table.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is null.-or-The value of the <paramref name="keyName" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="keyName" /> parameter does not match a registered key name pair.-or-The cryptographic key described by the <paramref name="keyName" /> parameter is not supported. </exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeTopLevelWindows" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
      <summary>Encrypts data in the specified byte array using the specified symmetric algorithm.</summary>
      <returns>A byte array of encrypted data.</returns>
      <param name="plaintext">The data to encrypt.</param>
      <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="plaintext" /> parameter is null.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be encrypted using the specified parameters.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptData(System.Xml.XmlElement,System.Security.Cryptography.SymmetricAlgorithm,System.Boolean)">
      <summary>Encrypts the specified element or its contents using the specified symmetric algorithm.</summary>
      <returns>A byte array that contains the encrypted data.</returns>
      <param name="inputElement">The element or its contents to encrypt.</param>
      <param name="symmetricAlgorithm">The symmetric algorithm to use for encryption.</param>
      <param name="content">true to encrypt only the contents of the element; false to encrypt the entire element.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is null.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.RSA,System.Boolean)">
      <summary>Encrypts the key that a recipient uses to decrypt an &lt;EncryptedData&gt; element.</summary>
      <returns>A byte array that represents the encrypted value of the <paramref name="keyData" /> parameter.</returns>
      <param name="keyData">The key to encrypt.</param>
      <param name="rsa">The asymmetric key used to encrypt <paramref name="keyData" />.</param>
      <param name="useOAEP">A value that specifies whether to use Optimal Asymmetric Encryption Padding (OAEP).</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is null.-or-The value of the <paramref name="rsa" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.EncryptKey(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
      <summary>Encrypts a key using a symmetric algorithm that a recipient uses to decrypt an &lt;EncryptedData&gt; element.</summary>
      <returns>A byte array that represents the encrypted value of the <paramref name="keyData" /> parameter.</returns>
      <param name="keyData">The key to encrypt.</param>
      <param name="symmetricAlgorithm">The symmetric key used to encrypt <paramref name="keyData" />.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="keyData" /> parameter is null.-or-The value of the <paramref name="symmetricAlgorithm" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="symmetricAlgorithm" /> parameter is not the Triple DES Key Wrap algorithm or the Advanced Encryption Standard (AES) Key Wrap algorithm (also called Rijndael). </exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionIV(System.Security.Cryptography.Xml.EncryptedData,System.String)">
      <summary>Retrieves the decryption initialization vector (IV) from an <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
      <returns>A byte array that contains the decryption initialization vector (IV).</returns>
      <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that contains the initialization vector (IV) to retrieve.</param>
      <param name="symmetricAlgorithmUri">The Uniform Resource Identifier (URI) that describes the cryptographic algorithm associated with the <paramref name="encryptedData" /> value.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The value of the <paramref name="encryptedData" /> parameter has an <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" />  property that is null.-or-The value of the <paramref name="symmetricAlgorithmUrisymAlgUri" /> parameter is not a supported algorithm.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(System.Security.Cryptography.Xml.EncryptedData,System.String)">
      <summary>Retrieves the decryption key from the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
      <returns>A <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> object associated with the decryption key.</returns>
      <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object that contains the decryption key to retrieve.</param>
      <param name="symmetricAlgorithmUri">The size of the decryption key to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="encryptedData" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encryptedData parameter has an <see cref="P:System.Security.Cryptography.Xml.EncryptedType.EncryptionMethod" /> property that is null.-or-The encrypted key cannot be retrieved using the specified parameters.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.GetIdElement(System.Xml.XmlDocument,System.String)">
      <summary>Determines how to resolve internal Uniform Resource Identifier (URI) references.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that contains an ID indicating how internal Uniform Resource Identifiers (URIs) are to be resolved.</returns>
      <param name="document">An <see cref="T:System.Xml.XmlDocument" /> object that contains an element with an ID value.</param>
      <param name="idValue">A string that represents the ID value.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.Mode">
      <summary>Gets or sets the cipher mode used for XML encryption.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.CipherMode" /> values.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.Padding">
      <summary>Gets or sets the padding mode used for XML encryption.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.PaddingMode" /> values that specifies the type of padding used for encryption.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.Recipient">
      <summary>Gets or sets the recipient of the encrypted key information.</summary>
      <returns>The recipient of the encrypted key information.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceData(System.Xml.XmlElement,System.Byte[])">
      <summary>Replaces an &lt;EncryptedData&gt; element with a specified decrypted sequence of bytes.</summary>
      <param name="inputElement">The &lt;EncryptedData&gt; element to replace.</param>
      <param name="decryptedData">The decrypted data to replace <paramref name="inputElement" /> with.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is null.-or-The value of the <paramref name="decryptedData" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement(System.Xml.XmlElement,System.Security.Cryptography.Xml.EncryptedData,System.Boolean)">
      <summary>Replaces the specified element with the specified <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object.</summary>
      <param name="inputElement">The element to replace with an &lt;EncryptedData&gt; element.</param>
      <param name="encryptedData">The <see cref="T:System.Security.Cryptography.Xml.EncryptedData" /> object to replace the <paramref name="inputElement" /> parameter with.</param>
      <param name="content">true to replace only the contents of the element; false to replace the entire element.</param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="inputElement" /> parameter is null.-or-The value of the <paramref name="encryptedData" /> parameter is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptedXml.Resolver">
      <summary>Gets or sets the <see cref="T:System.Xml.XmlResolver" /> object used by the Document Object Model (DOM) to resolve external XML references.</summary>
      <returns>An <see cref="T:System.Xml.XmlResolver" /> object.</returns>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128KeyWrapUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant. </summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES128Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 128-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192KeyWrapUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES192Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 192-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256KeyWrapUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) Key Wrap algorithm (also known as the Rijndael Key Wrap algorithm). This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncAES256Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the 256-bit Advanced Encryption Standard (AES) algorithm (also known as the Rijndael algorithm). This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncDESUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the Digital Encryption Standard (DES) algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementContentUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption element content. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncElementUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for an XML encryption element. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncEncryptedKeyUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the XML encryption &lt;EncryptedKey&gt; element. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncNamespaceUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for XML encryption syntax and processing. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSA15Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Public Key Cryptography Standard (PKCS) Version 1.5 algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncRSAOAEPUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the RSA Optimal Asymmetric Encryption Padding (OAEP) encryption algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA256Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-256 algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncSHA512Url">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the SHA-512 algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESKeyWrapUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the TRIPLEDES key wrap algorithm. This field is constant.</summary>
    </member>
    <member name="F:System.Security.Cryptography.Xml.EncryptedXml.XmlEncTripleDESUrl">
      <summary>Represents the namespace Uniform Resource Identifier (URI) for the Triple DES algorithm. This field is constant.</summary>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptionMethod">
      <summary>Encapsulates the encryption algorithm used for XML encryption. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionMethod.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionMethod.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class specifying an algorithm Uniform Resource Identifier (URI). </summary>
      <param name="algorithm">The Uniform Resource Identifier (URI) that describes the algorithm represented by an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionMethod.GetXml">
      <summary>Returns an <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> class.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionMethod.KeyAlgorithm">
      <summary>Gets or sets a Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption. </summary>
      <returns>A Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionMethod.KeySize">
      <summary>Gets or sets the algorithm key size used for XML encryption. </summary>
      <returns>The algorithm key size, in bits, used for XML encryption.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionMethod.KeySize" /> property was set to a value that was less than 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionMethod.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the specified <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> object to match.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object to parse.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The key size expressed in the <paramref name="value" /> parameter was less than 0. </exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptionProperty">
      <summary>Represents the &lt;EncryptionProperty&gt; element used in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionProperty.#ctor(System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class using an <see cref="T:System.Xml.XmlElement" /> object. </summary>
      <param name="elementProperty">An <see cref="T:System.Xml.XmlElement" /> object to use for initialization.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="elementProperty" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the <paramref name="elementProperty" /> parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the <paramref name="elementProperty" /> parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionProperty.GetXml">
      <summary>Returns an <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that encapsulates an instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> class.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionProperty.Id">
      <summary>Gets the ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
      <returns>The ID of the current <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionProperty.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to match.</summary>
      <param name="value">An <see cref="T:System.Xml.XmlElement" /> object to parse.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the <paramref name="value" /> parameter is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the <paramref name="value" /> parameter is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement">
      <summary>Gets or sets an <see cref="T:System.Xml.XmlElement" /> object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object. </summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> object that represents an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property was set to null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Xml.XmlElement.LocalName" /> property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property is not "EncryptionProperty". -or-The <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property of the value set to the <see cref="P:System.Security.Cryptography.Xml.EncryptionProperty.PropertyElement" /> property is not "http://www.w3.org/2001/04/xmlenc#".</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionProperty.Target">
      <summary>Gets the target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
      <returns>The target of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection">
      <summary>Represents a collection of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> classes used in XML encryption. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Add(System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Adds an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <returns>The position at which the new element is inserted.</returns>
      <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to add to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Clear">
      <summary>Removes all items from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Contains(System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Determines whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object contains a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object.</summary>
      <returns>true if the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object is found in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object; otherwise, false. </returns>
      <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object to an array, starting at a particular array index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.CopyTo(System.Security.Cryptography.Xml.EncryptionProperty[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object to an array of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> objects, starting at a particular array index.</summary>
      <param name="array">The one-dimensional array of <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> objects that is the destination of the elements copied from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through an <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.IndexOf(System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <returns>The index of <paramref name="value" /> if found in the collection; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to locate in the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Insert(System.Int32,System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Inserts an <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object at the specified position.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted.</param>
      <param name="value">An <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to insert into the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is read-only.</summary>
      <returns>true if the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is read-only; otherwise, false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is synchronized (thread safe).</summary>
      <returns>true if access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Item(System.Int32)">
      <summary>Returns the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to return.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.ItemOf(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</returns>
      <param name="index">The index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to return.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.Remove(System.Security.Cryptography.Xml.EncryptionProperty)">
      <summary>Removes the first occurrence of a specific <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <param name="value">The <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to remove from the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object at the specified index.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Security.Cryptography.Xml.EncryptionProperty" /> object to remove.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Security.Cryptography.Xml.EncryptionPropertyCollection" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> uses an incorrect object type.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> uses an incorrect object type.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> uses an incorrect object type.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> uses an incorrect object type.</exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.EncryptionPropertyCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> uses an incorrect object type.</exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.IRelDecryptor">
      <summary>Defines methods that decrypt an XrML &lt;encryptedGrant&gt; element.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.IRelDecryptor.Decrypt(System.Security.Cryptography.Xml.EncryptionMethod,System.Security.Cryptography.Xml.KeyInfo,System.IO.Stream)">
      <summary>Decrypts an XrML &lt;encryptedGrant&gt; element that is contained within a <see cref="T:System.IO.Stream" /> object.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> object that contains a decrypted &lt;encryptedGrant&gt; element.</returns>
      <param name="encryptionMethod">An <see cref="T:System.Security.Cryptography.Xml.EncryptionMethod" /> object that encapsulates the algorithm used for XML encryption.</param>
      <param name="keyInfo">A <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object that contains an asymmetric key to use for decryption.</param>
      <param name="toDecrypt">A stream object that contains an &lt;encryptedGrant&gt; element to decrypt.</param>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfo">
      <summary>Represents an XML digital signature or XML encryption &lt;KeyInfo&gt; element.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.AddClause(System.Security.Cryptography.Xml.KeyInfoClause)">
      <summary>Adds a <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> that represents a particular type of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> information to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <param name="clause">The <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> to add to the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object. </param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfo.Count">
      <summary>Gets the number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <returns>The number of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects contained within the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.GetEnumerator">
      <summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.GetEnumerator(System.Type)">
      <summary>Returns an enumerator of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> objects of the specified type in the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <returns>An enumerator of the subelements of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> that can be used to iterate through the collection.</returns>
      <param name="requestedObjectType">The type of object to enumerate. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfo.Id">
      <summary>Gets or sets the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> ID.</summary>
      <returns>The <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> ID.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfo.LoadXml(System.Xml.XmlElement)">
      <summary>Loads a <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> state from an XML element.</summary>
      <param name="value">The XML element from which to load the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> state. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoClause">
      <summary>Represents the abstract base class from which all implementations of <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> subelements inherit.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoClause.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoClause.GetXml">
      <summary>When overridden in a derived class, returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />.</summary>
      <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoClause.LoadXml(System.Xml.XmlElement)">
      <summary>When overridden in a derived class, parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" /> to match.</summary>
      <param name="element">The <see cref="T:System.Xml.XmlElement" /> that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoClause" />. </param>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey">
      <summary>Wraps the <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> class, it to be placed as a subelement of the <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> class. </summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.#ctor(System.Security.Cryptography.Xml.EncryptedKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> class using an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object.</summary>
      <param name="encryptedKey">An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" />  object that encapsulates an encrypted key.</param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.EncryptedKey">
      <summary>Gets or sets an <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that encapsulates an encrypted key.</summary>
      <returns>An <see cref="T:System.Security.Cryptography.Xml.EncryptedKey" /> object that encapsulates an encrypted key.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The <see cref="P:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.EncryptedKey" /> property is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.GetXml">
      <summary>Returns an XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object.</summary>
      <returns>An XML representation of a <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object. </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encrypted key is null.</exception>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoEncryptedKey.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object to match.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoEncryptedKey" /> object.</param>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoName">
      <summary>Represents a &lt;KeyName&gt; subelement of an XMLDSIG or XML Encryption &lt;KeyInfo&gt; element.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoName.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> class by specifying the string identifier that is the value of the &lt;KeyName&gt; element.</summary>
      <param name="keyName">The string identifier that is the value of the &lt;KeyName&gt; element.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoName.GetXml">
      <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</summary>
      <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoName.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object to match.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlElement" /> object that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoName" /> object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfoName.Value">
      <summary>Gets or sets the string identifier contained within a &lt;KeyName&gt; element.</summary>
      <returns>The string identifier that is the value of the &lt;KeyName&gt; element.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoNode">
      <summary>Handles <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> subelements that do not have specific implementations or handlers registered on the machine.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoNode.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoNode.#ctor(System.Xml.XmlElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> class with content taken from the specified <see cref="T:System.Xml.XmlElement" />.</summary>
      <param name="node">An XML element from which to take the content used to create the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoNode.GetXml">
      <summary>Returns an XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</summary>
      <returns>An XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoNode.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" /> to match.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlElement" /> that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />. </param>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfoNode.Value">
      <summary>Gets or sets the XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</summary>
      <returns>The XML content of the current <see cref="T:System.Security.Cryptography.Xml.KeyInfoNode" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod">
      <summary>References <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> objects stored at a different location when using XMLDSIG or XML encryption.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object.</summary>
      <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />. </param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> class with the specified Uniform Resource Identifier (URI) pointing to the referenced <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> object and the URI that describes the type of data to retrieve.  </summary>
      <param name="strUri">The Uniform Resource Identifier (URI) of the information to be referenced by the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" />.</param>
      <param name="typeName">The URI that describes the type of data to retrieve.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.GetXml">
      <summary>Returns the XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</summary>
      <returns>The XML representation of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</returns>
      <PermissionSet>
        <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
        <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
        <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
      </PermissionSet>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.LoadXml(System.Xml.XmlElement)">
      <summary>Parses the input <see cref="T:System.Xml.XmlElement" /> object and configures the internal state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object to match.</summary>
      <param name="value">The XML element that specifies the state of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.Type">
      <summary>Gets or sets a Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</summary>
      <returns>A Uniform Resource Identifier (URI) that describes the type of data to be retrieved.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod.Uri">
      <summary>Gets or sets the Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</summary>
      <returns>The Uniform Resource Identifier (URI) of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoRetrievalMethod" /> object.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Xml.KeyInfoX509Data">
      <summary>Represents an &lt;X509Data&gt; subelement of an XMLDSIG or XML Encryption &lt;KeyInfo&gt; element.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified ASN.1 DER encoding of an X.509v3 certificate.</summary>
      <param name="rgbCert">The ASN.1 DER encoding of an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> from.</param>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified X.509v3 certificate.</summary>
      <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cert" /> parameter is null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Xml.KeyInfoX509Data.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509IncludeOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.Xml.KeyInfoX509Data" /> class from the specified X.509v3 certificate.</summary>
      <param name="cert">The <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> object to initialize the new instance of <see cref="T:System.Security.Cryptog